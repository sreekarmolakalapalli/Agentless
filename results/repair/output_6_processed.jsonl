{"model_name_or_path": "agentless", "instance_id": "django__django-11039", "model_patch": "diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\nindex e8d2c40..286a13b 100644\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -1,3 +1,4 @@\n+\n from django.apps import apps\n from django.core.management.base import BaseCommand, CommandError\n from django.db import DEFAULT_DB_ALIAS, connections\n@@ -55,8 +56,8 @@ class Command(BaseCommand):\n                 migration_name, app_label))\n         targets = [(app_label, migration.name)]\n \n-        # Show begin/end around output only for atomic migrations\n-        self.output_transaction = migration.atomic\n+        # Show begin/end around output only for atomic migrations and if the database supports transactional DDL\n+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl\n \n         # Make a plan that represents just the requested migrations and show SQL\n         # for it\n", "raw_model_patch": "diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\nindex e8d2c40..286a13b 100644\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -1,3 +1,4 @@\n+\n from django.apps import apps\n from django.core.management.base import BaseCommand, CommandError\n from django.db import DEFAULT_DB_ALIAS, connections\n@@ -55,8 +56,8 @@ class Command(BaseCommand):\n                 migration_name, app_label))\n         targets = [(app_label, migration.name)]\n \n-        # Show begin/end around output only for atomic migrations\n-        self.output_transaction = migration.atomic\n+        # Show begin/end around output only for atomic migrations and if the database supports transactional DDL\n+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl\n \n         # Make a plan that represents just the requested migrations and show SQL\n         # for it\n", "original_file_content": "from django.apps import apps\nfrom django.core.management.base import BaseCommand, CommandError\nfrom django.db import DEFAULT_DB_ALIAS, connections\nfrom django.db.migrations.executor import MigrationExecutor\nfrom django.db.migrations.loader import AmbiguityError\n\n\nclass Command(BaseCommand):\n    help = \"Prints the SQL statements for the named migration.\"\n\n    output_transaction = True\n\n    def add_arguments(self, parser):\n        parser.add_argument('app_label', help='App label of the application containing the migration.')\n        parser.add_argument('migration_name', help='Migration name to print the SQL for.')\n        parser.add_argument(\n            '--database', default=DEFAULT_DB_ALIAS,\n            help='Nominates a database to create SQL for. Defaults to the \"default\" database.',\n        )\n        parser.add_argument(\n            '--backwards', action='store_true',\n            help='Creates SQL to unapply the migration, rather than to apply it',\n        )\n\n    def execute(self, *args, **options):\n        # sqlmigrate doesn't support coloring its output but we need to force\n        # no_color=True so that the BEGIN/COMMIT statements added by\n        # output_transaction don't get colored either.\n        options['no_color'] = True\n        return super().execute(*args, **options)\n\n    def handle(self, *args, **options):\n        # Get the database we're operating from\n        connection = connections[options['database']]\n\n        # Load up an executor to get all the migration data\n        executor = MigrationExecutor(connection)\n\n        # Resolve command-line arguments into a migration\n        app_label, migration_name = options['app_label'], options['migration_name']\n        # Validate app_label\n        try:\n            apps.get_app_config(app_label)\n        except LookupError as err:\n            raise CommandError(str(err))\n        if app_label not in executor.loader.migrated_apps:\n            raise CommandError(\"App '%s' does not have migrations\" % app_label)\n        try:\n            migration = executor.loader.get_migration_by_prefix(app_label, migration_name)\n        except AmbiguityError:\n            raise CommandError(\"More than one migration matches '%s' in app '%s'. Please be more specific.\" % (\n                migration_name, app_label))\n        except KeyError:\n            raise CommandError(\"Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?\" % (\n                migration_name, app_label))\n        targets = [(app_label, migration.name)]\n\n        # Show begin/end around output only for atomic migrations\n        self.output_transaction = migration.atomic\n\n        # Make a plan that represents just the requested migrations and show SQL\n        # for it\n        plan = [(executor.loader.graph.nodes[targets[0]], options['backwards'])]\n        sql_statements = executor.collect_sql(plan)\n        return '\\n'.join(sql_statements)"}
