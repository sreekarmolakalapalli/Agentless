{"model_name_or_path": "agentless", "instance_id": "django__django-15400", "model_patch": "diff --git a/django/utils/functional.py b/django/utils/functional.py\nindex 8bdf0cb..8278803 100644\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -423,6 +423,11 @@ class SimpleLazyObject(LazyObject):\n             # If initialized, return a copy of the wrapped object.\n             return copy.copy(self._wrapped)\n \n+    def __radd__(self, other):\n+        if self._wrapped is empty:\n+            self._setup()\n+        return other + self._wrapped\n+\n     def __deepcopy__(self, memo):\n         if self._wrapped is empty:\n             # We have to use SimpleLazyObject, not self.__class__, because the\n"}
{"model_name_or_path": "agentless", "instance_id": "pallets__flask-4045", "model_patch": "diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py\nindex 4824589..f5310e3 100644\n--- a/src/flask/blueprints.py\n+++ b/src/flask/blueprints.py\n@@ -188,6 +188,8 @@ class Blueprint(Scaffold):\n             template_folder=template_folder,\n             root_path=root_path,\n         )\n+        if '.' in name:\n+            raise ValueError(\"Blueprint name should not contain dots\")\n         self.name = name\n         self.url_prefix = url_prefix\n         self.subdomain = subdomain\n@@ -539,4 +541,4 @@ class Blueprint(Scaffold):\n         self.record_once(\n             lambda s: s.app.url_default_functions.setdefault(None, []).append(f)\n         )\n-        return f\n+        return f\n"}
{"model_name_or_path": "agentless", "instance_id": "django__django-13710", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 3433471..ef2bfc6 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2040,7 +2040,10 @@ class InlineModelAdmin(BaseModelAdmin):\n         if self.verbose_name is None:\n             self.verbose_name = self.model._meta.verbose_name\n         if self.verbose_name_plural is None:\n-            self.verbose_name_plural = self.model._meta.verbose_name_plural\n+            if self.verbose_name is not None:\n+                self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n+            else:\n+                self.verbose_name_plural = self.model._meta.verbose_name_plural\n \n     @property\n     def media(self):\n@@ -2214,4 +2217,4 @@ class StackedInline(InlineModelAdmin):\n \n \n class TabularInline(InlineModelAdmin):\n-    template = 'admin/edit_inline/tabular.html'\n+    template = 'admin/edit_inline/tabular.html'\n"}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16503", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 13a0bc7..d4361e2 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -629,7 +629,7 @@ class PrettyPrinter(Printer):\n             # put the present prettyF to the right\n             prettyF = prettyForm(*prettySign.right(prettyF))\n \n-        prettyF.baseline = max_upper + sign_height//2\n+        prettyF.baseline = max_upper\n         prettyF.binding = prettyForm.MUL\n         return prettyF\n \n"}
{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5227", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 1ebe9d0..01f354c 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,7 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \n"}
{"model_name_or_path": "agentless", "instance_id": "django__django-11049", "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 935044e..e8898d5 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -468,10 +468,16 @@ class DateTimeField(BaseTemporalField):\n \n class DurationField(Field):\n     default_error_messages = {\n-        'invalid': _('Enter a valid duration.'),\n+        'invalid': _('Enter a valid duration in the format [DD] [[HH:]MM:]ss[.uuuuuu].'),\n         'overflow': _('The number of days must be between {min_days} and {max_days}.')\n     }\n \n+    default_help_text = _('Enter a duration in the format [DD] [[HH:]MM:]ss[.uuuuuu].')\n+\n+    def __init__(self, *args, **kwargs):\n+        kwargs.setdefault('help_text', self.default_help_text)\n+        super().__init__(*args, **kwargs)\n+\n     def prepare_value(self, value):\n         if isinstance(value, datetime.timedelta):\n             return duration_string(value)\n"}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex bd243c1..6a9bf3a 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -599,7 +599,7 @@ def exptrigsimp(expr):\n     # can we ever generate an I where there was none previously?\n     if not (newexpr.has(I) and not expr.has(I)):\n         expr = newexpr\n-    return expr\n+    return expr.rewrite(sin).rewrite(cos)\n \n #-------------------- the old trigsimp routines ---------------------\n \n"}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8435", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 77fd48c..9306f82 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1717,12 +1717,13 @@ class DataDocumenter(ModuleLevelDocumenter):\n \n             if self.objpath[-1] in annotations:\n                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))\n+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                 self.add_line('   :type: ' + objrepr, sourcename)\n             else:\n                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])\n                 if self.analyzer and key in self.analyzer.annotations:\n-                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n-                                  sourcename)\n+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n+                    self.add_line('   :type: ' + objrepr, sourcename)\n \n             try:\n                 if self.object is UNINITIALIZED_ATTR:\n@@ -2108,12 +2109,13 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n \n             if self.objpath[-1] in annotations:\n                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))\n+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                 self.add_line('   :type: ' + objrepr, sourcename)\n             else:\n                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])\n                 if self.analyzer and key in self.analyzer.annotations:\n-                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n-                                  sourcename)\n+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n+                    self.add_line('   :type: ' + objrepr, sourcename)\n \n             # data descriptors do not have useful values\n             if not self._datadescriptor:\n"}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12454", "model_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex f1dbb52..3811aee 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -1112,7 +1112,7 @@ class MatrixProperties(MatrixRequired):\n         \"\"\"\n         return all(self[i, j].is_zero\n                    for i in range(1, self.rows)\n-                   for j in range(i))\n+                   for j in range(min(i, self.cols)))\n \n     @property\n     def is_zero(self):\n"}
{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 0977e81..5e7b91b 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -920,6 +920,9 @@ class Basic(with_metaclass(ManagedProperties)):\n                 rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n                     break\n+            # Check if the substitution results in an undefined expression\n+            if rv.has(S.NaN):\n+                return S.NaN\n             return rv\n \n     @cacheit\n"}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11281", "model_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex 67ca063..8ff5f54 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -720,7 +720,23 @@ class GaussianMixture(BaseMixture):\n         mean_params = n_features * self.n_components\n         return int(cov_params + mean_params + self.n_components - 1)\n \n-    def bic(self, X):\n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit the model to X and return the labels for the data samples in X.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+            List of n_features-dimensional data points. Each row\n+            corresponds to a single data point.\n+\n+        Returns\n+        -------\n+        labels : array, shape (n_samples,)\n+            Component labels.\n+        \"\"\"\n+        self.fit(X)\n+        self.labels_ = self.predict(X)\n+        return self.labels_\n         \"\"\"Bayesian information criterion for the current model on the input X.\n \n         Parameters\n"}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25500", "model_patch": "diff --git a/sklearn/isotonic.py b/sklearn/isotonic.py\nindex 6365edf..1cc31d3 100644\n--- a/sklearn/isotonic.py\n+++ b/sklearn/isotonic.py\n@@ -410,7 +410,7 @@ class IsotonicRegression(RegressorMixin, TransformerMixin, BaseEstimator):\n         y_pred : ndarray of shape (n_samples,)\n             Transformed data.\n         \"\"\"\n-        return self.transform(T)\n+        return np.asarray(self.transform(T))\n \n     # We implement get_feature_names_out here instead of using\n     # `ClassNamePrefixFeaturesOutMixin`` because `input_features` are ignored.\n@@ -450,4 +450,4 @@ class IsotonicRegression(RegressorMixin, TransformerMixin, BaseEstimator):\n             self._build_f(self.X_thresholds_, self.y_thresholds_)\n \n     def _more_tags(self):\n-        return {\"X_types\": [\"1darray\"]}\n+        return {\"X_types\": [\"1darray\"]}\n"}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7738", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex b67c1c6..edb1971 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -318,7 +318,7 @@ class GoogleDocstring:\n             return [line[min_indent:] for line in lines]\n \n     def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n+        if name.endswith('_') and not name.isidentifier():\n             name = name[:-1] + r'\\_'\n \n         if name[:2] == '**':\n"}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13241", "model_patch": "diff --git a/sklearn/decomposition/kernel_pca.py b/sklearn/decomposition/kernel_pca.py\nindex 650c24f..527ec40 100644\n--- a/sklearn/decomposition/kernel_pca.py\n+++ b/sklearn/decomposition/kernel_pca.py\n@@ -215,6 +215,11 @@ class KernelPCA(BaseEstimator, TransformerMixin, _UnstableOn32BitMixin):\n         self.lambdas_ = self.lambdas_[indices]\n         self.alphas_ = self.alphas_[:, indices]\n \n+        # enforce consistent sign for eigenvectors\n+        for i in range(self.alphas_.shape[1]):\n+            if np.abs(self.alphas_[:, i]).max() == -self.alphas_[:, i].max():\n+                self.alphas_[:, i] = -self.alphas_[:, i]\n+\n         # remove eigenvectors with a zero eigenvalue\n         if self.remove_zero_eig or self.n_components is None:\n             self.alphas_ = self.alphas_[:, self.lambdas_ > 0]\n"}
{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..c50964a 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -239,6 +239,16 @@ class Field(RegisterLookupMixin):\n                 )\n             ]\n         else:\n+            if self.choices:\n+                max_choice_length = max(len(str(choice[0])) for choice in self.choices)\n+                if self.max_length < max_choice_length:\n+                    return [\n+                        checks.Error(\n+                            \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                            obj=self,\n+                            id='fields.E122',\n+                        )\n+                    ]\n             return []\n \n     def _check_choices(self):\n@@ -280,6 +290,16 @@ class Field(RegisterLookupMixin):\n             if isinstance(choices_group, str):\n                 break\n         else:\n+            if self.choices:\n+                max_choice_length = max(len(str(choice[0])) for choice in self.choices)\n+                if self.max_length < max_choice_length:\n+                    return [\n+                        checks.Error(\n+                            \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                            obj=self,\n+                            id='fields.E122',\n+                        )\n+                    ]\n             return []\n \n         return [\n@@ -976,6 +996,16 @@ class CharField(Field):\n                 )\n             ]\n         else:\n+            if self.choices:\n+                max_choice_length = max(len(str(choice[0])) for choice in self.choices)\n+                if self.max_length < max_choice_length:\n+                    return [\n+                        checks.Error(\n+                            \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                            obj=self,\n+                            id='fields.E122',\n+                        )\n+                    ]\n             return []\n \n     def cast_db_type(self, connection):\n"}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8282", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex a7def03..67d64ac 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -28,12 +28,21 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n-            sig = inspect.signature(obj)\n-            for param in sig.parameters.values():\n-                if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n-            if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+            if hasattr(obj, '__overloads__'):\n+                for overload_func in obj.__overloads__:\n+                    sig = inspect.signature(overload_func)\n+                    for param in sig.parameters.values():\n+                        if param.annotation is not param.empty:\n+                            annotation[param.name] = typing.stringify(param.annotation)\n+                    if sig.return_annotation is not sig.empty:\n+                        annotation['return'] = typing.stringify(sig.return_annotation)\n+            else:\n+                sig = inspect.signature(obj)\n+                for param in sig.parameters.values():\n+                    if param.annotation is not param.empty:\n+                        annotation[param.name] = typing.stringify(param.annotation)\n+                if sig.return_annotation is not sig.empty:\n+                    annotation['return'] = typing.stringify(sig.return_annotation)\n     except (TypeError, ValueError):\n         pass\n \n"}
{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7686", "model_patch": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex 9925546..b76e249 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -246,7 +246,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns.update(context)\n \n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        ns['members'] = [name for name in dir(obj) if imported_members or getattr(obj, name).__module__ == obj.__name__]\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -259,7 +259,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        ns['members'] = [name for name in dir(obj) if imported_members or getattr(obj, name).__module__ == obj.__name__]\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n"}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-6938", "model_patch": "diff --git a/astropy/io/fits/fitsrec.py b/astropy/io/fits/fitsrec.py\nindex 88d596b..aa0f23c 100644\n--- a/astropy/io/fits/fitsrec.py\n+++ b/astropy/io/fits/fitsrec.py\n@@ -1261,7 +1261,7 @@ class FITS_rec(np.recarray):\n \n         # Replace exponent separator in floating point numbers\n         if 'D' in format:\n-            output_field.replace(encode_ascii('E'), encode_ascii('D'))\n+            output_field = output_field.replace(encode_ascii('E'), encode_ascii('D'))\n \n \n def _get_recarray_field(array, key):\n"}
