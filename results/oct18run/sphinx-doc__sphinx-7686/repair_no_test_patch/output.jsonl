{"instance_id": "sphinx-doc__sphinx-7686", "raw_output": ["To address the issue where the `members` variable for the module template contains imported members even if `autosummary_imported_members` is set to `False`, we need to modify the `generate_autosummary_content` function in `sphinx/ext/autosummary/generate.py`. Specifically, we need to ensure that the `members` list respects the `imported_members` flag.\n\nHere are the necessary *SEARCH/REPLACE* edits:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        ns['members'] = [name for name in dir(obj) if imported_members or getattr(obj, name).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThis change ensures that the `members` list only includes imported members if `imported_members` is `True`. If `imported_members` is `False`, it filters out the imported members by checking if the member's `__module__` attribute matches the module's name.", "Based on the provided issue statement and the code, it seems the problem lies in the `generate_autosummary_content` function within the file `sphinx/ext/autosummary/generate.py`. Specifically, the `get_members` function uses the `imported` parameter to determine whether to include imported members, but this does not apply when setting `ns['members']`.\n\nTo ensure that imported members are excluded when `autosummary_imported_members` is `False`, we need to filter out imported members when setting `ns['members']`.\n\nHere are the necessary *SEARCH/REPLACE* edits to fix the issue:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        ns['members'] = [name for name in dir(obj)\n                         if imported_members or getattr(obj, name).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThis change filters the `members` to exclude those which are not originally from the module when `imported_members` is `False`. This should address the issue described in the bug report.", "Based on the issue statement, the primary problem is that the `members` variable for the module template includes imported members even when `autosummary_imported_members` is set to `False`. This is despite the configuration indicating that imported members should be excluded.\n\nThe problem likely lies in the way the `members` list is populated in the `generate_autosummary_content` function. Specifically, the line that sets `ns['members']` to `dir(obj)` does not take into account the `imported_members` flag.\n\nTo fix this, we can adjust the logic to filter out imported members if `imported_members` is set to `False`.\n\nHere's the *SEARCH/REPLACE* edit to fix the issue:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        ns['members'] = [name for name in dir(obj) if imported_members or getattr(obj, name).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThis change ensures that the `members` list only includes members that are not imported if `imported_members` is set to `False`.", "Upon analysis of the given files and the issue description, it appears that the bug is in the part of the code where members of the module are being collected. Specifically, in the function `generate_autosummary_content` within the file `generate.py`, the `members` variable is populated by listing all elements provided by `dir(obj)`.\n\nTo fix this issue, we need to filter out the imported members when the `autosummary_imported_members` configuration is set to `False`. This requires modifying the block where `members` is assigned.\n\nHere are the necessary *SEARCH/REPLACE* edits:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        if imported_members:\n            ns['members'] = dir(obj)\n        else:\n            ns['members'] = [name for name in dir(obj) if getattr(obj, name).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThe above change ensures that when `imported_members` is `False`, only members belonging to the module itself (and not imported members) are included in the `members` list.", "Sure, based on the issue description, it seems the problem is related to the function `generate_autosummary_content` in `sphinx/ext/autosummary/generate.py`. Specifically, the `members` variable for a module should not include imported members when `autosummary_imported_members` is set to `False`.\n\nHere is the *SEARCH/REPLACE* edit to address the issue:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        ns['members'] = [m for m in dir(obj) if imported_members or getattr(obj, m, None).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThis edit ensures that the `members` variable only includes members that belong to the module itself when `imported_members` is `False`.", "To address the issue where `autosummary` includes imported members even if `autosummary_imported_members` is set to `False`, we need to modify the function `generate_autosummary_content` in the `generate.py` file. Specifically, the problem lies in the assignment to `ns['members']` which should respect the `imported_members` flag.\n\nHere are the *SEARCH/REPLACE* edits to fix this issue:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        ns['members'] = [name for name in dir(obj)\n                         if imported_members or getattr(obj, name).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\nThis change ensures that only members belonging to the module itself are included when `imported_members` is `False`.", "The problem as described in the issue is that the `members` variable in the template contains imported members even when `autosummary_imported_members` is set to `False`. This suggests that the `generate_autosummary_content` function in `generate.py` is not respecting the `imported_members` flag correctly when setting the `members` variable.\n\nI'll provide the *SEARCH/REPLACE* edit to fix this issue.\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        if imported_members:\n            ns['members'] = dir(obj)\n        else:\n            ns['members'] = [name for name in dir(obj) if getattr(obj, name).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThis change ensures that if `imported_members` is `False`, only members that are defined in the module itself (not imported ones) are included in the `members` variable.\n\nThe rest of the code looks fine and does not need any changes based on the provided issue statement.", "To address the issue where `autosummary` includes imported members even if `autosummary_imported_members` is set to `False`, we need to ensure that the `members` variable honors this configuration. The most likely area to address this is in the `generate_autosummary_content` function where `members` are populated for a module.\n\nHere's the modification:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        ns['members'] = [m for m in dir(obj) if imported_members or getattr(safe_getattr(obj, m), '__module__', None) == obj.__name__]\n>>>>>>> REPLACE\n```", "Based on the issue statement, the problem lies within how the `members` variable is populated in the `generate_autosummary_content` function, specifically for modules. The `dir(obj)` function is used to get the `members`, but it doesn't account for the `autosummary_imported_members` setting.\n\nWe'll need to adjust the code to filter out imported members from the `members` list when `autosummary_imported_members` is set to `False`.\n\nHere's the necessary *SEARCH/REPLACE* edit to fix the issue:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        if imported_members:\n            ns['members'] = dir(obj)\n        else:\n            ns['members'] = [name for name in dir(obj) if getattr(obj, name, None).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThis change ensures that the `members` list only includes members of the module itself, excluding any imported members when `imported_members` is set to `False`.", "Based on the issue statement, the problem lies in the handling of the `members` variable when generating autosummary content for a module. Specifically, the `members` variable contains imported members even if the `autosummary_imported_members` option is set to `False`.\n\nTo fix this issue, we need to modify the function `generate_autosummary_content` in `sphinx/ext/autosummary/generate.py` to filter out imported members from the `members` variable if `autosummary_imported_members` is `False`.\n\nHere are the necessary changes:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        if imported_members:\n            ns['members'] = dir(obj)\n        else:\n            ns['members'] = [m for m in dir(obj) if not (hasattr(obj, m) and hasattr(getattr(obj, m), '__module__') and getattr(obj, m).__module__ != obj.__name__)]\n>>>>>>> REPLACE\n```\n\nThis code change checks whether `imported_members` is `True` or `False`. If `True`, it includes all members using `dir(obj)`. If `False`, it filters out members that are imported from other modules."], "all_generations": [["To address the issue where the `members` variable for the module template contains imported members even if `autosummary_imported_members` is set to `False`, we need to modify the `generate_autosummary_content` function in `sphinx/ext/autosummary/generate.py`. Specifically, we need to ensure that the `members` list respects the `imported_members` flag.\n\nHere are the necessary *SEARCH/REPLACE* edits:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        ns['members'] = [name for name in dir(obj) if imported_members or getattr(obj, name).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThis change ensures that the `members` list only includes imported members if `imported_members` is `True`. If `imported_members` is `False`, it filters out the imported members by checking if the member's `__module__` attribute matches the module's name.", "Based on the provided issue statement and the code, it seems the problem lies in the `generate_autosummary_content` function within the file `sphinx/ext/autosummary/generate.py`. Specifically, the `get_members` function uses the `imported` parameter to determine whether to include imported members, but this does not apply when setting `ns['members']`.\n\nTo ensure that imported members are excluded when `autosummary_imported_members` is `False`, we need to filter out imported members when setting `ns['members']`.\n\nHere are the necessary *SEARCH/REPLACE* edits to fix the issue:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        ns['members'] = [name for name in dir(obj)\n                         if imported_members or getattr(obj, name).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThis change filters the `members` to exclude those which are not originally from the module when `imported_members` is `False`. This should address the issue described in the bug report.", "Based on the issue statement, the primary problem is that the `members` variable for the module template includes imported members even when `autosummary_imported_members` is set to `False`. This is despite the configuration indicating that imported members should be excluded.\n\nThe problem likely lies in the way the `members` list is populated in the `generate_autosummary_content` function. Specifically, the line that sets `ns['members']` to `dir(obj)` does not take into account the `imported_members` flag.\n\nTo fix this, we can adjust the logic to filter out imported members if `imported_members` is set to `False`.\n\nHere's the *SEARCH/REPLACE* edit to fix the issue:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        ns['members'] = [name for name in dir(obj) if imported_members or getattr(obj, name).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThis change ensures that the `members` list only includes members that are not imported if `imported_members` is set to `False`.", "Upon analysis of the given files and the issue description, it appears that the bug is in the part of the code where members of the module are being collected. Specifically, in the function `generate_autosummary_content` within the file `generate.py`, the `members` variable is populated by listing all elements provided by `dir(obj)`.\n\nTo fix this issue, we need to filter out the imported members when the `autosummary_imported_members` configuration is set to `False`. This requires modifying the block where `members` is assigned.\n\nHere are the necessary *SEARCH/REPLACE* edits:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        if imported_members:\n            ns['members'] = dir(obj)\n        else:\n            ns['members'] = [name for name in dir(obj) if getattr(obj, name).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThe above change ensures that when `imported_members` is `False`, only members belonging to the module itself (and not imported members) are included in the `members` list.", "Sure, based on the issue description, it seems the problem is related to the function `generate_autosummary_content` in `sphinx/ext/autosummary/generate.py`. Specifically, the `members` variable for a module should not include imported members when `autosummary_imported_members` is set to `False`.\n\nHere is the *SEARCH/REPLACE* edit to address the issue:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        ns['members'] = [m for m in dir(obj) if imported_members or getattr(obj, m, None).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThis edit ensures that the `members` variable only includes members that belong to the module itself when `imported_members` is `False`.", "To address the issue where `autosummary` includes imported members even if `autosummary_imported_members` is set to `False`, we need to modify the function `generate_autosummary_content` in the `generate.py` file. Specifically, the problem lies in the assignment to `ns['members']` which should respect the `imported_members` flag.\n\nHere are the *SEARCH/REPLACE* edits to fix this issue:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        ns['members'] = [name for name in dir(obj)\n                         if imported_members or getattr(obj, name).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\nThis change ensures that only members belonging to the module itself are included when `imported_members` is `False`.", "The problem as described in the issue is that the `members` variable in the template contains imported members even when `autosummary_imported_members` is set to `False`. This suggests that the `generate_autosummary_content` function in `generate.py` is not respecting the `imported_members` flag correctly when setting the `members` variable.\n\nI'll provide the *SEARCH/REPLACE* edit to fix this issue.\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        if imported_members:\n            ns['members'] = dir(obj)\n        else:\n            ns['members'] = [name for name in dir(obj) if getattr(obj, name).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThis change ensures that if `imported_members` is `False`, only members that are defined in the module itself (not imported ones) are included in the `members` variable.\n\nThe rest of the code looks fine and does not need any changes based on the provided issue statement.", "To address the issue where `autosummary` includes imported members even if `autosummary_imported_members` is set to `False`, we need to ensure that the `members` variable honors this configuration. The most likely area to address this is in the `generate_autosummary_content` function where `members` are populated for a module.\n\nHere's the modification:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        ns['members'] = [m for m in dir(obj) if imported_members or getattr(safe_getattr(obj, m), '__module__', None) == obj.__name__]\n>>>>>>> REPLACE\n```", "Based on the issue statement, the problem lies within how the `members` variable is populated in the `generate_autosummary_content` function, specifically for modules. The `dir(obj)` function is used to get the `members`, but it doesn't account for the `autosummary_imported_members` setting.\n\nWe'll need to adjust the code to filter out imported members from the `members` list when `autosummary_imported_members` is set to `False`.\n\nHere's the necessary *SEARCH/REPLACE* edit to fix the issue:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        if imported_members:\n            ns['members'] = dir(obj)\n        else:\n            ns['members'] = [name for name in dir(obj) if getattr(obj, name, None).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThis change ensures that the `members` list only includes members of the module itself, excluding any imported members when `imported_members` is set to `False`.", "Based on the issue statement, the problem lies in the handling of the `members` variable when generating autosummary content for a module. Specifically, the `members` variable contains imported members even if the `autosummary_imported_members` option is set to `False`.\n\nTo fix this issue, we need to modify the function `generate_autosummary_content` in `sphinx/ext/autosummary/generate.py` to filter out imported members from the `members` variable if `autosummary_imported_members` is `False`.\n\nHere are the necessary changes:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        if imported_members:\n            ns['members'] = dir(obj)\n        else:\n            ns['members'] = [m for m in dir(obj) if not (hasattr(obj, m) and hasattr(getattr(obj, m), '__module__') and getattr(obj, m).__module__ != obj.__name__)]\n>>>>>>> REPLACE\n```\n\nThis code change checks whether `imported_members` is `True` or `False`. If `True`, it includes all members using `dir(obj)`. If `False`, it filters out members that are imported from other modules."]], "try_count": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "traj": [{"response": "To address the issue where the `members` variable for the module template contains imported members even if `autosummary_imported_members` is set to `False`, we need to modify the `generate_autosummary_content` function in `sphinx/ext/autosummary/generate.py`. Specifically, we need to ensure that the `members` list respects the `imported_members` flag.\n\nHere are the necessary *SEARCH/REPLACE* edits:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        ns['members'] = [name for name in dir(obj) if imported_members or getattr(obj, name).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThis change ensures that the `members` list only includes imported members if `imported_members` is `True`. If `imported_members` is `False`, it filters out the imported members by checking if the member's `__module__` attribute matches the module's name.", "usage": {"completion_tokens": 211, "prompt_tokens": 3722}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nautosummary: The members variable for module template contains imported members\n**Describe the bug**\r\nautosummary: The members variable for module template contains imported members even if autosummary_imported_members is False.\r\n\r\n**To Reproduce**\r\n\r\n```\r\n# _templates/autosummary/module.rst\r\n{{ fullname | escape | underline }}\r\n\r\n.. automodule:: {{ fullname }}\r\n\r\n   .. autosummary::\r\n   {% for item in members %}\r\n      {{ item }}\r\n   {%- endfor %}\r\n\r\n```\r\n```\r\n# example.py\r\nimport os\r\n```\r\n```\r\n# index.rst\r\n.. autosummary::\r\n   :toctree: generated\r\n\r\n   example\r\n```\r\n```\r\n# conf.py\r\nautosummary_generate = True\r\nautosummary_imported_members = False\r\n```\r\n\r\nAs a result, I got following output:\r\n```\r\n# generated/example.rst\r\nexample\r\n=======\r\n\r\n.. automodule:: example\r\n\r\n   .. autosummary::\r\n\r\n      __builtins__\r\n      __cached__\r\n      __doc__\r\n      __file__\r\n      __loader__\r\n      __name__\r\n      __package__\r\n      __spec__\r\n      os\r\n```\r\n\r\n**Expected behavior**\r\nThe template variable `members` should not contain imported members when `autosummary_imported_members` is False.\r\n\r\n**Your project**\r\nNo\r\n\r\n**Screenshots**\r\nNo\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.8.2\r\n- Sphinx version: 3.1.0dev\r\n- Sphinx extensions:  sphinx.ext.autosummary\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\r\n\n\n--- END ISSUE ---\n\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### sphinx/ext/autosummary/generate.py\n...\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n...\n\n\n### sphinx/ext/autosummary/__init__.py\n...\n               if cls.can_document_member(obj, '', False, parent_doc)]\n    if classes:\n        classes.sort(key=lambda cls: cls.priority)\n        return classes[-1]\n    else:\n        return DataDocumenter\n\n\n# -- .. autosummary:: ----------------------------------------------------------\n\nclass Autosummary(SphinxDirective):\n    \"\"\"\n    Pretty table containing short signatures and summaries of functions etc.\n\n    autosummary can also optionally generate a hidden toctree:: node.\n    \"\"\"\n\n    required_arguments = 0\n    optional_arguments = 0\n    final_argument_whitespace = False\n    has_content = True\n    option_spec = {\n        'caption': directives.unchanged_required,\n        'toctree': directives.unchanged,\n        'nosignatures': directives.flag,\n        'recursive': directives.flag,\n        'template': directives.unchanged,\n    }\n\n    def run(self) -> List[Node]:\n        self.bridge = DocumenterBridge(self.env, self.state.document.reporter,\n                                       Options(), self.lineno, self.state)\n\n        names = [x.strip().split()[0] for x in self.content\n                 if x.strip() and re.search(r'^[~a-zA-Z_]', x.strip()[0])]\n        items = self.get_items(names)\n        nodes = self.get_table(items)\n\n        if 'toctree' in self.options:\n            dirname = posixpath.dirname(self.env.docname)\n\n            tree_prefix = self.options['toctree'].strip()\n            docnames = []\n            excluded = Matcher(self.config.exclude_patterns)\n            for name, sig, summary, real_name in items:\n                docname = posixpath.join(tree_prefix, real_name)\n                docname = posixpath.normpath(posixpath.join(dirname, docname))\n                if docname not in self.env.found_docs:\n                    location = self.state_machine.get_source_and_line(self.lineno)\n                    if excluded(self.env.doc2path(docname, None)):\n                        msg = __('autosummary references excluded document %r. Ignored.')\n                    else:\n                        msg = __('autosummary: stub file not found %r. '\n                                 'Check your autosummary_generate setting.')\n\n                    logger.warning(msg, real_name, location=location)\n                    continue\n\n                docnames.append(docname)\n\n            if docnames:\n                tocnode = addnodes.toctree()\n                tocnode['includefiles'] = docnames\n                tocnode['entries'] = [(None, docn) for docn in docnames]\n                tocnode['maxdepth'] = -1\n                tocnode['glob'] = None\n                tocnode['caption'] = self.options.get('caption')\n\n                nodes.append(autosummary_toc('', '', tocnode))\n\n        if 'toctree' not in self.options and 'caption' in self.options:\n            logger.warning(__('A captioned autosummary requires :toctree: option. ignored.'),\n                           location=nodes[-1])\n\n        return nodes\n\n    def get_items(self, names: List[str]) -> List[Tuple[str, str, str, str]]:\n        \"\"\"Try to import the given names, and return a list of\n        ``[(name, signature, summary_string, real_name), ...]``.\n        \"\"\"\n        prefixes = get_import_prefixes_from_env(self.env)\n\n        items = []  # type: List[Tuple[str, str, str, str]]\n\n        max_item_chars = 50\n\n        for name in names:\n            display_name = name\n            if name.startswith('~'):\n                name = name[1:]\n                display_name = name.split('.')[-1]\n\n            try:\n                with mock(self.config.autosummary_mock_imports):\n                    real_name, obj, parent, modname = import_by_name(name, prefixes=prefixes)\n            except ImportError:\n                logger.warning(__('autosummary: failed to import %s'), name)\n                continue\n\n            self.bridge.result = StringList()  # initialize for each documenter\n            full_name = real_name\n            if not isinstance(obj, ModuleType):\n                # give explicitly separated module name, so that members\n                # of inner classes can be documented\n                full_name = modname + '::' + full_name[len(modname) + 1:]\n            # NB. using full_name here is important, since Documenters\n            #     handle module prefixes slightly differently\n            doccls = get_documenter(self.env.app, obj, parent)\n            documenter = doccls(self.bridge, full_name)\n            if not documenter.parse_name():\n                logger.warning(__('failed to parse name %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if not documenter.import_object():\n                logger.warning(__('failed to import object %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if documenter.options.members and not documenter.check_module():\n                continue\n\n            # try to also get a source code analyzer for attribute docs\n            try:\n                documenter.analyzer = ModuleAnalyzer.for_module(\n                    documenter.get_real_modname())\n                # parse right now, to get PycodeErrors on parsing (results will\n                # be cached anyway)\n                documenter.analyzer.find_attr_docs()\n            except PycodeError as err:\n                logger.debug('[autodoc] module analyzer failed: %s', err)\n                # no source file -- e.g. for builtin and C modules\n                documenter.analyzer = None\n\n            # -- Grab the signature\n\n            try:\n                sig = documenter.format_signature(show_annotation=False)\n            except TypeError:\n                # the documenter does not support ``show_annotation`` option\n                sig = documenter.format_signature()\n\n            if not sig:\n                sig = ''\n            else:\n                max_chars = max(10, max_item_chars - len(display_name))\n                sig = mangle_signature(sig, max_chars=max_chars)\n\n            # -- Grab the summary\n\n            documenter.add_content(None)\n            summary = extract_summary(self.bridge.result.data[:], self.state.document)\n\n            items.append((display_name, sig, summary, real_name))\n\n        return items\n\n    def get_table(self, items: List[Tuple[str, str, str, str]]) -> List[Node]:\n        \"\"\"Generate a proper list of table nodes for autosummary:: directive.\n\n        *items* is a list produced by :meth:`get_items`.\n        \"\"\"\n        table_spec = addnodes.tabular_col_spec()\n        table_spec['spec'] = r'\\X{1}{2}\\X{1}{2}'\n\n        table = autosummary_table('')\n        real_table = nodes.table('', classes=['longtable'])\n        table.append(real_table)\n        group = nodes.tgroup('', cols=2)\n        real_table.append(group)\n        group.append(nodes.colspec('', colwidth=10))\n        group.append(nodes.colspec('', colwidth=90))\n        body = nodes.tbody('')\n        group.append(body)\n\n        def append_row(*column_texts: str) -> None:\n            row = nodes.row('')\n            source, line = self.state_machine.get_source_and_line()\n            for text in column_texts:\n                node = nodes.paragraph('')\n                vl = StringList()\n                vl.append(text, '%s:%d:<autosummary>' % (source, line))\n                with switch_source_input(self.state, vl):\n                    self.state.nested_parse(vl, 0, node)\n                    try:\n                        if isinstance(node[0], nodes.paragraph):\n                            node = node[0]\n                    except IndexError:\n                        pass\n                    row.append(nodes.entry('', node))\n            body.append(row)\n\n        for name, sig, summary, real_name in items:\n            qualifier = 'obj'\n            if 'nosignatures' not in self.options:\n                col1 = ':%s:`%s <%s>`\\\\ %s' % (qualifier, name, real_name, rst.escape(sig))\n            else:\n                col1 = ':%s:`%s <%s>`' % (qualifier, name, real_name)\n            col2 = summary\n            append_row(col1, col2)\n\n        return [table_spec, table]\n\n    def warn(self, msg: str) -> None:\n        warnings.warn('Autosummary.warn() is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        logger.warning(msg)\n\n    @property\n    def genopt(self) -> Options:\n        warnings.warn('Autosummary.genopt is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.genopt\n\n    @property\n    def warnings(self) -> List[Node]:\n        warnings.warn('Autosummary.warnings is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return []\n\n    @property\n    def result(self) -> StringList:\n        warnings.warn('Autosummary.result is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.result\n\n\ndef strip_arg_typehint(s: str) -> str:\n    \"\"\"Strip a type hint from argument definition.\"\"\"\n    return s.split(':')[0].strip()\n\n\ndef mangle_signature(sig: str, max_chars: int = 30) -> str:\n    \"\"\"Reformat a function signature to a more compact form.\"\"\"\n    # Strip return type annotation\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}, {"response": "Based on the provided issue statement and the code, it seems the problem lies in the `generate_autosummary_content` function within the file `sphinx/ext/autosummary/generate.py`. Specifically, the `get_members` function uses the `imported` parameter to determine whether to include imported members, but this does not apply when setting `ns['members']`.\n\nTo ensure that imported members are excluded when `autosummary_imported_members` is `False`, we need to filter out imported members when setting `ns['members']`.\n\nHere are the necessary *SEARCH/REPLACE* edits to fix the issue:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        ns['members'] = [name for name in dir(obj)\n                         if imported_members or getattr(obj, name).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThis change filters the `members` to exclude those which are not originally from the module when `imported_members` is `False`. This should address the issue described in the bug report.", "usage": {"completion_tokens": 1899, "prompt_tokens": 3722}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nautosummary: The members variable for module template contains imported members\n**Describe the bug**\r\nautosummary: The members variable for module template contains imported members even if autosummary_imported_members is False.\r\n\r\n**To Reproduce**\r\n\r\n```\r\n# _templates/autosummary/module.rst\r\n{{ fullname | escape | underline }}\r\n\r\n.. automodule:: {{ fullname }}\r\n\r\n   .. autosummary::\r\n   {% for item in members %}\r\n      {{ item }}\r\n   {%- endfor %}\r\n\r\n```\r\n```\r\n# example.py\r\nimport os\r\n```\r\n```\r\n# index.rst\r\n.. autosummary::\r\n   :toctree: generated\r\n\r\n   example\r\n```\r\n```\r\n# conf.py\r\nautosummary_generate = True\r\nautosummary_imported_members = False\r\n```\r\n\r\nAs a result, I got following output:\r\n```\r\n# generated/example.rst\r\nexample\r\n=======\r\n\r\n.. automodule:: example\r\n\r\n   .. autosummary::\r\n\r\n      __builtins__\r\n      __cached__\r\n      __doc__\r\n      __file__\r\n      __loader__\r\n      __name__\r\n      __package__\r\n      __spec__\r\n      os\r\n```\r\n\r\n**Expected behavior**\r\nThe template variable `members` should not contain imported members when `autosummary_imported_members` is False.\r\n\r\n**Your project**\r\nNo\r\n\r\n**Screenshots**\r\nNo\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.8.2\r\n- Sphinx version: 3.1.0dev\r\n- Sphinx extensions:  sphinx.ext.autosummary\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\r\n\n\n--- END ISSUE ---\n\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### sphinx/ext/autosummary/generate.py\n...\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n...\n\n\n### sphinx/ext/autosummary/__init__.py\n...\n               if cls.can_document_member(obj, '', False, parent_doc)]\n    if classes:\n        classes.sort(key=lambda cls: cls.priority)\n        return classes[-1]\n    else:\n        return DataDocumenter\n\n\n# -- .. autosummary:: ----------------------------------------------------------\n\nclass Autosummary(SphinxDirective):\n    \"\"\"\n    Pretty table containing short signatures and summaries of functions etc.\n\n    autosummary can also optionally generate a hidden toctree:: node.\n    \"\"\"\n\n    required_arguments = 0\n    optional_arguments = 0\n    final_argument_whitespace = False\n    has_content = True\n    option_spec = {\n        'caption': directives.unchanged_required,\n        'toctree': directives.unchanged,\n        'nosignatures': directives.flag,\n        'recursive': directives.flag,\n        'template': directives.unchanged,\n    }\n\n    def run(self) -> List[Node]:\n        self.bridge = DocumenterBridge(self.env, self.state.document.reporter,\n                                       Options(), self.lineno, self.state)\n\n        names = [x.strip().split()[0] for x in self.content\n                 if x.strip() and re.search(r'^[~a-zA-Z_]', x.strip()[0])]\n        items = self.get_items(names)\n        nodes = self.get_table(items)\n\n        if 'toctree' in self.options:\n            dirname = posixpath.dirname(self.env.docname)\n\n            tree_prefix = self.options['toctree'].strip()\n            docnames = []\n            excluded = Matcher(self.config.exclude_patterns)\n            for name, sig, summary, real_name in items:\n                docname = posixpath.join(tree_prefix, real_name)\n                docname = posixpath.normpath(posixpath.join(dirname, docname))\n                if docname not in self.env.found_docs:\n                    location = self.state_machine.get_source_and_line(self.lineno)\n                    if excluded(self.env.doc2path(docname, None)):\n                        msg = __('autosummary references excluded document %r. Ignored.')\n                    else:\n                        msg = __('autosummary: stub file not found %r. '\n                                 'Check your autosummary_generate setting.')\n\n                    logger.warning(msg, real_name, location=location)\n                    continue\n\n                docnames.append(docname)\n\n            if docnames:\n                tocnode = addnodes.toctree()\n                tocnode['includefiles'] = docnames\n                tocnode['entries'] = [(None, docn) for docn in docnames]\n                tocnode['maxdepth'] = -1\n                tocnode['glob'] = None\n                tocnode['caption'] = self.options.get('caption')\n\n                nodes.append(autosummary_toc('', '', tocnode))\n\n        if 'toctree' not in self.options and 'caption' in self.options:\n            logger.warning(__('A captioned autosummary requires :toctree: option. ignored.'),\n                           location=nodes[-1])\n\n        return nodes\n\n    def get_items(self, names: List[str]) -> List[Tuple[str, str, str, str]]:\n        \"\"\"Try to import the given names, and return a list of\n        ``[(name, signature, summary_string, real_name), ...]``.\n        \"\"\"\n        prefixes = get_import_prefixes_from_env(self.env)\n\n        items = []  # type: List[Tuple[str, str, str, str]]\n\n        max_item_chars = 50\n\n        for name in names:\n            display_name = name\n            if name.startswith('~'):\n                name = name[1:]\n                display_name = name.split('.')[-1]\n\n            try:\n                with mock(self.config.autosummary_mock_imports):\n                    real_name, obj, parent, modname = import_by_name(name, prefixes=prefixes)\n            except ImportError:\n                logger.warning(__('autosummary: failed to import %s'), name)\n                continue\n\n            self.bridge.result = StringList()  # initialize for each documenter\n            full_name = real_name\n            if not isinstance(obj, ModuleType):\n                # give explicitly separated module name, so that members\n                # of inner classes can be documented\n                full_name = modname + '::' + full_name[len(modname) + 1:]\n            # NB. using full_name here is important, since Documenters\n            #     handle module prefixes slightly differently\n            doccls = get_documenter(self.env.app, obj, parent)\n            documenter = doccls(self.bridge, full_name)\n            if not documenter.parse_name():\n                logger.warning(__('failed to parse name %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if not documenter.import_object():\n                logger.warning(__('failed to import object %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if documenter.options.members and not documenter.check_module():\n                continue\n\n            # try to also get a source code analyzer for attribute docs\n            try:\n                documenter.analyzer = ModuleAnalyzer.for_module(\n                    documenter.get_real_modname())\n                # parse right now, to get PycodeErrors on parsing (results will\n                # be cached anyway)\n                documenter.analyzer.find_attr_docs()\n            except PycodeError as err:\n                logger.debug('[autodoc] module analyzer failed: %s', err)\n                # no source file -- e.g. for builtin and C modules\n                documenter.analyzer = None\n\n            # -- Grab the signature\n\n            try:\n                sig = documenter.format_signature(show_annotation=False)\n            except TypeError:\n                # the documenter does not support ``show_annotation`` option\n                sig = documenter.format_signature()\n\n            if not sig:\n                sig = ''\n            else:\n                max_chars = max(10, max_item_chars - len(display_name))\n                sig = mangle_signature(sig, max_chars=max_chars)\n\n            # -- Grab the summary\n\n            documenter.add_content(None)\n            summary = extract_summary(self.bridge.result.data[:], self.state.document)\n\n            items.append((display_name, sig, summary, real_name))\n\n        return items\n\n    def get_table(self, items: List[Tuple[str, str, str, str]]) -> List[Node]:\n        \"\"\"Generate a proper list of table nodes for autosummary:: directive.\n\n        *items* is a list produced by :meth:`get_items`.\n        \"\"\"\n        table_spec = addnodes.tabular_col_spec()\n        table_spec['spec'] = r'\\X{1}{2}\\X{1}{2}'\n\n        table = autosummary_table('')\n        real_table = nodes.table('', classes=['longtable'])\n        table.append(real_table)\n        group = nodes.tgroup('', cols=2)\n        real_table.append(group)\n        group.append(nodes.colspec('', colwidth=10))\n        group.append(nodes.colspec('', colwidth=90))\n        body = nodes.tbody('')\n        group.append(body)\n\n        def append_row(*column_texts: str) -> None:\n            row = nodes.row('')\n            source, line = self.state_machine.get_source_and_line()\n            for text in column_texts:\n                node = nodes.paragraph('')\n                vl = StringList()\n                vl.append(text, '%s:%d:<autosummary>' % (source, line))\n                with switch_source_input(self.state, vl):\n                    self.state.nested_parse(vl, 0, node)\n                    try:\n                        if isinstance(node[0], nodes.paragraph):\n                            node = node[0]\n                    except IndexError:\n                        pass\n                    row.append(nodes.entry('', node))\n            body.append(row)\n\n        for name, sig, summary, real_name in items:\n            qualifier = 'obj'\n            if 'nosignatures' not in self.options:\n                col1 = ':%s:`%s <%s>`\\\\ %s' % (qualifier, name, real_name, rst.escape(sig))\n            else:\n                col1 = ':%s:`%s <%s>`' % (qualifier, name, real_name)\n            col2 = summary\n            append_row(col1, col2)\n\n        return [table_spec, table]\n\n    def warn(self, msg: str) -> None:\n        warnings.warn('Autosummary.warn() is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        logger.warning(msg)\n\n    @property\n    def genopt(self) -> Options:\n        warnings.warn('Autosummary.genopt is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.genopt\n\n    @property\n    def warnings(self) -> List[Node]:\n        warnings.warn('Autosummary.warnings is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return []\n\n    @property\n    def result(self) -> StringList:\n        warnings.warn('Autosummary.result is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.result\n\n\ndef strip_arg_typehint(s: str) -> str:\n    \"\"\"Strip a type hint from argument definition.\"\"\"\n    return s.split(':')[0].strip()\n\n\ndef mangle_signature(sig: str, max_chars: int = 30) -> str:\n    \"\"\"Reformat a function signature to a more compact form.\"\"\"\n    # Strip return type annotation\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}, {"response": "Based on the issue statement, the primary problem is that the `members` variable for the module template includes imported members even when `autosummary_imported_members` is set to `False`. This is despite the configuration indicating that imported members should be excluded.\n\nThe problem likely lies in the way the `members` list is populated in the `generate_autosummary_content` function. Specifically, the line that sets `ns['members']` to `dir(obj)` does not take into account the `imported_members` flag.\n\nTo fix this, we can adjust the logic to filter out imported members if `imported_members` is set to `False`.\n\nHere's the *SEARCH/REPLACE* edit to fix the issue:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        ns['members'] = [name for name in dir(obj) if imported_members or getattr(obj, name).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThis change ensures that the `members` list only includes members that are not imported if `imported_members` is set to `False`.", "usage": {"completion_tokens": 0, "prompt_tokens": 0}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nautosummary: The members variable for module template contains imported members\n**Describe the bug**\r\nautosummary: The members variable for module template contains imported members even if autosummary_imported_members is False.\r\n\r\n**To Reproduce**\r\n\r\n```\r\n# _templates/autosummary/module.rst\r\n{{ fullname | escape | underline }}\r\n\r\n.. automodule:: {{ fullname }}\r\n\r\n   .. autosummary::\r\n   {% for item in members %}\r\n      {{ item }}\r\n   {%- endfor %}\r\n\r\n```\r\n```\r\n# example.py\r\nimport os\r\n```\r\n```\r\n# index.rst\r\n.. autosummary::\r\n   :toctree: generated\r\n\r\n   example\r\n```\r\n```\r\n# conf.py\r\nautosummary_generate = True\r\nautosummary_imported_members = False\r\n```\r\n\r\nAs a result, I got following output:\r\n```\r\n# generated/example.rst\r\nexample\r\n=======\r\n\r\n.. automodule:: example\r\n\r\n   .. autosummary::\r\n\r\n      __builtins__\r\n      __cached__\r\n      __doc__\r\n      __file__\r\n      __loader__\r\n      __name__\r\n      __package__\r\n      __spec__\r\n      os\r\n```\r\n\r\n**Expected behavior**\r\nThe template variable `members` should not contain imported members when `autosummary_imported_members` is False.\r\n\r\n**Your project**\r\nNo\r\n\r\n**Screenshots**\r\nNo\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.8.2\r\n- Sphinx version: 3.1.0dev\r\n- Sphinx extensions:  sphinx.ext.autosummary\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\r\n\n\n--- END ISSUE ---\n\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### sphinx/ext/autosummary/generate.py\n...\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n...\n\n\n### sphinx/ext/autosummary/__init__.py\n...\n               if cls.can_document_member(obj, '', False, parent_doc)]\n    if classes:\n        classes.sort(key=lambda cls: cls.priority)\n        return classes[-1]\n    else:\n        return DataDocumenter\n\n\n# -- .. autosummary:: ----------------------------------------------------------\n\nclass Autosummary(SphinxDirective):\n    \"\"\"\n    Pretty table containing short signatures and summaries of functions etc.\n\n    autosummary can also optionally generate a hidden toctree:: node.\n    \"\"\"\n\n    required_arguments = 0\n    optional_arguments = 0\n    final_argument_whitespace = False\n    has_content = True\n    option_spec = {\n        'caption': directives.unchanged_required,\n        'toctree': directives.unchanged,\n        'nosignatures': directives.flag,\n        'recursive': directives.flag,\n        'template': directives.unchanged,\n    }\n\n    def run(self) -> List[Node]:\n        self.bridge = DocumenterBridge(self.env, self.state.document.reporter,\n                                       Options(), self.lineno, self.state)\n\n        names = [x.strip().split()[0] for x in self.content\n                 if x.strip() and re.search(r'^[~a-zA-Z_]', x.strip()[0])]\n        items = self.get_items(names)\n        nodes = self.get_table(items)\n\n        if 'toctree' in self.options:\n            dirname = posixpath.dirname(self.env.docname)\n\n            tree_prefix = self.options['toctree'].strip()\n            docnames = []\n            excluded = Matcher(self.config.exclude_patterns)\n            for name, sig, summary, real_name in items:\n                docname = posixpath.join(tree_prefix, real_name)\n                docname = posixpath.normpath(posixpath.join(dirname, docname))\n                if docname not in self.env.found_docs:\n                    location = self.state_machine.get_source_and_line(self.lineno)\n                    if excluded(self.env.doc2path(docname, None)):\n                        msg = __('autosummary references excluded document %r. Ignored.')\n                    else:\n                        msg = __('autosummary: stub file not found %r. '\n                                 'Check your autosummary_generate setting.')\n\n                    logger.warning(msg, real_name, location=location)\n                    continue\n\n                docnames.append(docname)\n\n            if docnames:\n                tocnode = addnodes.toctree()\n                tocnode['includefiles'] = docnames\n                tocnode['entries'] = [(None, docn) for docn in docnames]\n                tocnode['maxdepth'] = -1\n                tocnode['glob'] = None\n                tocnode['caption'] = self.options.get('caption')\n\n                nodes.append(autosummary_toc('', '', tocnode))\n\n        if 'toctree' not in self.options and 'caption' in self.options:\n            logger.warning(__('A captioned autosummary requires :toctree: option. ignored.'),\n                           location=nodes[-1])\n\n        return nodes\n\n    def get_items(self, names: List[str]) -> List[Tuple[str, str, str, str]]:\n        \"\"\"Try to import the given names, and return a list of\n        ``[(name, signature, summary_string, real_name), ...]``.\n        \"\"\"\n        prefixes = get_import_prefixes_from_env(self.env)\n\n        items = []  # type: List[Tuple[str, str, str, str]]\n\n        max_item_chars = 50\n\n        for name in names:\n            display_name = name\n            if name.startswith('~'):\n                name = name[1:]\n                display_name = name.split('.')[-1]\n\n            try:\n                with mock(self.config.autosummary_mock_imports):\n                    real_name, obj, parent, modname = import_by_name(name, prefixes=prefixes)\n            except ImportError:\n                logger.warning(__('autosummary: failed to import %s'), name)\n                continue\n\n            self.bridge.result = StringList()  # initialize for each documenter\n            full_name = real_name\n            if not isinstance(obj, ModuleType):\n                # give explicitly separated module name, so that members\n                # of inner classes can be documented\n                full_name = modname + '::' + full_name[len(modname) + 1:]\n            # NB. using full_name here is important, since Documenters\n            #     handle module prefixes slightly differently\n            doccls = get_documenter(self.env.app, obj, parent)\n            documenter = doccls(self.bridge, full_name)\n            if not documenter.parse_name():\n                logger.warning(__('failed to parse name %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if not documenter.import_object():\n                logger.warning(__('failed to import object %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if documenter.options.members and not documenter.check_module():\n                continue\n\n            # try to also get a source code analyzer for attribute docs\n            try:\n                documenter.analyzer = ModuleAnalyzer.for_module(\n                    documenter.get_real_modname())\n                # parse right now, to get PycodeErrors on parsing (results will\n                # be cached anyway)\n                documenter.analyzer.find_attr_docs()\n            except PycodeError as err:\n                logger.debug('[autodoc] module analyzer failed: %s', err)\n                # no source file -- e.g. for builtin and C modules\n                documenter.analyzer = None\n\n            # -- Grab the signature\n\n            try:\n                sig = documenter.format_signature(show_annotation=False)\n            except TypeError:\n                # the documenter does not support ``show_annotation`` option\n                sig = documenter.format_signature()\n\n            if not sig:\n                sig = ''\n            else:\n                max_chars = max(10, max_item_chars - len(display_name))\n                sig = mangle_signature(sig, max_chars=max_chars)\n\n            # -- Grab the summary\n\n            documenter.add_content(None)\n            summary = extract_summary(self.bridge.result.data[:], self.state.document)\n\n            items.append((display_name, sig, summary, real_name))\n\n        return items\n\n    def get_table(self, items: List[Tuple[str, str, str, str]]) -> List[Node]:\n        \"\"\"Generate a proper list of table nodes for autosummary:: directive.\n\n        *items* is a list produced by :meth:`get_items`.\n        \"\"\"\n        table_spec = addnodes.tabular_col_spec()\n        table_spec['spec'] = r'\\X{1}{2}\\X{1}{2}'\n\n        table = autosummary_table('')\n        real_table = nodes.table('', classes=['longtable'])\n        table.append(real_table)\n        group = nodes.tgroup('', cols=2)\n        real_table.append(group)\n        group.append(nodes.colspec('', colwidth=10))\n        group.append(nodes.colspec('', colwidth=90))\n        body = nodes.tbody('')\n        group.append(body)\n\n        def append_row(*column_texts: str) -> None:\n            row = nodes.row('')\n            source, line = self.state_machine.get_source_and_line()\n            for text in column_texts:\n                node = nodes.paragraph('')\n                vl = StringList()\n                vl.append(text, '%s:%d:<autosummary>' % (source, line))\n                with switch_source_input(self.state, vl):\n                    self.state.nested_parse(vl, 0, node)\n                    try:\n                        if isinstance(node[0], nodes.paragraph):\n                            node = node[0]\n                    except IndexError:\n                        pass\n                    row.append(nodes.entry('', node))\n            body.append(row)\n\n        for name, sig, summary, real_name in items:\n            qualifier = 'obj'\n            if 'nosignatures' not in self.options:\n                col1 = ':%s:`%s <%s>`\\\\ %s' % (qualifier, name, real_name, rst.escape(sig))\n            else:\n                col1 = ':%s:`%s <%s>`' % (qualifier, name, real_name)\n            col2 = summary\n            append_row(col1, col2)\n\n        return [table_spec, table]\n\n    def warn(self, msg: str) -> None:\n        warnings.warn('Autosummary.warn() is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        logger.warning(msg)\n\n    @property\n    def genopt(self) -> Options:\n        warnings.warn('Autosummary.genopt is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.genopt\n\n    @property\n    def warnings(self) -> List[Node]:\n        warnings.warn('Autosummary.warnings is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return []\n\n    @property\n    def result(self) -> StringList:\n        warnings.warn('Autosummary.result is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.result\n\n\ndef strip_arg_typehint(s: str) -> str:\n    \"\"\"Strip a type hint from argument definition.\"\"\"\n    return s.split(':')[0].strip()\n\n\ndef mangle_signature(sig: str, max_chars: int = 30) -> str:\n    \"\"\"Reformat a function signature to a more compact form.\"\"\"\n    # Strip return type annotation\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}, {"response": "Upon analysis of the given files and the issue description, it appears that the bug is in the part of the code where members of the module are being collected. Specifically, in the function `generate_autosummary_content` within the file `generate.py`, the `members` variable is populated by listing all elements provided by `dir(obj)`.\n\nTo fix this issue, we need to filter out the imported members when the `autosummary_imported_members` configuration is set to `False`. This requires modifying the block where `members` is assigned.\n\nHere are the necessary *SEARCH/REPLACE* edits:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        if imported_members:\n            ns['members'] = dir(obj)\n        else:\n            ns['members'] = [name for name in dir(obj) if getattr(obj, name).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThe above change ensures that when `imported_members` is `False`, only members belonging to the module itself (and not imported members) are included in the `members` list.", "usage": {"completion_tokens": 0, "prompt_tokens": 0}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nautosummary: The members variable for module template contains imported members\n**Describe the bug**\r\nautosummary: The members variable for module template contains imported members even if autosummary_imported_members is False.\r\n\r\n**To Reproduce**\r\n\r\n```\r\n# _templates/autosummary/module.rst\r\n{{ fullname | escape | underline }}\r\n\r\n.. automodule:: {{ fullname }}\r\n\r\n   .. autosummary::\r\n   {% for item in members %}\r\n      {{ item }}\r\n   {%- endfor %}\r\n\r\n```\r\n```\r\n# example.py\r\nimport os\r\n```\r\n```\r\n# index.rst\r\n.. autosummary::\r\n   :toctree: generated\r\n\r\n   example\r\n```\r\n```\r\n# conf.py\r\nautosummary_generate = True\r\nautosummary_imported_members = False\r\n```\r\n\r\nAs a result, I got following output:\r\n```\r\n# generated/example.rst\r\nexample\r\n=======\r\n\r\n.. automodule:: example\r\n\r\n   .. autosummary::\r\n\r\n      __builtins__\r\n      __cached__\r\n      __doc__\r\n      __file__\r\n      __loader__\r\n      __name__\r\n      __package__\r\n      __spec__\r\n      os\r\n```\r\n\r\n**Expected behavior**\r\nThe template variable `members` should not contain imported members when `autosummary_imported_members` is False.\r\n\r\n**Your project**\r\nNo\r\n\r\n**Screenshots**\r\nNo\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.8.2\r\n- Sphinx version: 3.1.0dev\r\n- Sphinx extensions:  sphinx.ext.autosummary\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\r\n\n\n--- END ISSUE ---\n\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### sphinx/ext/autosummary/generate.py\n...\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n...\n\n\n### sphinx/ext/autosummary/__init__.py\n...\n               if cls.can_document_member(obj, '', False, parent_doc)]\n    if classes:\n        classes.sort(key=lambda cls: cls.priority)\n        return classes[-1]\n    else:\n        return DataDocumenter\n\n\n# -- .. autosummary:: ----------------------------------------------------------\n\nclass Autosummary(SphinxDirective):\n    \"\"\"\n    Pretty table containing short signatures and summaries of functions etc.\n\n    autosummary can also optionally generate a hidden toctree:: node.\n    \"\"\"\n\n    required_arguments = 0\n    optional_arguments = 0\n    final_argument_whitespace = False\n    has_content = True\n    option_spec = {\n        'caption': directives.unchanged_required,\n        'toctree': directives.unchanged,\n        'nosignatures': directives.flag,\n        'recursive': directives.flag,\n        'template': directives.unchanged,\n    }\n\n    def run(self) -> List[Node]:\n        self.bridge = DocumenterBridge(self.env, self.state.document.reporter,\n                                       Options(), self.lineno, self.state)\n\n        names = [x.strip().split()[0] for x in self.content\n                 if x.strip() and re.search(r'^[~a-zA-Z_]', x.strip()[0])]\n        items = self.get_items(names)\n        nodes = self.get_table(items)\n\n        if 'toctree' in self.options:\n            dirname = posixpath.dirname(self.env.docname)\n\n            tree_prefix = self.options['toctree'].strip()\n            docnames = []\n            excluded = Matcher(self.config.exclude_patterns)\n            for name, sig, summary, real_name in items:\n                docname = posixpath.join(tree_prefix, real_name)\n                docname = posixpath.normpath(posixpath.join(dirname, docname))\n                if docname not in self.env.found_docs:\n                    location = self.state_machine.get_source_and_line(self.lineno)\n                    if excluded(self.env.doc2path(docname, None)):\n                        msg = __('autosummary references excluded document %r. Ignored.')\n                    else:\n                        msg = __('autosummary: stub file not found %r. '\n                                 'Check your autosummary_generate setting.')\n\n                    logger.warning(msg, real_name, location=location)\n                    continue\n\n                docnames.append(docname)\n\n            if docnames:\n                tocnode = addnodes.toctree()\n                tocnode['includefiles'] = docnames\n                tocnode['entries'] = [(None, docn) for docn in docnames]\n                tocnode['maxdepth'] = -1\n                tocnode['glob'] = None\n                tocnode['caption'] = self.options.get('caption')\n\n                nodes.append(autosummary_toc('', '', tocnode))\n\n        if 'toctree' not in self.options and 'caption' in self.options:\n            logger.warning(__('A captioned autosummary requires :toctree: option. ignored.'),\n                           location=nodes[-1])\n\n        return nodes\n\n    def get_items(self, names: List[str]) -> List[Tuple[str, str, str, str]]:\n        \"\"\"Try to import the given names, and return a list of\n        ``[(name, signature, summary_string, real_name), ...]``.\n        \"\"\"\n        prefixes = get_import_prefixes_from_env(self.env)\n\n        items = []  # type: List[Tuple[str, str, str, str]]\n\n        max_item_chars = 50\n\n        for name in names:\n            display_name = name\n            if name.startswith('~'):\n                name = name[1:]\n                display_name = name.split('.')[-1]\n\n            try:\n                with mock(self.config.autosummary_mock_imports):\n                    real_name, obj, parent, modname = import_by_name(name, prefixes=prefixes)\n            except ImportError:\n                logger.warning(__('autosummary: failed to import %s'), name)\n                continue\n\n            self.bridge.result = StringList()  # initialize for each documenter\n            full_name = real_name\n            if not isinstance(obj, ModuleType):\n                # give explicitly separated module name, so that members\n                # of inner classes can be documented\n                full_name = modname + '::' + full_name[len(modname) + 1:]\n            # NB. using full_name here is important, since Documenters\n            #     handle module prefixes slightly differently\n            doccls = get_documenter(self.env.app, obj, parent)\n            documenter = doccls(self.bridge, full_name)\n            if not documenter.parse_name():\n                logger.warning(__('failed to parse name %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if not documenter.import_object():\n                logger.warning(__('failed to import object %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if documenter.options.members and not documenter.check_module():\n                continue\n\n            # try to also get a source code analyzer for attribute docs\n            try:\n                documenter.analyzer = ModuleAnalyzer.for_module(\n                    documenter.get_real_modname())\n                # parse right now, to get PycodeErrors on parsing (results will\n                # be cached anyway)\n                documenter.analyzer.find_attr_docs()\n            except PycodeError as err:\n                logger.debug('[autodoc] module analyzer failed: %s', err)\n                # no source file -- e.g. for builtin and C modules\n                documenter.analyzer = None\n\n            # -- Grab the signature\n\n            try:\n                sig = documenter.format_signature(show_annotation=False)\n            except TypeError:\n                # the documenter does not support ``show_annotation`` option\n                sig = documenter.format_signature()\n\n            if not sig:\n                sig = ''\n            else:\n                max_chars = max(10, max_item_chars - len(display_name))\n                sig = mangle_signature(sig, max_chars=max_chars)\n\n            # -- Grab the summary\n\n            documenter.add_content(None)\n            summary = extract_summary(self.bridge.result.data[:], self.state.document)\n\n            items.append((display_name, sig, summary, real_name))\n\n        return items\n\n    def get_table(self, items: List[Tuple[str, str, str, str]]) -> List[Node]:\n        \"\"\"Generate a proper list of table nodes for autosummary:: directive.\n\n        *items* is a list produced by :meth:`get_items`.\n        \"\"\"\n        table_spec = addnodes.tabular_col_spec()\n        table_spec['spec'] = r'\\X{1}{2}\\X{1}{2}'\n\n        table = autosummary_table('')\n        real_table = nodes.table('', classes=['longtable'])\n        table.append(real_table)\n        group = nodes.tgroup('', cols=2)\n        real_table.append(group)\n        group.append(nodes.colspec('', colwidth=10))\n        group.append(nodes.colspec('', colwidth=90))\n        body = nodes.tbody('')\n        group.append(body)\n\n        def append_row(*column_texts: str) -> None:\n            row = nodes.row('')\n            source, line = self.state_machine.get_source_and_line()\n            for text in column_texts:\n                node = nodes.paragraph('')\n                vl = StringList()\n                vl.append(text, '%s:%d:<autosummary>' % (source, line))\n                with switch_source_input(self.state, vl):\n                    self.state.nested_parse(vl, 0, node)\n                    try:\n                        if isinstance(node[0], nodes.paragraph):\n                            node = node[0]\n                    except IndexError:\n                        pass\n                    row.append(nodes.entry('', node))\n            body.append(row)\n\n        for name, sig, summary, real_name in items:\n            qualifier = 'obj'\n            if 'nosignatures' not in self.options:\n                col1 = ':%s:`%s <%s>`\\\\ %s' % (qualifier, name, real_name, rst.escape(sig))\n            else:\n                col1 = ':%s:`%s <%s>`' % (qualifier, name, real_name)\n            col2 = summary\n            append_row(col1, col2)\n\n        return [table_spec, table]\n\n    def warn(self, msg: str) -> None:\n        warnings.warn('Autosummary.warn() is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        logger.warning(msg)\n\n    @property\n    def genopt(self) -> Options:\n        warnings.warn('Autosummary.genopt is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.genopt\n\n    @property\n    def warnings(self) -> List[Node]:\n        warnings.warn('Autosummary.warnings is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return []\n\n    @property\n    def result(self) -> StringList:\n        warnings.warn('Autosummary.result is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.result\n\n\ndef strip_arg_typehint(s: str) -> str:\n    \"\"\"Strip a type hint from argument definition.\"\"\"\n    return s.split(':')[0].strip()\n\n\ndef mangle_signature(sig: str, max_chars: int = 30) -> str:\n    \"\"\"Reformat a function signature to a more compact form.\"\"\"\n    # Strip return type annotation\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}, {"response": "Sure, based on the issue description, it seems the problem is related to the function `generate_autosummary_content` in `sphinx/ext/autosummary/generate.py`. Specifically, the `members` variable for a module should not include imported members when `autosummary_imported_members` is set to `False`.\n\nHere is the *SEARCH/REPLACE* edit to address the issue:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        ns['members'] = [m for m in dir(obj) if imported_members or getattr(obj, m, None).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThis edit ensures that the `members` variable only includes members that belong to the module itself when `imported_members` is `False`.", "usage": {"completion_tokens": 0, "prompt_tokens": 0}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nautosummary: The members variable for module template contains imported members\n**Describe the bug**\r\nautosummary: The members variable for module template contains imported members even if autosummary_imported_members is False.\r\n\r\n**To Reproduce**\r\n\r\n```\r\n# _templates/autosummary/module.rst\r\n{{ fullname | escape | underline }}\r\n\r\n.. automodule:: {{ fullname }}\r\n\r\n   .. autosummary::\r\n   {% for item in members %}\r\n      {{ item }}\r\n   {%- endfor %}\r\n\r\n```\r\n```\r\n# example.py\r\nimport os\r\n```\r\n```\r\n# index.rst\r\n.. autosummary::\r\n   :toctree: generated\r\n\r\n   example\r\n```\r\n```\r\n# conf.py\r\nautosummary_generate = True\r\nautosummary_imported_members = False\r\n```\r\n\r\nAs a result, I got following output:\r\n```\r\n# generated/example.rst\r\nexample\r\n=======\r\n\r\n.. automodule:: example\r\n\r\n   .. autosummary::\r\n\r\n      __builtins__\r\n      __cached__\r\n      __doc__\r\n      __file__\r\n      __loader__\r\n      __name__\r\n      __package__\r\n      __spec__\r\n      os\r\n```\r\n\r\n**Expected behavior**\r\nThe template variable `members` should not contain imported members when `autosummary_imported_members` is False.\r\n\r\n**Your project**\r\nNo\r\n\r\n**Screenshots**\r\nNo\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.8.2\r\n- Sphinx version: 3.1.0dev\r\n- Sphinx extensions:  sphinx.ext.autosummary\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\r\n\n\n--- END ISSUE ---\n\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### sphinx/ext/autosummary/generate.py\n...\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n...\n\n\n### sphinx/ext/autosummary/__init__.py\n...\n               if cls.can_document_member(obj, '', False, parent_doc)]\n    if classes:\n        classes.sort(key=lambda cls: cls.priority)\n        return classes[-1]\n    else:\n        return DataDocumenter\n\n\n# -- .. autosummary:: ----------------------------------------------------------\n\nclass Autosummary(SphinxDirective):\n    \"\"\"\n    Pretty table containing short signatures and summaries of functions etc.\n\n    autosummary can also optionally generate a hidden toctree:: node.\n    \"\"\"\n\n    required_arguments = 0\n    optional_arguments = 0\n    final_argument_whitespace = False\n    has_content = True\n    option_spec = {\n        'caption': directives.unchanged_required,\n        'toctree': directives.unchanged,\n        'nosignatures': directives.flag,\n        'recursive': directives.flag,\n        'template': directives.unchanged,\n    }\n\n    def run(self) -> List[Node]:\n        self.bridge = DocumenterBridge(self.env, self.state.document.reporter,\n                                       Options(), self.lineno, self.state)\n\n        names = [x.strip().split()[0] for x in self.content\n                 if x.strip() and re.search(r'^[~a-zA-Z_]', x.strip()[0])]\n        items = self.get_items(names)\n        nodes = self.get_table(items)\n\n        if 'toctree' in self.options:\n            dirname = posixpath.dirname(self.env.docname)\n\n            tree_prefix = self.options['toctree'].strip()\n            docnames = []\n            excluded = Matcher(self.config.exclude_patterns)\n            for name, sig, summary, real_name in items:\n                docname = posixpath.join(tree_prefix, real_name)\n                docname = posixpath.normpath(posixpath.join(dirname, docname))\n                if docname not in self.env.found_docs:\n                    location = self.state_machine.get_source_and_line(self.lineno)\n                    if excluded(self.env.doc2path(docname, None)):\n                        msg = __('autosummary references excluded document %r. Ignored.')\n                    else:\n                        msg = __('autosummary: stub file not found %r. '\n                                 'Check your autosummary_generate setting.')\n\n                    logger.warning(msg, real_name, location=location)\n                    continue\n\n                docnames.append(docname)\n\n            if docnames:\n                tocnode = addnodes.toctree()\n                tocnode['includefiles'] = docnames\n                tocnode['entries'] = [(None, docn) for docn in docnames]\n                tocnode['maxdepth'] = -1\n                tocnode['glob'] = None\n                tocnode['caption'] = self.options.get('caption')\n\n                nodes.append(autosummary_toc('', '', tocnode))\n\n        if 'toctree' not in self.options and 'caption' in self.options:\n            logger.warning(__('A captioned autosummary requires :toctree: option. ignored.'),\n                           location=nodes[-1])\n\n        return nodes\n\n    def get_items(self, names: List[str]) -> List[Tuple[str, str, str, str]]:\n        \"\"\"Try to import the given names, and return a list of\n        ``[(name, signature, summary_string, real_name), ...]``.\n        \"\"\"\n        prefixes = get_import_prefixes_from_env(self.env)\n\n        items = []  # type: List[Tuple[str, str, str, str]]\n\n        max_item_chars = 50\n\n        for name in names:\n            display_name = name\n            if name.startswith('~'):\n                name = name[1:]\n                display_name = name.split('.')[-1]\n\n            try:\n                with mock(self.config.autosummary_mock_imports):\n                    real_name, obj, parent, modname = import_by_name(name, prefixes=prefixes)\n            except ImportError:\n                logger.warning(__('autosummary: failed to import %s'), name)\n                continue\n\n            self.bridge.result = StringList()  # initialize for each documenter\n            full_name = real_name\n            if not isinstance(obj, ModuleType):\n                # give explicitly separated module name, so that members\n                # of inner classes can be documented\n                full_name = modname + '::' + full_name[len(modname) + 1:]\n            # NB. using full_name here is important, since Documenters\n            #     handle module prefixes slightly differently\n            doccls = get_documenter(self.env.app, obj, parent)\n            documenter = doccls(self.bridge, full_name)\n            if not documenter.parse_name():\n                logger.warning(__('failed to parse name %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if not documenter.import_object():\n                logger.warning(__('failed to import object %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if documenter.options.members and not documenter.check_module():\n                continue\n\n            # try to also get a source code analyzer for attribute docs\n            try:\n                documenter.analyzer = ModuleAnalyzer.for_module(\n                    documenter.get_real_modname())\n                # parse right now, to get PycodeErrors on parsing (results will\n                # be cached anyway)\n                documenter.analyzer.find_attr_docs()\n            except PycodeError as err:\n                logger.debug('[autodoc] module analyzer failed: %s', err)\n                # no source file -- e.g. for builtin and C modules\n                documenter.analyzer = None\n\n            # -- Grab the signature\n\n            try:\n                sig = documenter.format_signature(show_annotation=False)\n            except TypeError:\n                # the documenter does not support ``show_annotation`` option\n                sig = documenter.format_signature()\n\n            if not sig:\n                sig = ''\n            else:\n                max_chars = max(10, max_item_chars - len(display_name))\n                sig = mangle_signature(sig, max_chars=max_chars)\n\n            # -- Grab the summary\n\n            documenter.add_content(None)\n            summary = extract_summary(self.bridge.result.data[:], self.state.document)\n\n            items.append((display_name, sig, summary, real_name))\n\n        return items\n\n    def get_table(self, items: List[Tuple[str, str, str, str]]) -> List[Node]:\n        \"\"\"Generate a proper list of table nodes for autosummary:: directive.\n\n        *items* is a list produced by :meth:`get_items`.\n        \"\"\"\n        table_spec = addnodes.tabular_col_spec()\n        table_spec['spec'] = r'\\X{1}{2}\\X{1}{2}'\n\n        table = autosummary_table('')\n        real_table = nodes.table('', classes=['longtable'])\n        table.append(real_table)\n        group = nodes.tgroup('', cols=2)\n        real_table.append(group)\n        group.append(nodes.colspec('', colwidth=10))\n        group.append(nodes.colspec('', colwidth=90))\n        body = nodes.tbody('')\n        group.append(body)\n\n        def append_row(*column_texts: str) -> None:\n            row = nodes.row('')\n            source, line = self.state_machine.get_source_and_line()\n            for text in column_texts:\n                node = nodes.paragraph('')\n                vl = StringList()\n                vl.append(text, '%s:%d:<autosummary>' % (source, line))\n                with switch_source_input(self.state, vl):\n                    self.state.nested_parse(vl, 0, node)\n                    try:\n                        if isinstance(node[0], nodes.paragraph):\n                            node = node[0]\n                    except IndexError:\n                        pass\n                    row.append(nodes.entry('', node))\n            body.append(row)\n\n        for name, sig, summary, real_name in items:\n            qualifier = 'obj'\n            if 'nosignatures' not in self.options:\n                col1 = ':%s:`%s <%s>`\\\\ %s' % (qualifier, name, real_name, rst.escape(sig))\n            else:\n                col1 = ':%s:`%s <%s>`' % (qualifier, name, real_name)\n            col2 = summary\n            append_row(col1, col2)\n\n        return [table_spec, table]\n\n    def warn(self, msg: str) -> None:\n        warnings.warn('Autosummary.warn() is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        logger.warning(msg)\n\n    @property\n    def genopt(self) -> Options:\n        warnings.warn('Autosummary.genopt is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.genopt\n\n    @property\n    def warnings(self) -> List[Node]:\n        warnings.warn('Autosummary.warnings is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return []\n\n    @property\n    def result(self) -> StringList:\n        warnings.warn('Autosummary.result is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.result\n\n\ndef strip_arg_typehint(s: str) -> str:\n    \"\"\"Strip a type hint from argument definition.\"\"\"\n    return s.split(':')[0].strip()\n\n\ndef mangle_signature(sig: str, max_chars: int = 30) -> str:\n    \"\"\"Reformat a function signature to a more compact form.\"\"\"\n    # Strip return type annotation\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}, {"response": "To address the issue where `autosummary` includes imported members even if `autosummary_imported_members` is set to `False`, we need to modify the function `generate_autosummary_content` in the `generate.py` file. Specifically, the problem lies in the assignment to `ns['members']` which should respect the `imported_members` flag.\n\nHere are the *SEARCH/REPLACE* edits to fix this issue:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        ns['members'] = [name for name in dir(obj)\n                         if imported_members or getattr(obj, name).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\nThis change ensures that only members belonging to the module itself are included when `imported_members` is `False`.", "usage": {"completion_tokens": 0, "prompt_tokens": 0}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nautosummary: The members variable for module template contains imported members\n**Describe the bug**\r\nautosummary: The members variable for module template contains imported members even if autosummary_imported_members is False.\r\n\r\n**To Reproduce**\r\n\r\n```\r\n# _templates/autosummary/module.rst\r\n{{ fullname | escape | underline }}\r\n\r\n.. automodule:: {{ fullname }}\r\n\r\n   .. autosummary::\r\n   {% for item in members %}\r\n      {{ item }}\r\n   {%- endfor %}\r\n\r\n```\r\n```\r\n# example.py\r\nimport os\r\n```\r\n```\r\n# index.rst\r\n.. autosummary::\r\n   :toctree: generated\r\n\r\n   example\r\n```\r\n```\r\n# conf.py\r\nautosummary_generate = True\r\nautosummary_imported_members = False\r\n```\r\n\r\nAs a result, I got following output:\r\n```\r\n# generated/example.rst\r\nexample\r\n=======\r\n\r\n.. automodule:: example\r\n\r\n   .. autosummary::\r\n\r\n      __builtins__\r\n      __cached__\r\n      __doc__\r\n      __file__\r\n      __loader__\r\n      __name__\r\n      __package__\r\n      __spec__\r\n      os\r\n```\r\n\r\n**Expected behavior**\r\nThe template variable `members` should not contain imported members when `autosummary_imported_members` is False.\r\n\r\n**Your project**\r\nNo\r\n\r\n**Screenshots**\r\nNo\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.8.2\r\n- Sphinx version: 3.1.0dev\r\n- Sphinx extensions:  sphinx.ext.autosummary\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\r\n\n\n--- END ISSUE ---\n\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### sphinx/ext/autosummary/generate.py\n...\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n...\n\n\n### sphinx/ext/autosummary/__init__.py\n...\n               if cls.can_document_member(obj, '', False, parent_doc)]\n    if classes:\n        classes.sort(key=lambda cls: cls.priority)\n        return classes[-1]\n    else:\n        return DataDocumenter\n\n\n# -- .. autosummary:: ----------------------------------------------------------\n\nclass Autosummary(SphinxDirective):\n    \"\"\"\n    Pretty table containing short signatures and summaries of functions etc.\n\n    autosummary can also optionally generate a hidden toctree:: node.\n    \"\"\"\n\n    required_arguments = 0\n    optional_arguments = 0\n    final_argument_whitespace = False\n    has_content = True\n    option_spec = {\n        'caption': directives.unchanged_required,\n        'toctree': directives.unchanged,\n        'nosignatures': directives.flag,\n        'recursive': directives.flag,\n        'template': directives.unchanged,\n    }\n\n    def run(self) -> List[Node]:\n        self.bridge = DocumenterBridge(self.env, self.state.document.reporter,\n                                       Options(), self.lineno, self.state)\n\n        names = [x.strip().split()[0] for x in self.content\n                 if x.strip() and re.search(r'^[~a-zA-Z_]', x.strip()[0])]\n        items = self.get_items(names)\n        nodes = self.get_table(items)\n\n        if 'toctree' in self.options:\n            dirname = posixpath.dirname(self.env.docname)\n\n            tree_prefix = self.options['toctree'].strip()\n            docnames = []\n            excluded = Matcher(self.config.exclude_patterns)\n            for name, sig, summary, real_name in items:\n                docname = posixpath.join(tree_prefix, real_name)\n                docname = posixpath.normpath(posixpath.join(dirname, docname))\n                if docname not in self.env.found_docs:\n                    location = self.state_machine.get_source_and_line(self.lineno)\n                    if excluded(self.env.doc2path(docname, None)):\n                        msg = __('autosummary references excluded document %r. Ignored.')\n                    else:\n                        msg = __('autosummary: stub file not found %r. '\n                                 'Check your autosummary_generate setting.')\n\n                    logger.warning(msg, real_name, location=location)\n                    continue\n\n                docnames.append(docname)\n\n            if docnames:\n                tocnode = addnodes.toctree()\n                tocnode['includefiles'] = docnames\n                tocnode['entries'] = [(None, docn) for docn in docnames]\n                tocnode['maxdepth'] = -1\n                tocnode['glob'] = None\n                tocnode['caption'] = self.options.get('caption')\n\n                nodes.append(autosummary_toc('', '', tocnode))\n\n        if 'toctree' not in self.options and 'caption' in self.options:\n            logger.warning(__('A captioned autosummary requires :toctree: option. ignored.'),\n                           location=nodes[-1])\n\n        return nodes\n\n    def get_items(self, names: List[str]) -> List[Tuple[str, str, str, str]]:\n        \"\"\"Try to import the given names, and return a list of\n        ``[(name, signature, summary_string, real_name), ...]``.\n        \"\"\"\n        prefixes = get_import_prefixes_from_env(self.env)\n\n        items = []  # type: List[Tuple[str, str, str, str]]\n\n        max_item_chars = 50\n\n        for name in names:\n            display_name = name\n            if name.startswith('~'):\n                name = name[1:]\n                display_name = name.split('.')[-1]\n\n            try:\n                with mock(self.config.autosummary_mock_imports):\n                    real_name, obj, parent, modname = import_by_name(name, prefixes=prefixes)\n            except ImportError:\n                logger.warning(__('autosummary: failed to import %s'), name)\n                continue\n\n            self.bridge.result = StringList()  # initialize for each documenter\n            full_name = real_name\n            if not isinstance(obj, ModuleType):\n                # give explicitly separated module name, so that members\n                # of inner classes can be documented\n                full_name = modname + '::' + full_name[len(modname) + 1:]\n            # NB. using full_name here is important, since Documenters\n            #     handle module prefixes slightly differently\n            doccls = get_documenter(self.env.app, obj, parent)\n            documenter = doccls(self.bridge, full_name)\n            if not documenter.parse_name():\n                logger.warning(__('failed to parse name %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if not documenter.import_object():\n                logger.warning(__('failed to import object %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if documenter.options.members and not documenter.check_module():\n                continue\n\n            # try to also get a source code analyzer for attribute docs\n            try:\n                documenter.analyzer = ModuleAnalyzer.for_module(\n                    documenter.get_real_modname())\n                # parse right now, to get PycodeErrors on parsing (results will\n                # be cached anyway)\n                documenter.analyzer.find_attr_docs()\n            except PycodeError as err:\n                logger.debug('[autodoc] module analyzer failed: %s', err)\n                # no source file -- e.g. for builtin and C modules\n                documenter.analyzer = None\n\n            # -- Grab the signature\n\n            try:\n                sig = documenter.format_signature(show_annotation=False)\n            except TypeError:\n                # the documenter does not support ``show_annotation`` option\n                sig = documenter.format_signature()\n\n            if not sig:\n                sig = ''\n            else:\n                max_chars = max(10, max_item_chars - len(display_name))\n                sig = mangle_signature(sig, max_chars=max_chars)\n\n            # -- Grab the summary\n\n            documenter.add_content(None)\n            summary = extract_summary(self.bridge.result.data[:], self.state.document)\n\n            items.append((display_name, sig, summary, real_name))\n\n        return items\n\n    def get_table(self, items: List[Tuple[str, str, str, str]]) -> List[Node]:\n        \"\"\"Generate a proper list of table nodes for autosummary:: directive.\n\n        *items* is a list produced by :meth:`get_items`.\n        \"\"\"\n        table_spec = addnodes.tabular_col_spec()\n        table_spec['spec'] = r'\\X{1}{2}\\X{1}{2}'\n\n        table = autosummary_table('')\n        real_table = nodes.table('', classes=['longtable'])\n        table.append(real_table)\n        group = nodes.tgroup('', cols=2)\n        real_table.append(group)\n        group.append(nodes.colspec('', colwidth=10))\n        group.append(nodes.colspec('', colwidth=90))\n        body = nodes.tbody('')\n        group.append(body)\n\n        def append_row(*column_texts: str) -> None:\n            row = nodes.row('')\n            source, line = self.state_machine.get_source_and_line()\n            for text in column_texts:\n                node = nodes.paragraph('')\n                vl = StringList()\n                vl.append(text, '%s:%d:<autosummary>' % (source, line))\n                with switch_source_input(self.state, vl):\n                    self.state.nested_parse(vl, 0, node)\n                    try:\n                        if isinstance(node[0], nodes.paragraph):\n                            node = node[0]\n                    except IndexError:\n                        pass\n                    row.append(nodes.entry('', node))\n            body.append(row)\n\n        for name, sig, summary, real_name in items:\n            qualifier = 'obj'\n            if 'nosignatures' not in self.options:\n                col1 = ':%s:`%s <%s>`\\\\ %s' % (qualifier, name, real_name, rst.escape(sig))\n            else:\n                col1 = ':%s:`%s <%s>`' % (qualifier, name, real_name)\n            col2 = summary\n            append_row(col1, col2)\n\n        return [table_spec, table]\n\n    def warn(self, msg: str) -> None:\n        warnings.warn('Autosummary.warn() is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        logger.warning(msg)\n\n    @property\n    def genopt(self) -> Options:\n        warnings.warn('Autosummary.genopt is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.genopt\n\n    @property\n    def warnings(self) -> List[Node]:\n        warnings.warn('Autosummary.warnings is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return []\n\n    @property\n    def result(self) -> StringList:\n        warnings.warn('Autosummary.result is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.result\n\n\ndef strip_arg_typehint(s: str) -> str:\n    \"\"\"Strip a type hint from argument definition.\"\"\"\n    return s.split(':')[0].strip()\n\n\ndef mangle_signature(sig: str, max_chars: int = 30) -> str:\n    \"\"\"Reformat a function signature to a more compact form.\"\"\"\n    # Strip return type annotation\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}, {"response": "The problem as described in the issue is that the `members` variable in the template contains imported members even when `autosummary_imported_members` is set to `False`. This suggests that the `generate_autosummary_content` function in `generate.py` is not respecting the `imported_members` flag correctly when setting the `members` variable.\n\nI'll provide the *SEARCH/REPLACE* edit to fix this issue.\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        if imported_members:\n            ns['members'] = dir(obj)\n        else:\n            ns['members'] = [name for name in dir(obj) if getattr(obj, name).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThis change ensures that if `imported_members` is `False`, only members that are defined in the module itself (not imported ones) are included in the `members` variable.\n\nThe rest of the code looks fine and does not need any changes based on the provided issue statement.", "usage": {"completion_tokens": 0, "prompt_tokens": 0}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nautosummary: The members variable for module template contains imported members\n**Describe the bug**\r\nautosummary: The members variable for module template contains imported members even if autosummary_imported_members is False.\r\n\r\n**To Reproduce**\r\n\r\n```\r\n# _templates/autosummary/module.rst\r\n{{ fullname | escape | underline }}\r\n\r\n.. automodule:: {{ fullname }}\r\n\r\n   .. autosummary::\r\n   {% for item in members %}\r\n      {{ item }}\r\n   {%- endfor %}\r\n\r\n```\r\n```\r\n# example.py\r\nimport os\r\n```\r\n```\r\n# index.rst\r\n.. autosummary::\r\n   :toctree: generated\r\n\r\n   example\r\n```\r\n```\r\n# conf.py\r\nautosummary_generate = True\r\nautosummary_imported_members = False\r\n```\r\n\r\nAs a result, I got following output:\r\n```\r\n# generated/example.rst\r\nexample\r\n=======\r\n\r\n.. automodule:: example\r\n\r\n   .. autosummary::\r\n\r\n      __builtins__\r\n      __cached__\r\n      __doc__\r\n      __file__\r\n      __loader__\r\n      __name__\r\n      __package__\r\n      __spec__\r\n      os\r\n```\r\n\r\n**Expected behavior**\r\nThe template variable `members` should not contain imported members when `autosummary_imported_members` is False.\r\n\r\n**Your project**\r\nNo\r\n\r\n**Screenshots**\r\nNo\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.8.2\r\n- Sphinx version: 3.1.0dev\r\n- Sphinx extensions:  sphinx.ext.autosummary\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\r\n\n\n--- END ISSUE ---\n\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### sphinx/ext/autosummary/generate.py\n...\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n...\n\n\n### sphinx/ext/autosummary/__init__.py\n...\n               if cls.can_document_member(obj, '', False, parent_doc)]\n    if classes:\n        classes.sort(key=lambda cls: cls.priority)\n        return classes[-1]\n    else:\n        return DataDocumenter\n\n\n# -- .. autosummary:: ----------------------------------------------------------\n\nclass Autosummary(SphinxDirective):\n    \"\"\"\n    Pretty table containing short signatures and summaries of functions etc.\n\n    autosummary can also optionally generate a hidden toctree:: node.\n    \"\"\"\n\n    required_arguments = 0\n    optional_arguments = 0\n    final_argument_whitespace = False\n    has_content = True\n    option_spec = {\n        'caption': directives.unchanged_required,\n        'toctree': directives.unchanged,\n        'nosignatures': directives.flag,\n        'recursive': directives.flag,\n        'template': directives.unchanged,\n    }\n\n    def run(self) -> List[Node]:\n        self.bridge = DocumenterBridge(self.env, self.state.document.reporter,\n                                       Options(), self.lineno, self.state)\n\n        names = [x.strip().split()[0] for x in self.content\n                 if x.strip() and re.search(r'^[~a-zA-Z_]', x.strip()[0])]\n        items = self.get_items(names)\n        nodes = self.get_table(items)\n\n        if 'toctree' in self.options:\n            dirname = posixpath.dirname(self.env.docname)\n\n            tree_prefix = self.options['toctree'].strip()\n            docnames = []\n            excluded = Matcher(self.config.exclude_patterns)\n            for name, sig, summary, real_name in items:\n                docname = posixpath.join(tree_prefix, real_name)\n                docname = posixpath.normpath(posixpath.join(dirname, docname))\n                if docname not in self.env.found_docs:\n                    location = self.state_machine.get_source_and_line(self.lineno)\n                    if excluded(self.env.doc2path(docname, None)):\n                        msg = __('autosummary references excluded document %r. Ignored.')\n                    else:\n                        msg = __('autosummary: stub file not found %r. '\n                                 'Check your autosummary_generate setting.')\n\n                    logger.warning(msg, real_name, location=location)\n                    continue\n\n                docnames.append(docname)\n\n            if docnames:\n                tocnode = addnodes.toctree()\n                tocnode['includefiles'] = docnames\n                tocnode['entries'] = [(None, docn) for docn in docnames]\n                tocnode['maxdepth'] = -1\n                tocnode['glob'] = None\n                tocnode['caption'] = self.options.get('caption')\n\n                nodes.append(autosummary_toc('', '', tocnode))\n\n        if 'toctree' not in self.options and 'caption' in self.options:\n            logger.warning(__('A captioned autosummary requires :toctree: option. ignored.'),\n                           location=nodes[-1])\n\n        return nodes\n\n    def get_items(self, names: List[str]) -> List[Tuple[str, str, str, str]]:\n        \"\"\"Try to import the given names, and return a list of\n        ``[(name, signature, summary_string, real_name), ...]``.\n        \"\"\"\n        prefixes = get_import_prefixes_from_env(self.env)\n\n        items = []  # type: List[Tuple[str, str, str, str]]\n\n        max_item_chars = 50\n\n        for name in names:\n            display_name = name\n            if name.startswith('~'):\n                name = name[1:]\n                display_name = name.split('.')[-1]\n\n            try:\n                with mock(self.config.autosummary_mock_imports):\n                    real_name, obj, parent, modname = import_by_name(name, prefixes=prefixes)\n            except ImportError:\n                logger.warning(__('autosummary: failed to import %s'), name)\n                continue\n\n            self.bridge.result = StringList()  # initialize for each documenter\n            full_name = real_name\n            if not isinstance(obj, ModuleType):\n                # give explicitly separated module name, so that members\n                # of inner classes can be documented\n                full_name = modname + '::' + full_name[len(modname) + 1:]\n            # NB. using full_name here is important, since Documenters\n            #     handle module prefixes slightly differently\n            doccls = get_documenter(self.env.app, obj, parent)\n            documenter = doccls(self.bridge, full_name)\n            if not documenter.parse_name():\n                logger.warning(__('failed to parse name %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if not documenter.import_object():\n                logger.warning(__('failed to import object %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if documenter.options.members and not documenter.check_module():\n                continue\n\n            # try to also get a source code analyzer for attribute docs\n            try:\n                documenter.analyzer = ModuleAnalyzer.for_module(\n                    documenter.get_real_modname())\n                # parse right now, to get PycodeErrors on parsing (results will\n                # be cached anyway)\n                documenter.analyzer.find_attr_docs()\n            except PycodeError as err:\n                logger.debug('[autodoc] module analyzer failed: %s', err)\n                # no source file -- e.g. for builtin and C modules\n                documenter.analyzer = None\n\n            # -- Grab the signature\n\n            try:\n                sig = documenter.format_signature(show_annotation=False)\n            except TypeError:\n                # the documenter does not support ``show_annotation`` option\n                sig = documenter.format_signature()\n\n            if not sig:\n                sig = ''\n            else:\n                max_chars = max(10, max_item_chars - len(display_name))\n                sig = mangle_signature(sig, max_chars=max_chars)\n\n            # -- Grab the summary\n\n            documenter.add_content(None)\n            summary = extract_summary(self.bridge.result.data[:], self.state.document)\n\n            items.append((display_name, sig, summary, real_name))\n\n        return items\n\n    def get_table(self, items: List[Tuple[str, str, str, str]]) -> List[Node]:\n        \"\"\"Generate a proper list of table nodes for autosummary:: directive.\n\n        *items* is a list produced by :meth:`get_items`.\n        \"\"\"\n        table_spec = addnodes.tabular_col_spec()\n        table_spec['spec'] = r'\\X{1}{2}\\X{1}{2}'\n\n        table = autosummary_table('')\n        real_table = nodes.table('', classes=['longtable'])\n        table.append(real_table)\n        group = nodes.tgroup('', cols=2)\n        real_table.append(group)\n        group.append(nodes.colspec('', colwidth=10))\n        group.append(nodes.colspec('', colwidth=90))\n        body = nodes.tbody('')\n        group.append(body)\n\n        def append_row(*column_texts: str) -> None:\n            row = nodes.row('')\n            source, line = self.state_machine.get_source_and_line()\n            for text in column_texts:\n                node = nodes.paragraph('')\n                vl = StringList()\n                vl.append(text, '%s:%d:<autosummary>' % (source, line))\n                with switch_source_input(self.state, vl):\n                    self.state.nested_parse(vl, 0, node)\n                    try:\n                        if isinstance(node[0], nodes.paragraph):\n                            node = node[0]\n                    except IndexError:\n                        pass\n                    row.append(nodes.entry('', node))\n            body.append(row)\n\n        for name, sig, summary, real_name in items:\n            qualifier = 'obj'\n            if 'nosignatures' not in self.options:\n                col1 = ':%s:`%s <%s>`\\\\ %s' % (qualifier, name, real_name, rst.escape(sig))\n            else:\n                col1 = ':%s:`%s <%s>`' % (qualifier, name, real_name)\n            col2 = summary\n            append_row(col1, col2)\n\n        return [table_spec, table]\n\n    def warn(self, msg: str) -> None:\n        warnings.warn('Autosummary.warn() is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        logger.warning(msg)\n\n    @property\n    def genopt(self) -> Options:\n        warnings.warn('Autosummary.genopt is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.genopt\n\n    @property\n    def warnings(self) -> List[Node]:\n        warnings.warn('Autosummary.warnings is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return []\n\n    @property\n    def result(self) -> StringList:\n        warnings.warn('Autosummary.result is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.result\n\n\ndef strip_arg_typehint(s: str) -> str:\n    \"\"\"Strip a type hint from argument definition.\"\"\"\n    return s.split(':')[0].strip()\n\n\ndef mangle_signature(sig: str, max_chars: int = 30) -> str:\n    \"\"\"Reformat a function signature to a more compact form.\"\"\"\n    # Strip return type annotation\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}, {"response": "To address the issue where `autosummary` includes imported members even if `autosummary_imported_members` is set to `False`, we need to ensure that the `members` variable honors this configuration. The most likely area to address this is in the `generate_autosummary_content` function where `members` are populated for a module.\n\nHere's the modification:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        ns['members'] = [m for m in dir(obj) if imported_members or getattr(safe_getattr(obj, m), '__module__', None) == obj.__name__]\n>>>>>>> REPLACE\n```", "usage": {"completion_tokens": 0, "prompt_tokens": 0}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nautosummary: The members variable for module template contains imported members\n**Describe the bug**\r\nautosummary: The members variable for module template contains imported members even if autosummary_imported_members is False.\r\n\r\n**To Reproduce**\r\n\r\n```\r\n# _templates/autosummary/module.rst\r\n{{ fullname | escape | underline }}\r\n\r\n.. automodule:: {{ fullname }}\r\n\r\n   .. autosummary::\r\n   {% for item in members %}\r\n      {{ item }}\r\n   {%- endfor %}\r\n\r\n```\r\n```\r\n# example.py\r\nimport os\r\n```\r\n```\r\n# index.rst\r\n.. autosummary::\r\n   :toctree: generated\r\n\r\n   example\r\n```\r\n```\r\n# conf.py\r\nautosummary_generate = True\r\nautosummary_imported_members = False\r\n```\r\n\r\nAs a result, I got following output:\r\n```\r\n# generated/example.rst\r\nexample\r\n=======\r\n\r\n.. automodule:: example\r\n\r\n   .. autosummary::\r\n\r\n      __builtins__\r\n      __cached__\r\n      __doc__\r\n      __file__\r\n      __loader__\r\n      __name__\r\n      __package__\r\n      __spec__\r\n      os\r\n```\r\n\r\n**Expected behavior**\r\nThe template variable `members` should not contain imported members when `autosummary_imported_members` is False.\r\n\r\n**Your project**\r\nNo\r\n\r\n**Screenshots**\r\nNo\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.8.2\r\n- Sphinx version: 3.1.0dev\r\n- Sphinx extensions:  sphinx.ext.autosummary\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\r\n\n\n--- END ISSUE ---\n\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### sphinx/ext/autosummary/generate.py\n...\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n...\n\n\n### sphinx/ext/autosummary/__init__.py\n...\n               if cls.can_document_member(obj, '', False, parent_doc)]\n    if classes:\n        classes.sort(key=lambda cls: cls.priority)\n        return classes[-1]\n    else:\n        return DataDocumenter\n\n\n# -- .. autosummary:: ----------------------------------------------------------\n\nclass Autosummary(SphinxDirective):\n    \"\"\"\n    Pretty table containing short signatures and summaries of functions etc.\n\n    autosummary can also optionally generate a hidden toctree:: node.\n    \"\"\"\n\n    required_arguments = 0\n    optional_arguments = 0\n    final_argument_whitespace = False\n    has_content = True\n    option_spec = {\n        'caption': directives.unchanged_required,\n        'toctree': directives.unchanged,\n        'nosignatures': directives.flag,\n        'recursive': directives.flag,\n        'template': directives.unchanged,\n    }\n\n    def run(self) -> List[Node]:\n        self.bridge = DocumenterBridge(self.env, self.state.document.reporter,\n                                       Options(), self.lineno, self.state)\n\n        names = [x.strip().split()[0] for x in self.content\n                 if x.strip() and re.search(r'^[~a-zA-Z_]', x.strip()[0])]\n        items = self.get_items(names)\n        nodes = self.get_table(items)\n\n        if 'toctree' in self.options:\n            dirname = posixpath.dirname(self.env.docname)\n\n            tree_prefix = self.options['toctree'].strip()\n            docnames = []\n            excluded = Matcher(self.config.exclude_patterns)\n            for name, sig, summary, real_name in items:\n                docname = posixpath.join(tree_prefix, real_name)\n                docname = posixpath.normpath(posixpath.join(dirname, docname))\n                if docname not in self.env.found_docs:\n                    location = self.state_machine.get_source_and_line(self.lineno)\n                    if excluded(self.env.doc2path(docname, None)):\n                        msg = __('autosummary references excluded document %r. Ignored.')\n                    else:\n                        msg = __('autosummary: stub file not found %r. '\n                                 'Check your autosummary_generate setting.')\n\n                    logger.warning(msg, real_name, location=location)\n                    continue\n\n                docnames.append(docname)\n\n            if docnames:\n                tocnode = addnodes.toctree()\n                tocnode['includefiles'] = docnames\n                tocnode['entries'] = [(None, docn) for docn in docnames]\n                tocnode['maxdepth'] = -1\n                tocnode['glob'] = None\n                tocnode['caption'] = self.options.get('caption')\n\n                nodes.append(autosummary_toc('', '', tocnode))\n\n        if 'toctree' not in self.options and 'caption' in self.options:\n            logger.warning(__('A captioned autosummary requires :toctree: option. ignored.'),\n                           location=nodes[-1])\n\n        return nodes\n\n    def get_items(self, names: List[str]) -> List[Tuple[str, str, str, str]]:\n        \"\"\"Try to import the given names, and return a list of\n        ``[(name, signature, summary_string, real_name), ...]``.\n        \"\"\"\n        prefixes = get_import_prefixes_from_env(self.env)\n\n        items = []  # type: List[Tuple[str, str, str, str]]\n\n        max_item_chars = 50\n\n        for name in names:\n            display_name = name\n            if name.startswith('~'):\n                name = name[1:]\n                display_name = name.split('.')[-1]\n\n            try:\n                with mock(self.config.autosummary_mock_imports):\n                    real_name, obj, parent, modname = import_by_name(name, prefixes=prefixes)\n            except ImportError:\n                logger.warning(__('autosummary: failed to import %s'), name)\n                continue\n\n            self.bridge.result = StringList()  # initialize for each documenter\n            full_name = real_name\n            if not isinstance(obj, ModuleType):\n                # give explicitly separated module name, so that members\n                # of inner classes can be documented\n                full_name = modname + '::' + full_name[len(modname) + 1:]\n            # NB. using full_name here is important, since Documenters\n            #     handle module prefixes slightly differently\n            doccls = get_documenter(self.env.app, obj, parent)\n            documenter = doccls(self.bridge, full_name)\n            if not documenter.parse_name():\n                logger.warning(__('failed to parse name %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if not documenter.import_object():\n                logger.warning(__('failed to import object %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if documenter.options.members and not documenter.check_module():\n                continue\n\n            # try to also get a source code analyzer for attribute docs\n            try:\n                documenter.analyzer = ModuleAnalyzer.for_module(\n                    documenter.get_real_modname())\n                # parse right now, to get PycodeErrors on parsing (results will\n                # be cached anyway)\n                documenter.analyzer.find_attr_docs()\n            except PycodeError as err:\n                logger.debug('[autodoc] module analyzer failed: %s', err)\n                # no source file -- e.g. for builtin and C modules\n                documenter.analyzer = None\n\n            # -- Grab the signature\n\n            try:\n                sig = documenter.format_signature(show_annotation=False)\n            except TypeError:\n                # the documenter does not support ``show_annotation`` option\n                sig = documenter.format_signature()\n\n            if not sig:\n                sig = ''\n            else:\n                max_chars = max(10, max_item_chars - len(display_name))\n                sig = mangle_signature(sig, max_chars=max_chars)\n\n            # -- Grab the summary\n\n            documenter.add_content(None)\n            summary = extract_summary(self.bridge.result.data[:], self.state.document)\n\n            items.append((display_name, sig, summary, real_name))\n\n        return items\n\n    def get_table(self, items: List[Tuple[str, str, str, str]]) -> List[Node]:\n        \"\"\"Generate a proper list of table nodes for autosummary:: directive.\n\n        *items* is a list produced by :meth:`get_items`.\n        \"\"\"\n        table_spec = addnodes.tabular_col_spec()\n        table_spec['spec'] = r'\\X{1}{2}\\X{1}{2}'\n\n        table = autosummary_table('')\n        real_table = nodes.table('', classes=['longtable'])\n        table.append(real_table)\n        group = nodes.tgroup('', cols=2)\n        real_table.append(group)\n        group.append(nodes.colspec('', colwidth=10))\n        group.append(nodes.colspec('', colwidth=90))\n        body = nodes.tbody('')\n        group.append(body)\n\n        def append_row(*column_texts: str) -> None:\n            row = nodes.row('')\n            source, line = self.state_machine.get_source_and_line()\n            for text in column_texts:\n                node = nodes.paragraph('')\n                vl = StringList()\n                vl.append(text, '%s:%d:<autosummary>' % (source, line))\n                with switch_source_input(self.state, vl):\n                    self.state.nested_parse(vl, 0, node)\n                    try:\n                        if isinstance(node[0], nodes.paragraph):\n                            node = node[0]\n                    except IndexError:\n                        pass\n                    row.append(nodes.entry('', node))\n            body.append(row)\n\n        for name, sig, summary, real_name in items:\n            qualifier = 'obj'\n            if 'nosignatures' not in self.options:\n                col1 = ':%s:`%s <%s>`\\\\ %s' % (qualifier, name, real_name, rst.escape(sig))\n            else:\n                col1 = ':%s:`%s <%s>`' % (qualifier, name, real_name)\n            col2 = summary\n            append_row(col1, col2)\n\n        return [table_spec, table]\n\n    def warn(self, msg: str) -> None:\n        warnings.warn('Autosummary.warn() is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        logger.warning(msg)\n\n    @property\n    def genopt(self) -> Options:\n        warnings.warn('Autosummary.genopt is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.genopt\n\n    @property\n    def warnings(self) -> List[Node]:\n        warnings.warn('Autosummary.warnings is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return []\n\n    @property\n    def result(self) -> StringList:\n        warnings.warn('Autosummary.result is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.result\n\n\ndef strip_arg_typehint(s: str) -> str:\n    \"\"\"Strip a type hint from argument definition.\"\"\"\n    return s.split(':')[0].strip()\n\n\ndef mangle_signature(sig: str, max_chars: int = 30) -> str:\n    \"\"\"Reformat a function signature to a more compact form.\"\"\"\n    # Strip return type annotation\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}, {"response": "Based on the issue statement, the problem lies within how the `members` variable is populated in the `generate_autosummary_content` function, specifically for modules. The `dir(obj)` function is used to get the `members`, but it doesn't account for the `autosummary_imported_members` setting.\n\nWe'll need to adjust the code to filter out imported members from the `members` list when `autosummary_imported_members` is set to `False`.\n\nHere's the necessary *SEARCH/REPLACE* edit to fix the issue:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        if imported_members:\n            ns['members'] = dir(obj)\n        else:\n            ns['members'] = [name for name in dir(obj) if getattr(obj, name, None).__module__ == obj.__name__]\n>>>>>>> REPLACE\n```\n\nThis change ensures that the `members` list only includes members of the module itself, excluding any imported members when `imported_members` is set to `False`.", "usage": {"completion_tokens": 0, "prompt_tokens": 0}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nautosummary: The members variable for module template contains imported members\n**Describe the bug**\r\nautosummary: The members variable for module template contains imported members even if autosummary_imported_members is False.\r\n\r\n**To Reproduce**\r\n\r\n```\r\n# _templates/autosummary/module.rst\r\n{{ fullname | escape | underline }}\r\n\r\n.. automodule:: {{ fullname }}\r\n\r\n   .. autosummary::\r\n   {% for item in members %}\r\n      {{ item }}\r\n   {%- endfor %}\r\n\r\n```\r\n```\r\n# example.py\r\nimport os\r\n```\r\n```\r\n# index.rst\r\n.. autosummary::\r\n   :toctree: generated\r\n\r\n   example\r\n```\r\n```\r\n# conf.py\r\nautosummary_generate = True\r\nautosummary_imported_members = False\r\n```\r\n\r\nAs a result, I got following output:\r\n```\r\n# generated/example.rst\r\nexample\r\n=======\r\n\r\n.. automodule:: example\r\n\r\n   .. autosummary::\r\n\r\n      __builtins__\r\n      __cached__\r\n      __doc__\r\n      __file__\r\n      __loader__\r\n      __name__\r\n      __package__\r\n      __spec__\r\n      os\r\n```\r\n\r\n**Expected behavior**\r\nThe template variable `members` should not contain imported members when `autosummary_imported_members` is False.\r\n\r\n**Your project**\r\nNo\r\n\r\n**Screenshots**\r\nNo\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.8.2\r\n- Sphinx version: 3.1.0dev\r\n- Sphinx extensions:  sphinx.ext.autosummary\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\r\n\n\n--- END ISSUE ---\n\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### sphinx/ext/autosummary/generate.py\n...\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n...\n\n\n### sphinx/ext/autosummary/__init__.py\n...\n               if cls.can_document_member(obj, '', False, parent_doc)]\n    if classes:\n        classes.sort(key=lambda cls: cls.priority)\n        return classes[-1]\n    else:\n        return DataDocumenter\n\n\n# -- .. autosummary:: ----------------------------------------------------------\n\nclass Autosummary(SphinxDirective):\n    \"\"\"\n    Pretty table containing short signatures and summaries of functions etc.\n\n    autosummary can also optionally generate a hidden toctree:: node.\n    \"\"\"\n\n    required_arguments = 0\n    optional_arguments = 0\n    final_argument_whitespace = False\n    has_content = True\n    option_spec = {\n        'caption': directives.unchanged_required,\n        'toctree': directives.unchanged,\n        'nosignatures': directives.flag,\n        'recursive': directives.flag,\n        'template': directives.unchanged,\n    }\n\n    def run(self) -> List[Node]:\n        self.bridge = DocumenterBridge(self.env, self.state.document.reporter,\n                                       Options(), self.lineno, self.state)\n\n        names = [x.strip().split()[0] for x in self.content\n                 if x.strip() and re.search(r'^[~a-zA-Z_]', x.strip()[0])]\n        items = self.get_items(names)\n        nodes = self.get_table(items)\n\n        if 'toctree' in self.options:\n            dirname = posixpath.dirname(self.env.docname)\n\n            tree_prefix = self.options['toctree'].strip()\n            docnames = []\n            excluded = Matcher(self.config.exclude_patterns)\n            for name, sig, summary, real_name in items:\n                docname = posixpath.join(tree_prefix, real_name)\n                docname = posixpath.normpath(posixpath.join(dirname, docname))\n                if docname not in self.env.found_docs:\n                    location = self.state_machine.get_source_and_line(self.lineno)\n                    if excluded(self.env.doc2path(docname, None)):\n                        msg = __('autosummary references excluded document %r. Ignored.')\n                    else:\n                        msg = __('autosummary: stub file not found %r. '\n                                 'Check your autosummary_generate setting.')\n\n                    logger.warning(msg, real_name, location=location)\n                    continue\n\n                docnames.append(docname)\n\n            if docnames:\n                tocnode = addnodes.toctree()\n                tocnode['includefiles'] = docnames\n                tocnode['entries'] = [(None, docn) for docn in docnames]\n                tocnode['maxdepth'] = -1\n                tocnode['glob'] = None\n                tocnode['caption'] = self.options.get('caption')\n\n                nodes.append(autosummary_toc('', '', tocnode))\n\n        if 'toctree' not in self.options and 'caption' in self.options:\n            logger.warning(__('A captioned autosummary requires :toctree: option. ignored.'),\n                           location=nodes[-1])\n\n        return nodes\n\n    def get_items(self, names: List[str]) -> List[Tuple[str, str, str, str]]:\n        \"\"\"Try to import the given names, and return a list of\n        ``[(name, signature, summary_string, real_name), ...]``.\n        \"\"\"\n        prefixes = get_import_prefixes_from_env(self.env)\n\n        items = []  # type: List[Tuple[str, str, str, str]]\n\n        max_item_chars = 50\n\n        for name in names:\n            display_name = name\n            if name.startswith('~'):\n                name = name[1:]\n                display_name = name.split('.')[-1]\n\n            try:\n                with mock(self.config.autosummary_mock_imports):\n                    real_name, obj, parent, modname = import_by_name(name, prefixes=prefixes)\n            except ImportError:\n                logger.warning(__('autosummary: failed to import %s'), name)\n                continue\n\n            self.bridge.result = StringList()  # initialize for each documenter\n            full_name = real_name\n            if not isinstance(obj, ModuleType):\n                # give explicitly separated module name, so that members\n                # of inner classes can be documented\n                full_name = modname + '::' + full_name[len(modname) + 1:]\n            # NB. using full_name here is important, since Documenters\n            #     handle module prefixes slightly differently\n            doccls = get_documenter(self.env.app, obj, parent)\n            documenter = doccls(self.bridge, full_name)\n            if not documenter.parse_name():\n                logger.warning(__('failed to parse name %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if not documenter.import_object():\n                logger.warning(__('failed to import object %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if documenter.options.members and not documenter.check_module():\n                continue\n\n            # try to also get a source code analyzer for attribute docs\n            try:\n                documenter.analyzer = ModuleAnalyzer.for_module(\n                    documenter.get_real_modname())\n                # parse right now, to get PycodeErrors on parsing (results will\n                # be cached anyway)\n                documenter.analyzer.find_attr_docs()\n            except PycodeError as err:\n                logger.debug('[autodoc] module analyzer failed: %s', err)\n                # no source file -- e.g. for builtin and C modules\n                documenter.analyzer = None\n\n            # -- Grab the signature\n\n            try:\n                sig = documenter.format_signature(show_annotation=False)\n            except TypeError:\n                # the documenter does not support ``show_annotation`` option\n                sig = documenter.format_signature()\n\n            if not sig:\n                sig = ''\n            else:\n                max_chars = max(10, max_item_chars - len(display_name))\n                sig = mangle_signature(sig, max_chars=max_chars)\n\n            # -- Grab the summary\n\n            documenter.add_content(None)\n            summary = extract_summary(self.bridge.result.data[:], self.state.document)\n\n            items.append((display_name, sig, summary, real_name))\n\n        return items\n\n    def get_table(self, items: List[Tuple[str, str, str, str]]) -> List[Node]:\n        \"\"\"Generate a proper list of table nodes for autosummary:: directive.\n\n        *items* is a list produced by :meth:`get_items`.\n        \"\"\"\n        table_spec = addnodes.tabular_col_spec()\n        table_spec['spec'] = r'\\X{1}{2}\\X{1}{2}'\n\n        table = autosummary_table('')\n        real_table = nodes.table('', classes=['longtable'])\n        table.append(real_table)\n        group = nodes.tgroup('', cols=2)\n        real_table.append(group)\n        group.append(nodes.colspec('', colwidth=10))\n        group.append(nodes.colspec('', colwidth=90))\n        body = nodes.tbody('')\n        group.append(body)\n\n        def append_row(*column_texts: str) -> None:\n            row = nodes.row('')\n            source, line = self.state_machine.get_source_and_line()\n            for text in column_texts:\n                node = nodes.paragraph('')\n                vl = StringList()\n                vl.append(text, '%s:%d:<autosummary>' % (source, line))\n                with switch_source_input(self.state, vl):\n                    self.state.nested_parse(vl, 0, node)\n                    try:\n                        if isinstance(node[0], nodes.paragraph):\n                            node = node[0]\n                    except IndexError:\n                        pass\n                    row.append(nodes.entry('', node))\n            body.append(row)\n\n        for name, sig, summary, real_name in items:\n            qualifier = 'obj'\n            if 'nosignatures' not in self.options:\n                col1 = ':%s:`%s <%s>`\\\\ %s' % (qualifier, name, real_name, rst.escape(sig))\n            else:\n                col1 = ':%s:`%s <%s>`' % (qualifier, name, real_name)\n            col2 = summary\n            append_row(col1, col2)\n\n        return [table_spec, table]\n\n    def warn(self, msg: str) -> None:\n        warnings.warn('Autosummary.warn() is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        logger.warning(msg)\n\n    @property\n    def genopt(self) -> Options:\n        warnings.warn('Autosummary.genopt is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.genopt\n\n    @property\n    def warnings(self) -> List[Node]:\n        warnings.warn('Autosummary.warnings is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return []\n\n    @property\n    def result(self) -> StringList:\n        warnings.warn('Autosummary.result is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.result\n\n\ndef strip_arg_typehint(s: str) -> str:\n    \"\"\"Strip a type hint from argument definition.\"\"\"\n    return s.split(':')[0].strip()\n\n\ndef mangle_signature(sig: str, max_chars: int = 30) -> str:\n    \"\"\"Reformat a function signature to a more compact form.\"\"\"\n    # Strip return type annotation\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}, {"response": "Based on the issue statement, the problem lies in the handling of the `members` variable when generating autosummary content for a module. Specifically, the `members` variable contains imported members even if the `autosummary_imported_members` option is set to `False`.\n\nTo fix this issue, we need to modify the function `generate_autosummary_content` in `sphinx/ext/autosummary/generate.py` to filter out imported members from the `members` variable if `autosummary_imported_members` is `False`.\n\nHere are the necessary changes:\n\n```python\n### sphinx/ext/autosummary/generate.py\n<<<<<<< SEARCH\n        ns['members'] = dir(obj)\n=======\n        if imported_members:\n            ns['members'] = dir(obj)\n        else:\n            ns['members'] = [m for m in dir(obj) if not (hasattr(obj, m) and hasattr(getattr(obj, m), '__module__') and getattr(obj, m).__module__ != obj.__name__)]\n>>>>>>> REPLACE\n```\n\nThis code change checks whether `imported_members` is `True` or `False`. If `True`, it includes all members using `dir(obj)`. If `False`, it filters out members that are imported from other modules.", "usage": {"completion_tokens": 0, "prompt_tokens": 0}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nautosummary: The members variable for module template contains imported members\n**Describe the bug**\r\nautosummary: The members variable for module template contains imported members even if autosummary_imported_members is False.\r\n\r\n**To Reproduce**\r\n\r\n```\r\n# _templates/autosummary/module.rst\r\n{{ fullname | escape | underline }}\r\n\r\n.. automodule:: {{ fullname }}\r\n\r\n   .. autosummary::\r\n   {% for item in members %}\r\n      {{ item }}\r\n   {%- endfor %}\r\n\r\n```\r\n```\r\n# example.py\r\nimport os\r\n```\r\n```\r\n# index.rst\r\n.. autosummary::\r\n   :toctree: generated\r\n\r\n   example\r\n```\r\n```\r\n# conf.py\r\nautosummary_generate = True\r\nautosummary_imported_members = False\r\n```\r\n\r\nAs a result, I got following output:\r\n```\r\n# generated/example.rst\r\nexample\r\n=======\r\n\r\n.. automodule:: example\r\n\r\n   .. autosummary::\r\n\r\n      __builtins__\r\n      __cached__\r\n      __doc__\r\n      __file__\r\n      __loader__\r\n      __name__\r\n      __package__\r\n      __spec__\r\n      os\r\n```\r\n\r\n**Expected behavior**\r\nThe template variable `members` should not contain imported members when `autosummary_imported_members` is False.\r\n\r\n**Your project**\r\nNo\r\n\r\n**Screenshots**\r\nNo\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.8.2\r\n- Sphinx version: 3.1.0dev\r\n- Sphinx extensions:  sphinx.ext.autosummary\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\r\n\n\n--- END ISSUE ---\n\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### sphinx/ext/autosummary/generate.py\n...\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n...\n\n\n### sphinx/ext/autosummary/__init__.py\n...\n               if cls.can_document_member(obj, '', False, parent_doc)]\n    if classes:\n        classes.sort(key=lambda cls: cls.priority)\n        return classes[-1]\n    else:\n        return DataDocumenter\n\n\n# -- .. autosummary:: ----------------------------------------------------------\n\nclass Autosummary(SphinxDirective):\n    \"\"\"\n    Pretty table containing short signatures and summaries of functions etc.\n\n    autosummary can also optionally generate a hidden toctree:: node.\n    \"\"\"\n\n    required_arguments = 0\n    optional_arguments = 0\n    final_argument_whitespace = False\n    has_content = True\n    option_spec = {\n        'caption': directives.unchanged_required,\n        'toctree': directives.unchanged,\n        'nosignatures': directives.flag,\n        'recursive': directives.flag,\n        'template': directives.unchanged,\n    }\n\n    def run(self) -> List[Node]:\n        self.bridge = DocumenterBridge(self.env, self.state.document.reporter,\n                                       Options(), self.lineno, self.state)\n\n        names = [x.strip().split()[0] for x in self.content\n                 if x.strip() and re.search(r'^[~a-zA-Z_]', x.strip()[0])]\n        items = self.get_items(names)\n        nodes = self.get_table(items)\n\n        if 'toctree' in self.options:\n            dirname = posixpath.dirname(self.env.docname)\n\n            tree_prefix = self.options['toctree'].strip()\n            docnames = []\n            excluded = Matcher(self.config.exclude_patterns)\n            for name, sig, summary, real_name in items:\n                docname = posixpath.join(tree_prefix, real_name)\n                docname = posixpath.normpath(posixpath.join(dirname, docname))\n                if docname not in self.env.found_docs:\n                    location = self.state_machine.get_source_and_line(self.lineno)\n                    if excluded(self.env.doc2path(docname, None)):\n                        msg = __('autosummary references excluded document %r. Ignored.')\n                    else:\n                        msg = __('autosummary: stub file not found %r. '\n                                 'Check your autosummary_generate setting.')\n\n                    logger.warning(msg, real_name, location=location)\n                    continue\n\n                docnames.append(docname)\n\n            if docnames:\n                tocnode = addnodes.toctree()\n                tocnode['includefiles'] = docnames\n                tocnode['entries'] = [(None, docn) for docn in docnames]\n                tocnode['maxdepth'] = -1\n                tocnode['glob'] = None\n                tocnode['caption'] = self.options.get('caption')\n\n                nodes.append(autosummary_toc('', '', tocnode))\n\n        if 'toctree' not in self.options and 'caption' in self.options:\n            logger.warning(__('A captioned autosummary requires :toctree: option. ignored.'),\n                           location=nodes[-1])\n\n        return nodes\n\n    def get_items(self, names: List[str]) -> List[Tuple[str, str, str, str]]:\n        \"\"\"Try to import the given names, and return a list of\n        ``[(name, signature, summary_string, real_name), ...]``.\n        \"\"\"\n        prefixes = get_import_prefixes_from_env(self.env)\n\n        items = []  # type: List[Tuple[str, str, str, str]]\n\n        max_item_chars = 50\n\n        for name in names:\n            display_name = name\n            if name.startswith('~'):\n                name = name[1:]\n                display_name = name.split('.')[-1]\n\n            try:\n                with mock(self.config.autosummary_mock_imports):\n                    real_name, obj, parent, modname = import_by_name(name, prefixes=prefixes)\n            except ImportError:\n                logger.warning(__('autosummary: failed to import %s'), name)\n                continue\n\n            self.bridge.result = StringList()  # initialize for each documenter\n            full_name = real_name\n            if not isinstance(obj, ModuleType):\n                # give explicitly separated module name, so that members\n                # of inner classes can be documented\n                full_name = modname + '::' + full_name[len(modname) + 1:]\n            # NB. using full_name here is important, since Documenters\n            #     handle module prefixes slightly differently\n            doccls = get_documenter(self.env.app, obj, parent)\n            documenter = doccls(self.bridge, full_name)\n            if not documenter.parse_name():\n                logger.warning(__('failed to parse name %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if not documenter.import_object():\n                logger.warning(__('failed to import object %s'), real_name)\n                items.append((display_name, '', '', real_name))\n                continue\n            if documenter.options.members and not documenter.check_module():\n                continue\n\n            # try to also get a source code analyzer for attribute docs\n            try:\n                documenter.analyzer = ModuleAnalyzer.for_module(\n                    documenter.get_real_modname())\n                # parse right now, to get PycodeErrors on parsing (results will\n                # be cached anyway)\n                documenter.analyzer.find_attr_docs()\n            except PycodeError as err:\n                logger.debug('[autodoc] module analyzer failed: %s', err)\n                # no source file -- e.g. for builtin and C modules\n                documenter.analyzer = None\n\n            # -- Grab the signature\n\n            try:\n                sig = documenter.format_signature(show_annotation=False)\n            except TypeError:\n                # the documenter does not support ``show_annotation`` option\n                sig = documenter.format_signature()\n\n            if not sig:\n                sig = ''\n            else:\n                max_chars = max(10, max_item_chars - len(display_name))\n                sig = mangle_signature(sig, max_chars=max_chars)\n\n            # -- Grab the summary\n\n            documenter.add_content(None)\n            summary = extract_summary(self.bridge.result.data[:], self.state.document)\n\n            items.append((display_name, sig, summary, real_name))\n\n        return items\n\n    def get_table(self, items: List[Tuple[str, str, str, str]]) -> List[Node]:\n        \"\"\"Generate a proper list of table nodes for autosummary:: directive.\n\n        *items* is a list produced by :meth:`get_items`.\n        \"\"\"\n        table_spec = addnodes.tabular_col_spec()\n        table_spec['spec'] = r'\\X{1}{2}\\X{1}{2}'\n\n        table = autosummary_table('')\n        real_table = nodes.table('', classes=['longtable'])\n        table.append(real_table)\n        group = nodes.tgroup('', cols=2)\n        real_table.append(group)\n        group.append(nodes.colspec('', colwidth=10))\n        group.append(nodes.colspec('', colwidth=90))\n        body = nodes.tbody('')\n        group.append(body)\n\n        def append_row(*column_texts: str) -> None:\n            row = nodes.row('')\n            source, line = self.state_machine.get_source_and_line()\n            for text in column_texts:\n                node = nodes.paragraph('')\n                vl = StringList()\n                vl.append(text, '%s:%d:<autosummary>' % (source, line))\n                with switch_source_input(self.state, vl):\n                    self.state.nested_parse(vl, 0, node)\n                    try:\n                        if isinstance(node[0], nodes.paragraph):\n                            node = node[0]\n                    except IndexError:\n                        pass\n                    row.append(nodes.entry('', node))\n            body.append(row)\n\n        for name, sig, summary, real_name in items:\n            qualifier = 'obj'\n            if 'nosignatures' not in self.options:\n                col1 = ':%s:`%s <%s>`\\\\ %s' % (qualifier, name, real_name, rst.escape(sig))\n            else:\n                col1 = ':%s:`%s <%s>`' % (qualifier, name, real_name)\n            col2 = summary\n            append_row(col1, col2)\n\n        return [table_spec, table]\n\n    def warn(self, msg: str) -> None:\n        warnings.warn('Autosummary.warn() is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        logger.warning(msg)\n\n    @property\n    def genopt(self) -> Options:\n        warnings.warn('Autosummary.genopt is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.genopt\n\n    @property\n    def warnings(self) -> List[Node]:\n        warnings.warn('Autosummary.warnings is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return []\n\n    @property\n    def result(self) -> StringList:\n        warnings.warn('Autosummary.result is deprecated',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        return self.bridge.result\n\n\ndef strip_arg_typehint(s: str) -> str:\n    \"\"\"Strip a type hint from argument definition.\"\"\"\n    return s.split(':')[0].strip()\n\n\ndef mangle_signature(sig: str, max_chars: int = 30) -> str:\n    \"\"\"Reformat a function signature to a more compact form.\"\"\"\n    # Strip return type annotation\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}], "prev_content": [["\"\"\"\n    sphinx.ext.autosummary.generate\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Usable as a library or script to generate automatic RST source files for\n    items referred to in autosummary:: directives.\n\n    Each generated RST file contains a single auto*:: directive which\n    extracts the docstring of the referred item.\n\n    Example Makefile rule::\n\n       generate:\n               sphinx-autogen -o source/generated source/*.rst\n\n    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nimport argparse\nimport locale\nimport os\nimport pkgutil\nimport pydoc\nimport re\nimport sys\nimport warnings\nfrom gettext import NullTranslations\nfrom os import path\nfrom typing import Any, Callable, Dict, List, NamedTuple, Set, Tuple, Union\n\nfrom jinja2 import TemplateNotFound\nfrom jinja2.sandbox import SandboxedEnvironment\n\nimport sphinx.locale\nfrom sphinx import __display_version__\nfrom sphinx import package_dir\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.deprecation import RemovedInSphinx40Warning, RemovedInSphinx50Warning\nfrom sphinx.ext.autodoc import Documenter\nfrom sphinx.ext.autosummary import import_by_name, get_documenter\nfrom sphinx.locale import __\nfrom sphinx.pycode import ModuleAnalyzer, PycodeError\nfrom sphinx.registry import SphinxComponentRegistry\nfrom sphinx.util import logging\nfrom sphinx.util import rst\nfrom sphinx.util import split_full_qualified_name\nfrom sphinx.util.inspect import safe_getattr\nfrom sphinx.util.osutil import ensuredir\nfrom sphinx.util.template import SphinxTemplateLoader\n\nif False:\n    # For type annotation\n    from typing import Type  # for python3.5.1\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass DummyApplication:\n    \"\"\"Dummy Application class for sphinx-autogen command.\"\"\"\n\n    def __init__(self, translator: NullTranslations) -> None:\n        self.config = Config()\n        self.registry = SphinxComponentRegistry()\n        self.messagelog = []  # type: List[str]\n        self.srcdir = \"/\"\n        self.translator = translator\n        self.verbosity = 0\n        self._warncount = 0\n        self.warningiserror = False\n\n        self.config.add('autosummary_context', {}, True, None)\n        self.config.init_values()\n\n    def emit_firstresult(self, *args: Any) -> None:\n        pass\n\n\nAutosummaryEntry = NamedTuple('AutosummaryEntry', [('name', str),\n                                                   ('path', str),\n                                                   ('template', str),\n                                                   ('recursive', bool)])\n\n\ndef setup_documenters(app: Any) -> None:\n    from sphinx.ext.autodoc import (\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    )\n    documenters = [\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    ]  # type: List[Type[Documenter]]\n    for documenter in documenters:\n        app.registry.add_documenter(documenter.objtype, documenter)\n\n\ndef _simple_info(msg: str) -> None:\n    print(msg)\n\n\ndef _simple_warn(msg: str) -> None:\n    print('WARNING: ' + msg, file=sys.stderr)\n\n\ndef _underline(title: str, line: str = '=') -> str:\n    if '\\n' in title:\n        raise ValueError('Can only underline single lines')\n    return title + '\\n' + line * len(title)\n\n\nclass AutosummaryRenderer:\n    \"\"\"A helper class for rendering.\"\"\"\n\n    def __init__(self, app: Union[Builder, Sphinx], template_dir: str = None) -> None:\n        if isinstance(app, Builder):\n            warnings.warn('The first argument for AutosummaryRenderer has been '\n                          'changed to Sphinx object',\n                          RemovedInSphinx50Warning, stacklevel=2)\n        if template_dir:\n            warnings.warn('template_dir argument for AutosummaryRenderer is deprecated.',\n                          RemovedInSphinx50Warning, stacklevel=2)\n\n        system_templates_path = [os.path.join(package_dir, 'ext', 'autosummary', 'templates')]\n        loader = SphinxTemplateLoader(app.srcdir, app.config.templates_path,\n                                      system_templates_path)\n\n        self.env = SandboxedEnvironment(loader=loader)\n        self.env.filters['escape'] = rst.escape\n        self.env.filters['e'] = rst.escape\n        self.env.filters['underline'] = _underline\n\n        if isinstance(app, (Sphinx, DummyApplication)):\n            if app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.translator)  # type: ignore\n        elif isinstance(app, Builder):\n            if app.app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.app.translator)  # type: ignore\n\n    def exists(self, template_name: str) -> bool:\n        \"\"\"Check if template file exists.\"\"\"\n        warnings.warn('AutosummaryRenderer.exists() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n        try:\n            self.env.get_template(template_name)\n            return True\n        except TemplateNotFound:\n            return False\n\n    def render(self, template_name: str, context: Dict) -> str:\n        \"\"\"Render a template file.\"\"\"\n        try:\n            template = self.env.get_template(template_name)\n        except TemplateNotFound:\n            try:\n                # objtype is given as template_name\n                template = self.env.get_template('autosummary/%s.rst' % template_name)\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _info = info\n    else:\n        _info = logger.info\n\n    if warn:\n        warnings.warn('warn argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _warn = warn\n    else:\n        _warn = logger.warning\n\n    if builder:\n        warnings.warn('builder argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    if template_dir:\n        warnings.warn('template_dir argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    showed_sources = list(sorted(sources))\n    if len(showed_sources) > 20:\n        showed_sources = showed_sources[:10] + ['...'] + showed_sources[-10:]\n    _info(__('[autosummary] generating autosummary for: %s') %\n          ', '.join(showed_sources))\n\n    if output_dir:\n        _info(__('[autosummary] writing to %s') % output_dir)\n\n    if base_path is not None:\n        sources = [os.path.join(base_path, filename) for filename in sources]\n\n    template = AutosummaryRenderer(app)\n\n    # read\n    items = find_autosummary_in_files(sources)\n\n    # keep track of new files\n    new_files = []\n\n    # write\n    for entry in sorted(set(items), key=str):\n        if entry.path is None:\n            # The corresponding autosummary:: directive did not have\n            # a :toctree: option\n            continue\n\n        path = output_dir or os.path.abspath(entry.path)\n        ensuredir(path)\n\n        try:\n            name, obj, parent, mod_name = import_by_name(entry.name)\n        except ImportError as e:\n            _warn(__('[autosummary] failed to import %r: %s') % (entry.name, e))\n            continue\n\n        context = {}\n        if app:\n            context.update(app.config.autosummary_context)\n\n        content = generate_autosummary_content(name, obj, parent, template, entry.template,\n                                               imported_members, app, entry.recursive, context)\n\n        filename = os.path.join(path, name + suffix)\n        if os.path.isfile(filename):\n            with open(filename) as f:\n                old_content = f.read()\n\n            if content == old_content:\n                continue\n            elif overwrite:  # content has changed\n                with open(filename, 'w') as f:\n                    f.write(content)\n                new_files.append(filename)\n        else:\n            with open(filename, 'w') as f:\n                f.write(content)\n            new_files.append(filename)\n\n    # descend recursively to new files\n    if new_files:\n        generate_autosummary_docs(new_files, output_dir=output_dir,\n                                  suffix=suffix, warn=warn, info=info,\n                                  base_path=base_path,\n                                  imported_members=imported_members, app=app,\n                                  overwrite=overwrite)\n\n\n# -- Finding documented entries in files ---------------------------------------\n\ndef find_autosummary_in_files(filenames: List[str]) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in source/*.rst.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    documented = []  # type: List[AutosummaryEntry]\n    for filename in filenames:\n        with open(filename, encoding='utf-8', errors='ignore') as f:\n            lines = f.read().splitlines()\n            documented.extend(find_autosummary_in_lines(lines, filename=filename))\n    return documented\n\n\ndef find_autosummary_in_docstring(name: str, module: str = None, filename: str = None\n                                  ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in the given object's docstring.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    if module:\n        warnings.warn('module argument for find_autosummary_in_docstring() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    try:\n        real_name, obj, parent, modname = import_by_name(name)\n        lines = pydoc.getdoc(obj).splitlines()\n        return find_autosummary_in_lines(lines, module=name, filename=filename)\n    except AttributeError:\n        pass\n    except ImportError as e:\n        print(\"Failed to import '%s': %s\" % (name, e))\n    except SystemExit:\n        print(\"Failed to import '%s'; the module executes module level \"\n              \"statement and it might call sys.exit().\" % name)\n    return []\n\n\ndef find_autosummary_in_lines(lines: List[str], module: str = None, filename: str = None\n                              ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items appear in autosummary:: directives in the\n    given lines.\n\n    Returns a list of (name, toctree, template) where *name* is a name\n    of an object and *toctree* the :toctree: path of the corresponding\n    autosummary directive (relative to the root of the file name), and\n    *template* the value of the :template: option. *toctree* and\n    *template* ``None`` if the directive does not have the\n    corresponding options set.\n    \"\"\"\n    autosummary_re = re.compile(r'^(\\s*)\\.\\.\\s+autosummary::\\s*')\n    automodule_re = re.compile(\n        r'^\\s*\\.\\.\\s+automodule::\\s*([A-Za-z0-9_.]+)\\s*$')\n    module_re = re.compile(\n        r'^\\s*\\.\\.\\s+(current)?module::\\s*([a-zA-Z0-9_.]+)\\s*$')\n    autosummary_item_re = re.compile(r'^\\s+(~?[_a-zA-Z][a-zA-Z0-9_.]*)\\s*.*?')\n    recursive_arg_re = re.compile(r'^\\s+:recursive:\\s*$')\n    toctree_arg_re = re.compile(r'^\\s+:toctree:\\s*(.*?)\\s*$')\n    template_arg_re = re.compile(r'^\\s+:template:\\s*(.*?)\\s*$')\n\n    documented = []  # type: List[AutosummaryEntry]\n\n    recursive = False\n    toctree = None  # type: str\n    template = None\n    current_module = module\n    in_autosummary = False\n    base_indent = \"\"\n\n    for line in lines:\n        if in_autosummary:\n            m = recursive_arg_re.match(line)\n            if m:\n                recursive = True\n                continue\n\n            m = toctree_arg_re.match(line)\n            if m:\n                toctree = m.group(1)\n                if filename:\n                    toctree = os.path.join(os.path.dirname(filename),\n                                           toctree)\n                continue\n\n            m = template_arg_re.match(line)\n            if m:\n                template = m.group(1).strip()\n                continue\n\n            if line.strip().startswith(':'):\n                continue  # skip options\n\n            m = autosummary_item_re.match(line)\n            if m:\n                name = m.group(1).strip()\n                if name.startswith('~'):\n                    name = name[1:]\n                if current_module and \\\n                   not name.startswith(current_module + '.'):\n                    name = \"%s.%s\" % (current_module, name)\n                documented.append(AutosummaryEntry(name, toctree, template, recursive))\n                continue\n\n            if not line.strip() or line.startswith(base_indent + \" \"):\n                continue\n\n            in_autosummary = False\n\n        m = autosummary_re.match(line)\n        if m:\n            in_autosummary = True\n            base_indent = m.group(1)\n            recursive = False\n            toctree = None\n            template = None\n            continue\n\n        m = automodule_re.search(line)\n        if m:\n            current_module = m.group(1).strip()\n            # recurse into the automodule docstring\n            documented.extend(find_autosummary_in_docstring(\n                current_module, filename=filename))\n            continue\n\n        m = module_re.match(line)\n        if m:\n            current_module = m.group(2)\n            continue\n\n    return documented\n\n\ndef get_parser() -> argparse.ArgumentParser:\n    parser = argparse.ArgumentParser(\n        usage='%(prog)s [OPTIONS] <SOURCE_FILE>...',\n        epilog=__('For more information, visit <http://sphinx-doc.org/>.'),\n        description=__(\"\"\"\nGenerate ReStructuredText using autosummary directives.\n\nsphinx-autogen is a frontend to sphinx.ext.autosummary.generate. It generates\nthe reStructuredText files from the autosummary directives contained in the\ngiven input files.\n\nThe format of the autosummary directive is documented in the\n``sphinx.ext.autosummary`` Python module and can be read using::\n\n  pydoc sphinx.ext.autosummary\n\"\"\"))\n\n    parser.add_argument('--version', action='version', dest='show_version',\n                        version='%%(prog)s %s' % __display_version__)\n\n    parser.add_argument('source_file', nargs='+',\n                        help=__('source files to generate rST files for'))\n\n    parser.add_argument('-o', '--output-dir', action='store',\n                        dest='output_dir',\n                        help=__('directory to place all output in'))\n    parser.add_argument('-s', '--suffix', action='store', dest='suffix',\n                        default='rst',\n                        help=__('default suffix for files (default: '\n                                '%(default)s)'))\n    parser.add_argument('-t', '--templates', action='store', dest='templates',\n                        default=None,\n                        help=__('custom template directory (default: '\n                                '%(default)s)'))\n    parser.add_argument('-i', '--imported-members', action='store_true',\n                        dest='imported_members', default=False,\n                        help=__('document imported members (default: '\n                                '%(default)s)'))\n\n    return parser\n\n\ndef main(argv: List[str] = sys.argv[1:]) -> None:\n    sphinx.locale.setlocale(locale.LC_ALL, '')\n    sphinx.locale.init_console(os.path.join(package_dir, 'locale'), 'sphinx')\n    translator, _ = sphinx.locale.init([], None)\n\n    app = DummyApplication(translator)\n    logging.setup(app, sys.stdout, sys.stderr)  # type: ignore\n    setup_documenters(app)\n    args = get_parser().parse_args(argv)\n\n    if args.templates:\n        app.config.templates_path.append(path.abspath(args.templates))\n\n    generate_autosummary_docs(args.source_file, args.output_dir,\n                              '.' + args.suffix,\n                              imported_members=args.imported_members,\n                              app=app)\n\n\nif __name__ == '__main__':\n    main()", "\"\"\"\n    sphinx.ext.autosummary.generate\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Usable as a library or script to generate automatic RST source files for\n    items referred to in autosummary:: directives.\n\n    Each generated RST file contains a single auto*:: directive which\n    extracts the docstring of the referred item.\n\n    Example Makefile rule::\n\n       generate:\n               sphinx-autogen -o source/generated source/*.rst\n\n    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nimport argparse\nimport locale\nimport os\nimport pkgutil\nimport pydoc\nimport re\nimport sys\nimport warnings\nfrom gettext import NullTranslations\nfrom os import path\nfrom typing import Any, Callable, Dict, List, NamedTuple, Set, Tuple, Union\n\nfrom jinja2 import TemplateNotFound\nfrom jinja2.sandbox import SandboxedEnvironment\n\nimport sphinx.locale\nfrom sphinx import __display_version__\nfrom sphinx import package_dir\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.deprecation import RemovedInSphinx40Warning, RemovedInSphinx50Warning\nfrom sphinx.ext.autodoc import Documenter\nfrom sphinx.ext.autosummary import import_by_name, get_documenter\nfrom sphinx.locale import __\nfrom sphinx.pycode import ModuleAnalyzer, PycodeError\nfrom sphinx.registry import SphinxComponentRegistry\nfrom sphinx.util import logging\nfrom sphinx.util import rst\nfrom sphinx.util import split_full_qualified_name\nfrom sphinx.util.inspect import safe_getattr\nfrom sphinx.util.osutil import ensuredir\nfrom sphinx.util.template import SphinxTemplateLoader\n\nif False:\n    # For type annotation\n    from typing import Type  # for python3.5.1\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass DummyApplication:\n    \"\"\"Dummy Application class for sphinx-autogen command.\"\"\"\n\n    def __init__(self, translator: NullTranslations) -> None:\n        self.config = Config()\n        self.registry = SphinxComponentRegistry()\n        self.messagelog = []  # type: List[str]\n        self.srcdir = \"/\"\n        self.translator = translator\n        self.verbosity = 0\n        self._warncount = 0\n        self.warningiserror = False\n\n        self.config.add('autosummary_context', {}, True, None)\n        self.config.init_values()\n\n    def emit_firstresult(self, *args: Any) -> None:\n        pass\n\n\nAutosummaryEntry = NamedTuple('AutosummaryEntry', [('name', str),\n                                                   ('path', str),\n                                                   ('template', str),\n                                                   ('recursive', bool)])\n\n\ndef setup_documenters(app: Any) -> None:\n    from sphinx.ext.autodoc import (\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    )\n    documenters = [\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    ]  # type: List[Type[Documenter]]\n    for documenter in documenters:\n        app.registry.add_documenter(documenter.objtype, documenter)\n\n\ndef _simple_info(msg: str) -> None:\n    print(msg)\n\n\ndef _simple_warn(msg: str) -> None:\n    print('WARNING: ' + msg, file=sys.stderr)\n\n\ndef _underline(title: str, line: str = '=') -> str:\n    if '\\n' in title:\n        raise ValueError('Can only underline single lines')\n    return title + '\\n' + line * len(title)\n\n\nclass AutosummaryRenderer:\n    \"\"\"A helper class for rendering.\"\"\"\n\n    def __init__(self, app: Union[Builder, Sphinx], template_dir: str = None) -> None:\n        if isinstance(app, Builder):\n            warnings.warn('The first argument for AutosummaryRenderer has been '\n                          'changed to Sphinx object',\n                          RemovedInSphinx50Warning, stacklevel=2)\n        if template_dir:\n            warnings.warn('template_dir argument for AutosummaryRenderer is deprecated.',\n                          RemovedInSphinx50Warning, stacklevel=2)\n\n        system_templates_path = [os.path.join(package_dir, 'ext', 'autosummary', 'templates')]\n        loader = SphinxTemplateLoader(app.srcdir, app.config.templates_path,\n                                      system_templates_path)\n\n        self.env = SandboxedEnvironment(loader=loader)\n        self.env.filters['escape'] = rst.escape\n        self.env.filters['e'] = rst.escape\n        self.env.filters['underline'] = _underline\n\n        if isinstance(app, (Sphinx, DummyApplication)):\n            if app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.translator)  # type: ignore\n        elif isinstance(app, Builder):\n            if app.app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.app.translator)  # type: ignore\n\n    def exists(self, template_name: str) -> bool:\n        \"\"\"Check if template file exists.\"\"\"\n        warnings.warn('AutosummaryRenderer.exists() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n        try:\n            self.env.get_template(template_name)\n            return True\n        except TemplateNotFound:\n            return False\n\n    def render(self, template_name: str, context: Dict) -> str:\n        \"\"\"Render a template file.\"\"\"\n        try:\n            template = self.env.get_template(template_name)\n        except TemplateNotFound:\n            try:\n                # objtype is given as template_name\n                template = self.env.get_template('autosummary/%s.rst' % template_name)\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _info = info\n    else:\n        _info = logger.info\n\n    if warn:\n        warnings.warn('warn argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _warn = warn\n    else:\n        _warn = logger.warning\n\n    if builder:\n        warnings.warn('builder argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    if template_dir:\n        warnings.warn('template_dir argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    showed_sources = list(sorted(sources))\n    if len(showed_sources) > 20:\n        showed_sources = showed_sources[:10] + ['...'] + showed_sources[-10:]\n    _info(__('[autosummary] generating autosummary for: %s') %\n          ', '.join(showed_sources))\n\n    if output_dir:\n        _info(__('[autosummary] writing to %s') % output_dir)\n\n    if base_path is not None:\n        sources = [os.path.join(base_path, filename) for filename in sources]\n\n    template = AutosummaryRenderer(app)\n\n    # read\n    items = find_autosummary_in_files(sources)\n\n    # keep track of new files\n    new_files = []\n\n    # write\n    for entry in sorted(set(items), key=str):\n        if entry.path is None:\n            # The corresponding autosummary:: directive did not have\n            # a :toctree: option\n            continue\n\n        path = output_dir or os.path.abspath(entry.path)\n        ensuredir(path)\n\n        try:\n            name, obj, parent, mod_name = import_by_name(entry.name)\n        except ImportError as e:\n            _warn(__('[autosummary] failed to import %r: %s') % (entry.name, e))\n            continue\n\n        context = {}\n        if app:\n            context.update(app.config.autosummary_context)\n\n        content = generate_autosummary_content(name, obj, parent, template, entry.template,\n                                               imported_members, app, entry.recursive, context)\n\n        filename = os.path.join(path, name + suffix)\n        if os.path.isfile(filename):\n            with open(filename) as f:\n                old_content = f.read()\n\n            if content == old_content:\n                continue\n            elif overwrite:  # content has changed\n                with open(filename, 'w') as f:\n                    f.write(content)\n                new_files.append(filename)\n        else:\n            with open(filename, 'w') as f:\n                f.write(content)\n            new_files.append(filename)\n\n    # descend recursively to new files\n    if new_files:\n        generate_autosummary_docs(new_files, output_dir=output_dir,\n                                  suffix=suffix, warn=warn, info=info,\n                                  base_path=base_path,\n                                  imported_members=imported_members, app=app,\n                                  overwrite=overwrite)\n\n\n# -- Finding documented entries in files ---------------------------------------\n\ndef find_autosummary_in_files(filenames: List[str]) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in source/*.rst.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    documented = []  # type: List[AutosummaryEntry]\n    for filename in filenames:\n        with open(filename, encoding='utf-8', errors='ignore') as f:\n            lines = f.read().splitlines()\n            documented.extend(find_autosummary_in_lines(lines, filename=filename))\n    return documented\n\n\ndef find_autosummary_in_docstring(name: str, module: str = None, filename: str = None\n                                  ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in the given object's docstring.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    if module:\n        warnings.warn('module argument for find_autosummary_in_docstring() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    try:\n        real_name, obj, parent, modname = import_by_name(name)\n        lines = pydoc.getdoc(obj).splitlines()\n        return find_autosummary_in_lines(lines, module=name, filename=filename)\n    except AttributeError:\n        pass\n    except ImportError as e:\n        print(\"Failed to import '%s': %s\" % (name, e))\n    except SystemExit:\n        print(\"Failed to import '%s'; the module executes module level \"\n              \"statement and it might call sys.exit().\" % name)\n    return []\n\n\ndef find_autosummary_in_lines(lines: List[str], module: str = None, filename: str = None\n                              ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items appear in autosummary:: directives in the\n    given lines.\n\n    Returns a list of (name, toctree, template) where *name* is a name\n    of an object and *toctree* the :toctree: path of the corresponding\n    autosummary directive (relative to the root of the file name), and\n    *template* the value of the :template: option. *toctree* and\n    *template* ``None`` if the directive does not have the\n    corresponding options set.\n    \"\"\"\n    autosummary_re = re.compile(r'^(\\s*)\\.\\.\\s+autosummary::\\s*')\n    automodule_re = re.compile(\n        r'^\\s*\\.\\.\\s+automodule::\\s*([A-Za-z0-9_.]+)\\s*$')\n    module_re = re.compile(\n        r'^\\s*\\.\\.\\s+(current)?module::\\s*([a-zA-Z0-9_.]+)\\s*$')\n    autosummary_item_re = re.compile(r'^\\s+(~?[_a-zA-Z][a-zA-Z0-9_.]*)\\s*.*?')\n    recursive_arg_re = re.compile(r'^\\s+:recursive:\\s*$')\n    toctree_arg_re = re.compile(r'^\\s+:toctree:\\s*(.*?)\\s*$')\n    template_arg_re = re.compile(r'^\\s+:template:\\s*(.*?)\\s*$')\n\n    documented = []  # type: List[AutosummaryEntry]\n\n    recursive = False\n    toctree = None  # type: str\n    template = None\n    current_module = module\n    in_autosummary = False\n    base_indent = \"\"\n\n    for line in lines:\n        if in_autosummary:\n            m = recursive_arg_re.match(line)\n            if m:\n                recursive = True\n                continue\n\n            m = toctree_arg_re.match(line)\n            if m:\n                toctree = m.group(1)\n                if filename:\n                    toctree = os.path.join(os.path.dirname(filename),\n                                           toctree)\n                continue\n\n            m = template_arg_re.match(line)\n            if m:\n                template = m.group(1).strip()\n                continue\n\n            if line.strip().startswith(':'):\n                continue  # skip options\n\n            m = autosummary_item_re.match(line)\n            if m:\n                name = m.group(1).strip()\n                if name.startswith('~'):\n                    name = name[1:]\n                if current_module and \\\n                   not name.startswith(current_module + '.'):\n                    name = \"%s.%s\" % (current_module, name)\n                documented.append(AutosummaryEntry(name, toctree, template, recursive))\n                continue\n\n            if not line.strip() or line.startswith(base_indent + \" \"):\n                continue\n\n            in_autosummary = False\n\n        m = autosummary_re.match(line)\n        if m:\n            in_autosummary = True\n            base_indent = m.group(1)\n            recursive = False\n            toctree = None\n            template = None\n            continue\n\n        m = automodule_re.search(line)\n        if m:\n            current_module = m.group(1).strip()\n            # recurse into the automodule docstring\n            documented.extend(find_autosummary_in_docstring(\n                current_module, filename=filename))\n            continue\n\n        m = module_re.match(line)\n        if m:\n            current_module = m.group(2)\n            continue\n\n    return documented\n\n\ndef get_parser() -> argparse.ArgumentParser:\n    parser = argparse.ArgumentParser(\n        usage='%(prog)s [OPTIONS] <SOURCE_FILE>...',\n        epilog=__('For more information, visit <http://sphinx-doc.org/>.'),\n        description=__(\"\"\"\nGenerate ReStructuredText using autosummary directives.\n\nsphinx-autogen is a frontend to sphinx.ext.autosummary.generate. It generates\nthe reStructuredText files from the autosummary directives contained in the\ngiven input files.\n\nThe format of the autosummary directive is documented in the\n``sphinx.ext.autosummary`` Python module and can be read using::\n\n  pydoc sphinx.ext.autosummary\n\"\"\"))\n\n    parser.add_argument('--version', action='version', dest='show_version',\n                        version='%%(prog)s %s' % __display_version__)\n\n    parser.add_argument('source_file', nargs='+',\n                        help=__('source files to generate rST files for'))\n\n    parser.add_argument('-o', '--output-dir', action='store',\n                        dest='output_dir',\n                        help=__('directory to place all output in'))\n    parser.add_argument('-s', '--suffix', action='store', dest='suffix',\n                        default='rst',\n                        help=__('default suffix for files (default: '\n                                '%(default)s)'))\n    parser.add_argument('-t', '--templates', action='store', dest='templates',\n                        default=None,\n                        help=__('custom template directory (default: '\n                                '%(default)s)'))\n    parser.add_argument('-i', '--imported-members', action='store_true',\n                        dest='imported_members', default=False,\n                        help=__('document imported members (default: '\n                                '%(default)s)'))\n\n    return parser\n\n\ndef main(argv: List[str] = sys.argv[1:]) -> None:\n    sphinx.locale.setlocale(locale.LC_ALL, '')\n    sphinx.locale.init_console(os.path.join(package_dir, 'locale'), 'sphinx')\n    translator, _ = sphinx.locale.init([], None)\n\n    app = DummyApplication(translator)\n    logging.setup(app, sys.stdout, sys.stderr)  # type: ignore\n    setup_documenters(app)\n    args = get_parser().parse_args(argv)\n\n    if args.templates:\n        app.config.templates_path.append(path.abspath(args.templates))\n\n    generate_autosummary_docs(args.source_file, args.output_dir,\n                              '.' + args.suffix,\n                              imported_members=args.imported_members,\n                              app=app)\n\n\nif __name__ == '__main__':\n    main()", "\"\"\"\n    sphinx.ext.autosummary.generate\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Usable as a library or script to generate automatic RST source files for\n    items referred to in autosummary:: directives.\n\n    Each generated RST file contains a single auto*:: directive which\n    extracts the docstring of the referred item.\n\n    Example Makefile rule::\n\n       generate:\n               sphinx-autogen -o source/generated source/*.rst\n\n    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nimport argparse\nimport locale\nimport os\nimport pkgutil\nimport pydoc\nimport re\nimport sys\nimport warnings\nfrom gettext import NullTranslations\nfrom os import path\nfrom typing import Any, Callable, Dict, List, NamedTuple, Set, Tuple, Union\n\nfrom jinja2 import TemplateNotFound\nfrom jinja2.sandbox import SandboxedEnvironment\n\nimport sphinx.locale\nfrom sphinx import __display_version__\nfrom sphinx import package_dir\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.deprecation import RemovedInSphinx40Warning, RemovedInSphinx50Warning\nfrom sphinx.ext.autodoc import Documenter\nfrom sphinx.ext.autosummary import import_by_name, get_documenter\nfrom sphinx.locale import __\nfrom sphinx.pycode import ModuleAnalyzer, PycodeError\nfrom sphinx.registry import SphinxComponentRegistry\nfrom sphinx.util import logging\nfrom sphinx.util import rst\nfrom sphinx.util import split_full_qualified_name\nfrom sphinx.util.inspect import safe_getattr\nfrom sphinx.util.osutil import ensuredir\nfrom sphinx.util.template import SphinxTemplateLoader\n\nif False:\n    # For type annotation\n    from typing import Type  # for python3.5.1\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass DummyApplication:\n    \"\"\"Dummy Application class for sphinx-autogen command.\"\"\"\n\n    def __init__(self, translator: NullTranslations) -> None:\n        self.config = Config()\n        self.registry = SphinxComponentRegistry()\n        self.messagelog = []  # type: List[str]\n        self.srcdir = \"/\"\n        self.translator = translator\n        self.verbosity = 0\n        self._warncount = 0\n        self.warningiserror = False\n\n        self.config.add('autosummary_context', {}, True, None)\n        self.config.init_values()\n\n    def emit_firstresult(self, *args: Any) -> None:\n        pass\n\n\nAutosummaryEntry = NamedTuple('AutosummaryEntry', [('name', str),\n                                                   ('path', str),\n                                                   ('template', str),\n                                                   ('recursive', bool)])\n\n\ndef setup_documenters(app: Any) -> None:\n    from sphinx.ext.autodoc import (\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    )\n    documenters = [\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    ]  # type: List[Type[Documenter]]\n    for documenter in documenters:\n        app.registry.add_documenter(documenter.objtype, documenter)\n\n\ndef _simple_info(msg: str) -> None:\n    print(msg)\n\n\ndef _simple_warn(msg: str) -> None:\n    print('WARNING: ' + msg, file=sys.stderr)\n\n\ndef _underline(title: str, line: str = '=') -> str:\n    if '\\n' in title:\n        raise ValueError('Can only underline single lines')\n    return title + '\\n' + line * len(title)\n\n\nclass AutosummaryRenderer:\n    \"\"\"A helper class for rendering.\"\"\"\n\n    def __init__(self, app: Union[Builder, Sphinx], template_dir: str = None) -> None:\n        if isinstance(app, Builder):\n            warnings.warn('The first argument for AutosummaryRenderer has been '\n                          'changed to Sphinx object',\n                          RemovedInSphinx50Warning, stacklevel=2)\n        if template_dir:\n            warnings.warn('template_dir argument for AutosummaryRenderer is deprecated.',\n                          RemovedInSphinx50Warning, stacklevel=2)\n\n        system_templates_path = [os.path.join(package_dir, 'ext', 'autosummary', 'templates')]\n        loader = SphinxTemplateLoader(app.srcdir, app.config.templates_path,\n                                      system_templates_path)\n\n        self.env = SandboxedEnvironment(loader=loader)\n        self.env.filters['escape'] = rst.escape\n        self.env.filters['e'] = rst.escape\n        self.env.filters['underline'] = _underline\n\n        if isinstance(app, (Sphinx, DummyApplication)):\n            if app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.translator)  # type: ignore\n        elif isinstance(app, Builder):\n            if app.app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.app.translator)  # type: ignore\n\n    def exists(self, template_name: str) -> bool:\n        \"\"\"Check if template file exists.\"\"\"\n        warnings.warn('AutosummaryRenderer.exists() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n        try:\n            self.env.get_template(template_name)\n            return True\n        except TemplateNotFound:\n            return False\n\n    def render(self, template_name: str, context: Dict) -> str:\n        \"\"\"Render a template file.\"\"\"\n        try:\n            template = self.env.get_template(template_name)\n        except TemplateNotFound:\n            try:\n                # objtype is given as template_name\n                template = self.env.get_template('autosummary/%s.rst' % template_name)\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _info = info\n    else:\n        _info = logger.info\n\n    if warn:\n        warnings.warn('warn argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _warn = warn\n    else:\n        _warn = logger.warning\n\n    if builder:\n        warnings.warn('builder argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    if template_dir:\n        warnings.warn('template_dir argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    showed_sources = list(sorted(sources))\n    if len(showed_sources) > 20:\n        showed_sources = showed_sources[:10] + ['...'] + showed_sources[-10:]\n    _info(__('[autosummary] generating autosummary for: %s') %\n          ', '.join(showed_sources))\n\n    if output_dir:\n        _info(__('[autosummary] writing to %s') % output_dir)\n\n    if base_path is not None:\n        sources = [os.path.join(base_path, filename) for filename in sources]\n\n    template = AutosummaryRenderer(app)\n\n    # read\n    items = find_autosummary_in_files(sources)\n\n    # keep track of new files\n    new_files = []\n\n    # write\n    for entry in sorted(set(items), key=str):\n        if entry.path is None:\n            # The corresponding autosummary:: directive did not have\n            # a :toctree: option\n            continue\n\n        path = output_dir or os.path.abspath(entry.path)\n        ensuredir(path)\n\n        try:\n            name, obj, parent, mod_name = import_by_name(entry.name)\n        except ImportError as e:\n            _warn(__('[autosummary] failed to import %r: %s') % (entry.name, e))\n            continue\n\n        context = {}\n        if app:\n            context.update(app.config.autosummary_context)\n\n        content = generate_autosummary_content(name, obj, parent, template, entry.template,\n                                               imported_members, app, entry.recursive, context)\n\n        filename = os.path.join(path, name + suffix)\n        if os.path.isfile(filename):\n            with open(filename) as f:\n                old_content = f.read()\n\n            if content == old_content:\n                continue\n            elif overwrite:  # content has changed\n                with open(filename, 'w') as f:\n                    f.write(content)\n                new_files.append(filename)\n        else:\n            with open(filename, 'w') as f:\n                f.write(content)\n            new_files.append(filename)\n\n    # descend recursively to new files\n    if new_files:\n        generate_autosummary_docs(new_files, output_dir=output_dir,\n                                  suffix=suffix, warn=warn, info=info,\n                                  base_path=base_path,\n                                  imported_members=imported_members, app=app,\n                                  overwrite=overwrite)\n\n\n# -- Finding documented entries in files ---------------------------------------\n\ndef find_autosummary_in_files(filenames: List[str]) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in source/*.rst.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    documented = []  # type: List[AutosummaryEntry]\n    for filename in filenames:\n        with open(filename, encoding='utf-8', errors='ignore') as f:\n            lines = f.read().splitlines()\n            documented.extend(find_autosummary_in_lines(lines, filename=filename))\n    return documented\n\n\ndef find_autosummary_in_docstring(name: str, module: str = None, filename: str = None\n                                  ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in the given object's docstring.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    if module:\n        warnings.warn('module argument for find_autosummary_in_docstring() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    try:\n        real_name, obj, parent, modname = import_by_name(name)\n        lines = pydoc.getdoc(obj).splitlines()\n        return find_autosummary_in_lines(lines, module=name, filename=filename)\n    except AttributeError:\n        pass\n    except ImportError as e:\n        print(\"Failed to import '%s': %s\" % (name, e))\n    except SystemExit:\n        print(\"Failed to import '%s'; the module executes module level \"\n              \"statement and it might call sys.exit().\" % name)\n    return []\n\n\ndef find_autosummary_in_lines(lines: List[str], module: str = None, filename: str = None\n                              ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items appear in autosummary:: directives in the\n    given lines.\n\n    Returns a list of (name, toctree, template) where *name* is a name\n    of an object and *toctree* the :toctree: path of the corresponding\n    autosummary directive (relative to the root of the file name), and\n    *template* the value of the :template: option. *toctree* and\n    *template* ``None`` if the directive does not have the\n    corresponding options set.\n    \"\"\"\n    autosummary_re = re.compile(r'^(\\s*)\\.\\.\\s+autosummary::\\s*')\n    automodule_re = re.compile(\n        r'^\\s*\\.\\.\\s+automodule::\\s*([A-Za-z0-9_.]+)\\s*$')\n    module_re = re.compile(\n        r'^\\s*\\.\\.\\s+(current)?module::\\s*([a-zA-Z0-9_.]+)\\s*$')\n    autosummary_item_re = re.compile(r'^\\s+(~?[_a-zA-Z][a-zA-Z0-9_.]*)\\s*.*?')\n    recursive_arg_re = re.compile(r'^\\s+:recursive:\\s*$')\n    toctree_arg_re = re.compile(r'^\\s+:toctree:\\s*(.*?)\\s*$')\n    template_arg_re = re.compile(r'^\\s+:template:\\s*(.*?)\\s*$')\n\n    documented = []  # type: List[AutosummaryEntry]\n\n    recursive = False\n    toctree = None  # type: str\n    template = None\n    current_module = module\n    in_autosummary = False\n    base_indent = \"\"\n\n    for line in lines:\n        if in_autosummary:\n            m = recursive_arg_re.match(line)\n            if m:\n                recursive = True\n                continue\n\n            m = toctree_arg_re.match(line)\n            if m:\n                toctree = m.group(1)\n                if filename:\n                    toctree = os.path.join(os.path.dirname(filename),\n                                           toctree)\n                continue\n\n            m = template_arg_re.match(line)\n            if m:\n                template = m.group(1).strip()\n                continue\n\n            if line.strip().startswith(':'):\n                continue  # skip options\n\n            m = autosummary_item_re.match(line)\n            if m:\n                name = m.group(1).strip()\n                if name.startswith('~'):\n                    name = name[1:]\n                if current_module and \\\n                   not name.startswith(current_module + '.'):\n                    name = \"%s.%s\" % (current_module, name)\n                documented.append(AutosummaryEntry(name, toctree, template, recursive))\n                continue\n\n            if not line.strip() or line.startswith(base_indent + \" \"):\n                continue\n\n            in_autosummary = False\n\n        m = autosummary_re.match(line)\n        if m:\n            in_autosummary = True\n            base_indent = m.group(1)\n            recursive = False\n            toctree = None\n            template = None\n            continue\n\n        m = automodule_re.search(line)\n        if m:\n            current_module = m.group(1).strip()\n            # recurse into the automodule docstring\n            documented.extend(find_autosummary_in_docstring(\n                current_module, filename=filename))\n            continue\n\n        m = module_re.match(line)\n        if m:\n            current_module = m.group(2)\n            continue\n\n    return documented\n\n\ndef get_parser() -> argparse.ArgumentParser:\n    parser = argparse.ArgumentParser(\n        usage='%(prog)s [OPTIONS] <SOURCE_FILE>...',\n        epilog=__('For more information, visit <http://sphinx-doc.org/>.'),\n        description=__(\"\"\"\nGenerate ReStructuredText using autosummary directives.\n\nsphinx-autogen is a frontend to sphinx.ext.autosummary.generate. It generates\nthe reStructuredText files from the autosummary directives contained in the\ngiven input files.\n\nThe format of the autosummary directive is documented in the\n``sphinx.ext.autosummary`` Python module and can be read using::\n\n  pydoc sphinx.ext.autosummary\n\"\"\"))\n\n    parser.add_argument('--version', action='version', dest='show_version',\n                        version='%%(prog)s %s' % __display_version__)\n\n    parser.add_argument('source_file', nargs='+',\n                        help=__('source files to generate rST files for'))\n\n    parser.add_argument('-o', '--output-dir', action='store',\n                        dest='output_dir',\n                        help=__('directory to place all output in'))\n    parser.add_argument('-s', '--suffix', action='store', dest='suffix',\n                        default='rst',\n                        help=__('default suffix for files (default: '\n                                '%(default)s)'))\n    parser.add_argument('-t', '--templates', action='store', dest='templates',\n                        default=None,\n                        help=__('custom template directory (default: '\n                                '%(default)s)'))\n    parser.add_argument('-i', '--imported-members', action='store_true',\n                        dest='imported_members', default=False,\n                        help=__('document imported members (default: '\n                                '%(default)s)'))\n\n    return parser\n\n\ndef main(argv: List[str] = sys.argv[1:]) -> None:\n    sphinx.locale.setlocale(locale.LC_ALL, '')\n    sphinx.locale.init_console(os.path.join(package_dir, 'locale'), 'sphinx')\n    translator, _ = sphinx.locale.init([], None)\n\n    app = DummyApplication(translator)\n    logging.setup(app, sys.stdout, sys.stderr)  # type: ignore\n    setup_documenters(app)\n    args = get_parser().parse_args(argv)\n\n    if args.templates:\n        app.config.templates_path.append(path.abspath(args.templates))\n\n    generate_autosummary_docs(args.source_file, args.output_dir,\n                              '.' + args.suffix,\n                              imported_members=args.imported_members,\n                              app=app)\n\n\nif __name__ == '__main__':\n    main()", "\"\"\"\n    sphinx.ext.autosummary.generate\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Usable as a library or script to generate automatic RST source files for\n    items referred to in autosummary:: directives.\n\n    Each generated RST file contains a single auto*:: directive which\n    extracts the docstring of the referred item.\n\n    Example Makefile rule::\n\n       generate:\n               sphinx-autogen -o source/generated source/*.rst\n\n    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nimport argparse\nimport locale\nimport os\nimport pkgutil\nimport pydoc\nimport re\nimport sys\nimport warnings\nfrom gettext import NullTranslations\nfrom os import path\nfrom typing import Any, Callable, Dict, List, NamedTuple, Set, Tuple, Union\n\nfrom jinja2 import TemplateNotFound\nfrom jinja2.sandbox import SandboxedEnvironment\n\nimport sphinx.locale\nfrom sphinx import __display_version__\nfrom sphinx import package_dir\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.deprecation import RemovedInSphinx40Warning, RemovedInSphinx50Warning\nfrom sphinx.ext.autodoc import Documenter\nfrom sphinx.ext.autosummary import import_by_name, get_documenter\nfrom sphinx.locale import __\nfrom sphinx.pycode import ModuleAnalyzer, PycodeError\nfrom sphinx.registry import SphinxComponentRegistry\nfrom sphinx.util import logging\nfrom sphinx.util import rst\nfrom sphinx.util import split_full_qualified_name\nfrom sphinx.util.inspect import safe_getattr\nfrom sphinx.util.osutil import ensuredir\nfrom sphinx.util.template import SphinxTemplateLoader\n\nif False:\n    # For type annotation\n    from typing import Type  # for python3.5.1\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass DummyApplication:\n    \"\"\"Dummy Application class for sphinx-autogen command.\"\"\"\n\n    def __init__(self, translator: NullTranslations) -> None:\n        self.config = Config()\n        self.registry = SphinxComponentRegistry()\n        self.messagelog = []  # type: List[str]\n        self.srcdir = \"/\"\n        self.translator = translator\n        self.verbosity = 0\n        self._warncount = 0\n        self.warningiserror = False\n\n        self.config.add('autosummary_context', {}, True, None)\n        self.config.init_values()\n\n    def emit_firstresult(self, *args: Any) -> None:\n        pass\n\n\nAutosummaryEntry = NamedTuple('AutosummaryEntry', [('name', str),\n                                                   ('path', str),\n                                                   ('template', str),\n                                                   ('recursive', bool)])\n\n\ndef setup_documenters(app: Any) -> None:\n    from sphinx.ext.autodoc import (\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    )\n    documenters = [\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    ]  # type: List[Type[Documenter]]\n    for documenter in documenters:\n        app.registry.add_documenter(documenter.objtype, documenter)\n\n\ndef _simple_info(msg: str) -> None:\n    print(msg)\n\n\ndef _simple_warn(msg: str) -> None:\n    print('WARNING: ' + msg, file=sys.stderr)\n\n\ndef _underline(title: str, line: str = '=') -> str:\n    if '\\n' in title:\n        raise ValueError('Can only underline single lines')\n    return title + '\\n' + line * len(title)\n\n\nclass AutosummaryRenderer:\n    \"\"\"A helper class for rendering.\"\"\"\n\n    def __init__(self, app: Union[Builder, Sphinx], template_dir: str = None) -> None:\n        if isinstance(app, Builder):\n            warnings.warn('The first argument for AutosummaryRenderer has been '\n                          'changed to Sphinx object',\n                          RemovedInSphinx50Warning, stacklevel=2)\n        if template_dir:\n            warnings.warn('template_dir argument for AutosummaryRenderer is deprecated.',\n                          RemovedInSphinx50Warning, stacklevel=2)\n\n        system_templates_path = [os.path.join(package_dir, 'ext', 'autosummary', 'templates')]\n        loader = SphinxTemplateLoader(app.srcdir, app.config.templates_path,\n                                      system_templates_path)\n\n        self.env = SandboxedEnvironment(loader=loader)\n        self.env.filters['escape'] = rst.escape\n        self.env.filters['e'] = rst.escape\n        self.env.filters['underline'] = _underline\n\n        if isinstance(app, (Sphinx, DummyApplication)):\n            if app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.translator)  # type: ignore\n        elif isinstance(app, Builder):\n            if app.app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.app.translator)  # type: ignore\n\n    def exists(self, template_name: str) -> bool:\n        \"\"\"Check if template file exists.\"\"\"\n        warnings.warn('AutosummaryRenderer.exists() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n        try:\n            self.env.get_template(template_name)\n            return True\n        except TemplateNotFound:\n            return False\n\n    def render(self, template_name: str, context: Dict) -> str:\n        \"\"\"Render a template file.\"\"\"\n        try:\n            template = self.env.get_template(template_name)\n        except TemplateNotFound:\n            try:\n                # objtype is given as template_name\n                template = self.env.get_template('autosummary/%s.rst' % template_name)\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _info = info\n    else:\n        _info = logger.info\n\n    if warn:\n        warnings.warn('warn argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _warn = warn\n    else:\n        _warn = logger.warning\n\n    if builder:\n        warnings.warn('builder argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    if template_dir:\n        warnings.warn('template_dir argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    showed_sources = list(sorted(sources))\n    if len(showed_sources) > 20:\n        showed_sources = showed_sources[:10] + ['...'] + showed_sources[-10:]\n    _info(__('[autosummary] generating autosummary for: %s') %\n          ', '.join(showed_sources))\n\n    if output_dir:\n        _info(__('[autosummary] writing to %s') % output_dir)\n\n    if base_path is not None:\n        sources = [os.path.join(base_path, filename) for filename in sources]\n\n    template = AutosummaryRenderer(app)\n\n    # read\n    items = find_autosummary_in_files(sources)\n\n    # keep track of new files\n    new_files = []\n\n    # write\n    for entry in sorted(set(items), key=str):\n        if entry.path is None:\n            # The corresponding autosummary:: directive did not have\n            # a :toctree: option\n            continue\n\n        path = output_dir or os.path.abspath(entry.path)\n        ensuredir(path)\n\n        try:\n            name, obj, parent, mod_name = import_by_name(entry.name)\n        except ImportError as e:\n            _warn(__('[autosummary] failed to import %r: %s') % (entry.name, e))\n            continue\n\n        context = {}\n        if app:\n            context.update(app.config.autosummary_context)\n\n        content = generate_autosummary_content(name, obj, parent, template, entry.template,\n                                               imported_members, app, entry.recursive, context)\n\n        filename = os.path.join(path, name + suffix)\n        if os.path.isfile(filename):\n            with open(filename) as f:\n                old_content = f.read()\n\n            if content == old_content:\n                continue\n            elif overwrite:  # content has changed\n                with open(filename, 'w') as f:\n                    f.write(content)\n                new_files.append(filename)\n        else:\n            with open(filename, 'w') as f:\n                f.write(content)\n            new_files.append(filename)\n\n    # descend recursively to new files\n    if new_files:\n        generate_autosummary_docs(new_files, output_dir=output_dir,\n                                  suffix=suffix, warn=warn, info=info,\n                                  base_path=base_path,\n                                  imported_members=imported_members, app=app,\n                                  overwrite=overwrite)\n\n\n# -- Finding documented entries in files ---------------------------------------\n\ndef find_autosummary_in_files(filenames: List[str]) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in source/*.rst.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    documented = []  # type: List[AutosummaryEntry]\n    for filename in filenames:\n        with open(filename, encoding='utf-8', errors='ignore') as f:\n            lines = f.read().splitlines()\n            documented.extend(find_autosummary_in_lines(lines, filename=filename))\n    return documented\n\n\ndef find_autosummary_in_docstring(name: str, module: str = None, filename: str = None\n                                  ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in the given object's docstring.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    if module:\n        warnings.warn('module argument for find_autosummary_in_docstring() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    try:\n        real_name, obj, parent, modname = import_by_name(name)\n        lines = pydoc.getdoc(obj).splitlines()\n        return find_autosummary_in_lines(lines, module=name, filename=filename)\n    except AttributeError:\n        pass\n    except ImportError as e:\n        print(\"Failed to import '%s': %s\" % (name, e))\n    except SystemExit:\n        print(\"Failed to import '%s'; the module executes module level \"\n              \"statement and it might call sys.exit().\" % name)\n    return []\n\n\ndef find_autosummary_in_lines(lines: List[str], module: str = None, filename: str = None\n                              ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items appear in autosummary:: directives in the\n    given lines.\n\n    Returns a list of (name, toctree, template) where *name* is a name\n    of an object and *toctree* the :toctree: path of the corresponding\n    autosummary directive (relative to the root of the file name), and\n    *template* the value of the :template: option. *toctree* and\n    *template* ``None`` if the directive does not have the\n    corresponding options set.\n    \"\"\"\n    autosummary_re = re.compile(r'^(\\s*)\\.\\.\\s+autosummary::\\s*')\n    automodule_re = re.compile(\n        r'^\\s*\\.\\.\\s+automodule::\\s*([A-Za-z0-9_.]+)\\s*$')\n    module_re = re.compile(\n        r'^\\s*\\.\\.\\s+(current)?module::\\s*([a-zA-Z0-9_.]+)\\s*$')\n    autosummary_item_re = re.compile(r'^\\s+(~?[_a-zA-Z][a-zA-Z0-9_.]*)\\s*.*?')\n    recursive_arg_re = re.compile(r'^\\s+:recursive:\\s*$')\n    toctree_arg_re = re.compile(r'^\\s+:toctree:\\s*(.*?)\\s*$')\n    template_arg_re = re.compile(r'^\\s+:template:\\s*(.*?)\\s*$')\n\n    documented = []  # type: List[AutosummaryEntry]\n\n    recursive = False\n    toctree = None  # type: str\n    template = None\n    current_module = module\n    in_autosummary = False\n    base_indent = \"\"\n\n    for line in lines:\n        if in_autosummary:\n            m = recursive_arg_re.match(line)\n            if m:\n                recursive = True\n                continue\n\n            m = toctree_arg_re.match(line)\n            if m:\n                toctree = m.group(1)\n                if filename:\n                    toctree = os.path.join(os.path.dirname(filename),\n                                           toctree)\n                continue\n\n            m = template_arg_re.match(line)\n            if m:\n                template = m.group(1).strip()\n                continue\n\n            if line.strip().startswith(':'):\n                continue  # skip options\n\n            m = autosummary_item_re.match(line)\n            if m:\n                name = m.group(1).strip()\n                if name.startswith('~'):\n                    name = name[1:]\n                if current_module and \\\n                   not name.startswith(current_module + '.'):\n                    name = \"%s.%s\" % (current_module, name)\n                documented.append(AutosummaryEntry(name, toctree, template, recursive))\n                continue\n\n            if not line.strip() or line.startswith(base_indent + \" \"):\n                continue\n\n            in_autosummary = False\n\n        m = autosummary_re.match(line)\n        if m:\n            in_autosummary = True\n            base_indent = m.group(1)\n            recursive = False\n            toctree = None\n            template = None\n            continue\n\n        m = automodule_re.search(line)\n        if m:\n            current_module = m.group(1).strip()\n            # recurse into the automodule docstring\n            documented.extend(find_autosummary_in_docstring(\n                current_module, filename=filename))\n            continue\n\n        m = module_re.match(line)\n        if m:\n            current_module = m.group(2)\n            continue\n\n    return documented\n\n\ndef get_parser() -> argparse.ArgumentParser:\n    parser = argparse.ArgumentParser(\n        usage='%(prog)s [OPTIONS] <SOURCE_FILE>...',\n        epilog=__('For more information, visit <http://sphinx-doc.org/>.'),\n        description=__(\"\"\"\nGenerate ReStructuredText using autosummary directives.\n\nsphinx-autogen is a frontend to sphinx.ext.autosummary.generate. It generates\nthe reStructuredText files from the autosummary directives contained in the\ngiven input files.\n\nThe format of the autosummary directive is documented in the\n``sphinx.ext.autosummary`` Python module and can be read using::\n\n  pydoc sphinx.ext.autosummary\n\"\"\"))\n\n    parser.add_argument('--version', action='version', dest='show_version',\n                        version='%%(prog)s %s' % __display_version__)\n\n    parser.add_argument('source_file', nargs='+',\n                        help=__('source files to generate rST files for'))\n\n    parser.add_argument('-o', '--output-dir', action='store',\n                        dest='output_dir',\n                        help=__('directory to place all output in'))\n    parser.add_argument('-s', '--suffix', action='store', dest='suffix',\n                        default='rst',\n                        help=__('default suffix for files (default: '\n                                '%(default)s)'))\n    parser.add_argument('-t', '--templates', action='store', dest='templates',\n                        default=None,\n                        help=__('custom template directory (default: '\n                                '%(default)s)'))\n    parser.add_argument('-i', '--imported-members', action='store_true',\n                        dest='imported_members', default=False,\n                        help=__('document imported members (default: '\n                                '%(default)s)'))\n\n    return parser\n\n\ndef main(argv: List[str] = sys.argv[1:]) -> None:\n    sphinx.locale.setlocale(locale.LC_ALL, '')\n    sphinx.locale.init_console(os.path.join(package_dir, 'locale'), 'sphinx')\n    translator, _ = sphinx.locale.init([], None)\n\n    app = DummyApplication(translator)\n    logging.setup(app, sys.stdout, sys.stderr)  # type: ignore\n    setup_documenters(app)\n    args = get_parser().parse_args(argv)\n\n    if args.templates:\n        app.config.templates_path.append(path.abspath(args.templates))\n\n    generate_autosummary_docs(args.source_file, args.output_dir,\n                              '.' + args.suffix,\n                              imported_members=args.imported_members,\n                              app=app)\n\n\nif __name__ == '__main__':\n    main()", "\"\"\"\n    sphinx.ext.autosummary.generate\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Usable as a library or script to generate automatic RST source files for\n    items referred to in autosummary:: directives.\n\n    Each generated RST file contains a single auto*:: directive which\n    extracts the docstring of the referred item.\n\n    Example Makefile rule::\n\n       generate:\n               sphinx-autogen -o source/generated source/*.rst\n\n    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nimport argparse\nimport locale\nimport os\nimport pkgutil\nimport pydoc\nimport re\nimport sys\nimport warnings\nfrom gettext import NullTranslations\nfrom os import path\nfrom typing import Any, Callable, Dict, List, NamedTuple, Set, Tuple, Union\n\nfrom jinja2 import TemplateNotFound\nfrom jinja2.sandbox import SandboxedEnvironment\n\nimport sphinx.locale\nfrom sphinx import __display_version__\nfrom sphinx import package_dir\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.deprecation import RemovedInSphinx40Warning, RemovedInSphinx50Warning\nfrom sphinx.ext.autodoc import Documenter\nfrom sphinx.ext.autosummary import import_by_name, get_documenter\nfrom sphinx.locale import __\nfrom sphinx.pycode import ModuleAnalyzer, PycodeError\nfrom sphinx.registry import SphinxComponentRegistry\nfrom sphinx.util import logging\nfrom sphinx.util import rst\nfrom sphinx.util import split_full_qualified_name\nfrom sphinx.util.inspect import safe_getattr\nfrom sphinx.util.osutil import ensuredir\nfrom sphinx.util.template import SphinxTemplateLoader\n\nif False:\n    # For type annotation\n    from typing import Type  # for python3.5.1\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass DummyApplication:\n    \"\"\"Dummy Application class for sphinx-autogen command.\"\"\"\n\n    def __init__(self, translator: NullTranslations) -> None:\n        self.config = Config()\n        self.registry = SphinxComponentRegistry()\n        self.messagelog = []  # type: List[str]\n        self.srcdir = \"/\"\n        self.translator = translator\n        self.verbosity = 0\n        self._warncount = 0\n        self.warningiserror = False\n\n        self.config.add('autosummary_context', {}, True, None)\n        self.config.init_values()\n\n    def emit_firstresult(self, *args: Any) -> None:\n        pass\n\n\nAutosummaryEntry = NamedTuple('AutosummaryEntry', [('name', str),\n                                                   ('path', str),\n                                                   ('template', str),\n                                                   ('recursive', bool)])\n\n\ndef setup_documenters(app: Any) -> None:\n    from sphinx.ext.autodoc import (\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    )\n    documenters = [\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    ]  # type: List[Type[Documenter]]\n    for documenter in documenters:\n        app.registry.add_documenter(documenter.objtype, documenter)\n\n\ndef _simple_info(msg: str) -> None:\n    print(msg)\n\n\ndef _simple_warn(msg: str) -> None:\n    print('WARNING: ' + msg, file=sys.stderr)\n\n\ndef _underline(title: str, line: str = '=') -> str:\n    if '\\n' in title:\n        raise ValueError('Can only underline single lines')\n    return title + '\\n' + line * len(title)\n\n\nclass AutosummaryRenderer:\n    \"\"\"A helper class for rendering.\"\"\"\n\n    def __init__(self, app: Union[Builder, Sphinx], template_dir: str = None) -> None:\n        if isinstance(app, Builder):\n            warnings.warn('The first argument for AutosummaryRenderer has been '\n                          'changed to Sphinx object',\n                          RemovedInSphinx50Warning, stacklevel=2)\n        if template_dir:\n            warnings.warn('template_dir argument for AutosummaryRenderer is deprecated.',\n                          RemovedInSphinx50Warning, stacklevel=2)\n\n        system_templates_path = [os.path.join(package_dir, 'ext', 'autosummary', 'templates')]\n        loader = SphinxTemplateLoader(app.srcdir, app.config.templates_path,\n                                      system_templates_path)\n\n        self.env = SandboxedEnvironment(loader=loader)\n        self.env.filters['escape'] = rst.escape\n        self.env.filters['e'] = rst.escape\n        self.env.filters['underline'] = _underline\n\n        if isinstance(app, (Sphinx, DummyApplication)):\n            if app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.translator)  # type: ignore\n        elif isinstance(app, Builder):\n            if app.app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.app.translator)  # type: ignore\n\n    def exists(self, template_name: str) -> bool:\n        \"\"\"Check if template file exists.\"\"\"\n        warnings.warn('AutosummaryRenderer.exists() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n        try:\n            self.env.get_template(template_name)\n            return True\n        except TemplateNotFound:\n            return False\n\n    def render(self, template_name: str, context: Dict) -> str:\n        \"\"\"Render a template file.\"\"\"\n        try:\n            template = self.env.get_template(template_name)\n        except TemplateNotFound:\n            try:\n                # objtype is given as template_name\n                template = self.env.get_template('autosummary/%s.rst' % template_name)\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _info = info\n    else:\n        _info = logger.info\n\n    if warn:\n        warnings.warn('warn argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _warn = warn\n    else:\n        _warn = logger.warning\n\n    if builder:\n        warnings.warn('builder argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    if template_dir:\n        warnings.warn('template_dir argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    showed_sources = list(sorted(sources))\n    if len(showed_sources) > 20:\n        showed_sources = showed_sources[:10] + ['...'] + showed_sources[-10:]\n    _info(__('[autosummary] generating autosummary for: %s') %\n          ', '.join(showed_sources))\n\n    if output_dir:\n        _info(__('[autosummary] writing to %s') % output_dir)\n\n    if base_path is not None:\n        sources = [os.path.join(base_path, filename) for filename in sources]\n\n    template = AutosummaryRenderer(app)\n\n    # read\n    items = find_autosummary_in_files(sources)\n\n    # keep track of new files\n    new_files = []\n\n    # write\n    for entry in sorted(set(items), key=str):\n        if entry.path is None:\n            # The corresponding autosummary:: directive did not have\n            # a :toctree: option\n            continue\n\n        path = output_dir or os.path.abspath(entry.path)\n        ensuredir(path)\n\n        try:\n            name, obj, parent, mod_name = import_by_name(entry.name)\n        except ImportError as e:\n            _warn(__('[autosummary] failed to import %r: %s') % (entry.name, e))\n            continue\n\n        context = {}\n        if app:\n            context.update(app.config.autosummary_context)\n\n        content = generate_autosummary_content(name, obj, parent, template, entry.template,\n                                               imported_members, app, entry.recursive, context)\n\n        filename = os.path.join(path, name + suffix)\n        if os.path.isfile(filename):\n            with open(filename) as f:\n                old_content = f.read()\n\n            if content == old_content:\n                continue\n            elif overwrite:  # content has changed\n                with open(filename, 'w') as f:\n                    f.write(content)\n                new_files.append(filename)\n        else:\n            with open(filename, 'w') as f:\n                f.write(content)\n            new_files.append(filename)\n\n    # descend recursively to new files\n    if new_files:\n        generate_autosummary_docs(new_files, output_dir=output_dir,\n                                  suffix=suffix, warn=warn, info=info,\n                                  base_path=base_path,\n                                  imported_members=imported_members, app=app,\n                                  overwrite=overwrite)\n\n\n# -- Finding documented entries in files ---------------------------------------\n\ndef find_autosummary_in_files(filenames: List[str]) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in source/*.rst.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    documented = []  # type: List[AutosummaryEntry]\n    for filename in filenames:\n        with open(filename, encoding='utf-8', errors='ignore') as f:\n            lines = f.read().splitlines()\n            documented.extend(find_autosummary_in_lines(lines, filename=filename))\n    return documented\n\n\ndef find_autosummary_in_docstring(name: str, module: str = None, filename: str = None\n                                  ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in the given object's docstring.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    if module:\n        warnings.warn('module argument for find_autosummary_in_docstring() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    try:\n        real_name, obj, parent, modname = import_by_name(name)\n        lines = pydoc.getdoc(obj).splitlines()\n        return find_autosummary_in_lines(lines, module=name, filename=filename)\n    except AttributeError:\n        pass\n    except ImportError as e:\n        print(\"Failed to import '%s': %s\" % (name, e))\n    except SystemExit:\n        print(\"Failed to import '%s'; the module executes module level \"\n              \"statement and it might call sys.exit().\" % name)\n    return []\n\n\ndef find_autosummary_in_lines(lines: List[str], module: str = None, filename: str = None\n                              ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items appear in autosummary:: directives in the\n    given lines.\n\n    Returns a list of (name, toctree, template) where *name* is a name\n    of an object and *toctree* the :toctree: path of the corresponding\n    autosummary directive (relative to the root of the file name), and\n    *template* the value of the :template: option. *toctree* and\n    *template* ``None`` if the directive does not have the\n    corresponding options set.\n    \"\"\"\n    autosummary_re = re.compile(r'^(\\s*)\\.\\.\\s+autosummary::\\s*')\n    automodule_re = re.compile(\n        r'^\\s*\\.\\.\\s+automodule::\\s*([A-Za-z0-9_.]+)\\s*$')\n    module_re = re.compile(\n        r'^\\s*\\.\\.\\s+(current)?module::\\s*([a-zA-Z0-9_.]+)\\s*$')\n    autosummary_item_re = re.compile(r'^\\s+(~?[_a-zA-Z][a-zA-Z0-9_.]*)\\s*.*?')\n    recursive_arg_re = re.compile(r'^\\s+:recursive:\\s*$')\n    toctree_arg_re = re.compile(r'^\\s+:toctree:\\s*(.*?)\\s*$')\n    template_arg_re = re.compile(r'^\\s+:template:\\s*(.*?)\\s*$')\n\n    documented = []  # type: List[AutosummaryEntry]\n\n    recursive = False\n    toctree = None  # type: str\n    template = None\n    current_module = module\n    in_autosummary = False\n    base_indent = \"\"\n\n    for line in lines:\n        if in_autosummary:\n            m = recursive_arg_re.match(line)\n            if m:\n                recursive = True\n                continue\n\n            m = toctree_arg_re.match(line)\n            if m:\n                toctree = m.group(1)\n                if filename:\n                    toctree = os.path.join(os.path.dirname(filename),\n                                           toctree)\n                continue\n\n            m = template_arg_re.match(line)\n            if m:\n                template = m.group(1).strip()\n                continue\n\n            if line.strip().startswith(':'):\n                continue  # skip options\n\n            m = autosummary_item_re.match(line)\n            if m:\n                name = m.group(1).strip()\n                if name.startswith('~'):\n                    name = name[1:]\n                if current_module and \\\n                   not name.startswith(current_module + '.'):\n                    name = \"%s.%s\" % (current_module, name)\n                documented.append(AutosummaryEntry(name, toctree, template, recursive))\n                continue\n\n            if not line.strip() or line.startswith(base_indent + \" \"):\n                continue\n\n            in_autosummary = False\n\n        m = autosummary_re.match(line)\n        if m:\n            in_autosummary = True\n            base_indent = m.group(1)\n            recursive = False\n            toctree = None\n            template = None\n            continue\n\n        m = automodule_re.search(line)\n        if m:\n            current_module = m.group(1).strip()\n            # recurse into the automodule docstring\n            documented.extend(find_autosummary_in_docstring(\n                current_module, filename=filename))\n            continue\n\n        m = module_re.match(line)\n        if m:\n            current_module = m.group(2)\n            continue\n\n    return documented\n\n\ndef get_parser() -> argparse.ArgumentParser:\n    parser = argparse.ArgumentParser(\n        usage='%(prog)s [OPTIONS] <SOURCE_FILE>...',\n        epilog=__('For more information, visit <http://sphinx-doc.org/>.'),\n        description=__(\"\"\"\nGenerate ReStructuredText using autosummary directives.\n\nsphinx-autogen is a frontend to sphinx.ext.autosummary.generate. It generates\nthe reStructuredText files from the autosummary directives contained in the\ngiven input files.\n\nThe format of the autosummary directive is documented in the\n``sphinx.ext.autosummary`` Python module and can be read using::\n\n  pydoc sphinx.ext.autosummary\n\"\"\"))\n\n    parser.add_argument('--version', action='version', dest='show_version',\n                        version='%%(prog)s %s' % __display_version__)\n\n    parser.add_argument('source_file', nargs='+',\n                        help=__('source files to generate rST files for'))\n\n    parser.add_argument('-o', '--output-dir', action='store',\n                        dest='output_dir',\n                        help=__('directory to place all output in'))\n    parser.add_argument('-s', '--suffix', action='store', dest='suffix',\n                        default='rst',\n                        help=__('default suffix for files (default: '\n                                '%(default)s)'))\n    parser.add_argument('-t', '--templates', action='store', dest='templates',\n                        default=None,\n                        help=__('custom template directory (default: '\n                                '%(default)s)'))\n    parser.add_argument('-i', '--imported-members', action='store_true',\n                        dest='imported_members', default=False,\n                        help=__('document imported members (default: '\n                                '%(default)s)'))\n\n    return parser\n\n\ndef main(argv: List[str] = sys.argv[1:]) -> None:\n    sphinx.locale.setlocale(locale.LC_ALL, '')\n    sphinx.locale.init_console(os.path.join(package_dir, 'locale'), 'sphinx')\n    translator, _ = sphinx.locale.init([], None)\n\n    app = DummyApplication(translator)\n    logging.setup(app, sys.stdout, sys.stderr)  # type: ignore\n    setup_documenters(app)\n    args = get_parser().parse_args(argv)\n\n    if args.templates:\n        app.config.templates_path.append(path.abspath(args.templates))\n\n    generate_autosummary_docs(args.source_file, args.output_dir,\n                              '.' + args.suffix,\n                              imported_members=args.imported_members,\n                              app=app)\n\n\nif __name__ == '__main__':\n    main()", "\"\"\"\n    sphinx.ext.autosummary.generate\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Usable as a library or script to generate automatic RST source files for\n    items referred to in autosummary:: directives.\n\n    Each generated RST file contains a single auto*:: directive which\n    extracts the docstring of the referred item.\n\n    Example Makefile rule::\n\n       generate:\n               sphinx-autogen -o source/generated source/*.rst\n\n    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nimport argparse\nimport locale\nimport os\nimport pkgutil\nimport pydoc\nimport re\nimport sys\nimport warnings\nfrom gettext import NullTranslations\nfrom os import path\nfrom typing import Any, Callable, Dict, List, NamedTuple, Set, Tuple, Union\n\nfrom jinja2 import TemplateNotFound\nfrom jinja2.sandbox import SandboxedEnvironment\n\nimport sphinx.locale\nfrom sphinx import __display_version__\nfrom sphinx import package_dir\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.deprecation import RemovedInSphinx40Warning, RemovedInSphinx50Warning\nfrom sphinx.ext.autodoc import Documenter\nfrom sphinx.ext.autosummary import import_by_name, get_documenter\nfrom sphinx.locale import __\nfrom sphinx.pycode import ModuleAnalyzer, PycodeError\nfrom sphinx.registry import SphinxComponentRegistry\nfrom sphinx.util import logging\nfrom sphinx.util import rst\nfrom sphinx.util import split_full_qualified_name\nfrom sphinx.util.inspect import safe_getattr\nfrom sphinx.util.osutil import ensuredir\nfrom sphinx.util.template import SphinxTemplateLoader\n\nif False:\n    # For type annotation\n    from typing import Type  # for python3.5.1\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass DummyApplication:\n    \"\"\"Dummy Application class for sphinx-autogen command.\"\"\"\n\n    def __init__(self, translator: NullTranslations) -> None:\n        self.config = Config()\n        self.registry = SphinxComponentRegistry()\n        self.messagelog = []  # type: List[str]\n        self.srcdir = \"/\"\n        self.translator = translator\n        self.verbosity = 0\n        self._warncount = 0\n        self.warningiserror = False\n\n        self.config.add('autosummary_context', {}, True, None)\n        self.config.init_values()\n\n    def emit_firstresult(self, *args: Any) -> None:\n        pass\n\n\nAutosummaryEntry = NamedTuple('AutosummaryEntry', [('name', str),\n                                                   ('path', str),\n                                                   ('template', str),\n                                                   ('recursive', bool)])\n\n\ndef setup_documenters(app: Any) -> None:\n    from sphinx.ext.autodoc import (\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    )\n    documenters = [\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    ]  # type: List[Type[Documenter]]\n    for documenter in documenters:\n        app.registry.add_documenter(documenter.objtype, documenter)\n\n\ndef _simple_info(msg: str) -> None:\n    print(msg)\n\n\ndef _simple_warn(msg: str) -> None:\n    print('WARNING: ' + msg, file=sys.stderr)\n\n\ndef _underline(title: str, line: str = '=') -> str:\n    if '\\n' in title:\n        raise ValueError('Can only underline single lines')\n    return title + '\\n' + line * len(title)\n\n\nclass AutosummaryRenderer:\n    \"\"\"A helper class for rendering.\"\"\"\n\n    def __init__(self, app: Union[Builder, Sphinx], template_dir: str = None) -> None:\n        if isinstance(app, Builder):\n            warnings.warn('The first argument for AutosummaryRenderer has been '\n                          'changed to Sphinx object',\n                          RemovedInSphinx50Warning, stacklevel=2)\n        if template_dir:\n            warnings.warn('template_dir argument for AutosummaryRenderer is deprecated.',\n                          RemovedInSphinx50Warning, stacklevel=2)\n\n        system_templates_path = [os.path.join(package_dir, 'ext', 'autosummary', 'templates')]\n        loader = SphinxTemplateLoader(app.srcdir, app.config.templates_path,\n                                      system_templates_path)\n\n        self.env = SandboxedEnvironment(loader=loader)\n        self.env.filters['escape'] = rst.escape\n        self.env.filters['e'] = rst.escape\n        self.env.filters['underline'] = _underline\n\n        if isinstance(app, (Sphinx, DummyApplication)):\n            if app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.translator)  # type: ignore\n        elif isinstance(app, Builder):\n            if app.app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.app.translator)  # type: ignore\n\n    def exists(self, template_name: str) -> bool:\n        \"\"\"Check if template file exists.\"\"\"\n        warnings.warn('AutosummaryRenderer.exists() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n        try:\n            self.env.get_template(template_name)\n            return True\n        except TemplateNotFound:\n            return False\n\n    def render(self, template_name: str, context: Dict) -> str:\n        \"\"\"Render a template file.\"\"\"\n        try:\n            template = self.env.get_template(template_name)\n        except TemplateNotFound:\n            try:\n                # objtype is given as template_name\n                template = self.env.get_template('autosummary/%s.rst' % template_name)\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _info = info\n    else:\n        _info = logger.info\n\n    if warn:\n        warnings.warn('warn argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _warn = warn\n    else:\n        _warn = logger.warning\n\n    if builder:\n        warnings.warn('builder argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    if template_dir:\n        warnings.warn('template_dir argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    showed_sources = list(sorted(sources))\n    if len(showed_sources) > 20:\n        showed_sources = showed_sources[:10] + ['...'] + showed_sources[-10:]\n    _info(__('[autosummary] generating autosummary for: %s') %\n          ', '.join(showed_sources))\n\n    if output_dir:\n        _info(__('[autosummary] writing to %s') % output_dir)\n\n    if base_path is not None:\n        sources = [os.path.join(base_path, filename) for filename in sources]\n\n    template = AutosummaryRenderer(app)\n\n    # read\n    items = find_autosummary_in_files(sources)\n\n    # keep track of new files\n    new_files = []\n\n    # write\n    for entry in sorted(set(items), key=str):\n        if entry.path is None:\n            # The corresponding autosummary:: directive did not have\n            # a :toctree: option\n            continue\n\n        path = output_dir or os.path.abspath(entry.path)\n        ensuredir(path)\n\n        try:\n            name, obj, parent, mod_name = import_by_name(entry.name)\n        except ImportError as e:\n            _warn(__('[autosummary] failed to import %r: %s') % (entry.name, e))\n            continue\n\n        context = {}\n        if app:\n            context.update(app.config.autosummary_context)\n\n        content = generate_autosummary_content(name, obj, parent, template, entry.template,\n                                               imported_members, app, entry.recursive, context)\n\n        filename = os.path.join(path, name + suffix)\n        if os.path.isfile(filename):\n            with open(filename) as f:\n                old_content = f.read()\n\n            if content == old_content:\n                continue\n            elif overwrite:  # content has changed\n                with open(filename, 'w') as f:\n                    f.write(content)\n                new_files.append(filename)\n        else:\n            with open(filename, 'w') as f:\n                f.write(content)\n            new_files.append(filename)\n\n    # descend recursively to new files\n    if new_files:\n        generate_autosummary_docs(new_files, output_dir=output_dir,\n                                  suffix=suffix, warn=warn, info=info,\n                                  base_path=base_path,\n                                  imported_members=imported_members, app=app,\n                                  overwrite=overwrite)\n\n\n# -- Finding documented entries in files ---------------------------------------\n\ndef find_autosummary_in_files(filenames: List[str]) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in source/*.rst.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    documented = []  # type: List[AutosummaryEntry]\n    for filename in filenames:\n        with open(filename, encoding='utf-8', errors='ignore') as f:\n            lines = f.read().splitlines()\n            documented.extend(find_autosummary_in_lines(lines, filename=filename))\n    return documented\n\n\ndef find_autosummary_in_docstring(name: str, module: str = None, filename: str = None\n                                  ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in the given object's docstring.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    if module:\n        warnings.warn('module argument for find_autosummary_in_docstring() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    try:\n        real_name, obj, parent, modname = import_by_name(name)\n        lines = pydoc.getdoc(obj).splitlines()\n        return find_autosummary_in_lines(lines, module=name, filename=filename)\n    except AttributeError:\n        pass\n    except ImportError as e:\n        print(\"Failed to import '%s': %s\" % (name, e))\n    except SystemExit:\n        print(\"Failed to import '%s'; the module executes module level \"\n              \"statement and it might call sys.exit().\" % name)\n    return []\n\n\ndef find_autosummary_in_lines(lines: List[str], module: str = None, filename: str = None\n                              ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items appear in autosummary:: directives in the\n    given lines.\n\n    Returns a list of (name, toctree, template) where *name* is a name\n    of an object and *toctree* the :toctree: path of the corresponding\n    autosummary directive (relative to the root of the file name), and\n    *template* the value of the :template: option. *toctree* and\n    *template* ``None`` if the directive does not have the\n    corresponding options set.\n    \"\"\"\n    autosummary_re = re.compile(r'^(\\s*)\\.\\.\\s+autosummary::\\s*')\n    automodule_re = re.compile(\n        r'^\\s*\\.\\.\\s+automodule::\\s*([A-Za-z0-9_.]+)\\s*$')\n    module_re = re.compile(\n        r'^\\s*\\.\\.\\s+(current)?module::\\s*([a-zA-Z0-9_.]+)\\s*$')\n    autosummary_item_re = re.compile(r'^\\s+(~?[_a-zA-Z][a-zA-Z0-9_.]*)\\s*.*?')\n    recursive_arg_re = re.compile(r'^\\s+:recursive:\\s*$')\n    toctree_arg_re = re.compile(r'^\\s+:toctree:\\s*(.*?)\\s*$')\n    template_arg_re = re.compile(r'^\\s+:template:\\s*(.*?)\\s*$')\n\n    documented = []  # type: List[AutosummaryEntry]\n\n    recursive = False\n    toctree = None  # type: str\n    template = None\n    current_module = module\n    in_autosummary = False\n    base_indent = \"\"\n\n    for line in lines:\n        if in_autosummary:\n            m = recursive_arg_re.match(line)\n            if m:\n                recursive = True\n                continue\n\n            m = toctree_arg_re.match(line)\n            if m:\n                toctree = m.group(1)\n                if filename:\n                    toctree = os.path.join(os.path.dirname(filename),\n                                           toctree)\n                continue\n\n            m = template_arg_re.match(line)\n            if m:\n                template = m.group(1).strip()\n                continue\n\n            if line.strip().startswith(':'):\n                continue  # skip options\n\n            m = autosummary_item_re.match(line)\n            if m:\n                name = m.group(1).strip()\n                if name.startswith('~'):\n                    name = name[1:]\n                if current_module and \\\n                   not name.startswith(current_module + '.'):\n                    name = \"%s.%s\" % (current_module, name)\n                documented.append(AutosummaryEntry(name, toctree, template, recursive))\n                continue\n\n            if not line.strip() or line.startswith(base_indent + \" \"):\n                continue\n\n            in_autosummary = False\n\n        m = autosummary_re.match(line)\n        if m:\n            in_autosummary = True\n            base_indent = m.group(1)\n            recursive = False\n            toctree = None\n            template = None\n            continue\n\n        m = automodule_re.search(line)\n        if m:\n            current_module = m.group(1).strip()\n            # recurse into the automodule docstring\n            documented.extend(find_autosummary_in_docstring(\n                current_module, filename=filename))\n            continue\n\n        m = module_re.match(line)\n        if m:\n            current_module = m.group(2)\n            continue\n\n    return documented\n\n\ndef get_parser() -> argparse.ArgumentParser:\n    parser = argparse.ArgumentParser(\n        usage='%(prog)s [OPTIONS] <SOURCE_FILE>...',\n        epilog=__('For more information, visit <http://sphinx-doc.org/>.'),\n        description=__(\"\"\"\nGenerate ReStructuredText using autosummary directives.\n\nsphinx-autogen is a frontend to sphinx.ext.autosummary.generate. It generates\nthe reStructuredText files from the autosummary directives contained in the\ngiven input files.\n\nThe format of the autosummary directive is documented in the\n``sphinx.ext.autosummary`` Python module and can be read using::\n\n  pydoc sphinx.ext.autosummary\n\"\"\"))\n\n    parser.add_argument('--version', action='version', dest='show_version',\n                        version='%%(prog)s %s' % __display_version__)\n\n    parser.add_argument('source_file', nargs='+',\n                        help=__('source files to generate rST files for'))\n\n    parser.add_argument('-o', '--output-dir', action='store',\n                        dest='output_dir',\n                        help=__('directory to place all output in'))\n    parser.add_argument('-s', '--suffix', action='store', dest='suffix',\n                        default='rst',\n                        help=__('default suffix for files (default: '\n                                '%(default)s)'))\n    parser.add_argument('-t', '--templates', action='store', dest='templates',\n                        default=None,\n                        help=__('custom template directory (default: '\n                                '%(default)s)'))\n    parser.add_argument('-i', '--imported-members', action='store_true',\n                        dest='imported_members', default=False,\n                        help=__('document imported members (default: '\n                                '%(default)s)'))\n\n    return parser\n\n\ndef main(argv: List[str] = sys.argv[1:]) -> None:\n    sphinx.locale.setlocale(locale.LC_ALL, '')\n    sphinx.locale.init_console(os.path.join(package_dir, 'locale'), 'sphinx')\n    translator, _ = sphinx.locale.init([], None)\n\n    app = DummyApplication(translator)\n    logging.setup(app, sys.stdout, sys.stderr)  # type: ignore\n    setup_documenters(app)\n    args = get_parser().parse_args(argv)\n\n    if args.templates:\n        app.config.templates_path.append(path.abspath(args.templates))\n\n    generate_autosummary_docs(args.source_file, args.output_dir,\n                              '.' + args.suffix,\n                              imported_members=args.imported_members,\n                              app=app)\n\n\nif __name__ == '__main__':\n    main()", "\"\"\"\n    sphinx.ext.autosummary.generate\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Usable as a library or script to generate automatic RST source files for\n    items referred to in autosummary:: directives.\n\n    Each generated RST file contains a single auto*:: directive which\n    extracts the docstring of the referred item.\n\n    Example Makefile rule::\n\n       generate:\n               sphinx-autogen -o source/generated source/*.rst\n\n    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nimport argparse\nimport locale\nimport os\nimport pkgutil\nimport pydoc\nimport re\nimport sys\nimport warnings\nfrom gettext import NullTranslations\nfrom os import path\nfrom typing import Any, Callable, Dict, List, NamedTuple, Set, Tuple, Union\n\nfrom jinja2 import TemplateNotFound\nfrom jinja2.sandbox import SandboxedEnvironment\n\nimport sphinx.locale\nfrom sphinx import __display_version__\nfrom sphinx import package_dir\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.deprecation import RemovedInSphinx40Warning, RemovedInSphinx50Warning\nfrom sphinx.ext.autodoc import Documenter\nfrom sphinx.ext.autosummary import import_by_name, get_documenter\nfrom sphinx.locale import __\nfrom sphinx.pycode import ModuleAnalyzer, PycodeError\nfrom sphinx.registry import SphinxComponentRegistry\nfrom sphinx.util import logging\nfrom sphinx.util import rst\nfrom sphinx.util import split_full_qualified_name\nfrom sphinx.util.inspect import safe_getattr\nfrom sphinx.util.osutil import ensuredir\nfrom sphinx.util.template import SphinxTemplateLoader\n\nif False:\n    # For type annotation\n    from typing import Type  # for python3.5.1\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass DummyApplication:\n    \"\"\"Dummy Application class for sphinx-autogen command.\"\"\"\n\n    def __init__(self, translator: NullTranslations) -> None:\n        self.config = Config()\n        self.registry = SphinxComponentRegistry()\n        self.messagelog = []  # type: List[str]\n        self.srcdir = \"/\"\n        self.translator = translator\n        self.verbosity = 0\n        self._warncount = 0\n        self.warningiserror = False\n\n        self.config.add('autosummary_context', {}, True, None)\n        self.config.init_values()\n\n    def emit_firstresult(self, *args: Any) -> None:\n        pass\n\n\nAutosummaryEntry = NamedTuple('AutosummaryEntry', [('name', str),\n                                                   ('path', str),\n                                                   ('template', str),\n                                                   ('recursive', bool)])\n\n\ndef setup_documenters(app: Any) -> None:\n    from sphinx.ext.autodoc import (\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    )\n    documenters = [\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    ]  # type: List[Type[Documenter]]\n    for documenter in documenters:\n        app.registry.add_documenter(documenter.objtype, documenter)\n\n\ndef _simple_info(msg: str) -> None:\n    print(msg)\n\n\ndef _simple_warn(msg: str) -> None:\n    print('WARNING: ' + msg, file=sys.stderr)\n\n\ndef _underline(title: str, line: str = '=') -> str:\n    if '\\n' in title:\n        raise ValueError('Can only underline single lines')\n    return title + '\\n' + line * len(title)\n\n\nclass AutosummaryRenderer:\n    \"\"\"A helper class for rendering.\"\"\"\n\n    def __init__(self, app: Union[Builder, Sphinx], template_dir: str = None) -> None:\n        if isinstance(app, Builder):\n            warnings.warn('The first argument for AutosummaryRenderer has been '\n                          'changed to Sphinx object',\n                          RemovedInSphinx50Warning, stacklevel=2)\n        if template_dir:\n            warnings.warn('template_dir argument for AutosummaryRenderer is deprecated.',\n                          RemovedInSphinx50Warning, stacklevel=2)\n\n        system_templates_path = [os.path.join(package_dir, 'ext', 'autosummary', 'templates')]\n        loader = SphinxTemplateLoader(app.srcdir, app.config.templates_path,\n                                      system_templates_path)\n\n        self.env = SandboxedEnvironment(loader=loader)\n        self.env.filters['escape'] = rst.escape\n        self.env.filters['e'] = rst.escape\n        self.env.filters['underline'] = _underline\n\n        if isinstance(app, (Sphinx, DummyApplication)):\n            if app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.translator)  # type: ignore\n        elif isinstance(app, Builder):\n            if app.app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.app.translator)  # type: ignore\n\n    def exists(self, template_name: str) -> bool:\n        \"\"\"Check if template file exists.\"\"\"\n        warnings.warn('AutosummaryRenderer.exists() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n        try:\n            self.env.get_template(template_name)\n            return True\n        except TemplateNotFound:\n            return False\n\n    def render(self, template_name: str, context: Dict) -> str:\n        \"\"\"Render a template file.\"\"\"\n        try:\n            template = self.env.get_template(template_name)\n        except TemplateNotFound:\n            try:\n                # objtype is given as template_name\n                template = self.env.get_template('autosummary/%s.rst' % template_name)\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _info = info\n    else:\n        _info = logger.info\n\n    if warn:\n        warnings.warn('warn argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _warn = warn\n    else:\n        _warn = logger.warning\n\n    if builder:\n        warnings.warn('builder argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    if template_dir:\n        warnings.warn('template_dir argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    showed_sources = list(sorted(sources))\n    if len(showed_sources) > 20:\n        showed_sources = showed_sources[:10] + ['...'] + showed_sources[-10:]\n    _info(__('[autosummary] generating autosummary for: %s') %\n          ', '.join(showed_sources))\n\n    if output_dir:\n        _info(__('[autosummary] writing to %s') % output_dir)\n\n    if base_path is not None:\n        sources = [os.path.join(base_path, filename) for filename in sources]\n\n    template = AutosummaryRenderer(app)\n\n    # read\n    items = find_autosummary_in_files(sources)\n\n    # keep track of new files\n    new_files = []\n\n    # write\n    for entry in sorted(set(items), key=str):\n        if entry.path is None:\n            # The corresponding autosummary:: directive did not have\n            # a :toctree: option\n            continue\n\n        path = output_dir or os.path.abspath(entry.path)\n        ensuredir(path)\n\n        try:\n            name, obj, parent, mod_name = import_by_name(entry.name)\n        except ImportError as e:\n            _warn(__('[autosummary] failed to import %r: %s') % (entry.name, e))\n            continue\n\n        context = {}\n        if app:\n            context.update(app.config.autosummary_context)\n\n        content = generate_autosummary_content(name, obj, parent, template, entry.template,\n                                               imported_members, app, entry.recursive, context)\n\n        filename = os.path.join(path, name + suffix)\n        if os.path.isfile(filename):\n            with open(filename) as f:\n                old_content = f.read()\n\n            if content == old_content:\n                continue\n            elif overwrite:  # content has changed\n                with open(filename, 'w') as f:\n                    f.write(content)\n                new_files.append(filename)\n        else:\n            with open(filename, 'w') as f:\n                f.write(content)\n            new_files.append(filename)\n\n    # descend recursively to new files\n    if new_files:\n        generate_autosummary_docs(new_files, output_dir=output_dir,\n                                  suffix=suffix, warn=warn, info=info,\n                                  base_path=base_path,\n                                  imported_members=imported_members, app=app,\n                                  overwrite=overwrite)\n\n\n# -- Finding documented entries in files ---------------------------------------\n\ndef find_autosummary_in_files(filenames: List[str]) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in source/*.rst.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    documented = []  # type: List[AutosummaryEntry]\n    for filename in filenames:\n        with open(filename, encoding='utf-8', errors='ignore') as f:\n            lines = f.read().splitlines()\n            documented.extend(find_autosummary_in_lines(lines, filename=filename))\n    return documented\n\n\ndef find_autosummary_in_docstring(name: str, module: str = None, filename: str = None\n                                  ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in the given object's docstring.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    if module:\n        warnings.warn('module argument for find_autosummary_in_docstring() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    try:\n        real_name, obj, parent, modname = import_by_name(name)\n        lines = pydoc.getdoc(obj).splitlines()\n        return find_autosummary_in_lines(lines, module=name, filename=filename)\n    except AttributeError:\n        pass\n    except ImportError as e:\n        print(\"Failed to import '%s': %s\" % (name, e))\n    except SystemExit:\n        print(\"Failed to import '%s'; the module executes module level \"\n              \"statement and it might call sys.exit().\" % name)\n    return []\n\n\ndef find_autosummary_in_lines(lines: List[str], module: str = None, filename: str = None\n                              ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items appear in autosummary:: directives in the\n    given lines.\n\n    Returns a list of (name, toctree, template) where *name* is a name\n    of an object and *toctree* the :toctree: path of the corresponding\n    autosummary directive (relative to the root of the file name), and\n    *template* the value of the :template: option. *toctree* and\n    *template* ``None`` if the directive does not have the\n    corresponding options set.\n    \"\"\"\n    autosummary_re = re.compile(r'^(\\s*)\\.\\.\\s+autosummary::\\s*')\n    automodule_re = re.compile(\n        r'^\\s*\\.\\.\\s+automodule::\\s*([A-Za-z0-9_.]+)\\s*$')\n    module_re = re.compile(\n        r'^\\s*\\.\\.\\s+(current)?module::\\s*([a-zA-Z0-9_.]+)\\s*$')\n    autosummary_item_re = re.compile(r'^\\s+(~?[_a-zA-Z][a-zA-Z0-9_.]*)\\s*.*?')\n    recursive_arg_re = re.compile(r'^\\s+:recursive:\\s*$')\n    toctree_arg_re = re.compile(r'^\\s+:toctree:\\s*(.*?)\\s*$')\n    template_arg_re = re.compile(r'^\\s+:template:\\s*(.*?)\\s*$')\n\n    documented = []  # type: List[AutosummaryEntry]\n\n    recursive = False\n    toctree = None  # type: str\n    template = None\n    current_module = module\n    in_autosummary = False\n    base_indent = \"\"\n\n    for line in lines:\n        if in_autosummary:\n            m = recursive_arg_re.match(line)\n            if m:\n                recursive = True\n                continue\n\n            m = toctree_arg_re.match(line)\n            if m:\n                toctree = m.group(1)\n                if filename:\n                    toctree = os.path.join(os.path.dirname(filename),\n                                           toctree)\n                continue\n\n            m = template_arg_re.match(line)\n            if m:\n                template = m.group(1).strip()\n                continue\n\n            if line.strip().startswith(':'):\n                continue  # skip options\n\n            m = autosummary_item_re.match(line)\n            if m:\n                name = m.group(1).strip()\n                if name.startswith('~'):\n                    name = name[1:]\n                if current_module and \\\n                   not name.startswith(current_module + '.'):\n                    name = \"%s.%s\" % (current_module, name)\n                documented.append(AutosummaryEntry(name, toctree, template, recursive))\n                continue\n\n            if not line.strip() or line.startswith(base_indent + \" \"):\n                continue\n\n            in_autosummary = False\n\n        m = autosummary_re.match(line)\n        if m:\n            in_autosummary = True\n            base_indent = m.group(1)\n            recursive = False\n            toctree = None\n            template = None\n            continue\n\n        m = automodule_re.search(line)\n        if m:\n            current_module = m.group(1).strip()\n            # recurse into the automodule docstring\n            documented.extend(find_autosummary_in_docstring(\n                current_module, filename=filename))\n            continue\n\n        m = module_re.match(line)\n        if m:\n            current_module = m.group(2)\n            continue\n\n    return documented\n\n\ndef get_parser() -> argparse.ArgumentParser:\n    parser = argparse.ArgumentParser(\n        usage='%(prog)s [OPTIONS] <SOURCE_FILE>...',\n        epilog=__('For more information, visit <http://sphinx-doc.org/>.'),\n        description=__(\"\"\"\nGenerate ReStructuredText using autosummary directives.\n\nsphinx-autogen is a frontend to sphinx.ext.autosummary.generate. It generates\nthe reStructuredText files from the autosummary directives contained in the\ngiven input files.\n\nThe format of the autosummary directive is documented in the\n``sphinx.ext.autosummary`` Python module and can be read using::\n\n  pydoc sphinx.ext.autosummary\n\"\"\"))\n\n    parser.add_argument('--version', action='version', dest='show_version',\n                        version='%%(prog)s %s' % __display_version__)\n\n    parser.add_argument('source_file', nargs='+',\n                        help=__('source files to generate rST files for'))\n\n    parser.add_argument('-o', '--output-dir', action='store',\n                        dest='output_dir',\n                        help=__('directory to place all output in'))\n    parser.add_argument('-s', '--suffix', action='store', dest='suffix',\n                        default='rst',\n                        help=__('default suffix for files (default: '\n                                '%(default)s)'))\n    parser.add_argument('-t', '--templates', action='store', dest='templates',\n                        default=None,\n                        help=__('custom template directory (default: '\n                                '%(default)s)'))\n    parser.add_argument('-i', '--imported-members', action='store_true',\n                        dest='imported_members', default=False,\n                        help=__('document imported members (default: '\n                                '%(default)s)'))\n\n    return parser\n\n\ndef main(argv: List[str] = sys.argv[1:]) -> None:\n    sphinx.locale.setlocale(locale.LC_ALL, '')\n    sphinx.locale.init_console(os.path.join(package_dir, 'locale'), 'sphinx')\n    translator, _ = sphinx.locale.init([], None)\n\n    app = DummyApplication(translator)\n    logging.setup(app, sys.stdout, sys.stderr)  # type: ignore\n    setup_documenters(app)\n    args = get_parser().parse_args(argv)\n\n    if args.templates:\n        app.config.templates_path.append(path.abspath(args.templates))\n\n    generate_autosummary_docs(args.source_file, args.output_dir,\n                              '.' + args.suffix,\n                              imported_members=args.imported_members,\n                              app=app)\n\n\nif __name__ == '__main__':\n    main()", "\"\"\"\n    sphinx.ext.autosummary.generate\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Usable as a library or script to generate automatic RST source files for\n    items referred to in autosummary:: directives.\n\n    Each generated RST file contains a single auto*:: directive which\n    extracts the docstring of the referred item.\n\n    Example Makefile rule::\n\n       generate:\n               sphinx-autogen -o source/generated source/*.rst\n\n    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nimport argparse\nimport locale\nimport os\nimport pkgutil\nimport pydoc\nimport re\nimport sys\nimport warnings\nfrom gettext import NullTranslations\nfrom os import path\nfrom typing import Any, Callable, Dict, List, NamedTuple, Set, Tuple, Union\n\nfrom jinja2 import TemplateNotFound\nfrom jinja2.sandbox import SandboxedEnvironment\n\nimport sphinx.locale\nfrom sphinx import __display_version__\nfrom sphinx import package_dir\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.deprecation import RemovedInSphinx40Warning, RemovedInSphinx50Warning\nfrom sphinx.ext.autodoc import Documenter\nfrom sphinx.ext.autosummary import import_by_name, get_documenter\nfrom sphinx.locale import __\nfrom sphinx.pycode import ModuleAnalyzer, PycodeError\nfrom sphinx.registry import SphinxComponentRegistry\nfrom sphinx.util import logging\nfrom sphinx.util import rst\nfrom sphinx.util import split_full_qualified_name\nfrom sphinx.util.inspect import safe_getattr\nfrom sphinx.util.osutil import ensuredir\nfrom sphinx.util.template import SphinxTemplateLoader\n\nif False:\n    # For type annotation\n    from typing import Type  # for python3.5.1\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass DummyApplication:\n    \"\"\"Dummy Application class for sphinx-autogen command.\"\"\"\n\n    def __init__(self, translator: NullTranslations) -> None:\n        self.config = Config()\n        self.registry = SphinxComponentRegistry()\n        self.messagelog = []  # type: List[str]\n        self.srcdir = \"/\"\n        self.translator = translator\n        self.verbosity = 0\n        self._warncount = 0\n        self.warningiserror = False\n\n        self.config.add('autosummary_context', {}, True, None)\n        self.config.init_values()\n\n    def emit_firstresult(self, *args: Any) -> None:\n        pass\n\n\nAutosummaryEntry = NamedTuple('AutosummaryEntry', [('name', str),\n                                                   ('path', str),\n                                                   ('template', str),\n                                                   ('recursive', bool)])\n\n\ndef setup_documenters(app: Any) -> None:\n    from sphinx.ext.autodoc import (\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    )\n    documenters = [\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    ]  # type: List[Type[Documenter]]\n    for documenter in documenters:\n        app.registry.add_documenter(documenter.objtype, documenter)\n\n\ndef _simple_info(msg: str) -> None:\n    print(msg)\n\n\ndef _simple_warn(msg: str) -> None:\n    print('WARNING: ' + msg, file=sys.stderr)\n\n\ndef _underline(title: str, line: str = '=') -> str:\n    if '\\n' in title:\n        raise ValueError('Can only underline single lines')\n    return title + '\\n' + line * len(title)\n\n\nclass AutosummaryRenderer:\n    \"\"\"A helper class for rendering.\"\"\"\n\n    def __init__(self, app: Union[Builder, Sphinx], template_dir: str = None) -> None:\n        if isinstance(app, Builder):\n            warnings.warn('The first argument for AutosummaryRenderer has been '\n                          'changed to Sphinx object',\n                          RemovedInSphinx50Warning, stacklevel=2)\n        if template_dir:\n            warnings.warn('template_dir argument for AutosummaryRenderer is deprecated.',\n                          RemovedInSphinx50Warning, stacklevel=2)\n\n        system_templates_path = [os.path.join(package_dir, 'ext', 'autosummary', 'templates')]\n        loader = SphinxTemplateLoader(app.srcdir, app.config.templates_path,\n                                      system_templates_path)\n\n        self.env = SandboxedEnvironment(loader=loader)\n        self.env.filters['escape'] = rst.escape\n        self.env.filters['e'] = rst.escape\n        self.env.filters['underline'] = _underline\n\n        if isinstance(app, (Sphinx, DummyApplication)):\n            if app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.translator)  # type: ignore\n        elif isinstance(app, Builder):\n            if app.app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.app.translator)  # type: ignore\n\n    def exists(self, template_name: str) -> bool:\n        \"\"\"Check if template file exists.\"\"\"\n        warnings.warn('AutosummaryRenderer.exists() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n        try:\n            self.env.get_template(template_name)\n            return True\n        except TemplateNotFound:\n            return False\n\n    def render(self, template_name: str, context: Dict) -> str:\n        \"\"\"Render a template file.\"\"\"\n        try:\n            template = self.env.get_template(template_name)\n        except TemplateNotFound:\n            try:\n                # objtype is given as template_name\n                template = self.env.get_template('autosummary/%s.rst' % template_name)\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _info = info\n    else:\n        _info = logger.info\n\n    if warn:\n        warnings.warn('warn argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _warn = warn\n    else:\n        _warn = logger.warning\n\n    if builder:\n        warnings.warn('builder argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    if template_dir:\n        warnings.warn('template_dir argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    showed_sources = list(sorted(sources))\n    if len(showed_sources) > 20:\n        showed_sources = showed_sources[:10] + ['...'] + showed_sources[-10:]\n    _info(__('[autosummary] generating autosummary for: %s') %\n          ', '.join(showed_sources))\n\n    if output_dir:\n        _info(__('[autosummary] writing to %s') % output_dir)\n\n    if base_path is not None:\n        sources = [os.path.join(base_path, filename) for filename in sources]\n\n    template = AutosummaryRenderer(app)\n\n    # read\n    items = find_autosummary_in_files(sources)\n\n    # keep track of new files\n    new_files = []\n\n    # write\n    for entry in sorted(set(items), key=str):\n        if entry.path is None:\n            # The corresponding autosummary:: directive did not have\n            # a :toctree: option\n            continue\n\n        path = output_dir or os.path.abspath(entry.path)\n        ensuredir(path)\n\n        try:\n            name, obj, parent, mod_name = import_by_name(entry.name)\n        except ImportError as e:\n            _warn(__('[autosummary] failed to import %r: %s') % (entry.name, e))\n            continue\n\n        context = {}\n        if app:\n            context.update(app.config.autosummary_context)\n\n        content = generate_autosummary_content(name, obj, parent, template, entry.template,\n                                               imported_members, app, entry.recursive, context)\n\n        filename = os.path.join(path, name + suffix)\n        if os.path.isfile(filename):\n            with open(filename) as f:\n                old_content = f.read()\n\n            if content == old_content:\n                continue\n            elif overwrite:  # content has changed\n                with open(filename, 'w') as f:\n                    f.write(content)\n                new_files.append(filename)\n        else:\n            with open(filename, 'w') as f:\n                f.write(content)\n            new_files.append(filename)\n\n    # descend recursively to new files\n    if new_files:\n        generate_autosummary_docs(new_files, output_dir=output_dir,\n                                  suffix=suffix, warn=warn, info=info,\n                                  base_path=base_path,\n                                  imported_members=imported_members, app=app,\n                                  overwrite=overwrite)\n\n\n# -- Finding documented entries in files ---------------------------------------\n\ndef find_autosummary_in_files(filenames: List[str]) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in source/*.rst.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    documented = []  # type: List[AutosummaryEntry]\n    for filename in filenames:\n        with open(filename, encoding='utf-8', errors='ignore') as f:\n            lines = f.read().splitlines()\n            documented.extend(find_autosummary_in_lines(lines, filename=filename))\n    return documented\n\n\ndef find_autosummary_in_docstring(name: str, module: str = None, filename: str = None\n                                  ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in the given object's docstring.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    if module:\n        warnings.warn('module argument for find_autosummary_in_docstring() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    try:\n        real_name, obj, parent, modname = import_by_name(name)\n        lines = pydoc.getdoc(obj).splitlines()\n        return find_autosummary_in_lines(lines, module=name, filename=filename)\n    except AttributeError:\n        pass\n    except ImportError as e:\n        print(\"Failed to import '%s': %s\" % (name, e))\n    except SystemExit:\n        print(\"Failed to import '%s'; the module executes module level \"\n              \"statement and it might call sys.exit().\" % name)\n    return []\n\n\ndef find_autosummary_in_lines(lines: List[str], module: str = None, filename: str = None\n                              ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items appear in autosummary:: directives in the\n    given lines.\n\n    Returns a list of (name, toctree, template) where *name* is a name\n    of an object and *toctree* the :toctree: path of the corresponding\n    autosummary directive (relative to the root of the file name), and\n    *template* the value of the :template: option. *toctree* and\n    *template* ``None`` if the directive does not have the\n    corresponding options set.\n    \"\"\"\n    autosummary_re = re.compile(r'^(\\s*)\\.\\.\\s+autosummary::\\s*')\n    automodule_re = re.compile(\n        r'^\\s*\\.\\.\\s+automodule::\\s*([A-Za-z0-9_.]+)\\s*$')\n    module_re = re.compile(\n        r'^\\s*\\.\\.\\s+(current)?module::\\s*([a-zA-Z0-9_.]+)\\s*$')\n    autosummary_item_re = re.compile(r'^\\s+(~?[_a-zA-Z][a-zA-Z0-9_.]*)\\s*.*?')\n    recursive_arg_re = re.compile(r'^\\s+:recursive:\\s*$')\n    toctree_arg_re = re.compile(r'^\\s+:toctree:\\s*(.*?)\\s*$')\n    template_arg_re = re.compile(r'^\\s+:template:\\s*(.*?)\\s*$')\n\n    documented = []  # type: List[AutosummaryEntry]\n\n    recursive = False\n    toctree = None  # type: str\n    template = None\n    current_module = module\n    in_autosummary = False\n    base_indent = \"\"\n\n    for line in lines:\n        if in_autosummary:\n            m = recursive_arg_re.match(line)\n            if m:\n                recursive = True\n                continue\n\n            m = toctree_arg_re.match(line)\n            if m:\n                toctree = m.group(1)\n                if filename:\n                    toctree = os.path.join(os.path.dirname(filename),\n                                           toctree)\n                continue\n\n            m = template_arg_re.match(line)\n            if m:\n                template = m.group(1).strip()\n                continue\n\n            if line.strip().startswith(':'):\n                continue  # skip options\n\n            m = autosummary_item_re.match(line)\n            if m:\n                name = m.group(1).strip()\n                if name.startswith('~'):\n                    name = name[1:]\n                if current_module and \\\n                   not name.startswith(current_module + '.'):\n                    name = \"%s.%s\" % (current_module, name)\n                documented.append(AutosummaryEntry(name, toctree, template, recursive))\n                continue\n\n            if not line.strip() or line.startswith(base_indent + \" \"):\n                continue\n\n            in_autosummary = False\n\n        m = autosummary_re.match(line)\n        if m:\n            in_autosummary = True\n            base_indent = m.group(1)\n            recursive = False\n            toctree = None\n            template = None\n            continue\n\n        m = automodule_re.search(line)\n        if m:\n            current_module = m.group(1).strip()\n            # recurse into the automodule docstring\n            documented.extend(find_autosummary_in_docstring(\n                current_module, filename=filename))\n            continue\n\n        m = module_re.match(line)\n        if m:\n            current_module = m.group(2)\n            continue\n\n    return documented\n\n\ndef get_parser() -> argparse.ArgumentParser:\n    parser = argparse.ArgumentParser(\n        usage='%(prog)s [OPTIONS] <SOURCE_FILE>...',\n        epilog=__('For more information, visit <http://sphinx-doc.org/>.'),\n        description=__(\"\"\"\nGenerate ReStructuredText using autosummary directives.\n\nsphinx-autogen is a frontend to sphinx.ext.autosummary.generate. It generates\nthe reStructuredText files from the autosummary directives contained in the\ngiven input files.\n\nThe format of the autosummary directive is documented in the\n``sphinx.ext.autosummary`` Python module and can be read using::\n\n  pydoc sphinx.ext.autosummary\n\"\"\"))\n\n    parser.add_argument('--version', action='version', dest='show_version',\n                        version='%%(prog)s %s' % __display_version__)\n\n    parser.add_argument('source_file', nargs='+',\n                        help=__('source files to generate rST files for'))\n\n    parser.add_argument('-o', '--output-dir', action='store',\n                        dest='output_dir',\n                        help=__('directory to place all output in'))\n    parser.add_argument('-s', '--suffix', action='store', dest='suffix',\n                        default='rst',\n                        help=__('default suffix for files (default: '\n                                '%(default)s)'))\n    parser.add_argument('-t', '--templates', action='store', dest='templates',\n                        default=None,\n                        help=__('custom template directory (default: '\n                                '%(default)s)'))\n    parser.add_argument('-i', '--imported-members', action='store_true',\n                        dest='imported_members', default=False,\n                        help=__('document imported members (default: '\n                                '%(default)s)'))\n\n    return parser\n\n\ndef main(argv: List[str] = sys.argv[1:]) -> None:\n    sphinx.locale.setlocale(locale.LC_ALL, '')\n    sphinx.locale.init_console(os.path.join(package_dir, 'locale'), 'sphinx')\n    translator, _ = sphinx.locale.init([], None)\n\n    app = DummyApplication(translator)\n    logging.setup(app, sys.stdout, sys.stderr)  # type: ignore\n    setup_documenters(app)\n    args = get_parser().parse_args(argv)\n\n    if args.templates:\n        app.config.templates_path.append(path.abspath(args.templates))\n\n    generate_autosummary_docs(args.source_file, args.output_dir,\n                              '.' + args.suffix,\n                              imported_members=args.imported_members,\n                              app=app)\n\n\nif __name__ == '__main__':\n    main()", "\"\"\"\n    sphinx.ext.autosummary.generate\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Usable as a library or script to generate automatic RST source files for\n    items referred to in autosummary:: directives.\n\n    Each generated RST file contains a single auto*:: directive which\n    extracts the docstring of the referred item.\n\n    Example Makefile rule::\n\n       generate:\n               sphinx-autogen -o source/generated source/*.rst\n\n    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nimport argparse\nimport locale\nimport os\nimport pkgutil\nimport pydoc\nimport re\nimport sys\nimport warnings\nfrom gettext import NullTranslations\nfrom os import path\nfrom typing import Any, Callable, Dict, List, NamedTuple, Set, Tuple, Union\n\nfrom jinja2 import TemplateNotFound\nfrom jinja2.sandbox import SandboxedEnvironment\n\nimport sphinx.locale\nfrom sphinx import __display_version__\nfrom sphinx import package_dir\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.deprecation import RemovedInSphinx40Warning, RemovedInSphinx50Warning\nfrom sphinx.ext.autodoc import Documenter\nfrom sphinx.ext.autosummary import import_by_name, get_documenter\nfrom sphinx.locale import __\nfrom sphinx.pycode import ModuleAnalyzer, PycodeError\nfrom sphinx.registry import SphinxComponentRegistry\nfrom sphinx.util import logging\nfrom sphinx.util import rst\nfrom sphinx.util import split_full_qualified_name\nfrom sphinx.util.inspect import safe_getattr\nfrom sphinx.util.osutil import ensuredir\nfrom sphinx.util.template import SphinxTemplateLoader\n\nif False:\n    # For type annotation\n    from typing import Type  # for python3.5.1\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass DummyApplication:\n    \"\"\"Dummy Application class for sphinx-autogen command.\"\"\"\n\n    def __init__(self, translator: NullTranslations) -> None:\n        self.config = Config()\n        self.registry = SphinxComponentRegistry()\n        self.messagelog = []  # type: List[str]\n        self.srcdir = \"/\"\n        self.translator = translator\n        self.verbosity = 0\n        self._warncount = 0\n        self.warningiserror = False\n\n        self.config.add('autosummary_context', {}, True, None)\n        self.config.init_values()\n\n    def emit_firstresult(self, *args: Any) -> None:\n        pass\n\n\nAutosummaryEntry = NamedTuple('AutosummaryEntry', [('name', str),\n                                                   ('path', str),\n                                                   ('template', str),\n                                                   ('recursive', bool)])\n\n\ndef setup_documenters(app: Any) -> None:\n    from sphinx.ext.autodoc import (\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    )\n    documenters = [\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    ]  # type: List[Type[Documenter]]\n    for documenter in documenters:\n        app.registry.add_documenter(documenter.objtype, documenter)\n\n\ndef _simple_info(msg: str) -> None:\n    print(msg)\n\n\ndef _simple_warn(msg: str) -> None:\n    print('WARNING: ' + msg, file=sys.stderr)\n\n\ndef _underline(title: str, line: str = '=') -> str:\n    if '\\n' in title:\n        raise ValueError('Can only underline single lines')\n    return title + '\\n' + line * len(title)\n\n\nclass AutosummaryRenderer:\n    \"\"\"A helper class for rendering.\"\"\"\n\n    def __init__(self, app: Union[Builder, Sphinx], template_dir: str = None) -> None:\n        if isinstance(app, Builder):\n            warnings.warn('The first argument for AutosummaryRenderer has been '\n                          'changed to Sphinx object',\n                          RemovedInSphinx50Warning, stacklevel=2)\n        if template_dir:\n            warnings.warn('template_dir argument for AutosummaryRenderer is deprecated.',\n                          RemovedInSphinx50Warning, stacklevel=2)\n\n        system_templates_path = [os.path.join(package_dir, 'ext', 'autosummary', 'templates')]\n        loader = SphinxTemplateLoader(app.srcdir, app.config.templates_path,\n                                      system_templates_path)\n\n        self.env = SandboxedEnvironment(loader=loader)\n        self.env.filters['escape'] = rst.escape\n        self.env.filters['e'] = rst.escape\n        self.env.filters['underline'] = _underline\n\n        if isinstance(app, (Sphinx, DummyApplication)):\n            if app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.translator)  # type: ignore\n        elif isinstance(app, Builder):\n            if app.app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.app.translator)  # type: ignore\n\n    def exists(self, template_name: str) -> bool:\n        \"\"\"Check if template file exists.\"\"\"\n        warnings.warn('AutosummaryRenderer.exists() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n        try:\n            self.env.get_template(template_name)\n            return True\n        except TemplateNotFound:\n            return False\n\n    def render(self, template_name: str, context: Dict) -> str:\n        \"\"\"Render a template file.\"\"\"\n        try:\n            template = self.env.get_template(template_name)\n        except TemplateNotFound:\n            try:\n                # objtype is given as template_name\n                template = self.env.get_template('autosummary/%s.rst' % template_name)\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _info = info\n    else:\n        _info = logger.info\n\n    if warn:\n        warnings.warn('warn argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _warn = warn\n    else:\n        _warn = logger.warning\n\n    if builder:\n        warnings.warn('builder argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    if template_dir:\n        warnings.warn('template_dir argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    showed_sources = list(sorted(sources))\n    if len(showed_sources) > 20:\n        showed_sources = showed_sources[:10] + ['...'] + showed_sources[-10:]\n    _info(__('[autosummary] generating autosummary for: %s') %\n          ', '.join(showed_sources))\n\n    if output_dir:\n        _info(__('[autosummary] writing to %s') % output_dir)\n\n    if base_path is not None:\n        sources = [os.path.join(base_path, filename) for filename in sources]\n\n    template = AutosummaryRenderer(app)\n\n    # read\n    items = find_autosummary_in_files(sources)\n\n    # keep track of new files\n    new_files = []\n\n    # write\n    for entry in sorted(set(items), key=str):\n        if entry.path is None:\n            # The corresponding autosummary:: directive did not have\n            # a :toctree: option\n            continue\n\n        path = output_dir or os.path.abspath(entry.path)\n        ensuredir(path)\n\n        try:\n            name, obj, parent, mod_name = import_by_name(entry.name)\n        except ImportError as e:\n            _warn(__('[autosummary] failed to import %r: %s') % (entry.name, e))\n            continue\n\n        context = {}\n        if app:\n            context.update(app.config.autosummary_context)\n\n        content = generate_autosummary_content(name, obj, parent, template, entry.template,\n                                               imported_members, app, entry.recursive, context)\n\n        filename = os.path.join(path, name + suffix)\n        if os.path.isfile(filename):\n            with open(filename) as f:\n                old_content = f.read()\n\n            if content == old_content:\n                continue\n            elif overwrite:  # content has changed\n                with open(filename, 'w') as f:\n                    f.write(content)\n                new_files.append(filename)\n        else:\n            with open(filename, 'w') as f:\n                f.write(content)\n            new_files.append(filename)\n\n    # descend recursively to new files\n    if new_files:\n        generate_autosummary_docs(new_files, output_dir=output_dir,\n                                  suffix=suffix, warn=warn, info=info,\n                                  base_path=base_path,\n                                  imported_members=imported_members, app=app,\n                                  overwrite=overwrite)\n\n\n# -- Finding documented entries in files ---------------------------------------\n\ndef find_autosummary_in_files(filenames: List[str]) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in source/*.rst.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    documented = []  # type: List[AutosummaryEntry]\n    for filename in filenames:\n        with open(filename, encoding='utf-8', errors='ignore') as f:\n            lines = f.read().splitlines()\n            documented.extend(find_autosummary_in_lines(lines, filename=filename))\n    return documented\n\n\ndef find_autosummary_in_docstring(name: str, module: str = None, filename: str = None\n                                  ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in the given object's docstring.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    if module:\n        warnings.warn('module argument for find_autosummary_in_docstring() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    try:\n        real_name, obj, parent, modname = import_by_name(name)\n        lines = pydoc.getdoc(obj).splitlines()\n        return find_autosummary_in_lines(lines, module=name, filename=filename)\n    except AttributeError:\n        pass\n    except ImportError as e:\n        print(\"Failed to import '%s': %s\" % (name, e))\n    except SystemExit:\n        print(\"Failed to import '%s'; the module executes module level \"\n              \"statement and it might call sys.exit().\" % name)\n    return []\n\n\ndef find_autosummary_in_lines(lines: List[str], module: str = None, filename: str = None\n                              ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items appear in autosummary:: directives in the\n    given lines.\n\n    Returns a list of (name, toctree, template) where *name* is a name\n    of an object and *toctree* the :toctree: path of the corresponding\n    autosummary directive (relative to the root of the file name), and\n    *template* the value of the :template: option. *toctree* and\n    *template* ``None`` if the directive does not have the\n    corresponding options set.\n    \"\"\"\n    autosummary_re = re.compile(r'^(\\s*)\\.\\.\\s+autosummary::\\s*')\n    automodule_re = re.compile(\n        r'^\\s*\\.\\.\\s+automodule::\\s*([A-Za-z0-9_.]+)\\s*$')\n    module_re = re.compile(\n        r'^\\s*\\.\\.\\s+(current)?module::\\s*([a-zA-Z0-9_.]+)\\s*$')\n    autosummary_item_re = re.compile(r'^\\s+(~?[_a-zA-Z][a-zA-Z0-9_.]*)\\s*.*?')\n    recursive_arg_re = re.compile(r'^\\s+:recursive:\\s*$')\n    toctree_arg_re = re.compile(r'^\\s+:toctree:\\s*(.*?)\\s*$')\n    template_arg_re = re.compile(r'^\\s+:template:\\s*(.*?)\\s*$')\n\n    documented = []  # type: List[AutosummaryEntry]\n\n    recursive = False\n    toctree = None  # type: str\n    template = None\n    current_module = module\n    in_autosummary = False\n    base_indent = \"\"\n\n    for line in lines:\n        if in_autosummary:\n            m = recursive_arg_re.match(line)\n            if m:\n                recursive = True\n                continue\n\n            m = toctree_arg_re.match(line)\n            if m:\n                toctree = m.group(1)\n                if filename:\n                    toctree = os.path.join(os.path.dirname(filename),\n                                           toctree)\n                continue\n\n            m = template_arg_re.match(line)\n            if m:\n                template = m.group(1).strip()\n                continue\n\n            if line.strip().startswith(':'):\n                continue  # skip options\n\n            m = autosummary_item_re.match(line)\n            if m:\n                name = m.group(1).strip()\n                if name.startswith('~'):\n                    name = name[1:]\n                if current_module and \\\n                   not name.startswith(current_module + '.'):\n                    name = \"%s.%s\" % (current_module, name)\n                documented.append(AutosummaryEntry(name, toctree, template, recursive))\n                continue\n\n            if not line.strip() or line.startswith(base_indent + \" \"):\n                continue\n\n            in_autosummary = False\n\n        m = autosummary_re.match(line)\n        if m:\n            in_autosummary = True\n            base_indent = m.group(1)\n            recursive = False\n            toctree = None\n            template = None\n            continue\n\n        m = automodule_re.search(line)\n        if m:\n            current_module = m.group(1).strip()\n            # recurse into the automodule docstring\n            documented.extend(find_autosummary_in_docstring(\n                current_module, filename=filename))\n            continue\n\n        m = module_re.match(line)\n        if m:\n            current_module = m.group(2)\n            continue\n\n    return documented\n\n\ndef get_parser() -> argparse.ArgumentParser:\n    parser = argparse.ArgumentParser(\n        usage='%(prog)s [OPTIONS] <SOURCE_FILE>...',\n        epilog=__('For more information, visit <http://sphinx-doc.org/>.'),\n        description=__(\"\"\"\nGenerate ReStructuredText using autosummary directives.\n\nsphinx-autogen is a frontend to sphinx.ext.autosummary.generate. It generates\nthe reStructuredText files from the autosummary directives contained in the\ngiven input files.\n\nThe format of the autosummary directive is documented in the\n``sphinx.ext.autosummary`` Python module and can be read using::\n\n  pydoc sphinx.ext.autosummary\n\"\"\"))\n\n    parser.add_argument('--version', action='version', dest='show_version',\n                        version='%%(prog)s %s' % __display_version__)\n\n    parser.add_argument('source_file', nargs='+',\n                        help=__('source files to generate rST files for'))\n\n    parser.add_argument('-o', '--output-dir', action='store',\n                        dest='output_dir',\n                        help=__('directory to place all output in'))\n    parser.add_argument('-s', '--suffix', action='store', dest='suffix',\n                        default='rst',\n                        help=__('default suffix for files (default: '\n                                '%(default)s)'))\n    parser.add_argument('-t', '--templates', action='store', dest='templates',\n                        default=None,\n                        help=__('custom template directory (default: '\n                                '%(default)s)'))\n    parser.add_argument('-i', '--imported-members', action='store_true',\n                        dest='imported_members', default=False,\n                        help=__('document imported members (default: '\n                                '%(default)s)'))\n\n    return parser\n\n\ndef main(argv: List[str] = sys.argv[1:]) -> None:\n    sphinx.locale.setlocale(locale.LC_ALL, '')\n    sphinx.locale.init_console(os.path.join(package_dir, 'locale'), 'sphinx')\n    translator, _ = sphinx.locale.init([], None)\n\n    app = DummyApplication(translator)\n    logging.setup(app, sys.stdout, sys.stderr)  # type: ignore\n    setup_documenters(app)\n    args = get_parser().parse_args(argv)\n\n    if args.templates:\n        app.config.templates_path.append(path.abspath(args.templates))\n\n    generate_autosummary_docs(args.source_file, args.output_dir,\n                              '.' + args.suffix,\n                              imported_members=args.imported_members,\n                              app=app)\n\n\nif __name__ == '__main__':\n    main()", "\"\"\"\n    sphinx.ext.autosummary.generate\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Usable as a library or script to generate automatic RST source files for\n    items referred to in autosummary:: directives.\n\n    Each generated RST file contains a single auto*:: directive which\n    extracts the docstring of the referred item.\n\n    Example Makefile rule::\n\n       generate:\n               sphinx-autogen -o source/generated source/*.rst\n\n    :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nimport argparse\nimport locale\nimport os\nimport pkgutil\nimport pydoc\nimport re\nimport sys\nimport warnings\nfrom gettext import NullTranslations\nfrom os import path\nfrom typing import Any, Callable, Dict, List, NamedTuple, Set, Tuple, Union\n\nfrom jinja2 import TemplateNotFound\nfrom jinja2.sandbox import SandboxedEnvironment\n\nimport sphinx.locale\nfrom sphinx import __display_version__\nfrom sphinx import package_dir\nfrom sphinx.application import Sphinx\nfrom sphinx.builders import Builder\nfrom sphinx.config import Config\nfrom sphinx.deprecation import RemovedInSphinx40Warning, RemovedInSphinx50Warning\nfrom sphinx.ext.autodoc import Documenter\nfrom sphinx.ext.autosummary import import_by_name, get_documenter\nfrom sphinx.locale import __\nfrom sphinx.pycode import ModuleAnalyzer, PycodeError\nfrom sphinx.registry import SphinxComponentRegistry\nfrom sphinx.util import logging\nfrom sphinx.util import rst\nfrom sphinx.util import split_full_qualified_name\nfrom sphinx.util.inspect import safe_getattr\nfrom sphinx.util.osutil import ensuredir\nfrom sphinx.util.template import SphinxTemplateLoader\n\nif False:\n    # For type annotation\n    from typing import Type  # for python3.5.1\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass DummyApplication:\n    \"\"\"Dummy Application class for sphinx-autogen command.\"\"\"\n\n    def __init__(self, translator: NullTranslations) -> None:\n        self.config = Config()\n        self.registry = SphinxComponentRegistry()\n        self.messagelog = []  # type: List[str]\n        self.srcdir = \"/\"\n        self.translator = translator\n        self.verbosity = 0\n        self._warncount = 0\n        self.warningiserror = False\n\n        self.config.add('autosummary_context', {}, True, None)\n        self.config.init_values()\n\n    def emit_firstresult(self, *args: Any) -> None:\n        pass\n\n\nAutosummaryEntry = NamedTuple('AutosummaryEntry', [('name', str),\n                                                   ('path', str),\n                                                   ('template', str),\n                                                   ('recursive', bool)])\n\n\ndef setup_documenters(app: Any) -> None:\n    from sphinx.ext.autodoc import (\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    )\n    documenters = [\n        ModuleDocumenter, ClassDocumenter, ExceptionDocumenter, DataDocumenter,\n        FunctionDocumenter, MethodDocumenter, AttributeDocumenter,\n        InstanceAttributeDocumenter, DecoratorDocumenter, PropertyDocumenter,\n        SlotsAttributeDocumenter, DataDeclarationDocumenter,\n        SingledispatchFunctionDocumenter,\n    ]  # type: List[Type[Documenter]]\n    for documenter in documenters:\n        app.registry.add_documenter(documenter.objtype, documenter)\n\n\ndef _simple_info(msg: str) -> None:\n    print(msg)\n\n\ndef _simple_warn(msg: str) -> None:\n    print('WARNING: ' + msg, file=sys.stderr)\n\n\ndef _underline(title: str, line: str = '=') -> str:\n    if '\\n' in title:\n        raise ValueError('Can only underline single lines')\n    return title + '\\n' + line * len(title)\n\n\nclass AutosummaryRenderer:\n    \"\"\"A helper class for rendering.\"\"\"\n\n    def __init__(self, app: Union[Builder, Sphinx], template_dir: str = None) -> None:\n        if isinstance(app, Builder):\n            warnings.warn('The first argument for AutosummaryRenderer has been '\n                          'changed to Sphinx object',\n                          RemovedInSphinx50Warning, stacklevel=2)\n        if template_dir:\n            warnings.warn('template_dir argument for AutosummaryRenderer is deprecated.',\n                          RemovedInSphinx50Warning, stacklevel=2)\n\n        system_templates_path = [os.path.join(package_dir, 'ext', 'autosummary', 'templates')]\n        loader = SphinxTemplateLoader(app.srcdir, app.config.templates_path,\n                                      system_templates_path)\n\n        self.env = SandboxedEnvironment(loader=loader)\n        self.env.filters['escape'] = rst.escape\n        self.env.filters['e'] = rst.escape\n        self.env.filters['underline'] = _underline\n\n        if isinstance(app, (Sphinx, DummyApplication)):\n            if app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.translator)  # type: ignore\n        elif isinstance(app, Builder):\n            if app.app.translator:\n                self.env.add_extension(\"jinja2.ext.i18n\")\n                self.env.install_gettext_translations(app.app.translator)  # type: ignore\n\n    def exists(self, template_name: str) -> bool:\n        \"\"\"Check if template file exists.\"\"\"\n        warnings.warn('AutosummaryRenderer.exists() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n        try:\n            self.env.get_template(template_name)\n            return True\n        except TemplateNotFound:\n            return False\n\n    def render(self, template_name: str, context: Dict) -> str:\n        \"\"\"Render a template file.\"\"\"\n        try:\n            template = self.env.get_template(template_name)\n        except TemplateNotFound:\n            try:\n                # objtype is given as template_name\n                template = self.env.get_template('autosummary/%s.rst' % template_name)\n            except TemplateNotFound:\n                # fallback to base.rst\n                template = self.env.get_template('autosummary/base.rst')\n\n        return template.render(context)\n\n\n# -- Generating output ---------------------------------------------------------\n\n\ndef generate_autosummary_content(name: str, obj: Any, parent: Any,\n                                 template: AutosummaryRenderer, template_name: str,\n                                 imported_members: bool, app: Any,\n                                 recursive: bool, context: Dict) -> str:\n    doc = get_documenter(app, obj, parent)\n\n    def skip_member(obj: Any, name: str, objtype: str) -> bool:\n        try:\n            return app.emit_firstresult('autodoc-skip-member', objtype, name,\n                                        obj, False, {})\n        except Exception as exc:\n            logger.warning(__('autosummary: failed to determine %r to be documented, '\n                              'the following exception was raised:\\n%s'),\n                           name, exc, type='autosummary')\n            return False\n\n    def get_members(obj: Any, types: Set[str], include_public: List[str] = [],\n                    imported: bool = True) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        public = []  # type: List[str]\n        for name in dir(obj):\n            try:\n                value = safe_getattr(obj, name)\n            except AttributeError:\n                continue\n            documenter = get_documenter(app, value, obj)\n            if documenter.objtype in types:\n                # skip imported members if expected\n                if imported or getattr(value, '__module__', None) == obj.__name__:\n                    skipped = skip_member(value, name, documenter.objtype)\n                    if skipped is True:\n                        pass\n                    elif skipped is False:\n                        # show the member forcedly\n                        items.append(name)\n                        public.append(name)\n                    else:\n                        items.append(name)\n                        if name in include_public or not name.startswith('_'):\n                            # considers member as public\n                            public.append(name)\n        return public, items\n\n    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:\n        \"\"\"Find module attributes with docstrings.\"\"\"\n        attrs, public = [], []\n        try:\n            analyzer = ModuleAnalyzer.for_module(name)\n            attr_docs = analyzer.find_attr_docs()\n            for namespace, attr_name in attr_docs:\n                if namespace == '' and attr_name in members:\n                    attrs.append(attr_name)\n                    if not attr_name.startswith('_'):\n                        public.append(attr_name)\n        except PycodeError:\n            pass    # give up if ModuleAnalyzer fails to parse code\n        return public, attrs\n\n    def get_modules(obj: Any) -> Tuple[List[str], List[str]]:\n        items = []  # type: List[str]\n        for _, modname, ispkg in pkgutil.iter_modules(obj.__path__):\n            fullname = name + '.' + modname\n            items.append(fullname)\n        public = [x for x in items if not x.split('.')[-1].startswith('_')]\n        return public, items\n\n    ns = {}  # type: Dict[str, Any]\n    ns.update(context)\n\n    if doc.objtype == 'module':\n        ns['members'] = dir(obj)\n        ns['functions'], ns['all_functions'] = \\\n            get_members(obj, {'function'}, imported=imported_members)\n        ns['classes'], ns['all_classes'] = \\\n            get_members(obj, {'class'}, imported=imported_members)\n        ns['exceptions'], ns['all_exceptions'] = \\\n            get_members(obj, {'exception'}, imported=imported_members)\n        ns['attributes'], ns['all_attributes'] = \\\n            get_module_attrs(ns['members'])\n        ispackage = hasattr(obj, '__path__')\n        if ispackage and recursive:\n            ns['modules'], ns['all_modules'] = get_modules(obj)\n    elif doc.objtype == 'class':\n        ns['members'] = dir(obj)\n        ns['inherited_members'] = \\\n            set(dir(obj)) - set(obj.__dict__.keys())\n        ns['methods'], ns['all_methods'] = \\\n            get_members(obj, {'method'}, ['__init__'])\n        ns['attributes'], ns['all_attributes'] = \\\n            get_members(obj, {'attribute', 'property'})\n\n    modname, qualname = split_full_qualified_name(name)\n    if doc.objtype in ('method', 'attribute', 'property'):\n        ns['class'] = qualname.rsplit(\".\", 1)[0]\n\n    if doc.objtype in ('class',):\n        shortname = qualname\n    else:\n        shortname = qualname.rsplit(\".\", 1)[-1]\n\n    ns['fullname'] = name\n    ns['module'] = modname\n    ns['objname'] = qualname\n    ns['name'] = shortname\n\n    ns['objtype'] = doc.objtype\n    ns['underline'] = len(name) * '='\n\n    if template_name:\n        return template.render(template_name, ns)\n    else:\n        return template.render(doc.objtype, ns)\n\n\ndef generate_autosummary_docs(sources: List[str], output_dir: str = None,\n                              suffix: str = '.rst', warn: Callable = None,\n                              info: Callable = None, base_path: str = None,\n                              builder: Builder = None, template_dir: str = None,\n                              imported_members: bool = False, app: Any = None,\n                              overwrite: bool = True) -> None:\n    if info:\n        warnings.warn('info argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _info = info\n    else:\n        _info = logger.info\n\n    if warn:\n        warnings.warn('warn argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx40Warning, stacklevel=2)\n        _warn = warn\n    else:\n        _warn = logger.warning\n\n    if builder:\n        warnings.warn('builder argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    if template_dir:\n        warnings.warn('template_dir argument for generate_autosummary_docs() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    showed_sources = list(sorted(sources))\n    if len(showed_sources) > 20:\n        showed_sources = showed_sources[:10] + ['...'] + showed_sources[-10:]\n    _info(__('[autosummary] generating autosummary for: %s') %\n          ', '.join(showed_sources))\n\n    if output_dir:\n        _info(__('[autosummary] writing to %s') % output_dir)\n\n    if base_path is not None:\n        sources = [os.path.join(base_path, filename) for filename in sources]\n\n    template = AutosummaryRenderer(app)\n\n    # read\n    items = find_autosummary_in_files(sources)\n\n    # keep track of new files\n    new_files = []\n\n    # write\n    for entry in sorted(set(items), key=str):\n        if entry.path is None:\n            # The corresponding autosummary:: directive did not have\n            # a :toctree: option\n            continue\n\n        path = output_dir or os.path.abspath(entry.path)\n        ensuredir(path)\n\n        try:\n            name, obj, parent, mod_name = import_by_name(entry.name)\n        except ImportError as e:\n            _warn(__('[autosummary] failed to import %r: %s') % (entry.name, e))\n            continue\n\n        context = {}\n        if app:\n            context.update(app.config.autosummary_context)\n\n        content = generate_autosummary_content(name, obj, parent, template, entry.template,\n                                               imported_members, app, entry.recursive, context)\n\n        filename = os.path.join(path, name + suffix)\n        if os.path.isfile(filename):\n            with open(filename) as f:\n                old_content = f.read()\n\n            if content == old_content:\n                continue\n            elif overwrite:  # content has changed\n                with open(filename, 'w') as f:\n                    f.write(content)\n                new_files.append(filename)\n        else:\n            with open(filename, 'w') as f:\n                f.write(content)\n            new_files.append(filename)\n\n    # descend recursively to new files\n    if new_files:\n        generate_autosummary_docs(new_files, output_dir=output_dir,\n                                  suffix=suffix, warn=warn, info=info,\n                                  base_path=base_path,\n                                  imported_members=imported_members, app=app,\n                                  overwrite=overwrite)\n\n\n# -- Finding documented entries in files ---------------------------------------\n\ndef find_autosummary_in_files(filenames: List[str]) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in source/*.rst.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    documented = []  # type: List[AutosummaryEntry]\n    for filename in filenames:\n        with open(filename, encoding='utf-8', errors='ignore') as f:\n            lines = f.read().splitlines()\n            documented.extend(find_autosummary_in_lines(lines, filename=filename))\n    return documented\n\n\ndef find_autosummary_in_docstring(name: str, module: str = None, filename: str = None\n                                  ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items are documented in the given object's docstring.\n\n    See `find_autosummary_in_lines`.\n    \"\"\"\n    if module:\n        warnings.warn('module argument for find_autosummary_in_docstring() is deprecated.',\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    try:\n        real_name, obj, parent, modname = import_by_name(name)\n        lines = pydoc.getdoc(obj).splitlines()\n        return find_autosummary_in_lines(lines, module=name, filename=filename)\n    except AttributeError:\n        pass\n    except ImportError as e:\n        print(\"Failed to import '%s': %s\" % (name, e))\n    except SystemExit:\n        print(\"Failed to import '%s'; the module executes module level \"\n              \"statement and it might call sys.exit().\" % name)\n    return []\n\n\ndef find_autosummary_in_lines(lines: List[str], module: str = None, filename: str = None\n                              ) -> List[AutosummaryEntry]:\n    \"\"\"Find out what items appear in autosummary:: directives in the\n    given lines.\n\n    Returns a list of (name, toctree, template) where *name* is a name\n    of an object and *toctree* the :toctree: path of the corresponding\n    autosummary directive (relative to the root of the file name), and\n    *template* the value of the :template: option. *toctree* and\n    *template* ``None`` if the directive does not have the\n    corresponding options set.\n    \"\"\"\n    autosummary_re = re.compile(r'^(\\s*)\\.\\.\\s+autosummary::\\s*')\n    automodule_re = re.compile(\n        r'^\\s*\\.\\.\\s+automodule::\\s*([A-Za-z0-9_.]+)\\s*$')\n    module_re = re.compile(\n        r'^\\s*\\.\\.\\s+(current)?module::\\s*([a-zA-Z0-9_.]+)\\s*$')\n    autosummary_item_re = re.compile(r'^\\s+(~?[_a-zA-Z][a-zA-Z0-9_.]*)\\s*.*?')\n    recursive_arg_re = re.compile(r'^\\s+:recursive:\\s*$')\n    toctree_arg_re = re.compile(r'^\\s+:toctree:\\s*(.*?)\\s*$')\n    template_arg_re = re.compile(r'^\\s+:template:\\s*(.*?)\\s*$')\n\n    documented = []  # type: List[AutosummaryEntry]\n\n    recursive = False\n    toctree = None  # type: str\n    template = None\n    current_module = module\n    in_autosummary = False\n    base_indent = \"\"\n\n    for line in lines:\n        if in_autosummary:\n            m = recursive_arg_re.match(line)\n            if m:\n                recursive = True\n                continue\n\n            m = toctree_arg_re.match(line)\n            if m:\n                toctree = m.group(1)\n                if filename:\n                    toctree = os.path.join(os.path.dirname(filename),\n                                           toctree)\n                continue\n\n            m = template_arg_re.match(line)\n            if m:\n                template = m.group(1).strip()\n                continue\n\n            if line.strip().startswith(':'):\n                continue  # skip options\n\n            m = autosummary_item_re.match(line)\n            if m:\n                name = m.group(1).strip()\n                if name.startswith('~'):\n                    name = name[1:]\n                if current_module and \\\n                   not name.startswith(current_module + '.'):\n                    name = \"%s.%s\" % (current_module, name)\n                documented.append(AutosummaryEntry(name, toctree, template, recursive))\n                continue\n\n            if not line.strip() or line.startswith(base_indent + \" \"):\n                continue\n\n            in_autosummary = False\n\n        m = autosummary_re.match(line)\n        if m:\n            in_autosummary = True\n            base_indent = m.group(1)\n            recursive = False\n            toctree = None\n            template = None\n            continue\n\n        m = automodule_re.search(line)\n        if m:\n            current_module = m.group(1).strip()\n            # recurse into the automodule docstring\n            documented.extend(find_autosummary_in_docstring(\n                current_module, filename=filename))\n            continue\n\n        m = module_re.match(line)\n        if m:\n            current_module = m.group(2)\n            continue\n\n    return documented\n\n\ndef get_parser() -> argparse.ArgumentParser:\n    parser = argparse.ArgumentParser(\n        usage='%(prog)s [OPTIONS] <SOURCE_FILE>...',\n        epilog=__('For more information, visit <http://sphinx-doc.org/>.'),\n        description=__(\"\"\"\nGenerate ReStructuredText using autosummary directives.\n\nsphinx-autogen is a frontend to sphinx.ext.autosummary.generate. It generates\nthe reStructuredText files from the autosummary directives contained in the\ngiven input files.\n\nThe format of the autosummary directive is documented in the\n``sphinx.ext.autosummary`` Python module and can be read using::\n\n  pydoc sphinx.ext.autosummary\n\"\"\"))\n\n    parser.add_argument('--version', action='version', dest='show_version',\n                        version='%%(prog)s %s' % __display_version__)\n\n    parser.add_argument('source_file', nargs='+',\n                        help=__('source files to generate rST files for'))\n\n    parser.add_argument('-o', '--output-dir', action='store',\n                        dest='output_dir',\n                        help=__('directory to place all output in'))\n    parser.add_argument('-s', '--suffix', action='store', dest='suffix',\n                        default='rst',\n                        help=__('default suffix for files (default: '\n                                '%(default)s)'))\n    parser.add_argument('-t', '--templates', action='store', dest='templates',\n                        default=None,\n                        help=__('custom template directory (default: '\n                                '%(default)s)'))\n    parser.add_argument('-i', '--imported-members', action='store_true',\n                        dest='imported_members', default=False,\n                        help=__('document imported members (default: '\n                                '%(default)s)'))\n\n    return parser\n\n\ndef main(argv: List[str] = sys.argv[1:]) -> None:\n    sphinx.locale.setlocale(locale.LC_ALL, '')\n    sphinx.locale.init_console(os.path.join(package_dir, 'locale'), 'sphinx')\n    translator, _ = sphinx.locale.init([], None)\n\n    app = DummyApplication(translator)\n    logging.setup(app, sys.stdout, sys.stderr)  # type: ignore\n    setup_documenters(app)\n    args = get_parser().parse_args(argv)\n\n    if args.templates:\n        app.config.templates_path.append(path.abspath(args.templates))\n\n    generate_autosummary_docs(args.source_file, args.output_dir,\n                              '.' + args.suffix,\n                              imported_members=args.imported_members,\n                              app=app)\n\n\nif __name__ == '__main__':\n    main()"]], "file_names": [["sphinx/ext/autosummary/generate.py", "sphinx/ext/autosummary/generate.py", "sphinx/ext/autosummary/generate.py", "sphinx/ext/autosummary/generate.py", "sphinx/ext/autosummary/generate.py", "sphinx/ext/autosummary/generate.py", "sphinx/ext/autosummary/generate.py", "sphinx/ext/autosummary/generate.py", "sphinx/ext/autosummary/generate.py", "sphinx/ext/autosummary/generate.py"]]}
