{"instance_id": "astropy__astropy-6938", "found_files": ["astropy/io/fits/fitsrec.py", "astropy/io/fits/scripts/fitsdiff.py", "astropy/io/fits/util.py", "astropy/io/fits/header.py"], "additional_artifact_loc_file": {"raw_output_files": "```\nastropy/io/fits/fitsrec.py\nastropy/io/fits/tests/test_fitsrec.py\nastropy/io/fits/scripts/fitsdiff.py\nastropy/io/fits/util.py\nastropy/io/fits/header.py\n```"}, "file_traj": {"response": "```\nastropy/io/fits/fitsrec.py\nastropy/io/fits/tests/test_fitsrec.py\nastropy/io/fits/scripts/fitsdiff.py\nastropy/io/fits/util.py\nastropy/io/fits/header.py\n```", "usage": {"completion_tokens": 52, "prompt_tokens": 2414}, "prompt": "Please look through the following GitHub problem description, and Repository structure and provide a list of files that one would need to edit to fix the problem.\n\n### GitHub Problem Description ###\nPossible bug in io.fits related to D exponents\nI came across the following code in ``fitsrec.py``:\r\n\r\n```python\r\n        # Replace exponent separator in floating point numbers\r\n        if 'D' in format:\r\n            output_field.replace(encode_ascii('E'), encode_ascii('D'))\r\n```\r\n\r\nI think this may be incorrect because as far as I can tell ``replace`` is not an in-place operation for ``chararray`` (it returns a copy). Commenting out this code doesn't cause any tests to fail so I think this code isn't being tested anyway.\n\n\n###\n\n\n\n### Repository Structure ###\nastropy/\n    conftest.py\n    ez_setup.py\n    ah_bootstrap.py\n    setup.py\n    logger.py\n    setup_package.py\n    __init__.py\n    config/\n        paths.py\n        configuration.py\n        affiliated.py\n        setup_package.py\n        __init__.py\n    convolution/\n        convolve.py\n        core.py\n        utils.py\n        __init__.py\n        kernels.py\n    nddata/\n        ccddata.py\n        nddata.py\n        nddata_withmixins.py\n        flag_collection.py\n        compat.py\n        decorators.py\n        nddata_base.py\n        utils.py\n        nduncertainty.py\n        setup_package.py\n        __init__.py\n        mixins/\n            ndslicing.py\n            ndio.py\n            ndarithmetic.py\n            __init__.py\n    extern/\n        six.py\n        setup_package.py\n        __init__.py\n        bundled/\n            six.py\n            __init__.py\n        configobj/\n            configobj.py\n            validate.py\n            __init__.py\n        ply/\n            ctokens.py\n            yacc.py\n            cpp.py\n            lex.py\n            __init__.py\n    io/\n        registry.py\n        __init__.py\n        ascii/\n            ui.py\n            daophot.py\n            sextractor.py\n            connect.py\n            misc.py\n            core.py\n            latex.py\n            html.py\n            fixedwidth.py\n            basic.py\n            cds.py\n            ipac.py\n            fastbasic.py\n            rst.py\n            ecsv.py\n            setup_package.py\n            __init__.py\n        votable/\n            converters.py\n            table.py\n            volint.py\n            connect.py\n            tree.py\n            exceptions.py\n            xmlutil.py\n            util.py\n            setup_package.py\n            __init__.py\n            ucd.py\n            validator/\n                html.py\n                main.py\n                result.py\n                __init__.py\n        fits/\n            file.py\n            connect.py\n            fitsrec.py\n            diff.py\n            fitstime.py\n            _numpy_hacks.py\n            convenience.py\n            header.py\n            column.py\n            verify.py\n            util.py\n            setup_package.py\n            card.py\n            __init__.py\n            scripts/\n                fitsdiff.py\n                fitscheck.py\n                fitsheader.py\n                __init__.py\n                fitsinfo.py\n            hdu/\n                hdulist.py\n                table.py\n                streaming.py\n                base.py\n                image.py\n                compressed.py\n                groups.py\n                __init__.py\n                nonstandard.py\n        misc/\n            hdf5.py\n            yaml.py\n            connect.py\n            pickle_helpers.py\n            __init__.py\n            asdf/\n                extension.py\n                types.py\n                setup_package.py\n                __init__.py\n                tags/\n                    __init__.py\n                    coords/\n                        coords.py\n                        __init__.py\n                    fits/\n                        fits.py\n                        setup_package.py\n                        __init__.py\n                    table/\n                        table.py\n                        __init__.py\n                    unit/\n                        quantity.py\n                        unit.py\n                        __init__.py\n                    transform/\n                        compound.py\n                        tabular.py\n                        basic.py\n                        polynomial.py\n                        __init__.py\n                        projections.py\n                    time/\n                        time.py\n                        __init__.py\n    cosmology/\n        parameters.py\n        core.py\n        funcs.py\n        __init__.py\n    table/\n        index.py\n        table.py\n        jsviewer.py\n        bst.py\n        info.py\n        pandas.py\n        meta.py\n        operations.py\n        serialize.py\n        pprint.py\n        column.py\n        row.py\n        np_utils.py\n        groups.py\n        sorted_array.py\n        setup_package.py\n        __init__.py\n        table_helpers.py\n        scripts/\n            showtable.py\n            __init__.py\n    stats/\n        jackknife.py\n        bayesian_blocks.py\n        circstats.py\n        funcs.py\n        sigma_clipping.py\n        spatial.py\n        histogram.py\n        biweight.py\n        info_theory.py\n        __init__.py\n        lombscargle/\n            core.py\n            _statistics.py\n            utils.py\n            __init__.py\n            implementations/\n                scipy_impl.py\n                fastchi2_impl.py\n                fast_impl.py\n                mle.py\n                chi2_impl.py\n                main.py\n                utils.py\n                __init__.py\n                slow_impl.py\n    modeling/\n        models.py\n        rotations.py\n        mappings.py\n        parameters.py\n        tabular.py\n        core.py\n        powerlaws.py\n        functional_models.py\n        fitting.py\n        statistic.py\n        polynomial.py\n        blackbody.py\n        utils.py\n        separable.py\n        optimizers.py\n        setup_package.py\n        __init__.py\n        projections.py\n    units/\n        cgs.py\n        astrophys.py\n        si.py\n        core.py\n        physical.py\n        deprecated.py\n        decorators.py\n        cds.py\n        equivalencies.py\n        utils.py\n        quantity.py\n        required_by_vounit.py\n        quantity_helper.py\n        imperial.py\n        __init__.py\n        format/\n            unicode_format.py\n            generic_lextab.py\n            cds_parsetab.py\n            base.py\n            ogip.py\n            generic_parsetab.py\n            fits.py\n            latex.py\n            console.py\n            cds.py\n            vounit.py\n            utils.py\n            ogip_parsetab.py\n            ogip_lextab.py\n            __init__.py\n            cds_lextab.py\n            generic.py\n        function/\n            logarithmic.py\n            units.py\n            core.py\n            mixin.py\n            magnitude_zero_points.py\n            __init__.py\n    constants/\n        astropyconst20.py\n        codata2010.py\n        cgs.py\n        si.py\n        constant.py\n        iau2015.py\n        iau2012.py\n        astropyconst13.py\n        codata2014.py\n        __init__.py\n    samp/\n        web_profile.py\n        constants.py\n        hub_proxy.py\n        hub.py\n        hub_script.py\n        lockfile_helpers.py\n        integrated_client.py\n        client.py\n        errors.py\n        utils.py\n        standard_profile.py\n        setup_package.py\n        __init__.py\n    wcs/\n        wcs.py\n        wcslint.py\n        utils.py\n        docstrings.py\n        setup_package.py\n        __init__.py\n        _docutil.py\n    utils/\n        state.py\n        argparse.py\n        misc.py\n        exceptions.py\n        codegen.py\n        console.py\n        decorators.py\n        introspection.py\n        timer.py\n        metadata.py\n        data_info.py\n        collections.py\n        setup_package.py\n        __init__.py\n        data.py\n        iers/\n            iers.py\n            __init__.py\n        compat/\n            funcsigs.py\n            misc.py\n            numpycompat.py\n            __init__.py\n            numpy/\n                __init__.py\n                core/\n                    multiarray.py\n                    __init__.py\n                lib/\n                    __init__.py\n                    stride_tricks.py\n            futures/\n                __init__.py\n        xml/\n            unescaper.py\n            validate.py\n            iterparser.py\n            check.py\n            writer.py\n            setup_package.py\n            __init__.py\n    time/\n        core.py\n        formats.py\n        utils.py\n        __init__.py\n    coordinates/\n        baseframe.py\n        sites.py\n        transformations.py\n        representation.py\n        angles.py\n        matching.py\n        angle_parsetab.py\n        name_resolve.py\n        attributes.py\n        funcs.py\n        orbital_elements.py\n        matrix_utilities.py\n        sky_coordinate.py\n        solar_system.py\n        angle_utilities.py\n        errors.py\n        earth_orientation.py\n        earth.py\n        distances.py\n        setup_package.py\n        angle_lextab.py\n        __init__.py\n        calculation.py\n        builtin_frames/\n            itrs.py\n            fk4.py\n            supergalactic.py\n            supergalactic_transforms.py\n            fk4_fk5_transforms.py\n            ecliptic_transforms.py\n            cirs_observed_transforms.py\n            baseradec.py\n            lsr.py\n            skyoffset.py\n            altaz.py\n            gcrs.py\n            icrs_fk5_transforms.py\n            intermediate_rotation_transforms.py\n            hcrs.py\n            galactic.py\n            galactocentric.py\n            galactic_transforms.py\n            utils.py\n            cirs.py\n            icrs.py\n            fk5.py\n            ecliptic.py\n            __init__.py\n            icrs_cirs_transforms.py\n    visualization/\n        stretch.py\n        transform.py\n        units.py\n        mpl_normalize.py\n        hist.py\n        interval.py\n        __init__.py\n        lupton_rgb.py\n        mpl_style.py\n        wcsaxes/\n            grid_paths.py\n            transforms.py\n            ticks.py\n            formatter_locator.py\n            core.py\n            patches.py\n            coordinate_range.py\n            coordinates_map.py\n            frame.py\n            coordinate_helpers.py\n            utils.py\n            ticklabels.py\n            axislabels.py\n            __init__.py\n        scripts/\n            fits2bitmap.py\n            __init__.py\n    _erfa/\n        erfa_generator.py\n        setup_package.py\n        __init__.py\ndocs/\n    conf.py\n    wcs/\n        examples/\n            programmatic.py\n            from_file.py\nexamples/\n    io/\n        skip_create-large-fits.py\n        split-jpeg-to-fits.py\n        fits-tables.py\n        create-mef.py\n        modify-fits-header.py\n        plot_fits-image.py\n    template/\n        example-template.py\n    coordinates/\n        plot_sgr-coordinate-frame.py\n        plot_galactocentric-frame.py\n        rv-to-gsr.py\n        plot_obs-planning.py\n\n###\n\nPlease only provide the full path and return at most 5 files.\nThe returned files should be separated by new lines ordered by most to least important and wrapped with ```\nFor example:\n```\nfile1.py\nfile2.py\n```"}, "found_related_locs": [["class: FITS_rec\nfunction: FITS_rec._scale_back_ascii"], [""], ["function: encode_ascii"]], "additional_artifact_loc_related": [{"raw_output_loc": "```\nastropy/io/fits/fitsrec.py\nclass: FITS_rec\nfunction: FITS_rec._scale_back_ascii\n\nastropy/io/fits/util.py\nfunction: encode_ascii\n```"}], "related_loc_traj": {"response": "```\nastropy/io/fits/fitsrec.py\nclass: FITS_rec\nfunction: FITS_rec._scale_back_ascii\n\nastropy/io/fits/util.py\nfunction: encode_ascii\n```", "usage": {"completion_tokens": 42, "prompt_tokens": 2069}, "prompt": "\nPlease look through the following GitHub Problem Description, and the Skeleton of Relevant Files.\nIdentify all locations that need inspection or editing to fix the problem, including directly related areas as well as any potentially related global variables, functions, and classes.\nFor each location you provide, either give the name of the class, the name of a method in a class, the name of a function, or the name of a global variable.\n\n### GitHub Problem Description ###\nPossible bug in io.fits related to D exponents\nI came across the following code in ``fitsrec.py``:\r\n\r\n```python\r\n        # Replace exponent separator in floating point numbers\r\n        if 'D' in format:\r\n            output_field.replace(encode_ascii('E'), encode_ascii('D'))\r\n```\r\n\r\nI think this may be incorrect because as far as I can tell ``replace`` is not an in-place operation for ``chararray`` (it returns a copy). Commenting out this code doesn't cause any tests to fail so I think this code isn't being tested anyway.\n\n\n###\n\n\n\n### Skeleton of Relevant Files ###\n\n### File: astropy/io/fits/fitsrec.py ###\n```python\n# Licensed under a 3-clause BSD style license - see PYFITS.rst\n\n\n\nclass FITS_record:\n\n    def __init__(self, input, row=0, start=None, end=None, step=None,\n                 base=None, **kwargs):\n...\n    def __getitem__(self, key):\n...\n    def __setitem__(self, key, value):\n...\n    def __len__(self):\n...\n    def __repr__(self):\n...\n    def field(self, field):\n...\n    def setfield(self, field, value):\n...\n    @lazyproperty\n    def _bases(self):\n...\n    def _get_index(self, indx):\n...\n\nclass FITS_rec(np.recarray):\n\n    _record_type = FITS_record\n    _character_as_bytes = False\n\n    def __new__(subtype, input):\n...\n    def __setstate__(self, state):\n...\n    def __reduce__(self):\n...\n    def __array_finalize__(self, obj):\n...\n    def _init(self):\n...\n    @classmethod\n    def from_columns(cls, columns, nrows=0, fill=False, character_as_bytes=False):\n...\n    def __repr__(self):\n...\n    def __getitem__(self, key):\n...\n    def __setitem__(self, key, value):\n...\n    def copy(self, order='C'):\n...\n    @property\n    def columns(self):\n...\n    @property\n    def _coldefs(self):\n...\n    @_coldefs.setter\n    def _coldefs(self, cols):\n...\n    @_coldefs.deleter\n    def _coldefs(self):\n...\n    def __del__(self):\n...\n    @property\n    def names(self):\n...\n    @property\n    def formats(self):\n...\n    @property\n    def _raw_itemsize(self):\n...\n    def field(self, key):\n...\n    def _cache_field(self, name, field):\n...\n    def _update_column_attribute_changed(self, column, idx, attr, old_value,\n                                         new_value):\n...\n    def _update_column_name(self, column, idx, old_name, name):\n...\n    def _convert_x(self, field, recformat):\n...\n    def _convert_p(self, column, field, recformat):\n...\n    def _convert_ascii(self, column, field):\n...\n    def _convert_other(self, column, field, recformat):\n...\n    def _get_heap_data(self):\n...\n    def _get_raw_data(self):\n...\n    def _get_scale_factors(self, column):\n...\n    def _scale_back(self, update_heap_pointers=True):\n...\n    def _scale_back_strings(self, col_idx, input_field, output_field):\n...\n    def _scale_back_ascii(self, col_idx, input_field, output_field):\n...\n\ndef _get_recarray_field(array, key):\n...\n\nclass _UnicodeArrayEncodeError(UnicodeEncodeError):\n    def __init__(self, encoding, object_, start, end, reason, index):\n...\n\ndef _ascii_encode(inarray, out=None):\n...\n\ndef _has_unicode_fields(array):\n\n```\n\n### File: astropy/io/fits/scripts/fitsdiff.py ###\n```python\n# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\n\nlog = logging.getLogger('fitsdiff')\n\n\nUSAGE = \"\"\"\nCompare two FITS image files and report the differences in header keywords and\ndata.\n\n    fitsdiff [options] filename1 filename2\n\nwhere filename1 filename2 are the two files to be compared.  They may also be\nwild cards, in such cases, they must be enclosed by double or single quotes, or\nthey may be directory names.  If both are directory names, all files in each of\nthe directories will be included; if only one is a directory name, then the\ndirectory name will be prefixed to the file name(s) specified by the other\nargument.  for example::\n\n    fitsdiff \"*.fits\" \"/machine/data1\"\n\nwill compare all FITS files in the current directory to the corresponding files\nin the directory /machine/data1.\n\"\"\".strip()\n\n\nEPILOG = \"\"\"\nIf the two files are identical within the specified conditions, it will report\n\"No difference is found.\" If the value(s) of -c and -k takes the form\n'@filename', list is in the text file 'filename', and each line in that text\nfile contains one keyword.\n\nExample\n-------\n\n    fitsdiff -k filename,filtnam1 -n 5 -r 1.e-6 test1.fits test2\n\nThis command will compare files test1.fits and test2.fits, report maximum of 5\ndifferent pixels values per extension, only report data values larger than\n1.e-6 relative to each other, and will neglect the different values of keywords\nFILENAME and FILTNAM1 (or their very existence).\n\nfitsdiff command-line arguments can also be set using the environment variable\nFITSDIFF_SETTINGS.  If the FITSDIFF_SETTINGS environment variable is present,\neach argument present will override the corresponding argument on the\ncommand-line unless the --exact option is specified.  The FITSDIFF_SETTINGS\nenvironment variable exists to make it easier to change the\nbehavior of fitsdiff on a global level, such as in a set of regression tests.\n\"\"\".strip()\n\n\nclass HelpFormatter(optparse.TitledHelpFormatter):\n    def format_epilog(self, epilog):\n...\n\ndef handle_options(argv=None):\n...\n\ndef setup_logging(outfile=None):\n...\n\ndef match_files(paths):\n...\n\ndef main(args=None):\n\n```\n\n### File: astropy/io/fits/util.py ###\n```python\n# Licensed under a 3-clause BSD style license - see PYFITS.rst\n\n\n\ncmp = lambda a, b: (a > b) - (a < b)\n\nall_integer_types = (int, np.integer)\n\n\nclass NotifierMixin:\n\n    _listeners = None\n\n    def _add_listener(self, listener):\n...\n    def _remove_listener(self, listener):\n...\n    def _notify(self, notification, *args, **kwargs):\n...\n    def __getstate__(self):\n...\n\ndef first(iterable):\n...\n\ndef itersubclasses(cls, _seen=None):\n...\n\ndef ignore_sigint(func):\n...\n\ndef pairwise(iterable):\n...\n\ndef encode_ascii(s):\n...\n\ndef decode_ascii(s):\n...\n\ndef isreadable(f):\n...\n\ndef iswritable(f):\n...\n\ndef isfile(f):\n...\n\ndef fileobj_open(filename, mode):\n...\n\ndef fileobj_name(f):\n...\n\ndef fileobj_closed(f):\n...\n\ndef fileobj_mode(f):\n...\n\ndef _fileobj_normalize_mode(f):\n...\n\ndef fileobj_is_binary(f):\n...\n\ndef translate(s, table, deletechars):\n...\n\ndef fill(text, width, **kwargs):\n...\n\n# On MacOS X 10.8 and earlier, there is a bug that causes numpy.fromfile to\n# fail when reading over 2Gb of data. If we detect these versions of MacOS X,\n# we can instead read the data in chunks. To avoid performance penalties at\n# import time, we defer the setting of this global variable until the first\n# time it is needed.\nCHUNKED_FROMFILE = None\n\n\ndef _array_from_file(infile, dtype, count):\n...\n\n_OSX_WRITE_LIMIT = (2 ** 32) - 1\n_WIN_WRITE_LIMIT = (2 ** 31) - 1\n\n\ndef _array_to_file(arr, outfile):\n...\n\ndef _array_to_file_like(arr, fileobj):\n...\n\ndef _write_string(f, s):\n...\n\ndef _convert_array(array, dtype):\n...\n\ndef _unsigned_zero(dtype):\n...\n\ndef _is_pseudo_unsigned(dtype):\n...\n\ndef _is_int(val):\n...\n\ndef _str_to_num(val):\n...\n\ndef _words_group(input, strlen):\n...\n\ndef _tmp_name(input):\n...\n\ndef _get_array_mmap(array):\n...\n\n@contextmanager\ndef _free_space_check(hdulist, dirname=None):\n...\n\ndef _extract_number(value, default):\n...\n\ndef get_testdata_filepath(filename):\n...\n\ndef _rstrip_inplace(array):\n\n```\n\n\n###\n\nPlease provide the complete set of locations as either a class name, a function name, or a variable name.\nNote that if you include a class, you do not need to list its specific methods.\nYou can include either the entire class or don't include the class name and instead include specific methods in the class.\n### Examples:\n```\nfull_path1/file1.py\nfunction: my_function_1\nclass: MyClass1\nfunction: MyClass2.my_method\n\nfull_path2/file2.py\nvariable: my_var\nfunction: MyClass3.my_method\n\nfull_path3/file3.py\nfunction: my_function_2\nfunction: my_function_3\nfunction: MyClass4.my_method_1\nclass: MyClass5\n```\n\nReturn just the locations.\n"}, "found_edit_locs": [[["function: FITS_rec._scale_back_strings\nline: 1263"], [""], [""]], [["function: FITS_rec._scale_back_strings\nline: 1264"], [""], [""]], [["function: FITS_rec._scale_back_strings\nline: 1264"], [""], [""]], [["line: 1264"], [""], [""]]], "additional_artifact_loc_edit_location": [{"raw_output_loc": ["```\nastropy/io/fits/fitsrec.py\nfunction: FITS_rec._scale_back_strings\nline: 1263\n```", "```\nastropy/io/fits/fitsrec.py\nfunction: FITS_rec._scale_back_strings\nline: 1264\n```", "```\nastropy/io/fits/fitsrec.py\nfunction: FITS_rec._scale_back_strings\nline: 1264\n\n```", "```\nastropy/io/fits/fitsrec.py\nline: 1264\n```"]}], "edit_loc_traj": {"prompt": "\nPlease review the following GitHub problem description, and relevant files, and provide a set of locations that need to be edited to fix the issue.\nThe locations can be specified as class names, function or method names, or exact line numbers that require modification.\n\n### GitHub Problem Description ###\nPossible bug in io.fits related to D exponents\nI came across the following code in ``fitsrec.py``:\r\n\r\n```python\r\n        # Replace exponent separator in floating point numbers\r\n        if 'D' in format:\r\n            output_field.replace(encode_ascii('E'), encode_ascii('D'))\r\n```\r\n\r\nI think this may be incorrect because as far as I can tell ``replace`` is not an in-place operation for ``chararray`` (it returns a copy). Commenting out this code doesn't cause any tests to fail so I think this code isn't being tested anyway.\n\n\n###\n\n\n\n### astropy/io/fits/fitsrec.py\n...\n134|        indices = np.ogrid[:self.array._nfields]\n135|        for base in reversed(self._bases):\n136|            if base.step < 1:\n137|                s = slice(base.start, None, base.step)\n138|            else:\n139|                s = slice(base.start, base.end, base.step)\n140|            indices = indices[s]\n141|        return indices[indx]\n142|\n143|\n144|class FITS_rec(np.recarray):\n145|    \"\"\"\n146|    FITS record array class.\n147|\n148|    `FITS_rec` is the data part of a table HDU's data part.  This is a layer\n149|    over the `~numpy.recarray`, so we can deal with scaled columns.\n150|\n151|    It inherits all of the standard methods from `numpy.ndarray`.\n152|    \"\"\"\n153|\n154|    _record_type = FITS_record\n155|    _character_as_bytes = False\n156|\n157|    def __new__(subtype, input):\n158|        \"\"\"\n159|        Construct a FITS record array from a recarray.\n160|        \"\"\"\n161|\n162|        # input should be a record array\n163|        if input.dtype.subdtype is None:\n164|            self = np.recarray.__new__(subtype, input.shape, input.dtype,\n165|                                       buf=input.data)\n166|        else:\n167|            self = np.recarray.__new__(subtype, input.shape, input.dtype,\n168|                                       buf=input.data, strides=input.strides)\n169|\n170|        self._init()\n171|        if self.dtype.fields:\n172|            self._nfields = len(self.dtype.fields)\n173|\n174|        return self\n175|\n176|    def __setstate__(self, state):\n177|        meta = state[-1]\n178|        column_state = state[-2]\n179|        state = state[:-2]\n180|\n181|        super().__setstate__(state)\n182|\n183|        self._col_weakrefs = weakref.WeakSet()\n184|\n185|        for attr, value in zip(meta, column_state):\n186|            setattr(self, attr, value)\n187|\n188|    def __reduce__(self):\n189|        \"\"\"\n190|        Return a 3-tuple for pickling a FITS_rec. Use the super-class\n191|        functionality but then add in a tuple of FITS_rec-specific\n192|        values that get used in __setstate__.\n193|        \"\"\"\n194|\n195|        reconst_func, reconst_func_args, state = super().__reduce__()\n196|\n197|        # Define FITS_rec-specific attrs that get added to state\n198|        column_state = []\n199|        meta = []\n200|\n201|        for attrs in ['_converted', '_heapoffset', '_heapsize', '_nfields',\n202|                      '_gap', '_uint', 'parnames', '_coldefs']:\n203|\n204|            with suppress(AttributeError):\n205|                # _coldefs can be Delayed, and file objects cannot be\n206|                # picked, it needs to be deepcopied first\n207|                if attrs == '_coldefs':\n208|                    column_state.append(self._coldefs.__deepcopy__(None))\n209|                else:\n210|                    column_state.append(getattr(self, attrs))\n211|                meta.append(attrs)\n212|\n213|        state = state + (column_state, meta)\n214|\n215|        return reconst_func, reconst_func_args, state\n216|\n217|    def __array_finalize__(self, obj):\n218|        if obj is None:\n219|            return\n220|\n221|        if isinstance(obj, FITS_rec):\n222|            self._character_as_bytes = obj._character_as_bytes\n223|\n224|        if isinstance(obj, FITS_rec) and obj.dtype == self.dtype:\n225|            self._converted = obj._converted\n226|            self._heapoffset = obj._heapoffset\n227|            self._heapsize = obj._heapsize\n228|            self._col_weakrefs = obj._col_weakrefs\n229|            self._coldefs = obj._coldefs\n230|            self._nfields = obj._nfields\n231|            self._gap = obj._gap\n232|            self._uint = obj._uint\n233|        elif self.dtype.fields is not None:\n234|            # This will allow regular ndarrays with fields, rather than\n235|            # just other FITS_rec objects\n236|            self._nfields = len(self.dtype.fields)\n237|            self._converted = {}\n238|\n239|            self._heapoffset = getattr(obj, '_heapoffset', 0)\n240|            self._heapsize = getattr(obj, '_heapsize', 0)\n241|\n242|            self._gap = getattr(obj, '_gap', 0)\n243|            self._uint = getattr(obj, '_uint', False)\n244|            self._col_weakrefs = weakref.WeakSet()\n245|            self._coldefs = ColDefs(self)\n246|\n247|            # Work around chicken-egg problem.  Column.array relies on the\n248|            # _coldefs attribute to set up ref back to parent FITS_rec; however\n249|            # in the above line the self._coldefs has not been assigned yet so\n250|            # this fails.  This patches that up...\n251|            for col in self._coldefs:\n252|                del col.array\n253|                col._parent_fits_rec = weakref.ref(self)\n254|        else:\n255|            self._init()\n256|\n257|    def _init(self):\n258|        \"\"\"Initializes internal attributes specific to FITS-isms.\"\"\"\n259|\n260|        self._nfields = 0\n261|        self._converted = {}\n262|        self._heapoffset = 0\n263|        self._heapsize = 0\n264|        self._col_weakrefs = weakref.WeakSet()\n265|        self._coldefs = None\n266|        self._gap = 0\n267|        self._uint = False\n268|\n269|    @classmethod\n270|    def from_columns(cls, columns, nrows=0, fill=False, character_as_bytes=False):\n271|        \"\"\"\n272|        Given a `ColDefs` object of unknown origin, initialize a new `FITS_rec`\n273|        object.\n274|\n275|        .. note::\n276|\n277|            This was originally part of the ``new_table`` function in the table\n278|            module but was moved into a class method since most of its\n279|            functionality always had more to do with initializing a `FITS_rec`\n280|            object than anything else, and much of it also overlapped with\n281|            ``FITS_rec._scale_back``.\n282|\n283|        Parameters\n284|        ----------\n285|        columns : sequence of `Column` or a `ColDefs`\n286|            The columns from which to create the table data.  If these\n287|            columns have data arrays attached that data may be used in\n288|            initializing the new table.  Otherwise the input columns\n289|            will be used as a template for a new table with the requested\n290|            number of rows.\n291|\n292|        nrows : int\n293|            Number of rows in the new table.  If the input columns have data\n294|            associated with them, the size of the largest input column is used.\n295|            Otherwise the default is 0.\n296|\n297|        fill : bool\n298|            If `True`, will fill all cells with zeros or blanks.  If\n299|            `False`, copy the data from input, undefined cells will still\n300|            be filled with zeros/blanks.\n301|        \"\"\"\n302|\n303|        if not isinstance(columns, ColDefs):\n304|            columns = ColDefs(columns)\n305|\n306|        # read the delayed data\n307|        for column in columns:\n308|            arr = column.array\n309|            if isinstance(arr, Delayed):\n310|                if arr.hdu.data is None:\n311|                    column.array = None\n312|                else:\n313|                    column.array = _get_recarray_field(arr.hdu.data,\n314|                                                       arr.field)\n315|        # Reset columns._arrays (which we may want to just do away with\n316|        # altogether\n317|        del columns._arrays\n318|\n319|        # use the largest column shape as the shape of the record\n320|        if nrows == 0:\n321|            for arr in columns._arrays:\n322|                if arr is not None:\n323|                    dim = arr.shape[0]\n324|                else:\n325|                    dim = 0\n326|                if dim > nrows:\n327|                    nrows = dim\n328|\n329|        raw_data = np.empty(columns.dtype.itemsize * nrows, dtype=np.uint8)\n330|        raw_data.fill(ord(columns._padding_byte))\n331|        data = np.recarray(nrows, dtype=columns.dtype, buf=raw_data).view(cls)\n332|        data._character_as_bytes = character_as_bytes\n333|\n334|        # Make sure the data is a listener for changes to the columns\n335|        columns._add_listener(data)\n336|\n337|        # Previously this assignment was made from hdu.columns, but that's a\n338|        # bug since if a _TableBaseHDU has a FITS_rec in its .data attribute\n339|        # the _TableBaseHDU.columns property is actually returned from\n340|        # .data._coldefs, so this assignment was circular!  Don't make that\n341|        # mistake again.\n342|        # All of this is an artifact of the fragility of the FITS_rec class,\n343|        # and that it can't just be initialized by columns...\n344|        data._coldefs = columns\n345|\n346|        # If fill is True we don't copy anything from the column arrays.  We're\n347|        # just using them as a template, and returning a table filled with\n348|        # zeros/blanks\n349|        if fill:\n350|            return data\n351|\n352|        # Otherwise we have to fill the recarray with data from the input\n353|        # columns\n354|        for idx, column in enumerate(columns):\n355|            # For each column in the ColDef object, determine the number of\n356|            # rows in that column.  This will be either the number of rows in\n357|            # the ndarray associated with the column, or the number of rows\n358|            # given in the call to this function, which ever is smaller.  If\n359|            # the input FILL argument is true, the number of rows is set to\n360|            # zero so that no data is copied from the original input data.\n361|            arr = column.array\n362|\n363|            if arr is None:\n364|                array_size = 0\n365|            else:\n366|                array_size = len(arr)\n367|\n368|            n = min(array_size, nrows)\n369|\n370|            # TODO: At least *some* of this logic is mostly redundant with the\n371|            # _convert_foo methods in this class; see if we can eliminate some\n372|            # of that duplication.\n373|\n374|            if not n:\n375|                # The input column had an empty array, so just use the fill\n376|                # value\n377|                continue\n378|\n379|            field = _get_recarray_field(data, idx)\n380|            name = column.name\n381|            fitsformat = column.format\n382|            recformat = fitsformat.recformat\n383|\n384|            outarr = field[:n]\n385|            inarr = arr[:n]\n386|\n387|            if isinstance(recformat, _FormatX):\n388|                # Data is a bit array\n389|                if inarr.shape[-1] == recformat.repeat:\n390|                    _wrapx(inarr, outarr, recformat.repeat)\n391|                    continue\n392|            elif isinstance(recformat, _FormatP):\n393|                data._cache_field(name, _makep(inarr, field, recformat,\n394|                                               nrows=nrows))\n395|                continue\n396|            # TODO: Find a better way of determining that the column is meant\n397|            # to be FITS L formatted\n398|            elif recformat[-2:] == FITS2NUMPY['L'] and inarr.dtype == bool:\n399|                # column is boolean\n400|                # The raw data field should be filled with either 'T' or 'F'\n401|                # (not 0).  Use 'F' as a default\n402|                field[:] = ord('F')\n403|                # Also save the original boolean array in data._converted so\n404|                # that it doesn't have to be re-converted\n405|                converted = np.zeros(field.shape, dtype=bool)\n406|                converted[:n] = inarr\n407|                data._cache_field(name, converted)\n408|                # TODO: Maybe this step isn't necessary at all if _scale_back\n409|                # will handle it?\n410|                inarr = np.where(inarr == np.False_, ord('F'), ord('T'))\n411|            elif (columns[idx]._physical_values and\n412|                    columns[idx]._pseudo_unsigned_ints):\n413|                # Temporary hack...\n414|                bzero = column.bzero\n415|                converted = np.zeros(field.shape, dtype=inarr.dtype)\n416|                converted[:n] = inarr\n417|                data._cache_field(name, converted)\n418|                if n < nrows:\n419|                    # Pre-scale rows below the input data\n420|                    field[n:] = -bzero\n421|\n422|                inarr = inarr - bzero\n423|            elif isinstance(columns, _AsciiColDefs):\n424|                # Regardless whether the format is character or numeric, if the\n425|                # input array contains characters then it's already in the raw\n426|                # format for ASCII tables\n427|                if fitsformat._pseudo_logical:\n428|                    # Hack to support converting from 8-bit T/F characters\n429|                    # Normally the column array is a chararray of 1 character\n430|                    # strings, but we need to view it as a normal ndarray of\n431|                    # 8-bit ints to fill it with ASCII codes for 'T' and 'F'\n432|                    outarr = field.view(np.uint8, np.ndarray)[:n]\n433|                elif arr.dtype.kind not in ('S', 'U'):\n434|                    # Set up views of numeric columns with the appropriate\n435|                    # numeric dtype\n436|                    # Fill with the appropriate blanks for the column format\n437|                    data._cache_field(name, np.zeros(nrows, dtype=arr.dtype))\n438|                    outarr = data._converted[name][:n]\n439|\n440|                outarr[:] = inarr\n441|                continue\n442|\n443|            if inarr.shape != outarr.shape:\n444|                if (inarr.dtype.kind == outarr.dtype.kind and\n445|                        inarr.dtype.kind in ('U', 'S') and\n446|                        inarr.dtype != outarr.dtype):\n447|\n448|                    inarr_rowsize = inarr[0].size\n449|                    inarr = inarr.flatten().view(outarr.dtype)\n450|\n451|                # This is a special case to handle input arrays with\n452|                # non-trivial TDIMn.\n453|                # By design each row of the outarray is 1-D, while each row of\n454|                # the input array may be n-D\n455|                if outarr.ndim > 1:\n456|                    # The normal case where the first dimension is the rows\n457|                    inarr_rowsize = inarr[0].size\n458|                    inarr = inarr.reshape(n, inarr_rowsize)\n459|                    outarr[:, :inarr_rowsize] = inarr\n460|                else:\n461|                    # Special case for strings where the out array only has one\n462|                    # dimension (the second dimension is rolled up into the\n463|                    # strings\n464|                    outarr[:n] = inarr.ravel()\n465|            else:\n466|                outarr[:] = inarr\n467|\n468|        # Now replace the original column array references with the new\n469|        # fields\n470|        # This is required to prevent the issue reported in\n471|        # https://github.com/spacetelescope/PyFITS/issues/99\n472|        for idx in range(len(columns)):\n473|            columns._arrays[idx] = data.field(idx)\n474|\n475|        return data\n476|\n477|    def __repr__(self):\n478|        # Force use of the normal ndarray repr (rather than the new\n479|        # one added for recarray in Numpy 1.10) for backwards compat\n480|        return np.ndarray.__repr__(self)\n481|\n482|    def __getitem__(self, key):\n483|        if self._coldefs is None:\n484|            return super().__getitem__(key)\n485|\n486|        if isinstance(key, str):\n487|            return self.field(key)\n488|\n489|        # Have to view as a recarray then back as a FITS_rec, otherwise the\n490|        # circular reference fix/hack in FITS_rec.field() won't preserve\n491|        # the slice.\n492|        out = self.view(np.recarray)[key]\n493|        if type(out) is not np.recarray:\n494|            # Oops, we got a single element rather than a view. In that case,\n495|            # return a Record, which has no __getstate__ and is more efficient.\n496|            return self._record_type(self, key)\n497|\n498|        # We got a view; change it back to our class, and add stuff\n499|        out = out.view(type(self))\n500|        out._coldefs = ColDefs(self._coldefs)\n501|        arrays = []\n502|        out._converted = {}\n503|        for idx, name in enumerate(self._coldefs.names):\n504|            #\n505|            # Store the new arrays for the _coldefs object\n506|            #\n507|            arrays.append(self._coldefs._arrays[idx][key])\n508|\n509|            # Ensure that the sliced FITS_rec will view the same scaled\n510|            # columns as the original; this is one of the few cases where\n511|            # it is not necessary to use _cache_field()\n512|            if name in self._converted:\n513|                dummy = self._converted[name]\n514|                field = np.ndarray.__getitem__(dummy, key)\n515|                out._converted[name] = field\n516|\n517|        out._coldefs._arrays = arrays\n518|        return out\n519|\n520|    def __setitem__(self, key, value):\n521|        if self._coldefs is None:\n522|            return super().__setitem__(key, value)\n523|\n524|        if isinstance(key, str):\n525|            self[key][:] = value\n526|            return\n527|\n528|        if isinstance(key, slice):\n529|            end = min(len(self), key.stop or len(self))\n530|            end = max(0, end)\n531|            start = max(0, key.start or 0)\n532|            end = min(end, start + len(value))\n533|\n534|            for idx in range(start, end):\n535|                self.__setitem__(idx, value[idx - start])\n536|            return\n537|\n538|        if isinstance(value, FITS_record):\n539|            for idx in range(self._nfields):\n540|                self.field(self.names[idx])[key] = value.field(self.names[idx])\n541|        elif isinstance(value, (tuple, list, np.void)):\n542|            if self._nfields == len(value):\n543|                for idx in range(self._nfields):\n544|                    self.field(idx)[key] = value[idx]\n545|            else:\n546|                raise ValueError('Input tuple or list required to have {} '\n547|                                 'elements.'.format(self._nfields))\n548|        else:\n549|            raise TypeError('Assignment requires a FITS_record, tuple, or '\n550|                            'list as input.')\n551|\n552|    def copy(self, order='C'):\n553|        \"\"\"\n554|        The Numpy documentation lies; `numpy.ndarray.copy` is not equivalent to\n555|        `numpy.copy`.  Differences include that it re-views the copied array as\n556|        self's ndarray subclass, as though it were taking a slice; this means\n557|        ``__array_finalize__`` is called and the copy shares all the array\n558|        attributes (including ``._converted``!).  So we need to make a deep\n559|        copy of all those attributes so that the two arrays truly do not share\n560|        any data.\n561|        \"\"\"\n562|\n563|        new = super().copy(order=order)\n564|\n565|        new.__dict__ = copy.deepcopy(self.__dict__)\n566|        return new\n567|\n568|    @property\n569|    def columns(self):\n570|        \"\"\"\n571|        A user-visible accessor for the coldefs.\n572|\n573|        See https://aeon.stsci.edu/ssb/trac/pyfits/ticket/44\n574|        \"\"\"\n575|\n576|        return self._coldefs\n577|\n578|    @property\n579|    def _coldefs(self):\n580|        # This used to be a normal internal attribute, but it was changed to a\n581|        # property as a quick and transparent way to work around the reference\n582|        # leak bug fixed in https://github.com/astropy/astropy/pull/4539\n583|        #\n584|        # See the long comment in the Column.array property for more details\n585|        # on this.  But in short, FITS_rec now has a ._col_weakrefs attribute\n586|        # which is a WeakSet of weakrefs to each Column in _coldefs.\n587|        #\n588|        # So whenever ._coldefs is set we also add each Column in the ColDefs\n589|        # to the weakrefs set.  This is an easy way to find out if a Column has\n590|        # any references to it external to the FITS_rec (i.e. a user assigned a\n591|        # column to a variable).  If the column is still in _col_weakrefs then\n592|        # there are other references to it external to this FITS_rec.  We use\n593|        # that information in __del__ to save off copies of the array data\n594|        # for those columns to their Column.array property before our memory\n595|        # is freed.\n596|        return self.__dict__.get('_coldefs')\n597|\n598|    @_coldefs.setter\n599|    def _coldefs(self, cols):\n600|        self.__dict__['_coldefs'] = cols\n601|        if isinstance(cols, ColDefs):\n602|            for col in cols.columns:\n603|                self._col_weakrefs.add(col)\n604|\n605|    @_coldefs.deleter\n606|    def _coldefs(self):\n607|        try:\n608|            del self.__dict__['_coldefs']\n609|        except KeyError as exc:\n610|            raise AttributeError(exc.args[0])\n611|\n612|    def __del__(self):\n613|        try:\n614|            del self._coldefs\n615|            if self.dtype.fields is not None:\n616|                for col in self._col_weakrefs:\n617|\n618|                    if col.array is not None:\n619|                        col.array = col.array.copy()\n620|\n621|        # See issues #4690 and #4912\n622|        except (AttributeError, TypeError):  # pragma: no cover\n623|            pass\n624|\n625|    @property\n626|    def names(self):\n627|        \"\"\"List of column names.\"\"\"\n628|\n629|        if self.dtype.fields:\n630|            return list(self.dtype.names)\n631|        elif getattr(self, '_coldefs', None) is not None:\n632|            return self._coldefs.names\n633|        else:\n634|            return None\n635|\n636|    @property\n637|    def formats(self):\n638|        \"\"\"List of column FITS formats.\"\"\"\n639|\n640|        if getattr(self, '_coldefs', None) is not None:\n641|            return self._coldefs.formats\n642|\n643|        return None\n644|\n645|    @property\n646|    def _raw_itemsize(self):\n647|        \"\"\"\n648|        Returns the size of row items that would be written to the raw FITS\n649|        file, taking into account the possibility of unicode columns being\n650|        compactified.\n651|\n652|        Currently for internal use only.\n653|        \"\"\"\n654|\n655|        if _has_unicode_fields(self):\n656|            total_itemsize = 0\n657|            for field in self.dtype.fields.values():\n658|                itemsize = field[0].itemsize\n659|                if field[0].kind == 'U':\n660|                    itemsize = itemsize // 4\n661|                total_itemsize += itemsize\n662|            return total_itemsize\n663|        else:\n664|            # Just return the normal itemsize\n665|            return self.itemsize\n666|\n667|    def field(self, key):\n668|        \"\"\"\n669|        A view of a `Column`'s data as an array.\n670|        \"\"\"\n671|\n672|        # NOTE: The *column* index may not be the same as the field index in\n673|        # the recarray, if the column is a phantom column\n674|        column = self.columns[key]\n675|        name = column.name\n676|        format = column.format\n677|\n678|        if format.dtype.itemsize == 0:\n679|            warnings.warn(\n680|                'Field {!r} has a repeat count of 0 in its format code, '\n681|                'indicating an empty field.'.format(key))\n682|            return np.array([], dtype=format.dtype)\n683|\n684|        # If field's base is a FITS_rec, we can run into trouble because it\n685|        # contains a reference to the ._coldefs object of the original data;\n686|        # this can lead to a circular reference; see ticket #49\n687|        base = self\n688|        while (isinstance(base, FITS_rec) and\n689|                isinstance(base.base, np.recarray)):\n690|            base = base.base\n691|        # base could still be a FITS_rec in some cases, so take care to\n692|        # use rec.recarray.field to avoid a potential infinite\n693|        # recursion\n694|        field = _get_recarray_field(base, name)\n695|\n696|        if name not in self._converted:\n697|            recformat = format.recformat\n698|            # TODO: If we're now passing the column to these subroutines, do we\n699|            # really need to pass them the recformat?\n700|            if isinstance(recformat, _FormatP):\n701|                # for P format\n702|                converted = self._convert_p(column, field, recformat)\n703|            else:\n704|                # Handle all other column data types which are fixed-width\n705|                # fields\n706|                converted = self._convert_other(column, field, recformat)\n707|\n708|            # Note: Never assign values directly into the self._converted dict;\n709|            # always go through self._cache_field; this way self._converted is\n710|            # only used to store arrays that are not already direct views of\n711|            # our own data.\n712|            self._cache_field(name, converted)\n713|            return converted\n714|\n715|        return self._converted[name]\n716|\n717|    def _cache_field(self, name, field):\n718|        \"\"\"\n719|        Do not store fields in _converted if one of its bases is self,\n720|        or if it has a common base with self.\n721|\n722|        This results in a reference cycle that cannot be broken since\n723|        ndarrays do not participate in cyclic garbage collection.\n724|        \"\"\"\n725|\n726|        base = field\n727|        while True:\n728|            self_base = self\n729|            while True:\n730|                if self_base is base:\n731|                    return\n732|\n733|                if getattr(self_base, 'base', None) is not None:\n734|                    self_base = self_base.base\n735|                else:\n736|                    break\n737|\n738|            if getattr(base, 'base', None) is not None:\n739|                base = base.base\n740|            else:\n741|                break\n742|\n743|        self._converted[name] = field\n744|\n745|    def _update_column_attribute_changed(self, column, idx, attr, old_value,\n746|                                         new_value):\n747|        \"\"\"\n748|        Update how the data is formatted depending on changes to column\n749|        attributes initiated by the user through the `Column` interface.\n750|\n751|        Dispatches column attribute change notifications to individual methods\n752|        for each attribute ``_update_column_<attr>``\n753|        \"\"\"\n754|\n755|        method_name = '_update_column_{0}'.format(attr)\n756|        if hasattr(self, method_name):\n757|            # Right now this is so we can be lazy and not implement updaters\n758|            # for every attribute yet--some we may not need at all, TBD\n759|            getattr(self, method_name)(column, idx, old_value, new_value)\n760|\n761|    def _update_column_name(self, column, idx, old_name, name):\n762|        \"\"\"Update the dtype field names when a column name is changed.\"\"\"\n763|\n764|        dtype = self.dtype\n765|        # Updating the names on the dtype should suffice\n766|        dtype.names = dtype.names[:idx] + (name,) + dtype.names[idx + 1:]\n767|\n768|    def _convert_x(self, field, recformat):\n769|        \"\"\"Convert a raw table column to a bit array as specified by the\n770|        FITS X format.\n771|        \"\"\"\n772|\n773|        dummy = np.zeros(self.shape + (recformat.repeat,), dtype=np.bool_)\n774|        _unwrapx(field, dummy, recformat.repeat)\n775|        return dummy\n776|\n777|    def _convert_p(self, column, field, recformat):\n778|        \"\"\"Convert a raw table column of FITS P or Q format descriptors\n779|        to a VLA column with the array data returned from the heap.\n780|        \"\"\"\n781|\n782|        dummy = _VLF([None] * len(self), dtype=recformat.dtype)\n783|        raw_data = self._get_raw_data()\n784|\n785|        if raw_data is None:\n786|            raise OSError(\n787|                \"Could not find heap data for the {!r} variable-length \"\n788|                \"array column.\".format(column.name))\n789|\n790|        for idx in range(len(self)):\n791|            offset = field[idx, 1] + self._heapoffset\n792|            count = field[idx, 0]\n793|\n794|            if recformat.dtype == 'a':\n795|                dt = np.dtype(recformat.dtype + str(1))\n796|                arr_len = count * dt.itemsize\n797|                da = raw_data[offset:offset + arr_len].view(dt)\n798|                da = np.char.array(da.view(dtype=dt), itemsize=count)\n799|                dummy[idx] = decode_ascii(da)\n800|            else:\n801|                dt = np.dtype(recformat.dtype)\n802|                arr_len = count * dt.itemsize\n803|                dummy[idx] = raw_data[offset:offset + arr_len].view(dt)\n804|                dummy[idx].dtype = dummy[idx].dtype.newbyteorder('>')\n805|                # Each array in the field may now require additional\n806|                # scaling depending on the other scaling parameters\n807|                # TODO: The same scaling parameters apply to every\n808|                # array in the column so this is currently very slow; we\n809|                # really only need to check once whether any scaling will\n810|                # be necessary and skip this step if not\n811|                # TODO: Test that this works for X format; I don't think\n812|                # that it does--the recformat variable only applies to the P\n813|                # format not the X format\n814|                dummy[idx] = self._convert_other(column, dummy[idx],\n815|                                                 recformat)\n816|\n817|        return dummy\n818|\n819|    def _convert_ascii(self, column, field):\n820|        \"\"\"\n821|        Special handling for ASCII table columns to convert columns containing\n822|        numeric types to actual numeric arrays from the string representation.\n823|        \"\"\"\n824|\n825|        format = column.format\n826|        recformat = ASCII2NUMPY[format[0]]\n827|        # if the string = TNULL, return ASCIITNULL\n828|        nullval = str(column.null).strip().encode('ascii')\n829|        if len(nullval) > format.width:\n830|            nullval = nullval[:format.width]\n831|\n832|        # Before using .replace make sure that any trailing bytes in each\n833|        # column are filled with spaces, and *not*, say, nulls; this causes\n834|        # functions like replace to potentially leave gibberish bytes in the\n835|        # array buffer.\n836|        dummy = np.char.ljust(field, format.width)\n837|        dummy = np.char.replace(dummy, encode_ascii('D'), encode_ascii('E'))\n838|        null_fill = encode_ascii(str(ASCIITNULL).rjust(format.width))\n839|\n840|        # Convert all fields equal to the TNULL value (nullval) to empty fields.\n841|        # TODO: These fields really should be conerted to NaN or something else undefined.\n842|        # Currently they are converted to empty fields, which are then set to zero.\n843|        dummy = np.where(np.char.strip(dummy) == nullval, null_fill, dummy)\n844|\n845|        # always replace empty fields, see https://github.com/astropy/astropy/pull/5394\n846|        if nullval != b'':\n847|            dummy = np.where(np.char.strip(dummy) == b'', null_fill, dummy)\n848|\n849|        try:\n850|            dummy = np.array(dummy, dtype=recformat)\n851|        except ValueError as exc:\n852|            indx = self.names.index(column.name)\n853|            raise ValueError(\n854|                '{}; the header may be missing the necessary TNULL{} '\n855|                'keyword or the table contains invalid data'.format(\n856|                    exc, indx + 1))\n857|\n858|        return dummy\n859|\n860|    def _convert_other(self, column, field, recformat):\n861|        \"\"\"Perform conversions on any other fixed-width column data types.\n862|\n863|        This may not perform any conversion at all if it's not necessary, in\n864|        which case the original column array is returned.\n865|        \"\"\"\n866|\n867|        if isinstance(recformat, _FormatX):\n868|            # special handling for the X format\n869|            return self._convert_x(field, recformat)\n870|\n871|        (_str, _bool, _number, _scale, _zero, bscale, bzero, dim) = \\\n872|            self._get_scale_factors(column)\n873|\n874|        indx = self.names.index(column.name)\n875|\n876|        # ASCII table, convert strings to numbers\n877|        # TODO:\n878|        # For now, check that these are ASCII columns by checking the coldefs\n879|        # type; in the future all columns (for binary tables, ASCII tables, or\n880|        # otherwise) should \"know\" what type they are already and how to handle\n881|        # converting their data from FITS format to native format and vice\n882|        # versa...\n883|        if not _str and isinstance(self._coldefs, _AsciiColDefs):\n884|            field = self._convert_ascii(column, field)\n885|\n886|        # Test that the dimensions given in dim are sensible; otherwise\n887|        # display a warning and ignore them\n888|        if dim:\n889|            # See if the dimensions already match, if not, make sure the\n890|            # number items will fit in the specified dimensions\n891|            if field.ndim > 1:\n892|                actual_shape = field.shape[1:]\n893|                if _str:\n894|                    actual_shape = actual_shape + (field.itemsize,)\n895|            else:\n896|                actual_shape = field.shape[0]\n897|\n898|            if dim == actual_shape:\n899|                # The array already has the correct dimensions, so we\n900|                # ignore dim and don't convert\n901|                dim = None\n902|            else:\n903|                nitems = reduce(operator.mul, dim)\n904|                if _str:\n905|                    actual_nitems = field.itemsize\n906|                elif len(field.shape) == 1:  # No repeat count in TFORMn, equivalent to 1\n907|                    actual_nitems = 1\n908|                else:\n909|                    actual_nitems = field.shape[1]\n910|                if nitems > actual_nitems:\n911|                    warnings.warn(\n912|                        'TDIM{} value {:d} does not fit with the size of '\n913|                        'the array items ({:d}).  TDIM{:d} will be ignored.'\n914|                        .format(indx + 1, self._coldefs[indx].dims,\n915|                                actual_nitems, indx + 1))\n916|                    dim = None\n917|\n918|        # further conversion for both ASCII and binary tables\n919|        # For now we've made columns responsible for *knowing* whether their\n920|        # data has been scaled, but we make the FITS_rec class responsible for\n921|        # actually doing the scaling\n922|        # TODO: This also needs to be fixed in the effort to make Columns\n923|        # responsible for scaling their arrays to/from FITS native values\n924|        if not column.ascii and column.format.p_format:\n925|            format_code = column.format.p_format\n926|        else:\n927|            # TODO: Rather than having this if/else it might be nice if the\n928|            # ColumnFormat class had an attribute guaranteed to give the format\n929|            # of actual values in a column regardless of whether the true\n930|            # format is something like P or Q\n931|            format_code = column.format.format\n932|\n933|        if (_number and (_scale or _zero) and not column._physical_values):\n934|            # This is to handle pseudo unsigned ints in table columns\n935|            # TODO: For now this only really works correctly for binary tables\n936|            # Should it work for ASCII tables as well?\n937|            if self._uint:\n938|                if bzero == 2**15 and format_code == 'I':\n939|                    field = np.array(field, dtype=np.uint16)\n940|                elif bzero == 2**31 and format_code == 'J':\n941|                    field = np.array(field, dtype=np.uint32)\n942|                elif bzero == 2**63 and format_code == 'K':\n943|                    field = np.array(field, dtype=np.uint64)\n944|                    bzero64 = np.uint64(2 ** 63)\n945|                else:\n946|                    field = np.array(field, dtype=np.float64)\n947|            else:\n948|                field = np.array(field, dtype=np.float64)\n949|\n950|            if _scale:\n951|                np.multiply(field, bscale, field)\n952|            if _zero:\n953|                if self._uint and format_code == 'K':\n954|                    # There is a chance of overflow, so be careful\n955|                    test_overflow = field.copy()\n956|                    try:\n957|                        test_overflow += bzero64\n958|                    except OverflowError:\n959|                        warnings.warn(\n960|                            \"Overflow detected while applying TZERO{0:d}. \"\n961|                            \"Returning unscaled data.\".format(indx + 1))\n962|                    else:\n963|                        field = test_overflow\n964|                else:\n965|                    field += bzero\n966|        elif _bool and field.dtype != bool:\n967|            field = np.equal(field, ord('T'))\n968|        elif _str:\n969|            if not self._character_as_bytes:\n970|                with suppress(UnicodeDecodeError):\n971|                    field = decode_ascii(field)\n972|\n973|        if dim:\n974|            # Apply the new field item dimensions\n975|            nitems = reduce(operator.mul, dim)\n976|            if field.ndim > 1:\n977|                field = field[:, :nitems]\n978|            if _str:\n979|                fmt = field.dtype.char\n980|                dtype = ('|{}{}'.format(fmt, dim[-1]), dim[:-1])\n981|                field.dtype = dtype\n982|            else:\n983|                field.shape = (field.shape[0],) + dim\n984|\n985|        return field\n986|\n987|    def _get_heap_data(self):\n988|        \"\"\"\n989|        Returns a pointer into the table's raw data to its heap (if present).\n990|\n991|        This is returned as a numpy byte array.\n992|        \"\"\"\n993|\n994|        if self._heapsize:\n995|            raw_data = self._get_raw_data().view(np.ubyte)\n996|            heap_end = self._heapoffset + self._heapsize\n997|            return raw_data[self._heapoffset:heap_end]\n998|        else:\n999|            return np.array([], dtype=np.ubyte)\n1000|\n1001|    def _get_raw_data(self):\n1002|        \"\"\"\n1003|        Returns the base array of self that \"raw data array\" that is the\n1004|        array in the format that it was first read from a file before it was\n1005|        sliced or viewed as a different type in any way.\n1006|\n1007|        This is determined by walking through the bases until finding one that\n1008|        has at least the same number of bytes as self, plus the heapsize.  This\n1009|        may be the immediate .base but is not always.  This is used primarily\n1010|        for variable-length array support which needs to be able to find the\n1011|        heap (the raw data *may* be larger than nbytes + heapsize if it\n1012|        contains a gap or padding).\n1013|\n1014|        May return ``None`` if no array resembling the \"raw data\" according to\n1015|        the stated criteria can be found.\n1016|        \"\"\"\n1017|\n1018|        raw_data_bytes = self.nbytes + self._heapsize\n1019|        base = self\n1020|        while hasattr(base, 'base') and base.base is not None:\n1021|            base = base.base\n1022|            if hasattr(base, 'nbytes') and base.nbytes >= raw_data_bytes:\n1023|                return base\n1024|\n1025|    def _get_scale_factors(self, column):\n1026|        \"\"\"Get all the scaling flags and factors for one column.\"\"\"\n1027|\n1028|        # TODO: Maybe this should be a method/property on Column?  Or maybe\n1029|        # it's not really needed at all...\n1030|        _str = column.format.format == 'A'\n1031|        _bool = column.format.format == 'L'\n1032|\n1033|        _number = not (_bool or _str)\n1034|        bscale = column.bscale\n1035|        bzero = column.bzero\n1036|\n1037|        _scale = bscale not in ('', None, 1)\n1038|        _zero = bzero not in ('', None, 0)\n1039|\n1040|        # ensure bscale/bzero are numbers\n1041|        if not _scale:\n1042|            bscale = 1\n1043|        if not _zero:\n1044|            bzero = 0\n1045|\n1046|        # column._dims gives a tuple, rather than column.dim which returns the\n1047|        # original string format code from the FITS header...\n1048|        dim = column._dims\n1049|\n1050|        return (_str, _bool, _number, _scale, _zero, bscale, bzero, dim)\n1051|\n1052|    def _scale_back(self, update_heap_pointers=True):\n1053|        \"\"\"\n1054|        Update the parent array, using the (latest) scaled array.\n1055|\n1056|        If ``update_heap_pointers`` is `False`, this will leave all the heap\n1057|        pointers in P/Q columns as they are verbatim--it only makes sense to do\n1058|        this if there is already data on the heap and it can be guaranteed that\n1059|        that data has not been modified, and there is not new data to add to\n1060|        the heap.  Currently this is only used as an optimization for\n1061|        CompImageHDU that does its own handling of the heap.\n1062|        \"\"\"\n1063|\n1064|        # Running total for the new heap size\n1065|        heapsize = 0\n1066|\n1067|        for indx, name in enumerate(self.dtype.names):\n1068|            column = self._coldefs[indx]\n1069|            recformat = column.format.recformat\n1070|            raw_field = _get_recarray_field(self, indx)\n1071|\n1072|            # add the location offset of the heap area for each\n1073|            # variable length column\n1074|            if isinstance(recformat, _FormatP):\n1075|                # Irritatingly, this can return a different dtype than just\n1076|                # doing np.dtype(recformat.dtype); but this returns the results\n1077|                # that we want.  For example if recformat.dtype is 'a' we want\n1078|                # an array of characters.\n1079|                dtype = np.array([], dtype=recformat.dtype).dtype\n1080|\n1081|                if update_heap_pointers and name in self._converted:\n1082|                    # The VLA has potentially been updated, so we need to\n1083|                    # update the array descriptors\n1084|                    raw_field[:] = 0  # reset\n1085|                    npts = [len(arr) for arr in self._converted[name]]\n1086|\n1087|                    raw_field[:len(npts), 0] = npts\n1088|                    raw_field[1:, 1] = (np.add.accumulate(raw_field[:-1, 0]) *\n1089|                                        dtype.itemsize)\n1090|                    raw_field[:, 1][:] += heapsize\n1091|\n1092|                heapsize += raw_field[:, 0].sum() * dtype.itemsize\n1093|                # Even if this VLA has not been read or updated, we need to\n1094|                # include the size of its constituent arrays in the heap size\n1095|                # total\n1096|\n1097|            if isinstance(recformat, _FormatX) and name in self._converted:\n1098|                _wrapx(self._converted[name], raw_field, recformat.repeat)\n1099|                continue\n1100|\n1101|            _str, _bool, _number, _scale, _zero, bscale, bzero, _ = \\\n1102|                self._get_scale_factors(column)\n1103|\n1104|            field = self._converted.get(name, raw_field)\n1105|\n1106|            # conversion for both ASCII and binary tables\n1107|            if _number or _str:\n1108|                if _number and (_scale or _zero) and column._physical_values:\n1109|                    dummy = field.copy()\n1110|                    if _zero:\n1111|                        dummy -= bzero\n1112|                    if _scale:\n1113|                        dummy /= bscale\n1114|                    # This will set the raw values in the recarray back to\n1115|                    # their non-physical storage values, so the column should\n1116|                    # be mark is not scaled\n1117|                    column._physical_values = False\n1118|                elif _str or isinstance(self._coldefs, _AsciiColDefs):\n1119|                    dummy = field\n1120|                else:\n1121|                    continue\n1122|\n1123|                # ASCII table, convert numbers to strings\n1124|                if isinstance(self._coldefs, _AsciiColDefs):\n1125|                    self._scale_back_ascii(indx, dummy, raw_field)\n1126|                # binary table string column\n1127|                elif isinstance(raw_field, chararray.chararray):\n1128|                    self._scale_back_strings(indx, dummy, raw_field)\n1129|                # all other binary table columns\n1130|                else:\n1131|                    if len(raw_field) and isinstance(raw_field[0],\n1132|                                                     np.integer):\n1133|                        dummy = np.around(dummy)\n1134|\n1135|                    if raw_field.shape == dummy.shape:\n1136|                        raw_field[:] = dummy\n1137|                    else:\n1138|                        # Reshaping the data is necessary in cases where the\n1139|                        # TDIMn keyword was used to shape a column's entries\n1140|                        # into arrays\n1141|                        raw_field[:] = dummy.ravel().view(raw_field.dtype)\n1142|\n1143|                del dummy\n1144|\n1145|            # ASCII table does not have Boolean type\n1146|            elif _bool and name in self._converted:\n1147|                choices = (np.array([ord('F')], dtype=np.int8)[0],\n1148|                           np.array([ord('T')], dtype=np.int8)[0])\n1149|                raw_field[:] = np.choose(field, choices)\n1150|\n1151|        # Store the updated heapsize\n1152|        self._heapsize = heapsize\n1153|\n1154|    def _scale_back_strings(self, col_idx, input_field, output_field):\n1155|        # There are a few possibilities this has to be able to handle properly\n1156|        # The input_field, which comes from the _converted column is of dtype\n1157|        # 'Un' so that elements read out of the array are normal str\n1158|        # objects (i.e. unicode strings)\n1159|        #\n1160|        # At the other end the *output_field* may also be of type 'S' or of\n1161|        # type 'U'.  It will *usually* be of type 'S' because when reading\n1162|        # an existing FITS table the raw data is just ASCII strings, and\n1163|        # represented in Numpy as an S array.  However, when a user creates\n1164|        # a new table from scratch, they *might* pass in a column containing\n1165|        # unicode strings (dtype 'U').  Therefore the output_field of the\n1166|        # raw array is actually a unicode array.  But we still want to make\n1167|        # sure the data is encodable as ASCII.  Later when we write out the\n1168|        # array we use, in the dtype 'U' case, a different write routine\n1169|        # that writes row by row and encodes any 'U' columns to ASCII.\n1170|\n1171|        # If the output_field is non-ASCII we will worry about ASCII encoding\n1172|        # later when writing; otherwise we can do it right here\n1173|        if input_field.dtype.kind == 'U' and output_field.dtype.kind == 'S':\n1174|            try:\n1175|                _ascii_encode(input_field, out=output_field)\n1176|            except _UnicodeArrayEncodeError as exc:\n1177|                raise ValueError(\n1178|                    \"Could not save column '{0}': Contains characters that \"\n1179|                    \"cannot be encoded as ASCII as required by FITS, starting \"\n1180|                    \"at the index {1!r} of the column, and the index {2} of \"\n1181|                    \"the string at that location.\".format(\n1182|                        self._coldefs[col_idx].name,\n1183|                        exc.index[0] if len(exc.index) == 1 else exc.index,\n1184|                        exc.start))\n1185|        else:\n1186|            # Otherwise go ahead and do a direct copy into--if both are type\n1187|            # 'U' we'll handle encoding later\n1188|            input_field = input_field.flatten().view(output_field.dtype)\n1189|            output_field.flat[:] = input_field\n1190|\n1191|        # Ensure that blanks at the end of each string are\n1192|        # converted to nulls instead of spaces, see Trac #15\n1193|        # and #111\n1194|        _rstrip_inplace(output_field)\n1195|\n1196|    def _scale_back_ascii(self, col_idx, input_field, output_field):\n1197|        \"\"\"\n1198|        Convert internal array values back to ASCII table representation.\n1199|\n1200|        The ``input_field`` is the internal representation of the values, and\n1201|        the ``output_field`` is the character array representing the ASCII\n1202|        output that will be written.\n1203|        \"\"\"\n1204|\n1205|        starts = self._coldefs.starts[:]\n1206|        spans = self._coldefs.spans\n1207|        format = self._coldefs[col_idx].format\n1208|\n1209|        # The the index of the \"end\" column of the record, beyond\n1210|        # which we can't write\n1211|        end = super().field(-1).itemsize\n1212|        starts.append(end + starts[-1])\n1213|\n1214|        if col_idx > 0:\n1215|            lead = starts[col_idx] - starts[col_idx - 1] - spans[col_idx - 1]\n1216|        else:\n1217|            lead = 0\n1218|\n1219|        if lead < 0:\n1220|            warnings.warn('Column {!r} starting point overlaps the previous '\n1221|                          'column.'.format(col_idx + 1))\n1222|\n1223|        trail = starts[col_idx + 1] - starts[col_idx] - spans[col_idx]\n1224|\n1225|        if trail < 0:\n1226|            warnings.warn('Column {!r} ending point overlaps the next '\n1227|                          'column.'.format(col_idx + 1))\n1228|\n1229|        # TODO: It would be nice if these string column formatting\n1230|        # details were left to a specialized class, as is the case\n1231|        # with FormatX and FormatP\n1232|        if 'A' in format:\n1233|            _pc = '{:'\n1234|        else:\n1235|            _pc = '{:>'\n1236|\n1237|        fmt = ''.join([_pc, format[1:], ASCII2STR[format[0]], '}',\n1238|                       (' ' * trail)])\n1239|\n1240|        # Even if the format precision is 0, we should output a decimal point\n1241|        # as long as there is space to do so--not including a decimal point in\n1242|        # a float value is discouraged by the FITS Standard\n1243|        trailing_decimal = (format.precision == 0 and\n1244|                            format.format in ('F', 'E', 'D'))\n1245|\n1246|        # not using numarray.strings's num2char because the\n1247|        # result is not allowed to expand (as C/Python does).\n1248|        for jdx, value in enumerate(input_field):\n1249|            value = fmt.format(value)\n1250|            if len(value) > starts[col_idx + 1] - starts[col_idx]:\n1251|                raise ValueError(\n1252|                    \"Value {!r} does not fit into the output's itemsize of \"\n1253|                    \"{}.\".format(value, spans[col_idx]))\n1254|\n1255|            if trailing_decimal and value[0] == ' ':\n1256|                # We have some extra space in the field for the trailing\n1257|                # decimal point\n1258|                value = value[1:] + '.'\n1259|\n1260|            output_field[jdx] = value\n1261|\n1262|        # Replace exponent separator in floating point numbers\n1263|        if 'D' in format:\n1264|            output_field.replace(encode_ascii('E'), encode_ascii('D'))\n1265|\n1266|\n1267|def _get_recarray_field(array, key):\n1268|    \"\"\"\n1269|    Compatibility function for using the recarray base class's field method.\n1270|    This incorporates the legacy functionality of returning string arrays as\n1271|    Numeric-style chararray objects.\n1272|    \"\"\"\n1273|\n1274|    # Numpy >= 1.10.dev recarray no longer returns chararrays for strings\n...\n\n\n### astropy/io/fits/util.py\n...\n251|    \"\"\"\n252|\n253|    a, b = itertools.tee(iterable)\n254|    for _ in b:\n255|        # Just a little trick to advance b without having to catch\n256|        # StopIter if b happens to be empty\n257|        break\n258|    return zip(a, b)\n259|\n260|\n261|def encode_ascii(s):\n262|    if isinstance(s, str):\n263|        return s.encode('ascii')\n264|    elif (isinstance(s, np.ndarray) and\n265|          issubclass(s.dtype.type, np.str_)):\n266|        ns = np.char.encode(s, 'ascii').view(type(s))\n267|        if ns.dtype.itemsize != s.dtype.itemsize / 4:\n268|            ns = ns.astype((np.bytes_, s.dtype.itemsize / 4))\n269|        return ns\n270|    elif (isinstance(s, np.ndarray) and\n271|          not issubclass(s.dtype.type, np.bytes_)):\n272|        raise TypeError('string operation on non-string array')\n273|    return s\n274|\n275|\n276|def decode_ascii(s):\n277|    if isinstance(s, bytes):\n278|        try:\n279|            return s.decode('ascii')\n280|        except UnicodeDecodeError:\n281|            warnings.warn('non-ASCII characters are present in the FITS '\n282|                          'file header and have been replaced by \"?\" '\n283|                          'characters', AstropyUserWarning)\n...\n\n\n\n\n###\n\nPlease provide the class name, function or method name, or the exact line numbers that need to be edited.\n### Examples:\n```\nfull_path1/file1.py\nline: 10\nclass: MyClass1\nline: 51\n\nfull_path2/file2.py\nfunction: MyClass2.my_method\nline: 12\n\nfull_path3/file3.py\nfunction: my_function\nline: 24\nline: 156\n```\n\nReturn just the location(s)\n", "response": ["```\nastropy/io/fits/fitsrec.py\nfunction: FITS_rec._scale_back_strings\nline: 1263\n```", "```\nastropy/io/fits/fitsrec.py\nfunction: FITS_rec._scale_back_strings\nline: 1264\n```", "```\nastropy/io/fits/fitsrec.py\nfunction: FITS_rec._scale_back_strings\nline: 1264\n\n```", "```\nastropy/io/fits/fitsrec.py\nline: 1264\n```"], "usage": {"completion_tokens": 106, "prompt_tokens": 13329}}}
