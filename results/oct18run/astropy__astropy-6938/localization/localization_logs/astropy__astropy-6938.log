2024-10-18 14:08:34,482 - INFO - Processing bug astropy__astropy-6938
2024-10-18 14:08:51,084 - INFO - ================ localize astropy__astropy-6938 ================
2024-10-18 14:08:51,123 - INFO - prompting with message:
Please look through the following GitHub problem description, and Repository structure and provide a list of files that one would need to edit to fix the problem.

### GitHub Problem Description ###
Possible bug in io.fits related to D exponents
I came across the following code in ``fitsrec.py``:

```python
        # Replace exponent separator in floating point numbers
        if 'D' in format:
            output_field.replace(encode_ascii('E'), encode_ascii('D'))
```

I think this may be incorrect because as far as I can tell ``replace`` is not an in-place operation for ``chararray`` (it returns a copy). Commenting out this code doesn't cause any tests to fail so I think this code isn't being tested anyway.


###



### Repository Structure ###
astropy/
    conftest.py
    ez_setup.py
    ah_bootstrap.py
    setup.py
    logger.py
    setup_package.py
    __init__.py
    config/
        paths.py
        configuration.py
        affiliated.py
        setup_package.py
        __init__.py
    convolution/
        convolve.py
        core.py
        utils.py
        __init__.py
        kernels.py
    nddata/
        ccddata.py
        nddata.py
        nddata_withmixins.py
        flag_collection.py
        compat.py
        decorators.py
        nddata_base.py
        utils.py
        nduncertainty.py
        setup_package.py
        __init__.py
        mixins/
            ndslicing.py
            ndio.py
            ndarithmetic.py
            __init__.py
    extern/
        six.py
        setup_package.py
        __init__.py
        bundled/
            six.py
            __init__.py
        configobj/
            configobj.py
            validate.py
            __init__.py
        ply/
            ctokens.py
            yacc.py
            cpp.py
            lex.py
            __init__.py
    io/
        registry.py
        __init__.py
        ascii/
            ui.py
            daophot.py
            sextractor.py
            connect.py
            misc.py
            core.py
            latex.py
            html.py
            fixedwidth.py
            basic.py
            cds.py
            ipac.py
            fastbasic.py
            rst.py
            ecsv.py
            setup_package.py
            __init__.py
        votable/
            converters.py
            table.py
            volint.py
            connect.py
            tree.py
            exceptions.py
            xmlutil.py
            util.py
            setup_package.py
            __init__.py
            ucd.py
            validator/
                html.py
                main.py
                result.py
                __init__.py
        fits/
            file.py
            connect.py
            fitsrec.py
            diff.py
            fitstime.py
            _numpy_hacks.py
            convenience.py
            header.py
            column.py
            verify.py
            util.py
            setup_package.py
            card.py
            __init__.py
            scripts/
                fitsdiff.py
                fitscheck.py
                fitsheader.py
                __init__.py
                fitsinfo.py
            hdu/
                hdulist.py
                table.py
                streaming.py
                base.py
                image.py
                compressed.py
                groups.py
                __init__.py
                nonstandard.py
        misc/
            hdf5.py
            yaml.py
            connect.py
            pickle_helpers.py
            __init__.py
            asdf/
                extension.py
                types.py
                setup_package.py
                __init__.py
                tags/
                    __init__.py
                    coords/
                        coords.py
                        __init__.py
                    fits/
                        fits.py
                        setup_package.py
                        __init__.py
                    table/
                        table.py
                        __init__.py
                    unit/
                        quantity.py
                        unit.py
                        __init__.py
                    transform/
                        compound.py
                        tabular.py
                        basic.py
                        polynomial.py
                        __init__.py
                        projections.py
                    time/
                        time.py
                        __init__.py
    cosmology/
        parameters.py
        core.py
        funcs.py
        __init__.py
    table/
        index.py
        table.py
        jsviewer.py
        bst.py
        info.py
        pandas.py
        meta.py
        operations.py
        serialize.py
        pprint.py
        column.py
        row.py
        np_utils.py
        groups.py
        sorted_array.py
        setup_package.py
        __init__.py
        table_helpers.py
        scripts/
            showtable.py
            __init__.py
    stats/
        jackknife.py
        bayesian_blocks.py
        circstats.py
        funcs.py
        sigma_clipping.py
        spatial.py
        histogram.py
        biweight.py
        info_theory.py
        __init__.py
        lombscargle/
            core.py
            _statistics.py
            utils.py
            __init__.py
            implementations/
                scipy_impl.py
                fastchi2_impl.py
                fast_impl.py
                mle.py
                chi2_impl.py
                main.py
                utils.py
                __init__.py
                slow_impl.py
    modeling/
        models.py
        rotations.py
        mappings.py
        parameters.py
        tabular.py
        core.py
        powerlaws.py
        functional_models.py
        fitting.py
        statistic.py
        polynomial.py
        blackbody.py
        utils.py
        separable.py
        optimizers.py
        setup_package.py
        __init__.py
        projections.py
    units/
        cgs.py
        astrophys.py
        si.py
        core.py
        physical.py
        deprecated.py
        decorators.py
        cds.py
        equivalencies.py
        utils.py
        quantity.py
        required_by_vounit.py
        quantity_helper.py
        imperial.py
        __init__.py
        format/
            unicode_format.py
            generic_lextab.py
            cds_parsetab.py
            base.py
            ogip.py
            generic_parsetab.py
            fits.py
            latex.py
            console.py
            cds.py
            vounit.py
            utils.py
            ogip_parsetab.py
            ogip_lextab.py
            __init__.py
            cds_lextab.py
            generic.py
        function/
            logarithmic.py
            units.py
            core.py
            mixin.py
            magnitude_zero_points.py
            __init__.py
    constants/
        astropyconst20.py
        codata2010.py
        cgs.py
        si.py
        constant.py
        iau2015.py
        iau2012.py
        astropyconst13.py
        codata2014.py
        __init__.py
    samp/
        web_profile.py
        constants.py
        hub_proxy.py
        hub.py
        hub_script.py
        lockfile_helpers.py
        integrated_client.py
        client.py
        errors.py
        utils.py
        standard_profile.py
        setup_package.py
        __init__.py
    wcs/
        wcs.py
        wcslint.py
        utils.py
        docstrings.py
        setup_package.py
        __init__.py
        _docutil.py
    utils/
        state.py
        argparse.py
        misc.py
        exceptions.py
        codegen.py
        console.py
        decorators.py
        introspection.py
        timer.py
        metadata.py
        data_info.py
        collections.py
        setup_package.py
        __init__.py
        data.py
        iers/
            iers.py
            __init__.py
        compat/
            funcsigs.py
            misc.py
            numpycompat.py
            __init__.py
            numpy/
                __init__.py
                core/
                    multiarray.py
                    __init__.py
                lib/
                    __init__.py
                    stride_tricks.py
            futures/
                __init__.py
        xml/
            unescaper.py
            validate.py
            iterparser.py
            check.py
            writer.py
            setup_package.py
            __init__.py
    time/
        core.py
        formats.py
        utils.py
        __init__.py
    coordinates/
        baseframe.py
        sites.py
        transformations.py
        representation.py
        angles.py
        matching.py
        angle_parsetab.py
        name_resolve.py
        attributes.py
        funcs.py
        orbital_elements.py
        matrix_utilities.py
        sky_coordinate.py
        solar_system.py
        angle_utilities.py
        errors.py
        earth_orientation.py
        earth.py
        distances.py
        setup_package.py
        angle_lextab.py
        __init__.py
        calculation.py
        builtin_frames/
            itrs.py
            fk4.py
            supergalactic.py
            supergalactic_transforms.py
            fk4_fk5_transforms.py
            ecliptic_transforms.py
            cirs_observed_transforms.py
            baseradec.py
            lsr.py
            skyoffset.py
            altaz.py
            gcrs.py
            icrs_fk5_transforms.py
            intermediate_rotation_transforms.py
            hcrs.py
            galactic.py
            galactocentric.py
            galactic_transforms.py
            utils.py
            cirs.py
            icrs.py
            fk5.py
            ecliptic.py
            __init__.py
            icrs_cirs_transforms.py
    visualization/
        stretch.py
        transform.py
        units.py
        mpl_normalize.py
        hist.py
        interval.py
        __init__.py
        lupton_rgb.py
        mpl_style.py
        wcsaxes/
            grid_paths.py
            transforms.py
            ticks.py
            formatter_locator.py
            core.py
            patches.py
            coordinate_range.py
            coordinates_map.py
            frame.py
            coordinate_helpers.py
            utils.py
            ticklabels.py
            axislabels.py
            __init__.py
        scripts/
            fits2bitmap.py
            __init__.py
    _erfa/
        erfa_generator.py
        setup_package.py
        __init__.py
docs/
    conf.py
    wcs/
        examples/
            programmatic.py
            from_file.py
examples/
    io/
        skip_create-large-fits.py
        split-jpeg-to-fits.py
        fits-tables.py
        create-mef.py
        modify-fits-header.py
        plot_fits-image.py
    template/
        example-template.py
    coordinates/
        plot_sgr-coordinate-frame.py
        plot_galactocentric-frame.py
        rv-to-gsr.py
        plot_obs-planning.py

###

Please only provide the full path and return at most 5 files.
The returned files should be separated by new lines ordered by most to least important and wrapped with ```
For example:
```
file1.py
file2.py
```
2024-10-18 14:08:51,123 - INFO - ================================================================================
2024-10-18 14:08:51,174 - INFO - Creating API request
2024-10-18 14:08:52,422 - INFO - API response ChatCompletion(id='chatcmpl-AJoVHCdSrIA24pHpmlkzVFQJDXGPu', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```\nastropy/io/fits/fitsrec.py\nastropy/io/fits/tests/test_fitsrec.py\nastropy/io/fits/scripts/fitsdiff.py\nastropy/io/fits/util.py\nastropy/io/fits/header.py\n```', refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1729285731, model='gpt-4o-2024-05-13', object='chat.completion', service_tier=None, system_fingerprint='fp_568f3bfff7', usage=CompletionUsage(completion_tokens=52, prompt_tokens=2414, total_tokens=2466, completion_tokens_details=CompletionTokensDetails(audio_tokens=None, reasoning_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=None, cached_tokens=0)))
2024-10-18 14:08:52,427 - INFO - ```
astropy/io/fits/fitsrec.py
astropy/io/fits/tests/test_fitsrec.py
astropy/io/fits/scripts/fitsdiff.py
astropy/io/fits/util.py
astropy/io/fits/header.py
```
2024-10-18 14:08:53,187 - INFO - prompting with message:

Please look through the following GitHub Problem Description, and the Skeleton of Relevant Files.
Identify all locations that need inspection or editing to fix the problem, including directly related areas as well as any potentially related global variables, functions, and classes.
For each location you provide, either give the name of the class, the name of a method in a class, the name of a function, or the name of a global variable.

### GitHub Problem Description ###
Possible bug in io.fits related to D exponents
I came across the following code in ``fitsrec.py``:

```python
        # Replace exponent separator in floating point numbers
        if 'D' in format:
            output_field.replace(encode_ascii('E'), encode_ascii('D'))
```

I think this may be incorrect because as far as I can tell ``replace`` is not an in-place operation for ``chararray`` (it returns a copy). Commenting out this code doesn't cause any tests to fail so I think this code isn't being tested anyway.


###



### Skeleton of Relevant Files ###

### File: astropy/io/fits/fitsrec.py ###
```python
# Licensed under a 3-clause BSD style license - see PYFITS.rst



class FITS_record:

    def __init__(self, input, row=0, start=None, end=None, step=None,
                 base=None, **kwargs):
...
    def __getitem__(self, key):
...
    def __setitem__(self, key, value):
...
    def __len__(self):
...
    def __repr__(self):
...
    def field(self, field):
...
    def setfield(self, field, value):
...
    @lazyproperty
    def _bases(self):
...
    def _get_index(self, indx):
...

class FITS_rec(np.recarray):

    _record_type = FITS_record
    _character_as_bytes = False

    def __new__(subtype, input):
...
    def __setstate__(self, state):
...
    def __reduce__(self):
...
    def __array_finalize__(self, obj):
...
    def _init(self):
...
    @classmethod
    def from_columns(cls, columns, nrows=0, fill=False, character_as_bytes=False):
...
    def __repr__(self):
...
    def __getitem__(self, key):
...
    def __setitem__(self, key, value):
...
    def copy(self, order='C'):
...
    @property
    def columns(self):
...
    @property
    def _coldefs(self):
...
    @_coldefs.setter
    def _coldefs(self, cols):
...
    @_coldefs.deleter
    def _coldefs(self):
...
    def __del__(self):
...
    @property
    def names(self):
...
    @property
    def formats(self):
...
    @property
    def _raw_itemsize(self):
...
    def field(self, key):
...
    def _cache_field(self, name, field):
...
    def _update_column_attribute_changed(self, column, idx, attr, old_value,
                                         new_value):
...
    def _update_column_name(self, column, idx, old_name, name):
...
    def _convert_x(self, field, recformat):
...
    def _convert_p(self, column, field, recformat):
...
    def _convert_ascii(self, column, field):
...
    def _convert_other(self, column, field, recformat):
...
    def _get_heap_data(self):
...
    def _get_raw_data(self):
...
    def _get_scale_factors(self, column):
...
    def _scale_back(self, update_heap_pointers=True):
...
    def _scale_back_strings(self, col_idx, input_field, output_field):
...
    def _scale_back_ascii(self, col_idx, input_field, output_field):
...

def _get_recarray_field(array, key):
...

class _UnicodeArrayEncodeError(UnicodeEncodeError):
    def __init__(self, encoding, object_, start, end, reason, index):
...

def _ascii_encode(inarray, out=None):
...

def _has_unicode_fields(array):

```

### File: astropy/io/fits/scripts/fitsdiff.py ###
```python
# Licensed under a 3-clause BSD style license - see LICENSE.rst


log = logging.getLogger('fitsdiff')


USAGE = """
Compare two FITS image files and report the differences in header keywords and
data.

    fitsdiff [options] filename1 filename2

where filename1 filename2 are the two files to be compared.  They may also be
wild cards, in such cases, they must be enclosed by double or single quotes, or
they may be directory names.  If both are directory names, all files in each of
the directories will be included; if only one is a directory name, then the
directory name will be prefixed to the file name(s) specified by the other
argument.  for example::

    fitsdiff "*.fits" "/machine/data1"

will compare all FITS files in the current directory to the corresponding files
in the directory /machine/data1.
""".strip()


EPILOG = """
If the two files are identical within the specified conditions, it will report
"No difference is found." If the value(s) of -c and -k takes the form
'@filename', list is in the text file 'filename', and each line in that text
file contains one keyword.

Example
-------

    fitsdiff -k filename,filtnam1 -n 5 -r 1.e-6 test1.fits test2

This command will compare files test1.fits and test2.fits, report maximum of 5
different pixels values per extension, only report data values larger than
1.e-6 relative to each other, and will neglect the different values of keywords
FILENAME and FILTNAM1 (or their very existence).

fitsdiff command-line arguments can also be set using the environment variable
FITSDIFF_SETTINGS.  If the FITSDIFF_SETTINGS environment variable is present,
each argument present will override the corresponding argument on the
command-line unless the --exact option is specified.  The FITSDIFF_SETTINGS
environment variable exists to make it easier to change the
behavior of fitsdiff on a global level, such as in a set of regression tests.
""".strip()


class HelpFormatter(optparse.TitledHelpFormatter):
    def format_epilog(self, epilog):
...

def handle_options(argv=None):
...

def setup_logging(outfile=None):
...

def match_files(paths):
...

def main(args=None):

```

### File: astropy/io/fits/util.py ###
```python
# Licensed under a 3-clause BSD style license - see PYFITS.rst



cmp = lambda a, b: (a > b) - (a < b)

all_integer_types = (int, np.integer)


class NotifierMixin:

    _listeners = None

    def _add_listener(self, listener):
...
    def _remove_listener(self, listener):
...
    def _notify(self, notification, *args, **kwargs):
...
    def __getstate__(self):
...

def first(iterable):
...

def itersubclasses(cls, _seen=None):
...

def ignore_sigint(func):
...

def pairwise(iterable):
...

def encode_ascii(s):
...

def decode_ascii(s):
...

def isreadable(f):
...

def iswritable(f):
...

def isfile(f):
...

def fileobj_open(filename, mode):
...

def fileobj_name(f):
...

def fileobj_closed(f):
...

def fileobj_mode(f):
...

def _fileobj_normalize_mode(f):
...

def fileobj_is_binary(f):
...

def translate(s, table, deletechars):
...

def fill(text, width, **kwargs):
...

# On MacOS X 10.8 and earlier, there is a bug that causes numpy.fromfile to
# fail when reading over 2Gb of data. If we detect these versions of MacOS X,
# we can instead read the data in chunks. To avoid performance penalties at
# import time, we defer the setting of this global variable until the first
# time it is needed.
CHUNKED_FROMFILE = None


def _array_from_file(infile, dtype, count):
...

_OSX_WRITE_LIMIT = (2 ** 32) - 1
_WIN_WRITE_LIMIT = (2 ** 31) - 1


def _array_to_file(arr, outfile):
...

def _array_to_file_like(arr, fileobj):
...

def _write_string(f, s):
...

def _convert_array(array, dtype):
...

def _unsigned_zero(dtype):
...

def _is_pseudo_unsigned(dtype):
...

def _is_int(val):
...

def _str_to_num(val):
...

def _words_group(input, strlen):
...

def _tmp_name(input):
...

def _get_array_mmap(array):
...

@contextmanager
def _free_space_check(hdulist, dirname=None):
...

def _extract_number(value, default):
...

def get_testdata_filepath(filename):
...

def _rstrip_inplace(array):

```


###

Please provide the complete set of locations as either a class name, a function name, or a variable name.
Note that if you include a class, you do not need to list its specific methods.
You can include either the entire class or don't include the class name and instead include specific methods in the class.
### Examples:
```
full_path1/file1.py
function: my_function_1
class: MyClass1
function: MyClass2.my_method

full_path2/file2.py
variable: my_var
function: MyClass3.my_method

full_path3/file3.py
function: my_function_2
function: my_function_3
function: MyClass4.my_method_1
class: MyClass5
```

Return just the locations.

2024-10-18 14:08:53,187 - INFO - ================================================================================
2024-10-18 14:08:53,234 - INFO - Creating API request
2024-10-18 14:08:54,365 - INFO - API response ChatCompletion(id='chatcmpl-AJoVJA3W9l3zyixiQfvoAYsnT34pm', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```\nastropy/io/fits/fitsrec.py\nclass: FITS_rec\nfunction: FITS_rec._scale_back_ascii\n\nastropy/io/fits/util.py\nfunction: encode_ascii\n```', refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1729285733, model='gpt-4o-2024-05-13', object='chat.completion', service_tier=None, system_fingerprint='fp_568f3bfff7', usage=CompletionUsage(completion_tokens=42, prompt_tokens=2069, total_tokens=2111, completion_tokens_details=CompletionTokensDetails(audio_tokens=None, reasoning_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=None, cached_tokens=0)))
2024-10-18 14:08:54,366 - INFO - ==== raw output ====
2024-10-18 14:08:54,366 - INFO - ```
astropy/io/fits/fitsrec.py
class: FITS_rec
function: FITS_rec._scale_back_ascii

astropy/io/fits/util.py
function: encode_ascii
```
2024-10-18 14:08:54,366 - INFO - ================================================================================
2024-10-18 14:08:54,366 - INFO - ==== extracted locs ====
2024-10-18 14:08:54,366 - INFO - ['class: FITS_rec\nfunction: FITS_rec._scale_back_ascii']
2024-10-18 14:08:54,366 - INFO - ['']
2024-10-18 14:08:54,366 - INFO - ['function: encode_ascii']
2024-10-18 14:08:54,366 - INFO - ================================================================================
2024-10-18 14:08:55,502 - INFO - prompting with message:

Please review the following GitHub problem description, and relevant files, and provide a set of locations that need to be edited to fix the issue.
The locations can be specified as class names, function or method names, or exact line numbers that require modification.

### GitHub Problem Description ###
Possible bug in io.fits related to D exponents
I came across the following code in ``fitsrec.py``:

```python
        # Replace exponent separator in floating point numbers
        if 'D' in format:
            output_field.replace(encode_ascii('E'), encode_ascii('D'))
```

I think this may be incorrect because as far as I can tell ``replace`` is not an in-place operation for ``chararray`` (it returns a copy). Commenting out this code doesn't cause any tests to fail so I think this code isn't being tested anyway.


###



### astropy/io/fits/fitsrec.py
...
134|        indices = np.ogrid[:self.array._nfields]
135|        for base in reversed(self._bases):
136|            if base.step < 1:
137|                s = slice(base.start, None, base.step)
138|            else:
139|                s = slice(base.start, base.end, base.step)
140|            indices = indices[s]
141|        return indices[indx]
142|
143|
144|class FITS_rec(np.recarray):
145|    """
146|    FITS record array class.
147|
148|    `FITS_rec` is the data part of a table HDU's data part.  This is a layer
149|    over the `~numpy.recarray`, so we can deal with scaled columns.
150|
151|    It inherits all of the standard methods from `numpy.ndarray`.
152|    """
153|
154|    _record_type = FITS_record
155|    _character_as_bytes = False
156|
157|    def __new__(subtype, input):
158|        """
159|        Construct a FITS record array from a recarray.
160|        """
161|
162|        # input should be a record array
163|        if input.dtype.subdtype is None:
164|            self = np.recarray.__new__(subtype, input.shape, input.dtype,
165|                                       buf=input.data)
166|        else:
167|            self = np.recarray.__new__(subtype, input.shape, input.dtype,
168|                                       buf=input.data, strides=input.strides)
169|
170|        self._init()
171|        if self.dtype.fields:
172|            self._nfields = len(self.dtype.fields)
173|
174|        return self
175|
176|    def __setstate__(self, state):
177|        meta = state[-1]
178|        column_state = state[-2]
179|        state = state[:-2]
180|
181|        super().__setstate__(state)
182|
183|        self._col_weakrefs = weakref.WeakSet()
184|
185|        for attr, value in zip(meta, column_state):
186|            setattr(self, attr, value)
187|
188|    def __reduce__(self):
189|        """
190|        Return a 3-tuple for pickling a FITS_rec. Use the super-class
191|        functionality but then add in a tuple of FITS_rec-specific
192|        values that get used in __setstate__.
193|        """
194|
195|        reconst_func, reconst_func_args, state = super().__reduce__()
196|
197|        # Define FITS_rec-specific attrs that get added to state
198|        column_state = []
199|        meta = []
200|
201|        for attrs in ['_converted', '_heapoffset', '_heapsize', '_nfields',
202|                      '_gap', '_uint', 'parnames', '_coldefs']:
203|
204|            with suppress(AttributeError):
205|                # _coldefs can be Delayed, and file objects cannot be
206|                # picked, it needs to be deepcopied first
207|                if attrs == '_coldefs':
208|                    column_state.append(self._coldefs.__deepcopy__(None))
209|                else:
210|                    column_state.append(getattr(self, attrs))
211|                meta.append(attrs)
212|
213|        state = state + (column_state, meta)
214|
215|        return reconst_func, reconst_func_args, state
216|
217|    def __array_finalize__(self, obj):
218|        if obj is None:
219|            return
220|
221|        if isinstance(obj, FITS_rec):
222|            self._character_as_bytes = obj._character_as_bytes
223|
224|        if isinstance(obj, FITS_rec) and obj.dtype == self.dtype:
225|            self._converted = obj._converted
226|            self._heapoffset = obj._heapoffset
227|            self._heapsize = obj._heapsize
228|            self._col_weakrefs = obj._col_weakrefs
229|            self._coldefs = obj._coldefs
230|            self._nfields = obj._nfields
231|            self._gap = obj._gap
232|            self._uint = obj._uint
233|        elif self.dtype.fields is not None:
234|            # This will allow regular ndarrays with fields, rather than
235|            # just other FITS_rec objects
236|            self._nfields = len(self.dtype.fields)
237|            self._converted = {}
238|
239|            self._heapoffset = getattr(obj, '_heapoffset', 0)
240|            self._heapsize = getattr(obj, '_heapsize', 0)
241|
242|            self._gap = getattr(obj, '_gap', 0)
243|            self._uint = getattr(obj, '_uint', False)
244|            self._col_weakrefs = weakref.WeakSet()
245|            self._coldefs = ColDefs(self)
246|
247|            # Work around chicken-egg problem.  Column.array relies on the
248|            # _coldefs attribute to set up ref back to parent FITS_rec; however
249|            # in the above line the self._coldefs has not been assigned yet so
250|            # this fails.  This patches that up...
251|            for col in self._coldefs:
252|                del col.array
253|                col._parent_fits_rec = weakref.ref(self)
254|        else:
255|            self._init()
256|
257|    def _init(self):
258|        """Initializes internal attributes specific to FITS-isms."""
259|
260|        self._nfields = 0
261|        self._converted = {}
262|        self._heapoffset = 0
263|        self._heapsize = 0
264|        self._col_weakrefs = weakref.WeakSet()
265|        self._coldefs = None
266|        self._gap = 0
267|        self._uint = False
268|
269|    @classmethod
270|    def from_columns(cls, columns, nrows=0, fill=False, character_as_bytes=False):
271|        """
272|        Given a `ColDefs` object of unknown origin, initialize a new `FITS_rec`
273|        object.
274|
275|        .. note::
276|
277|            This was originally part of the ``new_table`` function in the table
278|            module but was moved into a class method since most of its
279|            functionality always had more to do with initializing a `FITS_rec`
280|            object than anything else, and much of it also overlapped with
281|            ``FITS_rec._scale_back``.
282|
283|        Parameters
284|        ----------
285|        columns : sequence of `Column` or a `ColDefs`
286|            The columns from which to create the table data.  If these
287|            columns have data arrays attached that data may be used in
288|            initializing the new table.  Otherwise the input columns
289|            will be used as a template for a new table with the requested
290|            number of rows.
291|
292|        nrows : int
293|            Number of rows in the new table.  If the input columns have data
294|            associated with them, the size of the largest input column is used.
295|            Otherwise the default is 0.
296|
297|        fill : bool
298|            If `True`, will fill all cells with zeros or blanks.  If
299|            `False`, copy the data from input, undefined cells will still
300|            be filled with zeros/blanks.
301|        """
302|
303|        if not isinstance(columns, ColDefs):
304|            columns = ColDefs(columns)
305|
306|        # read the delayed data
307|        for column in columns:
308|            arr = column.array
309|            if isinstance(arr, Delayed):
310|                if arr.hdu.data is None:
311|                    column.array = None
312|                else:
313|                    column.array = _get_recarray_field(arr.hdu.data,
314|                                                       arr.field)
315|        # Reset columns._arrays (which we may want to just do away with
316|        # altogether
317|        del columns._arrays
318|
319|        # use the largest column shape as the shape of the record
320|        if nrows == 0:
321|            for arr in columns._arrays:
322|                if arr is not None:
323|                    dim = arr.shape[0]
324|                else:
325|                    dim = 0
326|                if dim > nrows:
327|                    nrows = dim
328|
329|        raw_data = np.empty(columns.dtype.itemsize * nrows, dtype=np.uint8)
330|        raw_data.fill(ord(columns._padding_byte))
331|        data = np.recarray(nrows, dtype=columns.dtype, buf=raw_data).view(cls)
332|        data._character_as_bytes = character_as_bytes
333|
334|        # Make sure the data is a listener for changes to the columns
335|        columns._add_listener(data)
336|
337|        # Previously this assignment was made from hdu.columns, but that's a
338|        # bug since if a _TableBaseHDU has a FITS_rec in its .data attribute
339|        # the _TableBaseHDU.columns property is actually returned from
340|        # .data._coldefs, so this assignment was circular!  Don't make that
341|        # mistake again.
342|        # All of this is an artifact of the fragility of the FITS_rec class,
343|        # and that it can't just be initialized by columns...
344|        data._coldefs = columns
345|
346|        # If fill is True we don't copy anything from the column arrays.  We're
347|        # just using them as a template, and returning a table filled with
348|        # zeros/blanks
349|        if fill:
350|            return data
351|
352|        # Otherwise we have to fill the recarray with data from the input
353|        # columns
354|        for idx, column in enumerate(columns):
355|            # For each column in the ColDef object, determine the number of
356|            # rows in that column.  This will be either the number of rows in
357|            # the ndarray associated with the column, or the number of rows
358|            # given in the call to this function, which ever is smaller.  If
359|            # the input FILL argument is true, the number of rows is set to
360|            # zero so that no data is copied from the original input data.
361|            arr = column.array
362|
363|            if arr is None:
364|                array_size = 0
365|            else:
366|                array_size = len(arr)
367|
368|            n = min(array_size, nrows)
369|
370|            # TODO: At least *some* of this logic is mostly redundant with the
371|            # _convert_foo methods in this class; see if we can eliminate some
372|            # of that duplication.
373|
374|            if not n:
375|                # The input column had an empty array, so just use the fill
376|                # value
377|                continue
378|
379|            field = _get_recarray_field(data, idx)
380|            name = column.name
381|            fitsformat = column.format
382|            recformat = fitsformat.recformat
383|
384|            outarr = field[:n]
385|            inarr = arr[:n]
386|
387|            if isinstance(recformat, _FormatX):
388|                # Data is a bit array
389|                if inarr.shape[-1] == recformat.repeat:
390|                    _wrapx(inarr, outarr, recformat.repeat)
391|                    continue
392|            elif isinstance(recformat, _FormatP):
393|                data._cache_field(name, _makep(inarr, field, recformat,
394|                                               nrows=nrows))
395|                continue
396|            # TODO: Find a better way of determining that the column is meant
397|            # to be FITS L formatted
398|            elif recformat[-2:] == FITS2NUMPY['L'] and inarr.dtype == bool:
399|                # column is boolean
400|                # The raw data field should be filled with either 'T' or 'F'
401|                # (not 0).  Use 'F' as a default
402|                field[:] = ord('F')
403|                # Also save the original boolean array in data._converted so
404|                # that it doesn't have to be re-converted
405|                converted = np.zeros(field.shape, dtype=bool)
406|                converted[:n] = inarr
407|                data._cache_field(name, converted)
408|                # TODO: Maybe this step isn't necessary at all if _scale_back
409|                # will handle it?
410|                inarr = np.where(inarr == np.False_, ord('F'), ord('T'))
411|            elif (columns[idx]._physical_values and
412|                    columns[idx]._pseudo_unsigned_ints):
413|                # Temporary hack...
414|                bzero = column.bzero
415|                converted = np.zeros(field.shape, dtype=inarr.dtype)
416|                converted[:n] = inarr
417|                data._cache_field(name, converted)
418|                if n < nrows:
419|                    # Pre-scale rows below the input data
420|                    field[n:] = -bzero
421|
422|                inarr = inarr - bzero
423|            elif isinstance(columns, _AsciiColDefs):
424|                # Regardless whether the format is character or numeric, if the
425|                # input array contains characters then it's already in the raw
426|                # format for ASCII tables
427|                if fitsformat._pseudo_logical:
428|                    # Hack to support converting from 8-bit T/F characters
429|                    # Normally the column array is a chararray of 1 character
430|                    # strings, but we need to view it as a normal ndarray of
431|                    # 8-bit ints to fill it with ASCII codes for 'T' and 'F'
432|                    outarr = field.view(np.uint8, np.ndarray)[:n]
433|                elif arr.dtype.kind not in ('S', 'U'):
434|                    # Set up views of numeric columns with the appropriate
435|                    # numeric dtype
436|                    # Fill with the appropriate blanks for the column format
437|                    data._cache_field(name, np.zeros(nrows, dtype=arr.dtype))
438|                    outarr = data._converted[name][:n]
439|
440|                outarr[:] = inarr
441|                continue
442|
443|            if inarr.shape != outarr.shape:
444|                if (inarr.dtype.kind == outarr.dtype.kind and
445|                        inarr.dtype.kind in ('U', 'S') and
446|                        inarr.dtype != outarr.dtype):
447|
448|                    inarr_rowsize = inarr[0].size
449|                    inarr = inarr.flatten().view(outarr.dtype)
450|
451|                # This is a special case to handle input arrays with
452|                # non-trivial TDIMn.
453|                # By design each row of the outarray is 1-D, while each row of
454|                # the input array may be n-D
455|                if outarr.ndim > 1:
456|                    # The normal case where the first dimension is the rows
457|                    inarr_rowsize = inarr[0].size
458|                    inarr = inarr.reshape(n, inarr_rowsize)
459|                    outarr[:, :inarr_rowsize] = inarr
460|                else:
461|                    # Special case for strings where the out array only has one
462|                    # dimension (the second dimension is rolled up into the
463|                    # strings
464|                    outarr[:n] = inarr.ravel()
465|            else:
466|                outarr[:] = inarr
467|
468|        # Now replace the original column array references with the new
469|        # fields
470|        # This is required to prevent the issue reported in
471|        # https://github.com/spacetelescope/PyFITS/issues/99
472|        for idx in range(len(columns)):
473|            columns._arrays[idx] = data.field(idx)
474|
475|        return data
476|
477|    def __repr__(self):
478|        # Force use of the normal ndarray repr (rather than the new
479|        # one added for recarray in Numpy 1.10) for backwards compat
480|        return np.ndarray.__repr__(self)
481|
482|    def __getitem__(self, key):
483|        if self._coldefs is None:
484|            return super().__getitem__(key)
485|
486|        if isinstance(key, str):
487|            return self.field(key)
488|
489|        # Have to view as a recarray then back as a FITS_rec, otherwise the
490|        # circular reference fix/hack in FITS_rec.field() won't preserve
491|        # the slice.
492|        out = self.view(np.recarray)[key]
493|        if type(out) is not np.recarray:
494|            # Oops, we got a single element rather than a view. In that case,
495|            # return a Record, which has no __getstate__ and is more efficient.
496|            return self._record_type(self, key)
497|
498|        # We got a view; change it back to our class, and add stuff
499|        out = out.view(type(self))
500|        out._coldefs = ColDefs(self._coldefs)
501|        arrays = []
502|        out._converted = {}
503|        for idx, name in enumerate(self._coldefs.names):
504|            #
505|            # Store the new arrays for the _coldefs object
506|            #
507|            arrays.append(self._coldefs._arrays[idx][key])
508|
509|            # Ensure that the sliced FITS_rec will view the same scaled
510|            # columns as the original; this is one of the few cases where
511|            # it is not necessary to use _cache_field()
512|            if name in self._converted:
513|                dummy = self._converted[name]
514|                field = np.ndarray.__getitem__(dummy, key)
515|                out._converted[name] = field
516|
517|        out._coldefs._arrays = arrays
518|        return out
519|
520|    def __setitem__(self, key, value):
521|        if self._coldefs is None:
522|            return super().__setitem__(key, value)
523|
524|        if isinstance(key, str):
525|            self[key][:] = value
526|            return
527|
528|        if isinstance(key, slice):
529|            end = min(len(self), key.stop or len(self))
530|            end = max(0, end)
531|            start = max(0, key.start or 0)
532|            end = min(end, start + len(value))
533|
534|            for idx in range(start, end):
535|                self.__setitem__(idx, value[idx - start])
536|            return
537|
538|        if isinstance(value, FITS_record):
539|            for idx in range(self._nfields):
540|                self.field(self.names[idx])[key] = value.field(self.names[idx])
541|        elif isinstance(value, (tuple, list, np.void)):
542|            if self._nfields == len(value):
543|                for idx in range(self._nfields):
544|                    self.field(idx)[key] = value[idx]
545|            else:
546|                raise ValueError('Input tuple or list required to have {} '
547|                                 'elements.'.format(self._nfields))
548|        else:
549|            raise TypeError('Assignment requires a FITS_record, tuple, or '
550|                            'list as input.')
551|
552|    def copy(self, order='C'):
553|        """
554|        The Numpy documentation lies; `numpy.ndarray.copy` is not equivalent to
555|        `numpy.copy`.  Differences include that it re-views the copied array as
556|        self's ndarray subclass, as though it were taking a slice; this means
557|        ``__array_finalize__`` is called and the copy shares all the array
558|        attributes (including ``._converted``!).  So we need to make a deep
559|        copy of all those attributes so that the two arrays truly do not share
560|        any data.
561|        """
562|
563|        new = super().copy(order=order)
564|
565|        new.__dict__ = copy.deepcopy(self.__dict__)
566|        return new
567|
568|    @property
569|    def columns(self):
570|        """
571|        A user-visible accessor for the coldefs.
572|
573|        See https://aeon.stsci.edu/ssb/trac/pyfits/ticket/44
574|        """
575|
576|        return self._coldefs
577|
578|    @property
579|    def _coldefs(self):
580|        # This used to be a normal internal attribute, but it was changed to a
581|        # property as a quick and transparent way to work around the reference
582|        # leak bug fixed in https://github.com/astropy/astropy/pull/4539
583|        #
584|        # See the long comment in the Column.array property for more details
585|        # on this.  But in short, FITS_rec now has a ._col_weakrefs attribute
586|        # which is a WeakSet of weakrefs to each Column in _coldefs.
587|        #
588|        # So whenever ._coldefs is set we also add each Column in the ColDefs
589|        # to the weakrefs set.  This is an easy way to find out if a Column has
590|        # any references to it external to the FITS_rec (i.e. a user assigned a
591|        # column to a variable).  If the column is still in _col_weakrefs then
592|        # there are other references to it external to this FITS_rec.  We use
593|        # that information in __del__ to save off copies of the array data
594|        # for those columns to their Column.array property before our memory
595|        # is freed.
596|        return self.__dict__.get('_coldefs')
597|
598|    @_coldefs.setter
599|    def _coldefs(self, cols):
600|        self.__dict__['_coldefs'] = cols
601|        if isinstance(cols, ColDefs):
602|            for col in cols.columns:
603|                self._col_weakrefs.add(col)
604|
605|    @_coldefs.deleter
606|    def _coldefs(self):
607|        try:
608|            del self.__dict__['_coldefs']
609|        except KeyError as exc:
610|            raise AttributeError(exc.args[0])
611|
612|    def __del__(self):
613|        try:
614|            del self._coldefs
615|            if self.dtype.fields is not None:
616|                for col in self._col_weakrefs:
617|
618|                    if col.array is not None:
619|                        col.array = col.array.copy()
620|
621|        # See issues #4690 and #4912
622|        except (AttributeError, TypeError):  # pragma: no cover
623|            pass
624|
625|    @property
626|    def names(self):
627|        """List of column names."""
628|
629|        if self.dtype.fields:
630|            return list(self.dtype.names)
631|        elif getattr(self, '_coldefs', None) is not None:
632|            return self._coldefs.names
633|        else:
634|            return None
635|
636|    @property
637|    def formats(self):
638|        """List of column FITS formats."""
639|
640|        if getattr(self, '_coldefs', None) is not None:
641|            return self._coldefs.formats
642|
643|        return None
644|
645|    @property
646|    def _raw_itemsize(self):
647|        """
648|        Returns the size of row items that would be written to the raw FITS
649|        file, taking into account the possibility of unicode columns being
650|        compactified.
651|
652|        Currently for internal use only.
653|        """
654|
655|        if _has_unicode_fields(self):
656|            total_itemsize = 0
657|            for field in self.dtype.fields.values():
658|                itemsize = field[0].itemsize
659|                if field[0].kind == 'U':
660|                    itemsize = itemsize // 4
661|                total_itemsize += itemsize
662|            return total_itemsize
663|        else:
664|            # Just return the normal itemsize
665|            return self.itemsize
666|
667|    def field(self, key):
668|        """
669|        A view of a `Column`'s data as an array.
670|        """
671|
672|        # NOTE: The *column* index may not be the same as the field index in
673|        # the recarray, if the column is a phantom column
674|        column = self.columns[key]
675|        name = column.name
676|        format = column.format
677|
678|        if format.dtype.itemsize == 0:
679|            warnings.warn(
680|                'Field {!r} has a repeat count of 0 in its format code, '
681|                'indicating an empty field.'.format(key))
682|            return np.array([], dtype=format.dtype)
683|
684|        # If field's base is a FITS_rec, we can run into trouble because it
685|        # contains a reference to the ._coldefs object of the original data;
686|        # this can lead to a circular reference; see ticket #49
687|        base = self
688|        while (isinstance(base, FITS_rec) and
689|                isinstance(base.base, np.recarray)):
690|            base = base.base
691|        # base could still be a FITS_rec in some cases, so take care to
692|        # use rec.recarray.field to avoid a potential infinite
693|        # recursion
694|        field = _get_recarray_field(base, name)
695|
696|        if name not in self._converted:
697|            recformat = format.recformat
698|            # TODO: If we're now passing the column to these subroutines, do we
699|            # really need to pass them the recformat?
700|            if isinstance(recformat, _FormatP):
701|                # for P format
702|                converted = self._convert_p(column, field, recformat)
703|            else:
704|                # Handle all other column data types which are fixed-width
705|                # fields
706|                converted = self._convert_other(column, field, recformat)
707|
708|            # Note: Never assign values directly into the self._converted dict;
709|            # always go through self._cache_field; this way self._converted is
710|            # only used to store arrays that are not already direct views of
711|            # our own data.
712|            self._cache_field(name, converted)
713|            return converted
714|
715|        return self._converted[name]
716|
717|    def _cache_field(self, name, field):
718|        """
719|        Do not store fields in _converted if one of its bases is self,
720|        or if it has a common base with self.
721|
722|        This results in a reference cycle that cannot be broken since
723|        ndarrays do not participate in cyclic garbage collection.
724|        """
725|
726|        base = field
727|        while True:
728|            self_base = self
729|            while True:
730|                if self_base is base:
731|                    return
732|
733|                if getattr(self_base, 'base', None) is not None:
734|                    self_base = self_base.base
735|                else:
736|                    break
737|
738|            if getattr(base, 'base', None) is not None:
739|                base = base.base
740|            else:
741|                break
742|
743|        self._converted[name] = field
744|
745|    def _update_column_attribute_changed(self, column, idx, attr, old_value,
746|                                         new_value):
747|        """
748|        Update how the data is formatted depending on changes to column
749|        attributes initiated by the user through the `Column` interface.
750|
751|        Dispatches column attribute change notifications to individual methods
752|        for each attribute ``_update_column_<attr>``
753|        """
754|
755|        method_name = '_update_column_{0}'.format(attr)
756|        if hasattr(self, method_name):
757|            # Right now this is so we can be lazy and not implement updaters
758|            # for every attribute yet--some we may not need at all, TBD
759|            getattr(self, method_name)(column, idx, old_value, new_value)
760|
761|    def _update_column_name(self, column, idx, old_name, name):
762|        """Update the dtype field names when a column name is changed."""
763|
764|        dtype = self.dtype
765|        # Updating the names on the dtype should suffice
766|        dtype.names = dtype.names[:idx] + (name,) + dtype.names[idx + 1:]
767|
768|    def _convert_x(self, field, recformat):
769|        """Convert a raw table column to a bit array as specified by the
770|        FITS X format.
771|        """
772|
773|        dummy = np.zeros(self.shape + (recformat.repeat,), dtype=np.bool_)
774|        _unwrapx(field, dummy, recformat.repeat)
775|        return dummy
776|
777|    def _convert_p(self, column, field, recformat):
778|        """Convert a raw table column of FITS P or Q format descriptors
779|        to a VLA column with the array data returned from the heap.
780|        """
781|
782|        dummy = _VLF([None] * len(self), dtype=recformat.dtype)
783|        raw_data = self._get_raw_data()
784|
785|        if raw_data is None:
786|            raise OSError(
787|                "Could not find heap data for the {!r} variable-length "
788|                "array column.".format(column.name))
789|
790|        for idx in range(len(self)):
791|            offset = field[idx, 1] + self._heapoffset
792|            count = field[idx, 0]
793|
794|            if recformat.dtype == 'a':
795|                dt = np.dtype(recformat.dtype + str(1))
796|                arr_len = count * dt.itemsize
797|                da = raw_data[offset:offset + arr_len].view(dt)
798|                da = np.char.array(da.view(dtype=dt), itemsize=count)
799|                dummy[idx] = decode_ascii(da)
800|            else:
801|                dt = np.dtype(recformat.dtype)
802|                arr_len = count * dt.itemsize
803|                dummy[idx] = raw_data[offset:offset + arr_len].view(dt)
804|                dummy[idx].dtype = dummy[idx].dtype.newbyteorder('>')
805|                # Each array in the field may now require additional
806|                # scaling depending on the other scaling parameters
807|                # TODO: The same scaling parameters apply to every
808|                # array in the column so this is currently very slow; we
809|                # really only need to check once whether any scaling will
810|                # be necessary and skip this step if not
811|                # TODO: Test that this works for X format; I don't think
812|                # that it does--the recformat variable only applies to the P
813|                # format not the X format
814|                dummy[idx] = self._convert_other(column, dummy[idx],
815|                                                 recformat)
816|
817|        return dummy
818|
819|    def _convert_ascii(self, column, field):
820|        """
821|        Special handling for ASCII table columns to convert columns containing
822|        numeric types to actual numeric arrays from the string representation.
823|        """
824|
825|        format = column.format
826|        recformat = ASCII2NUMPY[format[0]]
827|        # if the string = TNULL, return ASCIITNULL
828|        nullval = str(column.null).strip().encode('ascii')
829|        if len(nullval) > format.width:
830|            nullval = nullval[:format.width]
831|
832|        # Before using .replace make sure that any trailing bytes in each
833|        # column are filled with spaces, and *not*, say, nulls; this causes
834|        # functions like replace to potentially leave gibberish bytes in the
835|        # array buffer.
836|        dummy = np.char.ljust(field, format.width)
837|        dummy = np.char.replace(dummy, encode_ascii('D'), encode_ascii('E'))
838|        null_fill = encode_ascii(str(ASCIITNULL).rjust(format.width))
839|
840|        # Convert all fields equal to the TNULL value (nullval) to empty fields.
841|        # TODO: These fields really should be conerted to NaN or something else undefined.
842|        # Currently they are converted to empty fields, which are then set to zero.
843|        dummy = np.where(np.char.strip(dummy) == nullval, null_fill, dummy)
844|
845|        # always replace empty fields, see https://github.com/astropy/astropy/pull/5394
846|        if nullval != b'':
847|            dummy = np.where(np.char.strip(dummy) == b'', null_fill, dummy)
848|
849|        try:
850|            dummy = np.array(dummy, dtype=recformat)
851|        except ValueError as exc:
852|            indx = self.names.index(column.name)
853|            raise ValueError(
854|                '{}; the header may be missing the necessary TNULL{} '
855|                'keyword or the table contains invalid data'.format(
856|                    exc, indx + 1))
857|
858|        return dummy
859|
860|    def _convert_other(self, column, field, recformat):
861|        """Perform conversions on any other fixed-width column data types.
862|
863|        This may not perform any conversion at all if it's not necessary, in
864|        which case the original column array is returned.
865|        """
866|
867|        if isinstance(recformat, _FormatX):
868|            # special handling for the X format
869|            return self._convert_x(field, recformat)
870|
871|        (_str, _bool, _number, _scale, _zero, bscale, bzero, dim) = \
872|            self._get_scale_factors(column)
873|
874|        indx = self.names.index(column.name)
875|
876|        # ASCII table, convert strings to numbers
877|        # TODO:
878|        # For now, check that these are ASCII columns by checking the coldefs
879|        # type; in the future all columns (for binary tables, ASCII tables, or
880|        # otherwise) should "know" what type they are already and how to handle
881|        # converting their data from FITS format to native format and vice
882|        # versa...
883|        if not _str and isinstance(self._coldefs, _AsciiColDefs):
884|            field = self._convert_ascii(column, field)
885|
886|        # Test that the dimensions given in dim are sensible; otherwise
887|        # display a warning and ignore them
888|        if dim:
889|            # See if the dimensions already match, if not, make sure the
890|            # number items will fit in the specified dimensions
891|            if field.ndim > 1:
892|                actual_shape = field.shape[1:]
893|                if _str:
894|                    actual_shape = actual_shape + (field.itemsize,)
895|            else:
896|                actual_shape = field.shape[0]
897|
898|            if dim == actual_shape:
899|                # The array already has the correct dimensions, so we
900|                # ignore dim and don't convert
901|                dim = None
902|            else:
903|                nitems = reduce(operator.mul, dim)
904|                if _str:
905|                    actual_nitems = field.itemsize
906|                elif len(field.shape) == 1:  # No repeat count in TFORMn, equivalent to 1
907|                    actual_nitems = 1
908|                else:
909|                    actual_nitems = field.shape[1]
910|                if nitems > actual_nitems:
911|                    warnings.warn(
912|                        'TDIM{} value {:d} does not fit with the size of '
913|                        'the array items ({:d}).  TDIM{:d} will be ignored.'
914|                        .format(indx + 1, self._coldefs[indx].dims,
915|                                actual_nitems, indx + 1))
916|                    dim = None
917|
918|        # further conversion for both ASCII and binary tables
919|        # For now we've made columns responsible for *knowing* whether their
920|        # data has been scaled, but we make the FITS_rec class responsible for
921|        # actually doing the scaling
922|        # TODO: This also needs to be fixed in the effort to make Columns
923|        # responsible for scaling their arrays to/from FITS native values
924|        if not column.ascii and column.format.p_format:
925|            format_code = column.format.p_format
926|        else:
927|            # TODO: Rather than having this if/else it might be nice if the
928|            # ColumnFormat class had an attribute guaranteed to give the format
929|            # of actual values in a column regardless of whether the true
930|            # format is something like P or Q
931|            format_code = column.format.format
932|
933|        if (_number and (_scale or _zero) and not column._physical_values):
934|            # This is to handle pseudo unsigned ints in table columns
935|            # TODO: For now this only really works correctly for binary tables
936|            # Should it work for ASCII tables as well?
937|            if self._uint:
938|                if bzero == 2**15 and format_code == 'I':
939|                    field = np.array(field, dtype=np.uint16)
940|                elif bzero == 2**31 and format_code == 'J':
941|                    field = np.array(field, dtype=np.uint32)
942|                elif bzero == 2**63 and format_code == 'K':
943|                    field = np.array(field, dtype=np.uint64)
944|                    bzero64 = np.uint64(2 ** 63)
945|                else:
946|                    field = np.array(field, dtype=np.float64)
947|            else:
948|                field = np.array(field, dtype=np.float64)
949|
950|            if _scale:
951|                np.multiply(field, bscale, field)
952|            if _zero:
953|                if self._uint and format_code == 'K':
954|                    # There is a chance of overflow, so be careful
955|                    test_overflow = field.copy()
956|                    try:
957|                        test_overflow += bzero64
958|                    except OverflowError:
959|                        warnings.warn(
960|                            "Overflow detected while applying TZERO{0:d}. "
961|                            "Returning unscaled data.".format(indx + 1))
962|                    else:
963|                        field = test_overflow
964|                else:
965|                    field += bzero
966|        elif _bool and field.dtype != bool:
967|            field = np.equal(field, ord('T'))
968|        elif _str:
969|            if not self._character_as_bytes:
970|                with suppress(UnicodeDecodeError):
971|                    field = decode_ascii(field)
972|
973|        if dim:
974|            # Apply the new field item dimensions
975|            nitems = reduce(operator.mul, dim)
976|            if field.ndim > 1:
977|                field = field[:, :nitems]
978|            if _str:
979|                fmt = field.dtype.char
980|                dtype = ('|{}{}'.format(fmt, dim[-1]), dim[:-1])
981|                field.dtype = dtype
982|            else:
983|                field.shape = (field.shape[0],) + dim
984|
985|        return field
986|
987|    def _get_heap_data(self):
988|        """
989|        Returns a pointer into the table's raw data to its heap (if present).
990|
991|        This is returned as a numpy byte array.
992|        """
993|
994|        if self._heapsize:
995|            raw_data = self._get_raw_data().view(np.ubyte)
996|            heap_end = self._heapoffset + self._heapsize
997|            return raw_data[self._heapoffset:heap_end]
998|        else:
999|            return np.array([], dtype=np.ubyte)
1000|
1001|    def _get_raw_data(self):
1002|        """
1003|        Returns the base array of self that "raw data array" that is the
1004|        array in the format that it was first read from a file before it was
1005|        sliced or viewed as a different type in any way.
1006|
1007|        This is determined by walking through the bases until finding one that
1008|        has at least the same number of bytes as self, plus the heapsize.  This
1009|        may be the immediate .base but is not always.  This is used primarily
1010|        for variable-length array support which needs to be able to find the
1011|        heap (the raw data *may* be larger than nbytes + heapsize if it
1012|        contains a gap or padding).
1013|
1014|        May return ``None`` if no array resembling the "raw data" according to
1015|        the stated criteria can be found.
1016|        """
1017|
1018|        raw_data_bytes = self.nbytes + self._heapsize
1019|        base = self
1020|        while hasattr(base, 'base') and base.base is not None:
1021|            base = base.base
1022|            if hasattr(base, 'nbytes') and base.nbytes >= raw_data_bytes:
1023|                return base
1024|
1025|    def _get_scale_factors(self, column):
1026|        """Get all the scaling flags and factors for one column."""
1027|
1028|        # TODO: Maybe this should be a method/property on Column?  Or maybe
1029|        # it's not really needed at all...
1030|        _str = column.format.format == 'A'
1031|        _bool = column.format.format == 'L'
1032|
1033|        _number = not (_bool or _str)
1034|        bscale = column.bscale
1035|        bzero = column.bzero
1036|
1037|        _scale = bscale not in ('', None, 1)
1038|        _zero = bzero not in ('', None, 0)
1039|
1040|        # ensure bscale/bzero are numbers
1041|        if not _scale:
1042|            bscale = 1
1043|        if not _zero:
1044|            bzero = 0
1045|
1046|        # column._dims gives a tuple, rather than column.dim which returns the
1047|        # original string format code from the FITS header...
1048|        dim = column._dims
1049|
1050|        return (_str, _bool, _number, _scale, _zero, bscale, bzero, dim)
1051|
1052|    def _scale_back(self, update_heap_pointers=True):
1053|        """
1054|        Update the parent array, using the (latest) scaled array.
1055|
1056|        If ``update_heap_pointers`` is `False`, this will leave all the heap
1057|        pointers in P/Q columns as they are verbatim--it only makes sense to do
1058|        this if there is already data on the heap and it can be guaranteed that
1059|        that data has not been modified, and there is not new data to add to
1060|        the heap.  Currently this is only used as an optimization for
1061|        CompImageHDU that does its own handling of the heap.
1062|        """
1063|
1064|        # Running total for the new heap size
1065|        heapsize = 0
1066|
1067|        for indx, name in enumerate(self.dtype.names):
1068|            column = self._coldefs[indx]
1069|            recformat = column.format.recformat
1070|            raw_field = _get_recarray_field(self, indx)
1071|
1072|            # add the location offset of the heap area for each
1073|            # variable length column
1074|            if isinstance(recformat, _FormatP):
1075|                # Irritatingly, this can return a different dtype than just
1076|                # doing np.dtype(recformat.dtype); but this returns the results
1077|                # that we want.  For example if recformat.dtype is 'a' we want
1078|                # an array of characters.
1079|                dtype = np.array([], dtype=recformat.dtype).dtype
1080|
1081|                if update_heap_pointers and name in self._converted:
1082|                    # The VLA has potentially been updated, so we need to
1083|                    # update the array descriptors
1084|                    raw_field[:] = 0  # reset
1085|                    npts = [len(arr) for arr in self._converted[name]]
1086|
1087|                    raw_field[:len(npts), 0] = npts
1088|                    raw_field[1:, 1] = (np.add.accumulate(raw_field[:-1, 0]) *
1089|                                        dtype.itemsize)
1090|                    raw_field[:, 1][:] += heapsize
1091|
1092|                heapsize += raw_field[:, 0].sum() * dtype.itemsize
1093|                # Even if this VLA has not been read or updated, we need to
1094|                # include the size of its constituent arrays in the heap size
1095|                # total
1096|
1097|            if isinstance(recformat, _FormatX) and name in self._converted:
1098|                _wrapx(self._converted[name], raw_field, recformat.repeat)
1099|                continue
1100|
1101|            _str, _bool, _number, _scale, _zero, bscale, bzero, _ = \
1102|                self._get_scale_factors(column)
1103|
1104|            field = self._converted.get(name, raw_field)
1105|
1106|            # conversion for both ASCII and binary tables
1107|            if _number or _str:
1108|                if _number and (_scale or _zero) and column._physical_values:
1109|                    dummy = field.copy()
1110|                    if _zero:
1111|                        dummy -= bzero
1112|                    if _scale:
1113|                        dummy /= bscale
1114|                    # This will set the raw values in the recarray back to
1115|                    # their non-physical storage values, so the column should
1116|                    # be mark is not scaled
1117|                    column._physical_values = False
1118|                elif _str or isinstance(self._coldefs, _AsciiColDefs):
1119|                    dummy = field
1120|                else:
1121|                    continue
1122|
1123|                # ASCII table, convert numbers to strings
1124|                if isinstance(self._coldefs, _AsciiColDefs):
1125|                    self._scale_back_ascii(indx, dummy, raw_field)
1126|                # binary table string column
1127|                elif isinstance(raw_field, chararray.chararray):
1128|                    self._scale_back_strings(indx, dummy, raw_field)
1129|                # all other binary table columns
1130|                else:
1131|                    if len(raw_field) and isinstance(raw_field[0],
1132|                                                     np.integer):
1133|                        dummy = np.around(dummy)
1134|
1135|                    if raw_field.shape == dummy.shape:
1136|                        raw_field[:] = dummy
1137|                    else:
1138|                        # Reshaping the data is necessary in cases where the
1139|                        # TDIMn keyword was used to shape a column's entries
1140|                        # into arrays
1141|                        raw_field[:] = dummy.ravel().view(raw_field.dtype)
1142|
1143|                del dummy
1144|
1145|            # ASCII table does not have Boolean type
1146|            elif _bool and name in self._converted:
1147|                choices = (np.array([ord('F')], dtype=np.int8)[0],
1148|                           np.array([ord('T')], dtype=np.int8)[0])
1149|                raw_field[:] = np.choose(field, choices)
1150|
1151|        # Store the updated heapsize
1152|        self._heapsize = heapsize
1153|
1154|    def _scale_back_strings(self, col_idx, input_field, output_field):
1155|        # There are a few possibilities this has to be able to handle properly
1156|        # The input_field, which comes from the _converted column is of dtype
1157|        # 'Un' so that elements read out of the array are normal str
1158|        # objects (i.e. unicode strings)
1159|        #
1160|        # At the other end the *output_field* may also be of type 'S' or of
1161|        # type 'U'.  It will *usually* be of type 'S' because when reading
1162|        # an existing FITS table the raw data is just ASCII strings, and
1163|        # represented in Numpy as an S array.  However, when a user creates
1164|        # a new table from scratch, they *might* pass in a column containing
1165|        # unicode strings (dtype 'U').  Therefore the output_field of the
1166|        # raw array is actually a unicode array.  But we still want to make
1167|        # sure the data is encodable as ASCII.  Later when we write out the
1168|        # array we use, in the dtype 'U' case, a different write routine
1169|        # that writes row by row and encodes any 'U' columns to ASCII.
1170|
1171|        # If the output_field is non-ASCII we will worry about ASCII encoding
1172|        # later when writing; otherwise we can do it right here
1173|        if input_field.dtype.kind == 'U' and output_field.dtype.kind == 'S':
1174|            try:
1175|                _ascii_encode(input_field, out=output_field)
1176|            except _UnicodeArrayEncodeError as exc:
1177|                raise ValueError(
1178|                    "Could not save column '{0}': Contains characters that "
1179|                    "cannot be encoded as ASCII as required by FITS, starting "
1180|                    "at the index {1!r} of the column, and the index {2} of "
1181|                    "the string at that location.".format(
1182|                        self._coldefs[col_idx].name,
1183|                        exc.index[0] if len(exc.index) == 1 else exc.index,
1184|                        exc.start))
1185|        else:
1186|            # Otherwise go ahead and do a direct copy into--if both are type
1187|            # 'U' we'll handle encoding later
1188|            input_field = input_field.flatten().view(output_field.dtype)
1189|            output_field.flat[:] = input_field
1190|
1191|        # Ensure that blanks at the end of each string are
1192|        # converted to nulls instead of spaces, see Trac #15
1193|        # and #111
1194|        _rstrip_inplace(output_field)
1195|
1196|    def _scale_back_ascii(self, col_idx, input_field, output_field):
1197|        """
1198|        Convert internal array values back to ASCII table representation.
1199|
1200|        The ``input_field`` is the internal representation of the values, and
1201|        the ``output_field`` is the character array representing the ASCII
1202|        output that will be written.
1203|        """
1204|
1205|        starts = self._coldefs.starts[:]
1206|        spans = self._coldefs.spans
1207|        format = self._coldefs[col_idx].format
1208|
1209|        # The the index of the "end" column of the record, beyond
1210|        # which we can't write
1211|        end = super().field(-1).itemsize
1212|        starts.append(end + starts[-1])
1213|
1214|        if col_idx > 0:
1215|            lead = starts[col_idx] - starts[col_idx - 1] - spans[col_idx - 1]
1216|        else:
1217|            lead = 0
1218|
1219|        if lead < 0:
1220|            warnings.warn('Column {!r} starting point overlaps the previous '
1221|                          'column.'.format(col_idx + 1))
1222|
1223|        trail = starts[col_idx + 1] - starts[col_idx] - spans[col_idx]
1224|
1225|        if trail < 0:
1226|            warnings.warn('Column {!r} ending point overlaps the next '
1227|                          'column.'.format(col_idx + 1))
1228|
1229|        # TODO: It would be nice if these string column formatting
1230|        # details were left to a specialized class, as is the case
1231|        # with FormatX and FormatP
1232|        if 'A' in format:
1233|            _pc = '{:'
1234|        else:
1235|            _pc = '{:>'
1236|
1237|        fmt = ''.join([_pc, format[1:], ASCII2STR[format[0]], '}',
1238|                       (' ' * trail)])
1239|
1240|        # Even if the format precision is 0, we should output a decimal point
1241|        # as long as there is space to do so--not including a decimal point in
1242|        # a float value is discouraged by the FITS Standard
1243|        trailing_decimal = (format.precision == 0 and
1244|                            format.format in ('F', 'E', 'D'))
1245|
1246|        # not using numarray.strings's num2char because the
1247|        # result is not allowed to expand (as C/Python does).
1248|        for jdx, value in enumerate(input_field):
1249|            value = fmt.format(value)
1250|            if len(value) > starts[col_idx + 1] - starts[col_idx]:
1251|                raise ValueError(
1252|                    "Value {!r} does not fit into the output's itemsize of "
1253|                    "{}.".format(value, spans[col_idx]))
1254|
1255|            if trailing_decimal and value[0] == ' ':
1256|                # We have some extra space in the field for the trailing
1257|                # decimal point
1258|                value = value[1:] + '.'
1259|
1260|            output_field[jdx] = value
1261|
1262|        # Replace exponent separator in floating point numbers
1263|        if 'D' in format:
1264|            output_field.replace(encode_ascii('E'), encode_ascii('D'))
1265|
1266|
1267|def _get_recarray_field(array, key):
1268|    """
1269|    Compatibility function for using the recarray base class's field method.
1270|    This incorporates the legacy functionality of returning string arrays as
1271|    Numeric-style chararray objects.
1272|    """
1273|
1274|    # Numpy >= 1.10.dev recarray no longer returns chararrays for strings
...


### astropy/io/fits/util.py
...
251|    """
252|
253|    a, b = itertools.tee(iterable)
254|    for _ in b:
255|        # Just a little trick to advance b without having to catch
256|        # StopIter if b happens to be empty
257|        break
258|    return zip(a, b)
259|
260|
261|def encode_ascii(s):
262|    if isinstance(s, str):
263|        return s.encode('ascii')
264|    elif (isinstance(s, np.ndarray) and
265|          issubclass(s.dtype.type, np.str_)):
266|        ns = np.char.encode(s, 'ascii').view(type(s))
267|        if ns.dtype.itemsize != s.dtype.itemsize / 4:
268|            ns = ns.astype((np.bytes_, s.dtype.itemsize / 4))
269|        return ns
270|    elif (isinstance(s, np.ndarray) and
271|          not issubclass(s.dtype.type, np.bytes_)):
272|        raise TypeError('string operation on non-string array')
273|    return s
274|
275|
276|def decode_ascii(s):
277|    if isinstance(s, bytes):
278|        try:
279|            return s.decode('ascii')
280|        except UnicodeDecodeError:
281|            warnings.warn('non-ASCII characters are present in the FITS '
282|                          'file header and have been replaced by "?" '
283|                          'characters', AstropyUserWarning)
...




###

Please provide the class name, function or method name, or the exact line numbers that need to be edited.
### Examples:
```
full_path1/file1.py
line: 10
class: MyClass1
line: 51

full_path2/file2.py
function: MyClass2.my_method
line: 12

full_path3/file3.py
function: my_function
line: 24
line: 156
```

Return just the location(s)

2024-10-18 14:08:55,502 - INFO - ================================================================================
2024-10-18 14:08:55,568 - INFO - Creating API request
2024-10-18 14:08:57,059 - INFO - API response ChatCompletion(id='chatcmpl-AJoVLg4FV8WYBrAl63XM21mSR91jA', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```\nastropy/io/fits/fitsrec.py\nfunction: FITS_rec._scale_back_strings\nline: 1263\n```', refusal=None, role='assistant', function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=1, logprobs=None, message=ChatCompletionMessage(content='```\nastropy/io/fits/fitsrec.py\nfunction: FITS_rec._scale_back_strings\nline: 1264\n```', refusal=None, role='assistant', function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=2, logprobs=None, message=ChatCompletionMessage(content='```\nastropy/io/fits/fitsrec.py\nfunction: FITS_rec._scale_back_strings\nline: 1264\n\n```', refusal=None, role='assistant', function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=3, logprobs=None, message=ChatCompletionMessage(content='```\nastropy/io/fits/fitsrec.py\nline: 1264\n```', refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1729285735, model='gpt-4o-2024-05-13', object='chat.completion', service_tier=None, system_fingerprint='fp_568f3bfff7', usage=CompletionUsage(completion_tokens=106, prompt_tokens=13329, total_tokens=13435, completion_tokens_details=CompletionTokensDetails(audio_tokens=None, reasoning_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=None, cached_tokens=0)))
2024-10-18 14:08:57,059 - INFO - ==== raw output ====
2024-10-18 14:08:57,059 - INFO - ```
astropy/io/fits/fitsrec.py
function: FITS_rec._scale_back_strings
line: 1263
```
2024-10-18 14:08:57,059 - INFO - ================================================================================
2024-10-18 14:08:57,059 - INFO - ==== extracted locs ====
2024-10-18 14:08:57,059 - INFO - ['function: FITS_rec._scale_back_strings\nline: 1263']
2024-10-18 14:08:57,059 - INFO - ['']
2024-10-18 14:08:57,059 - INFO - ['']
2024-10-18 14:08:57,059 - INFO - ================================================================================
2024-10-18 14:08:57,059 - INFO - ==== raw output ====
2024-10-18 14:08:57,059 - INFO - ```
astropy/io/fits/fitsrec.py
function: FITS_rec._scale_back_strings
line: 1264
```
2024-10-18 14:08:57,059 - INFO - ================================================================================
2024-10-18 14:08:57,059 - INFO - ==== extracted locs ====
2024-10-18 14:08:57,059 - INFO - ['function: FITS_rec._scale_back_strings\nline: 1264']
2024-10-18 14:08:57,059 - INFO - ['']
2024-10-18 14:08:57,059 - INFO - ['']
2024-10-18 14:08:57,059 - INFO - ================================================================================
2024-10-18 14:08:57,059 - INFO - ==== raw output ====
2024-10-18 14:08:57,059 - INFO - ```
astropy/io/fits/fitsrec.py
function: FITS_rec._scale_back_strings
line: 1264

```
2024-10-18 14:08:57,059 - INFO - ================================================================================
2024-10-18 14:08:57,059 - INFO - ==== extracted locs ====
2024-10-18 14:08:57,059 - INFO - ['function: FITS_rec._scale_back_strings\nline: 1264']
2024-10-18 14:08:57,059 - INFO - ['']
2024-10-18 14:08:57,059 - INFO - ['']
2024-10-18 14:08:57,060 - INFO - ================================================================================
2024-10-18 14:08:57,060 - INFO - ==== raw output ====
2024-10-18 14:08:57,060 - INFO - ```
astropy/io/fits/fitsrec.py
line: 1264
```
2024-10-18 14:08:57,060 - INFO - ================================================================================
2024-10-18 14:08:57,060 - INFO - ==== extracted locs ====
2024-10-18 14:08:57,060 - INFO - ['line: 1264']
2024-10-18 14:08:57,060 - INFO - ['']
2024-10-18 14:08:57,060 - INFO - ['']
2024-10-18 14:08:57,060 - INFO - ================================================================================
2024-10-18 14:08:57,060 - INFO - ==== Input coarse_locs
2024-10-18 14:08:57,060 - INFO - 
### astropy/io/fits/fitsrec.py
class: FITS_rec
function: FITS_rec._scale_back_ascii
### astropy/io/fits/scripts/fitsdiff.py

### astropy/io/fits/util.py
function: encode_ascii

