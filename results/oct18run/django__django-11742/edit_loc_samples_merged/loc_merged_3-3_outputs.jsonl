{"instance_id": "django__django-11742", "found_files": ["django/db/models/fields/__init__.py", "django/db/models/fields/mixins.py", "django/db/models/fields/related.py", "django/db/models/fields/reverse_related.py"], "additional_artifact_loc_file": {"raw_output_files": "```\ndjango/db/models/fields/__init__.py\ndjango/db/models/fields/mixins.py\ndjango/db/models/fields/utils.py\ndjango/db/models/fields/related.py\ndjango/db/models/fields/reverse_related.py\n```"}, "file_traj": {"response": "```\ndjango/db/models/fields/__init__.py\ndjango/db/models/fields/mixins.py\ndjango/db/models/fields/utils.py\ndjango/db/models/fields/related.py\ndjango/db/models/fields/reverse_related.py\n```", "usage": {"completion_tokens": 50, "prompt_tokens": 4747}, "prompt": "Please look through the following GitHub problem description, and Repository structure and provide a list of files that one would need to edit to fix the problem.\n\n### GitHub Problem Description ###\nAdd check to ensure max_length fits longest choice.\nDescription\n\t\nThere is currently no check to ensure that Field.max_length is large enough to fit the longest value in Field.choices.\nThis would be very helpful as often this mistake is not noticed until an attempt is made to save a record with those values that are too long.\n\n\n###\n\n\n\n### Repository Structure ###\ndjango/\n    setup.py\n    shortcuts.py\n    __init__.py\n    __main__.py\n    apps/\n        config.py\n        registry.py\n        __init__.py\n    template/\n        response.py\n        defaultfilters.py\n        base.py\n        exceptions.py\n        defaulttags.py\n        engine.py\n        utils.py\n        context_processors.py\n        context.py\n        smartif.py\n        loader_tags.py\n        loader.py\n        __init__.py\n        library.py\n        loaders/\n            base.py\n            cached.py\n            filesystem.py\n            locmem.py\n            app_directories.py\n            __init__.py\n        backends/\n            django.py\n            base.py\n            dummy.py\n            utils.py\n            __init__.py\n            jinja2.py\n    contrib/\n        __init__.py\n        auth/\n            urls.py\n            hashers.py\n            models.py\n            views.py\n            admin.py\n            backends.py\n            base_user.py\n            middleware.py\n            password_validation.py\n            checks.py\n            apps.py\n            decorators.py\n            forms.py\n            mixins.py\n            signals.py\n            validators.py\n            tokens.py\n            context_processors.py\n            __init__.py\n            handlers/\n                modwsgi.py\n                __init__.py\n            migrations/\n                0002_alter_permission_name_max_length.py\n                0005_alter_user_last_login_null.py\n                0008_alter_user_username_max_length.py\n                0010_alter_group_name_max_length.py\n                0006_require_contenttypes_0002.py\n                0007_alter_validators_add_error_messages.py\n                0001_initial.py\n                0004_alter_user_username_opts.py\n                0009_alter_user_last_name_max_length.py\n                0003_alter_user_email_max_length.py\n                __init__.py\n                0011_update_proxy_permissions.py\n            management/\n                __init__.py\n                commands/\n                    changepassword.py\n                    createsuperuser.py\n        sites/\n            requests.py\n            shortcuts.py\n            models.py\n            admin.py\n            middleware.py\n            managers.py\n            apps.py\n            management.py\n            __init__.py\n            migrations/\n                0002_alter_domain_unique.py\n                0001_initial.py\n                __init__.py\n        postgres/\n            apps.py\n            serializers.py\n            signals.py\n            validators.py\n            operations.py\n            search.py\n            utils.py\n            lookups.py\n            indexes.py\n            constraints.py\n            __init__.py\n            functions.py\n            aggregates/\n                statistics.py\n                general.py\n                mixins.py\n                __init__.py\n            fields/\n                citext.py\n                ranges.py\n                hstore.py\n                mixins.py\n                array.py\n                utils.py\n                jsonb.py\n                __init__.py\n            forms/\n                ranges.py\n                hstore.py\n                array.py\n                jsonb.py\n                __init__.py\n        admin/\n            sites.py\n            models.py\n            options.py\n            actions.py\n            exceptions.py\n            checks.py\n            filters.py\n            apps.py\n            decorators.py\n            helpers.py\n            forms.py\n            utils.py\n            widgets.py\n            __init__.py\n            bin/\n                compress.py\n            views/\n                autocomplete.py\n                decorators.py\n                main.py\n                __init__.py\n            templatetags/\n                base.py\n                admin_urls.py\n                admin_modify.py\n                log.py\n                admin_list.py\n                __init__.py\n            migrations/\n                0002_logentry_remove_auto_add.py\n                0003_logentry_add_action_flag_choices.py\n                0001_initial.py\n                __init__.py\n        staticfiles/\n            urls.py\n            views.py\n            storage.py\n            checks.py\n            apps.py\n            finders.py\n            handlers.py\n            utils.py\n            __init__.py\n            management/\n                commands/\n                    runserver.py\n                    collectstatic.py\n                    findstatic.py\n        gis/\n            shortcuts.py\n            views.py\n            ptr.py\n            geometry.py\n            apps.py\n            feeds.py\n            measure.py\n            __init__.py\n            gdal/\n                base.py\n                error.py\n                feature.py\n                geometries.py\n                libgdal.py\n                layer.py\n                srs.py\n                driver.py\n                envelope.py\n                field.py\n                geomtype.py\n                __init__.py\n                datasource.py\n                prototypes/\n                    errcheck.py\n                    srs.py\n                    ds.py\n                    generation.py\n                    geom.py\n                    raster.py\n                    __init__.py\n                raster/\n                    source.py\n                    base.py\n                    band.py\n                    const.py\n                    __init__.py\n            serializers/\n                __init__.py\n                geojson.py\n            admin/\n                options.py\n                widgets.py\n                __init__.py\n            geos/\n                prepared.py\n                base.py\n                error.py\n                geometry.py\n                point.py\n                factory.py\n                io.py\n                coordseq.py\n                mutable_list.py\n                linestring.py\n                libgeos.py\n                polygon.py\n                collections.py\n                __init__.py\n                prototypes/\n                    topology.py\n                    prepared.py\n                    misc.py\n                    errcheck.py\n                    io.py\n                    coordseq.py\n                    threadsafe.py\n                    geom.py\n                    predicates.py\n                    __init__.py\n            geoip2/\n                base.py\n                resources.py\n                __init__.py\n            db/\n                __init__.py\n                models/\n                    aggregates.py\n                    proxy.py\n                    lookups.py\n                    __init__.py\n                    functions.py\n                    fields.py\n                    sql/\n                        conversion.py\n                        __init__.py\n                backends/\n                    utils.py\n                    __init__.py\n                    oracle/\n                        models.py\n                        schema.py\n                        base.py\n                        adapter.py\n                        operations.py\n                        introspection.py\n                        __init__.py\n                        features.py\n                    postgis/\n                        models.py\n                        schema.py\n                        base.py\n                        adapter.py\n                        const.py\n                        operations.py\n                        introspection.py\n                        pgraster.py\n                        __init__.py\n                        features.py\n                    base/\n                        models.py\n                        adapter.py\n                        operations.py\n                        __init__.py\n                        features.py\n                    mysql/\n                        schema.py\n                        base.py\n                        operations.py\n                        introspection.py\n                        __init__.py\n                        features.py\n                    spatialite/\n                        models.py\n                        schema.py\n                        base.py\n                        adapter.py\n                        client.py\n                        operations.py\n                        introspection.py\n                        __init__.py\n                        features.py\n            utils/\n                ogrinfo.py\n                layermapping.py\n                ogrinspect.py\n                srs.py\n                __init__.py\n            forms/\n                widgets.py\n                __init__.py\n                fields.py\n            management/\n                commands/\n                    inspectdb.py\n                    ogrinspect.py\n            sitemaps/\n                views.py\n                kml.py\n                __init__.py\n        syndication/\n            views.py\n            apps.py\n            __init__.py\n        messages/\n            views.py\n            api.py\n            constants.py\n            middleware.py\n            apps.py\n            utils.py\n            context_processors.py\n            __init__.py\n            storage/\n                base.py\n                session.py\n                cookie.py\n                fallback.py\n                __init__.py\n        sessions/\n            models.py\n            exceptions.py\n            middleware.py\n            apps.py\n            serializers.py\n            base_session.py\n            __init__.py\n            migrations/\n                0001_initial.py\n                __init__.py\n            backends/\n                file.py\n                base.py\n                signed_cookies.py\n                cached_db.py\n                db.py\n                cache.py\n                __init__.py\n            management/\n                commands/\n                    clearsessions.py\n        contenttypes/\n            models.py\n            views.py\n            admin.py\n            checks.py\n            apps.py\n            forms.py\n            __init__.py\n            fields.py\n            migrations/\n                0001_initial.py\n                0002_remove_content_type_name.py\n                __init__.py\n            management/\n                __init__.py\n                commands/\n                    remove_stale_contenttypes.py\n        admindocs/\n            urls.py\n            views.py\n            middleware.py\n            apps.py\n            utils.py\n            __init__.py\n        humanize/\n            apps.py\n            __init__.py\n            templatetags/\n                humanize.py\n                __init__.py\n        flatpages/\n            urls.py\n            sitemaps.py\n            models.py\n            views.py\n            admin.py\n            middleware.py\n            apps.py\n            forms.py\n            __init__.py\n            templatetags/\n                flatpages.py\n                __init__.py\n            migrations/\n                0001_initial.py\n                __init__.py\n        redirects/\n            models.py\n            admin.py\n            middleware.py\n            apps.py\n            __init__.py\n            migrations/\n                0001_initial.py\n                __init__.py\n        sitemaps/\n            views.py\n            apps.py\n            __init__.py\n            management/\n                commands/\n                    ping_google.py\n    core/\n        signing.py\n        exceptions.py\n        asgi.py\n        wsgi.py\n        signals.py\n        validators.py\n        paginator.py\n        __init__.py\n        handlers/\n            base.py\n            asgi.py\n            wsgi.py\n            exception.py\n            __init__.py\n        checks/\n            urls.py\n            database.py\n            translation.py\n            templates.py\n            messages.py\n            caches.py\n            registry.py\n            model_checks.py\n            __init__.py\n            compatibility/\n                __init__.py\n            security/\n                base.py\n                csrf.py\n                sessions.py\n                __init__.py\n        serializers/\n            python.py\n            base.py\n            xml_serializer.py\n            json.py\n            pyyaml.py\n            __init__.py\n        mail/\n            message.py\n            utils.py\n            __init__.py\n            backends/\n                base.py\n                smtp.py\n                locmem.py\n                console.py\n                dummy.py\n                filebased.py\n                __init__.py\n        cache/\n            utils.py\n            __init__.py\n            backends/\n                base.py\n                locmem.py\n                db.py\n                memcached.py\n                dummy.py\n                filebased.py\n                __init__.py\n        servers/\n            basehttp.py\n            __init__.py\n        files/\n            uploadhandler.py\n            move.py\n            base.py\n            images.py\n            storage.py\n            uploadedfile.py\n            temp.py\n            utils.py\n            locks.py\n            __init__.py\n        management/\n            color.py\n            base.py\n            templates.py\n            sql.py\n            utils.py\n            __init__.py\n            commands/\n                makemigrations.py\n                dbshell.py\n                makemessages.py\n                inspectdb.py\n                shell.py\n                sendtestemail.py\n                createcachetable.py\n                runserver.py\n                dumpdata.py\n                compilemessages.py\n                check.py\n                loaddata.py\n                diffsettings.py\n                squashmigrations.py\n                startproject.py\n                sqlflush.py\n                showmigrations.py\n                sqlmigrate.py\n                flush.py\n                sqlsequencereset.py\n                startapp.py\n                migrate.py\n    bin/\n        django-admin.py\n    http/\n        response.py\n        request.py\n        cookie.py\n        multipartparser.py\n        __init__.py\n    conf/\n        global_settings.py\n        __init__.py\n        urls/\n            i18n.py\n            static.py\n            __init__.py\n        locale/\n            __init__.py\n            sv/\n                formats.py\n                __init__.py\n            fr/\n                formats.py\n                __init__.py\n            uk/\n                formats.py\n                __init__.py\n            cy/\n                formats.py\n                __init__.py\n            pl/\n                formats.py\n                __init__.py\n            hr/\n                formats.py\n                __init__.py\n            en_GB/\n                formats.py\n                __init__.py\n            de_CH/\n                formats.py\n                __init__.py\n            zh_Hant/\n                formats.py\n                __init__.py\n            mn/\n                formats.py\n                __init__.py\n            fi/\n                formats.py\n                __init__.py\n            sr_Latn/\n                formats.py\n                __init__.py\n            de/\n                formats.py\n                __init__.py\n            he/\n                formats.py\n                __init__.py\n            nn/\n                formats.py\n                __init__.py\n            lv/\n                formats.py\n                __init__.py\n            es/\n                formats.py\n                __init__.py\n            kn/\n                formats.py\n                __init__.py\n            sq/\n                formats.py\n                __init__.py\n            fa/\n                formats.py\n                __init__.py\n            id/\n                formats.py\n                __init__.py\n            nb/\n                formats.py\n                __init__.py\n            es_NI/\n                formats.py\n                __init__.py\n            es_AR/\n                formats.py\n                __init__.py\n            fy/\n                formats.py\n                __init__.py\n            bg/\n                formats.py\n                __init__.py\n            gd/\n                formats.py\n                __init__.py\n            en/\n                formats.py\n                __init__.py\n            pt_BR/\n                formats.py\n                __init__.py\n            hi/\n                formats.py\n                __init__.py\n            ko/\n                formats.py\n                __init__.py\n            th/\n                formats.py\n                __init__.py\n            bs/\n                formats.py\n                __init__.py\n            sk/\n                formats.py\n                __init__.py\n            nl/\n                formats.py\n                __init__.py\n            eo/\n                formats.py\n                __init__.py\n            en_AU/\n                formats.py\n                __init__.py\n            bn/\n                formats.py\n                __init__.py\n            km/\n                formats.py\n                __init__.py\n            sl/\n                formats.py\n                __init__.py\n            ar/\n                formats.py\n                __init__.py\n            lt/\n                formats.py\n                __init__.py\n            ga/\n                formats.py\n                __init__.py\n            ka/\n                formats.py\n                __init__.py\n            ml/\n                formats.py\n                __init__.py\n            sr/\n                formats.py\n                __init__.py\n            cs/\n                formats.py\n                __init__.py\n            ru/\n                formats.py\n                __init__.py\n            ja/\n                formats.py\n                __init__.py\n            mk/\n                formats.py\n                __init__.py\n            ta/\n                formats.py\n                __init__.py\n            es_CO/\n                formats.py\n                __init__.py\n            ca/\n                formats.py\n                __init__.py\n            zh_Hans/\n                formats.py\n                __init__.py\n            da/\n                formats.py\n                __init__.py\n            gl/\n                formats.py\n                __init__.py\n            es_MX/\n                formats.py\n                __init__.py\n            it/\n                formats.py\n                __init__.py\n            pt/\n                formats.py\n                __init__.py\n            el/\n                formats.py\n                __init__.py\n            tr/\n                formats.py\n                __init__.py\n            vi/\n                formats.py\n                __init__.py\n            te/\n                formats.py\n                __init__.py\n            et/\n                formats.py\n                __init__.py\n            is/\n                formats.py\n                __init__.py\n            es_PR/\n                formats.py\n                __init__.py\n            eu/\n                formats.py\n                __init__.py\n            az/\n                formats.py\n                __init__.py\n            hu/\n                formats.py\n                __init__.py\n            ro/\n                formats.py\n                __init__.py\n    middleware/\n        common.py\n        locale.py\n        security.py\n        csrf.py\n        clickjacking.py\n        gzip.py\n        http.py\n        cache.py\n        __init__.py\n    views/\n        i18n.py\n        debug.py\n        csrf.py\n        static.py\n        defaults.py\n        __init__.py\n        generic/\n            dates.py\n            base.py\n            edit.py\n            detail.py\n            list.py\n            __init__.py\n        decorators/\n            debug.py\n            vary.py\n            csrf.py\n            clickjacking.py\n            gzip.py\n            http.py\n            cache.py\n            __init__.py\n    templatetags/\n        l10n.py\n        i18n.py\n        tz.py\n        static.py\n        cache.py\n        __init__.py\n    dispatch/\n        dispatcher.py\n        __init__.py\n    db/\n        transaction.py\n        utils.py\n        __init__.py\n        models/\n            base.py\n            constants.py\n            options.py\n            query.py\n            query_utils.py\n            enums.py\n            manager.py\n            deletion.py\n            aggregates.py\n            signals.py\n            utils.py\n            lookups.py\n            indexes.py\n            constraints.py\n            __init__.py\n            expressions.py\n            sql/\n                where.py\n                constants.py\n                query.py\n                compiler.py\n                subqueries.py\n                datastructures.py\n                __init__.py\n            functions/\n                datetime.py\n                mixins.py\n                comparison.py\n                math.py\n                window.py\n                __init__.py\n                text.py\n            fields/\n                reverse_related.py\n                related.py\n                mixins.py\n                related_lookups.py\n                proxy.py\n                files.py\n                __init__.py\n                related_descriptors.py\n        migrations/\n            state.py\n            serializer.py\n            graph.py\n            exceptions.py\n            executor.py\n            utils.py\n            writer.py\n            autodetector.py\n            recorder.py\n            loader.py\n            questioner.py\n            optimizer.py\n            __init__.py\n            migration.py\n            operations/\n                models.py\n                base.py\n                utils.py\n                special.py\n                __init__.py\n                fields.py\n        backends/\n            ddl_references.py\n            signals.py\n            utils.py\n            __init__.py\n            oracle/\n                validation.py\n                schema.py\n                base.py\n                creation.py\n                client.py\n                operations.py\n                utils.py\n                introspection.py\n                __init__.py\n                features.py\n                functions.py\n            sqlite3/\n                schema.py\n                base.py\n                creation.py\n                client.py\n                operations.py\n                introspection.py\n                __init__.py\n                features.py\n            postgresql/\n                schema.py\n                base.py\n                creation.py\n                client.py\n                operations.py\n                utils.py\n                introspection.py\n                __init__.py\n                features.py\n            base/\n                validation.py\n                schema.py\n                base.py\n                creation.py\n                client.py\n                operations.py\n                introspection.py\n                __init__.py\n                features.py\n            mysql/\n                validation.py\n                schema.py\n                base.py\n                creation.py\n                compiler.py\n                client.py\n                operations.py\n                introspection.py\n                __init__.py\n                features.py\n            dummy/\n                base.py\n                __init__.py\n                features.py\n    urls/\n        converters.py\n        conf.py\n        base.py\n        exceptions.py\n        utils.py\n        resolvers.py\n        __init__.py\n    utils/\n        dates.py\n        feedgenerator.py\n        autoreload.py\n        timezone.py\n        lorem_ipsum.py\n        safestring.py\n        topological_sort.py\n        crypto.py\n        datetime_safe.py\n        jslex.py\n        tree.py\n        itercompat.py\n        encoding.py\n        version.py\n        _os.py\n        html.py\n        numberformat.py\n        dateformat.py\n        formats.py\n        deprecation.py\n        decorators.py\n        inspect.py\n        log.py\n        baseconv.py\n        asyncio.py\n        timesince.py\n        deconstruct.py\n        xmlutils.py\n        module_loading.py\n        regex_helper.py\n        hashable.py\n        archive.py\n        termcolors.py\n        dateparse.py\n        http.py\n        functional.py\n        ipv6.py\n        datastructures.py\n        cache.py\n        __init__.py\n        text.py\n        duration.py\n        translation/\n            template.py\n            reloader.py\n            trans_null.py\n            trans_real.py\n            __init__.py\n    forms/\n        models.py\n        formsets.py\n        forms.py\n        utils.py\n        widgets.py\n        boundfield.py\n        renderers.py\n        __init__.py\n        fields.py\ndocs/\n    conf.py\n    _ext/\n        djangodocs.py\nscripts/\n    manage_translations.py\n\n###\n\nPlease only provide the full path and return at most 5 files.\nThe returned files should be separated by new lines ordered by most to least important and wrapped with ```\nFor example:\n```\nfile1.py\nfile2.py\n```"}, "found_related_locs": [["class: Field\nfunction: Field.__init__\nfunction: Field._check_choices\nfunction: Field.check\nclass: CharField\nfunction: CharField.__init__\nfunction: CharField.check\nfunction: CharField._check_max_length_attribute"], [""], [""]], "additional_artifact_loc_related": [{"raw_output_loc": "```\ndjango/db/models/fields/__init__.py\nclass: Field\nfunction: Field.__init__\nfunction: Field._check_choices\nfunction: Field.check\nclass: CharField\nfunction: CharField.__init__\nfunction: CharField.check\nfunction: CharField._check_max_length_attribute\n```"}], "related_loc_traj": {"response": "```\ndjango/db/models/fields/__init__.py\nclass: Field\nfunction: Field.__init__\nfunction: Field._check_choices\nfunction: Field.check\nclass: CharField\nfunction: CharField.__init__\nfunction: CharField.check\nfunction: CharField._check_max_length_attribute\n```", "usage": {"completion_tokens": 63, "prompt_tokens": 6528}, "prompt": "\nPlease look through the following GitHub Problem Description, and the Skeleton of Relevant Files.\nIdentify all locations that need inspection or editing to fix the problem, including directly related areas as well as any potentially related global variables, functions, and classes.\nFor each location you provide, either give the name of the class, the name of a method in a class, the name of a function, or the name of a global variable.\n\n### GitHub Problem Description ###\nAdd check to ensure max_length fits longest choice.\nDescription\n\t\nThere is currently no check to ensure that Field.max_length is large enough to fit the longest value in Field.choices.\nThis would be very helpful as often this mistake is not noticed until an attempt is made to save a record with those values that are too long.\n\n\n###\n\n\n\n### Skeleton of Relevant Files ###\n\n### File: django/db/models/fields/__init__.py ###\n```python\n\n__all__ = [\n    'AutoField', 'BLANK_CHOICE_DASH', 'BigAutoField', 'BigIntegerField',\n    'BinaryField', 'BooleanField', 'CharField', 'CommaSeparatedIntegerField',\n    'DateField', 'DateTimeField', 'DecimalField', 'DurationField',\n    'EmailField', 'Empty', 'Field', 'FieldDoesNotExist', 'FilePathField',\n    'FloatField', 'GenericIPAddressField', 'IPAddressField', 'IntegerField',\n    'NOT_PROVIDED', 'NullBooleanField', 'PositiveIntegerField',\n    'PositiveSmallIntegerField', 'SlugField', 'SmallAutoField',\n    'SmallIntegerField', 'TextField', 'TimeField', 'URLField', 'UUIDField',\n]\n\n\nclass Empty:\n    pass\n\n\nclass NOT_PROVIDED:\n    pass\n\n\n# The values to use for \"blank\" in SelectFields. Will be appended to the start\n# of most \"choices\" lists.\nBLANK_CHOICE_DASH = [(\"\", \"---------\")]\n\n\ndef _load_field(app_label, model_name, field_name):\n...\n\n# A guide to Field parameters:\n#\n#   * name:      The name of the field specified in the model.\n#   * attname:   The attribute to use on the model object. This is the same as\n#                \"name\", except in the case of ForeignKeys, where \"_id\" is\n#                appended.\n#   * db_column: The db_column specified in the model (or None).\n#   * column:    The database column for this field. This is the same as\n#                \"attname\", except if db_column is specified.\n#\n# Code that introspects values, or does other dynamic things, should use\n# attname. For example, this gets the primary key value of object \"obj\":\n#\n#     getattr(obj, opts.pk.attname)\n\ndef _empty(of_cls):\n...\n\ndef return_None():\n...\n\n@total_ordering\nclass Field(RegisterLookupMixin):\n\n    # Designates whether empty strings fundamentally are allowed at the\n    # database level.\n    empty_strings_allowed = True\n    empty_values = list(validators.EMPTY_VALUES)\n\n    # These track each time a Field instance is created. Used to retain order.\n    # The auto_creation_counter is used for fields that Django implicitly\n    # creates, creation_counter is used for all user-specified fields.\n    creation_counter = 0\n    auto_creation_counter = -1\n    default_validators = []  # Default set of validators\n    default_error_messages = {\n        'invalid_choice': _('Value %(value)r is not a valid choice.'),\n        'null': _('This field cannot be null.'),\n        'blank': _('This field cannot be blank.'),\n        'unique': _('%(model_name)s with this %(field_label)s '\n                    'already exists.'),\n        # Translators: The 'lookup_type' is one of 'date', 'year' or 'month'.\n        # Eg: \"Title must be unique for pub_date year\"\n        'unique_for_date': _(\"%(field_label)s must be unique for \"\n                             \"%(date_field_label)s %(lookup_type)s.\"),\n    }\n    system_check_deprecated_details = None\n    system_check_removed_details = None\n\n    # Field flags\n    hidden = False\n\n    many_to_many = None\n    many_to_one = None\n    one_to_many = None\n    one_to_one = None\n    related_model = None\n\n    descriptor_class = DeferredAttribute\n\n    # Generic field type description, usually overridden by subclasses\n    def _description(self):\n...\n    description = property(_description)\n\n    def __init__(self, verbose_name=None, name=None, primary_key=False,\n                 max_length=None, unique=False, blank=False, null=False,\n                 db_index=False, rel=None, default=NOT_PROVIDED, editable=True,\n                 serialize=True, unique_for_date=None, unique_for_month=None,\n                 unique_for_year=None, choices=None, help_text='', db_column=None,\n                 db_tablespace=None, auto_created=False, validators=(),\n                 error_messages=None):\n...\n    def __str__(self):\n...\n    def __repr__(self):\n...\n    def check(self, **kwargs):\n...\n    def _check_field_name(self):\n...\n    def _check_choices(self):\n...\n    def _check_db_index(self):\n...\n    def _check_null_allowed_for_primary_keys(self):\n...\n    def _check_backend_specific_checks(self, **kwargs):\n...\n    def _check_validators(self):\n...\n    def _check_deprecation_details(self):\n...\n    def get_col(self, alias, output_field=None):\n...\n    @cached_property\n    def cached_col(self):\n...\n    def select_format(self, compiler, sql, params):\n...\n    def deconstruct(self):\n...\n    def clone(self):\n...\n    def __eq__(self, other):\n...\n    def __lt__(self, other):\n...\n    def __hash__(self):\n...\n    def __deepcopy__(self, memodict):\n...\n    def __copy__(self):\n...\n    def __reduce__(self):\n...\n    def get_pk_value_on_save(self, instance):\n...\n    def to_python(self, value):\n...\n    @cached_property\n    def validators(self):\n...\n    def run_validators(self, value):\n...\n    def validate(self, value, model_instance):\n...\n    def clean(self, value, model_instance):\n...\n    def db_type_parameters(self, connection):\n...\n    def db_check(self, connection):\n...\n    def db_type(self, connection):\n...\n    def rel_db_type(self, connection):\n...\n    def cast_db_type(self, connection):\n...\n    def db_parameters(self, connection):\n...\n    def db_type_suffix(self, connection):\n...\n    def get_db_converters(self, connection):\n...\n    @property\n    def unique(self):\n...\n    @property\n    def db_tablespace(self):\n...\n    def set_attributes_from_name(self, name):\n...\n    def contribute_to_class(self, cls, name, private_only=False):\n...\n    def get_filter_kwargs_for_object(self, obj):\n...\n    def get_attname(self):\n...\n    def get_attname_column(self):\n...\n    def get_internal_type(self):\n...\n    def pre_save(self, model_instance, add):\n...\n    def get_prep_value(self, value):\n...\n    def get_db_prep_value(self, value, connection, prepared=False):\n...\n    def get_db_prep_save(self, value, connection):\n...\n    def has_default(self):\n...\n    def get_default(self):\n...\n    @cached_property\n    def _get_default(self):\n...\n    def get_choices(self, include_blank=True, blank_choice=BLANK_CHOICE_DASH, limit_choices_to=None, ordering=()):\n...\n    def value_to_string(self, obj):\n...\n    def _get_flatchoices(self):\n...\n    flatchoices = property(_get_flatchoices)\n\n    def save_form_data(self, instance, data):\n...\n    def formfield(self, form_class=None, choices_form_class=None, **kwargs):\n...\n    def value_from_object(self, obj):\n...\n\nclass BooleanField(Field):\n    empty_strings_allowed = False\n    default_error_messages = {\n        'invalid': _('\u201c%(value)s\u201d value must be either True or False.'),\n        'invalid_nullable': _('\u201c%(value)s\u201d value must be either True, False, or None.'),\n    }\n    description = _(\"Boolean (Either True or False)\")\n\n    def get_internal_type(self):\n...\n    def to_python(self, value):\n...\n    def get_prep_value(self, value):\n...\n    def formfield(self, **kwargs):\n...\n\nclass CharField(Field):\n    description = _(\"String (up to %(max_length)s)\")\n\n    def __init__(self, *args, **kwargs):\n...\n    def check(self, **kwargs):\n...\n    def _check_max_length_attribute(self, **kwargs):\n...\n    def cast_db_type(self, connection):\n...\n    def get_internal_type(self):\n...\n    def to_python(self, value):\n...\n    def get_prep_value(self, value):\n...\n    def formfield(self, **kwargs):\n...\n\nclass CommaSeparatedIntegerField(CharField):\n    default_validators = [validators.validate_comma_separated_integer_list]\n    description = _(\"Comma-separated integers\")\n    system_check_removed_details = {\n        'msg': (\n            'CommaSeparatedIntegerField is removed except for support in '\n            'historical migrations.'\n        ),\n        'hint': (\n            'Use CharField(validators=[validate_comma_separated_integer_list]) '\n            'instead.'\n        ),\n        'id': 'fields.E901',\n    }\n\n\nclass DateTimeCheckMixin:\n\n    def check(self, **kwargs):\n...\n    def _check_mutually_exclusive_options(self):\n...\n    def _check_fix_default_value(self):\n...\n\nclass DateField(DateTimeCheckMixin, Field):\n    empty_strings_allowed = False\n    default_error_messages = {\n        'invalid': _('\u201c%(value)s\u201d value has an invalid date format. It must be '\n                     'in YYYY-MM-DD format.'),\n        'invalid_date': _('\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) '\n                          'but it is an invalid date.'),\n    }\n    description = _(\"Date (without time)\")\n\n    def __init__(self, verbose_name=None, name=None, auto_now=False,\n                 auto_now_add=False, **kwargs):\n...\n    def _check_fix_default_value(self):\n...\n    def deconstruct(self):\n...\n    def get_internal_type(self):\n...\n    def to_python(self, value):\n...\n    def pre_save(self, model_instance, add):\n...\n    def contribute_to_class(self, cls, name, **kwargs):\n...\n    def get_prep_value(self, value):\n...\n    def get_db_prep_value(self, value, connection, prepared=False):\n...\n    def value_to_string(self, obj):\n...\n    def formfield(self, **kwargs):\n...\n\nclass DateTimeField(DateField):\n    empty_strings_allowed = False\n    default_error_messages = {\n        'invalid': _('\u201c%(value)s\u201d value has an invalid format. It must be in '\n                     'YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ] format.'),\n        'invalid_date': _(\"\u201c%(value)s\u201d value has the correct format \"\n                          \"(YYYY-MM-DD) but it is an invalid date.\"),\n        'invalid_datetime': _('\u201c%(value)s\u201d value has the correct format '\n                              '(YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ]) '\n                              'but it is an invalid date/time.'),\n    }\n    description = _(\"Date (with time)\")\n\n    # __init__ is inherited from DateField\n\n    def _check_fix_default_value(self):\n...\n    def get_internal_type(self):\n...\n    def to_python(self, value):\n...\n    def pre_save(self, model_instance, add):\n...\n    # contribute_to_class is inherited from DateField, it registers\n    # get_next_by_FOO and get_prev_by_FOO\n\n    def get_prep_value(self, value):\n...\n    def get_db_prep_value(self, value, connection, prepared=False):\n...\n    def value_to_string(self, obj):\n...\n    def formfield(self, **kwargs):\n...\n\nclass DecimalField(Field):\n    empty_strings_allowed = False\n    default_error_messages = {\n        'invalid': _('\u201c%(value)s\u201d value must be a decimal number.'),\n    }\n    description = _(\"Decimal number\")\n\n    def __init__(self, verbose_name=None, name=None, max_digits=None,\n                 decimal_places=None, **kwargs):\n...\n    def check(self, **kwargs):\n...\n    def _check_decimal_places(self):\n...\n    def _check_max_digits(self):\n...\n    def _check_decimal_places_and_max_digits(self, **kwargs):\n...\n    @cached_property\n    def validators(self):\n...\n    @cached_property\n    def context(self):\n...\n    def deconstruct(self):\n...\n    def get_internal_type(self):\n...\n    def to_python(self, value):\n...\n    def get_db_prep_save(self, value, connection):\n...\n    def get_prep_value(self, value):\n...\n    def formfield(self, **kwargs):\n...\n\nclass DurationField(Field):\n    empty_strings_allowed = False\n    default_error_messages = {\n        'invalid': _('\u201c%(value)s\u201d value has an invalid format. It must be in '\n                     '[DD] [[HH:]MM:]ss[.uuuuuu] format.')\n    }\n    description = _(\"Duration\")\n\n    def get_internal_type(self):\n...\n    def to_python(self, value):\n...\n    def get_db_prep_value(self, value, connection, prepared=False):\n...\n    def get_db_converters(self, connection):\n...\n    def value_to_string(self, obj):\n...\n    def formfield(self, **kwargs):\n...\n\nclass EmailField(CharField):\n    default_validators = [validators.validate_email]\n    description = _(\"Email address\")\n\n    def __init__(self, *args, **kwargs):\n...\n    def deconstruct(self):\n...\n    def formfield(self, **kwargs):\n...\n\nclass FilePathField(Field):\n    description = _(\"File path\")\n\n    def __init__(self, verbose_name=None, name=None, path='', match=None,\n                 recursive=False, allow_files=True, allow_folders=False, **kwargs):\n...\n    def check(self, **kwargs):\n...\n    def _check_allowing_files_or_folders(self, **kwargs):\n...\n    def deconstruct(self):\n...\n    def get_prep_value(self, value):\n...\n    def formfield(self, **kwargs):\n...\n    def get_internal_type(self):\n...\n\nclass FloatField(Field):\n    empty_strings_allowed = False\n    default_error_messages = {\n        'invalid': _('\u201c%(value)s\u201d value must be a float.'),\n    }\n    description = _(\"Floating point number\")\n\n    def get_prep_value(self, value):\n...\n    def get_internal_type(self):\n...\n    def to_python(self, value):\n...\n    def formfield(self, **kwargs):\n...\n\nclass IntegerField(Field):\n    empty_strings_allowed = False\n    default_error_messages = {\n        'invalid': _('\u201c%(value)s\u201d value must be an integer.'),\n    }\n    description = _(\"Integer\")\n\n    def check(self, **kwargs):\n...\n    def _check_max_length_warning(self):\n...\n    @cached_property\n    def validators(self):\n...\n    def get_prep_value(self, value):\n...\n    def get_internal_type(self):\n...\n    def to_python(self, value):\n...\n    def formfield(self, **kwargs):\n...\n\nclass BigIntegerField(IntegerField):\n    description = _(\"Big (8 byte) integer\")\n    MAX_BIGINT = 9223372036854775807\n\n    def get_internal_type(self):\n...\n    def formfield(self, **kwargs):\n...\n\nclass IPAddressField(Field):\n    empty_strings_allowed = False\n    description = _(\"IPv4 address\")\n    system_check_removed_details = {\n        'msg': (\n            'IPAddressField has been removed except for support in '\n            'historical migrations.'\n        ),\n        'hint': 'Use GenericIPAddressField instead.',\n        'id': 'fields.E900',\n    }\n\n    def __init__(self, *args, **kwargs):\n...\n    def deconstruct(self):\n...\n    def get_prep_value(self, value):\n...\n    def get_internal_type(self):\n...\n\nclass GenericIPAddressField(Field):\n    empty_strings_allowed = False\n    description = _(\"IP address\")\n    default_error_messages = {}\n\n    def __init__(self, verbose_name=None, name=None, protocol='both',\n                 unpack_ipv4=False, *args, **kwargs):\n...\n    def check(self, **kwargs):\n...\n    def _check_blank_and_null_values(self, **kwargs):\n...\n    def deconstruct(self):\n...\n    def get_internal_type(self):\n...\n    def to_python(self, value):\n...\n    def get_db_prep_value(self, value, connection, prepared=False):\n...\n    def get_prep_value(self, value):\n...\n    def formfield(self, **kwargs):\n...\n\nclass NullBooleanField(BooleanField):\n    default_error_messages = {\n        'invalid': _('\u201c%(value)s\u201d value must be either None, True or False.'),\n        'invalid_nullable': _('\u201c%(value)s\u201d value must be either None, True or False.'),\n    }\n    description = _(\"Boolean (Either True, False or None)\")\n\n    def __init__(self, *args, **kwargs):\n...\n    def deconstruct(self):\n...\n    def get_internal_type(self):\n...\n\nclass PositiveIntegerRelDbTypeMixin:\n\n    def rel_db_type(self, connection):\n...\n\nclass PositiveIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField):\n    description = _(\"Positive integer\")\n\n    def get_internal_type(self):\n...\n    def formfield(self, **kwargs):\n...\n\nclass PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField):\n    description = _(\"Positive small integer\")\n\n    def get_internal_type(self):\n...\n    def formfield(self, **kwargs):\n...\n\nclass SlugField(CharField):\n    default_validators = [validators.validate_slug]\n    description = _(\"Slug (up to %(max_length)s)\")\n\n    def __init__(self, *args, max_length=50, db_index=True, allow_unicode=False, **kwargs):\n...\n    def deconstruct(self):\n...\n    def get_internal_type(self):\n...\n    def formfield(self, **kwargs):\n...\n\nclass SmallIntegerField(IntegerField):\n    description = _(\"Small integer\")\n\n    def get_internal_type(self):\n...\n\nclass TextField(Field):\n    description = _(\"Text\")\n\n    def get_internal_type(self):\n...\n    def to_python(self, value):\n...\n    def get_prep_value(self, value):\n...\n    def formfield(self, **kwargs):\n...\n\nclass TimeField(DateTimeCheckMixin, Field):\n    empty_strings_allowed = False\n    default_error_messages = {\n        'invalid': _('\u201c%(value)s\u201d value has an invalid format. It must be in '\n                     'HH:MM[:ss[.uuuuuu]] format.'),\n        'invalid_time': _('\u201c%(value)s\u201d value has the correct format '\n                          '(HH:MM[:ss[.uuuuuu]]) but it is an invalid time.'),\n    }\n    description = _(\"Time\")\n\n    def __init__(self, verbose_name=None, name=None, auto_now=False,\n                 auto_now_add=False, **kwargs):\n...\n    def _check_fix_default_value(self):\n...\n    def deconstruct(self):\n...\n    def get_internal_type(self):\n...\n    def to_python(self, value):\n...\n    def pre_save(self, model_instance, add):\n...\n    def get_prep_value(self, value):\n...\n    def get_db_prep_value(self, value, connection, prepared=False):\n...\n    def value_to_string(self, obj):\n...\n    def formfield(self, **kwargs):\n...\n\nclass URLField(CharField):\n    default_validators = [validators.URLValidator()]\n    description = _(\"URL\")\n\n    def __init__(self, verbose_name=None, name=None, **kwargs):\n...\n    def deconstruct(self):\n...\n    def formfield(self, **kwargs):\n...\n\nclass BinaryField(Field):\n    description = _(\"Raw binary data\")\n    empty_values = [None, b'']\n\n    def __init__(self, *args, **kwargs):\n...\n    def check(self, **kwargs):\n...\n    def _check_str_default_value(self):\n...\n    def deconstruct(self):\n...\n    def get_internal_type(self):\n...\n    def get_placeholder(self, value, compiler, connection):\n...\n    def get_default(self):\n...\n    def get_db_prep_value(self, value, connection, prepared=False):\n...\n    def value_to_string(self, obj):\n...\n    def to_python(self, value):\n...\n\nclass UUIDField(Field):\n    default_error_messages = {\n        'invalid': _('\u201c%(value)s\u201d is not a valid UUID.'),\n    }\n    description = _('Universally unique identifier')\n    empty_strings_allowed = False\n\n    def __init__(self, verbose_name=None, **kwargs):\n...\n    def deconstruct(self):\n...\n    def get_internal_type(self):\n...\n    def get_prep_value(self, value):\n...\n    def get_db_prep_value(self, value, connection, prepared=False):\n...\n    def to_python(self, value):\n...\n    def formfield(self, **kwargs):\n...\n\nclass AutoFieldMixin:\n\n    def __init__(self, *args, **kwargs):\n...\n    def check(self, **kwargs):\n...\n    def _check_primary_key(self):\n...\n    def deconstruct(self):\n...\n    def validate(self, value, model_instance):\n...\n    def get_db_prep_value(self, value, connection, prepared=False):\n...\n    def contribute_to_class(self, cls, name, **kwargs):\n...\n    def formfield(self, **kwargs):\n...\n\nclass AutoFieldMeta(type):\n\n    @property\n    def _subclasses(self):\n...\n    def __instancecheck__(self, instance):\n...\n    def __subclasscheck__(self, subclass):\n...\n\nclass AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):\n\n    def get_internal_type(self):\n...\n    def rel_db_type(self, connection):\n...\n\nclass BigAutoField(AutoFieldMixin, BigIntegerField):\n\n    def get_internal_type(self):\n...\n    def rel_db_type(self, connection):\n...\n\nclass SmallAutoField(AutoFieldMixin, SmallIntegerField):\n\n    def get_internal_type(self):\n...\n    def rel_db_type(self, connection):\n\n```\n\n### File: django/db/models/fields/mixins.py ###\n```python\nNOT_PROVIDED = object()\n\n\nclass FieldCacheMixin:\n\n    def get_cache_name(self):\n...\n    def get_cached_value(self, instance, default=NOT_PROVIDED):\n...\n    def is_cached(self, instance):\n...\n    def set_cached_value(self, instance, value):\n...\n    def delete_cached_value(self, instance):\n\n```\n\n### File: django/db/models/fields/related.py ###\n```python\n\nRECURSIVE_RELATIONSHIP_CONSTANT = 'self'\n\n\ndef resolve_relation(scope_model, relation):\n...\n\ndef lazy_related_operation(function, model, *related_models, **kwargs):\n...\n\nclass RelatedField(FieldCacheMixin, Field):\n\n    # Field flags\n    one_to_many = False\n    one_to_one = False\n    many_to_many = False\n    many_to_one = False\n\n    @cached_property\n    def related_model(self):\n...\n    def check(self, **kwargs):\n...\n    def _check_related_name_is_valid(self):\n...\n    def _check_related_query_name_is_valid(self):\n...\n    def _check_relation_model_exists(self):\n...\n    def _check_referencing_to_swapped_model(self):\n...\n    def _check_clashes(self):\n...\n    def db_type(self, connection):\n...\n    def contribute_to_class(self, cls, name, private_only=False, **kwargs):\n...\n    def deconstruct(self):\n...\n    def get_forward_related_filter(self, obj):\n...\n    def get_reverse_related_filter(self, obj):\n...\n    @property\n    def swappable_setting(self):\n...\n    def set_attributes_from_rel(self):\n...\n    def do_related_class(self, other, cls):\n...\n    def get_limit_choices_to(self):\n...\n    def formfield(self, **kwargs):\n...\n    def related_query_name(self):\n...\n    @property\n    def target_field(self):\n...\n    def get_cache_name(self):\n...\n\nclass ForeignObject(RelatedField):\n\n    # Field flags\n    many_to_many = False\n    many_to_one = True\n    one_to_many = False\n    one_to_one = False\n\n    requires_unique_target = True\n    related_accessor_class = ReverseManyToOneDescriptor\n    forward_related_accessor_class = ForwardManyToOneDescriptor\n    rel_class = ForeignObjectRel\n\n    def __init__(self, to, on_delete, from_fields, to_fields, rel=None, related_name=None,\n                 related_query_name=None, limit_choices_to=None, parent_link=False,\n                 swappable=True, **kwargs):\n...\n    def check(self, **kwargs):\n...\n    def _check_to_fields_exist(self):\n...\n    def _check_unique_target(self):\n...\n    def deconstruct(self):\n...\n    def resolve_related_fields(self):\n...\n    @property\n    def related_fields(self):\n...\n    @property\n    def reverse_related_fields(self):\n...\n    @property\n    def local_related_fields(self):\n...\n    @property\n    def foreign_related_fields(self):\n...\n    def get_local_related_value(self, instance):\n...\n    def get_foreign_related_value(self, instance):\n...\n    @staticmethod\n    def get_instance_value_for_fields(instance, fields):\n...\n    def get_attname_column(self):\n...\n    def get_joining_columns(self, reverse_join=False):\n...\n    def get_reverse_joining_columns(self):\n...\n    def get_extra_descriptor_filter(self, instance):\n...\n    def get_extra_restriction(self, where_class, alias, related_alias):\n...\n    def get_path_info(self, filtered_relation=None):\n...\n    def get_reverse_path_info(self, filtered_relation=None):\n...\n    @classmethod\n    @functools.lru_cache(maxsize=None)\n    def get_lookups(cls):\n...\n    def contribute_to_class(self, cls, name, private_only=False, **kwargs):\n...\n    def contribute_to_related_class(self, cls, related):\n...\n\nclass ForeignKey(ForeignObject):\n    descriptor_class = ForeignKeyDeferredAttribute\n    # Field flags\n    many_to_many = False\n    many_to_one = True\n    one_to_many = False\n    one_to_one = False\n\n    rel_class = ManyToOneRel\n\n    empty_strings_allowed = False\n    default_error_messages = {\n        'invalid': _('%(model)s instance with %(field)s %(value)r does not exist.')\n    }\n    description = _(\"Foreign Key (type determined by related field)\")\n\n    def __init__(self, to, on_delete, related_name=None, related_query_name=None,\n                 limit_choices_to=None, parent_link=False, to_field=None,\n                 db_constraint=True, **kwargs):\n...\n    def check(self, **kwargs):\n...\n    def _check_on_delete(self):\n...\n    def _check_unique(self, **kwargs):\n...\n    def deconstruct(self):\n...\n    def to_python(self, value):\n...\n    @property\n    def target_field(self):\n...\n    def get_reverse_path_info(self, filtered_relation=None):\n...\n    def validate(self, value, model_instance):\n...\n    def get_attname(self):\n...\n    def get_attname_column(self):\n...\n    def get_default(self):\n...\n    def get_db_prep_save(self, value, connection):\n...\n    def get_db_prep_value(self, value, connection, prepared=False):\n...\n    def get_prep_value(self, value):\n...\n    def contribute_to_related_class(self, cls, related):\n...\n    def formfield(self, *, using=None, **kwargs):\n...\n    def db_check(self, connection):\n...\n    def db_type(self, connection):\n...\n    def db_parameters(self, connection):\n...\n    def convert_empty_strings(self, value, expression, connection):\n...\n    def get_db_converters(self, connection):\n...\n    def get_col(self, alias, output_field=None):\n...\n\nclass OneToOneField(ForeignKey):\n\n    # Field flags\n    many_to_many = False\n    many_to_one = False\n    one_to_many = False\n    one_to_one = True\n\n    related_accessor_class = ReverseOneToOneDescriptor\n    forward_related_accessor_class = ForwardOneToOneDescriptor\n    rel_class = OneToOneRel\n\n    description = _(\"One-to-one relationship\")\n\n    def __init__(self, to, on_delete, to_field=None, **kwargs):\n...\n    def deconstruct(self):\n...\n    def formfield(self, **kwargs):\n...\n    def save_form_data(self, instance, data):\n...\n    def _check_unique(self, **kwargs):\n...\n\ndef create_many_to_many_intermediary_model(field, klass):\n...\n\nclass ManyToManyField(RelatedField):\n\n    # Field flags\n    many_to_many = True\n    many_to_one = False\n    one_to_many = False\n    one_to_one = False\n\n    rel_class = ManyToManyRel\n\n    description = _(\"Many-to-many relationship\")\n\n    def __init__(self, to, related_name=None, related_query_name=None,\n                 limit_choices_to=None, symmetrical=None, through=None,\n                 through_fields=None, db_constraint=True, db_table=None,\n                 swappable=True, **kwargs):\n...\n    def check(self, **kwargs):\n...\n    def _check_unique(self, **kwargs):\n...\n    def _check_ignored_options(self, **kwargs):\n...\n    def _check_relationship_model(self, from_model=None, **kwargs):\n...\n    def _check_table_uniqueness(self, **kwargs):\n...\n    def deconstruct(self):\n...\n    def _get_path_info(self, direct=False, filtered_relation=None):\n...\n    def get_path_info(self, filtered_relation=None):\n...\n    def get_reverse_path_info(self, filtered_relation=None):\n...\n    def _get_m2m_db_table(self, opts):\n...\n    def _get_m2m_attr(self, related, attr):\n...\n    def _get_m2m_reverse_attr(self, related, attr):\n...\n    def contribute_to_class(self, cls, name, **kwargs):\n...\n    def contribute_to_related_class(self, cls, related):\n...\n    def set_attributes_from_rel(self):\n...\n    def value_from_object(self, obj):\n...\n    def save_form_data(self, instance, data):\n...\n    def formfield(self, *, using=None, **kwargs):\n...\n    def db_check(self, connection):\n...\n    def db_type(self, connection):\n...\n    def db_parameters(self, connection):\n\n```\n\n\n###\n\nPlease provide the complete set of locations as either a class name, a function name, or a variable name.\nNote that if you include a class, you do not need to list its specific methods.\nYou can include either the entire class or don't include the class name and instead include specific methods in the class.\n### Examples:\n```\nfull_path1/file1.py\nfunction: my_function_1\nclass: MyClass1\nfunction: MyClass2.my_method\n\nfull_path2/file2.py\nvariable: my_var\nfunction: MyClass3.my_method\n\nfull_path3/file3.py\nfunction: my_function_2\nfunction: my_function_3\nfunction: MyClass4.my_method_1\nclass: MyClass5\n```\n\nReturn just the locations.\n"}, "found_edit_locs": ["function: Field._check_choices\nline: 244\nline: 245\nfunction: CharField._check_max_length_attribute\nline: 960", "", ""], "additional_artifact_loc_edit_location": [{"raw_output_loc": ["```\ndjango/db/models/fields/__init__.py\nfunction: Field._check_choices\nline: 244\nline: 283\n\ndjango/db/models/fields/__init__.py\nfunction: Field.__init__\nline: 158\n```", "```\ndjango/db/models/fields/__init__.py\nfunction: Field._check_choices\nline: 244\n\ndjango/db/models/fields/__init__.py\nfunction: CharField._check_max_length_attribute\nline: 960\n```", "```\ndjango/db/models/fields/__init__.py\nfunction: Field._check_choices\nline: 244\nline: 283\n\ndjango/db/models/fields/__init__.py\nfunction: CharField.check\nline: 954\n```", "```\ndjango/db/models/fields/__init__.py\nfunction: Field._check_choices\nline: 244\nline: 245\n\ndjango/db/models/fields/__init__.py\nfunction: CharField._check_max_length_attribute\nline: 960\n```"]}], "edit_loc_traj": {"prompt": "\nPlease review the following GitHub problem description, and relevant files, and provide a set of locations that need to be edited to fix the issue.\nThe locations can be specified as class names, function or method names, or exact line numbers that require modification.\n\n### GitHub Problem Description ###\nAdd check to ensure max_length fits longest choice.\nDescription\n\t\nThere is currently no check to ensure that Field.max_length is large enough to fit the longest value in Field.choices.\nThis would be very helpful as often this mistake is not noticed until an attempt is made to save a record with those values that are too long.\n\n\n###\n\n\n\n### django/db/models/fields/__init__.py\n...\n79|    new = Empty()\n80|    new.__class__ = of_cls\n81|    return new\n82|\n83|\n84|def return_None():\n85|    return None\n86|\n87|\n88|@total_ordering\n89|class Field(RegisterLookupMixin):\n90|    \"\"\"Base class for all field types\"\"\"\n91|\n92|    # Designates whether empty strings fundamentally are allowed at the\n93|    # database level.\n94|    empty_strings_allowed = True\n95|    empty_values = list(validators.EMPTY_VALUES)\n96|\n97|    # These track each time a Field instance is created. Used to retain order.\n98|    # The auto_creation_counter is used for fields that Django implicitly\n99|    # creates, creation_counter is used for all user-specified fields.\n100|    creation_counter = 0\n101|    auto_creation_counter = -1\n102|    default_validators = []  # Default set of validators\n103|    default_error_messages = {\n104|        'invalid_choice': _('Value %(value)r is not a valid choice.'),\n105|        'null': _('This field cannot be null.'),\n106|        'blank': _('This field cannot be blank.'),\n107|        'unique': _('%(model_name)s with this %(field_label)s '\n108|                    'already exists.'),\n109|        # Translators: The 'lookup_type' is one of 'date', 'year' or 'month'.\n110|        # Eg: \"Title must be unique for pub_date year\"\n111|        'unique_for_date': _(\"%(field_label)s must be unique for \"\n112|                             \"%(date_field_label)s %(lookup_type)s.\"),\n113|    }\n114|    system_check_deprecated_details = None\n115|    system_check_removed_details = None\n116|\n117|    # Field flags\n118|    hidden = False\n119|\n120|    many_to_many = None\n121|    many_to_one = None\n122|    one_to_many = None\n123|    one_to_one = None\n124|    related_model = None\n125|\n126|    descriptor_class = DeferredAttribute\n127|\n128|    # Generic field type description, usually overridden by subclasses\n129|    def _description(self):\n130|        return _('Field of type: %(field_type)s') % {\n131|            'field_type': self.__class__.__name__\n132|        }\n133|    description = property(_description)\n134|\n135|    def __init__(self, verbose_name=None, name=None, primary_key=False,\n136|                 max_length=None, unique=False, blank=False, null=False,\n137|                 db_index=False, rel=None, default=NOT_PROVIDED, editable=True,\n138|                 serialize=True, unique_for_date=None, unique_for_month=None,\n139|                 unique_for_year=None, choices=None, help_text='', db_column=None,\n140|                 db_tablespace=None, auto_created=False, validators=(),\n141|                 error_messages=None):\n142|        self.name = name\n143|        self.verbose_name = verbose_name  # May be set by set_attributes_from_name\n144|        self._verbose_name = verbose_name  # Store original for deconstruction\n145|        self.primary_key = primary_key\n146|        self.max_length, self._unique = max_length, unique\n147|        self.blank, self.null = blank, null\n148|        self.remote_field = rel\n149|        self.is_relation = self.remote_field is not None\n150|        self.default = default\n151|        self.editable = editable\n152|        self.serialize = serialize\n153|        self.unique_for_date = unique_for_date\n154|        self.unique_for_month = unique_for_month\n155|        self.unique_for_year = unique_for_year\n156|        if isinstance(choices, collections.abc.Iterator):\n157|            choices = list(choices)\n158|        self.choices = choices\n159|        self.help_text = help_text\n160|        self.db_index = db_index\n161|        self.db_column = db_column\n162|        self._db_tablespace = db_tablespace\n163|        self.auto_created = auto_created\n164|\n165|        # Adjust the appropriate creation counter, and save our local copy.\n166|        if auto_created:\n167|            self.creation_counter = Field.auto_creation_counter\n168|            Field.auto_creation_counter -= 1\n169|        else:\n170|            self.creation_counter = Field.creation_counter\n171|            Field.creation_counter += 1\n172|\n173|        self._validators = list(validators)  # Store for deconstruction later\n174|\n175|        messages = {}\n176|        for c in reversed(self.__class__.__mro__):\n177|            messages.update(getattr(c, 'default_error_messages', {}))\n178|        messages.update(error_messages or {})\n179|        self._error_messages = error_messages  # Store for deconstruction later\n180|        self.error_messages = messages\n181|\n182|    def __str__(self):\n183|        \"\"\"\n184|        Return \"app_label.model_label.field_name\" for fields attached to\n185|        models.\n186|        \"\"\"\n187|        if not hasattr(self, 'model'):\n188|            return super().__str__()\n189|        model = self.model\n190|        app = model._meta.app_label\n191|        return '%s.%s.%s' % (app, model._meta.object_name, self.name)\n192|\n193|    def __repr__(self):\n194|        \"\"\"Display the module, class, and name of the field.\"\"\"\n195|        path = '%s.%s' % (self.__class__.__module__, self.__class__.__qualname__)\n196|        name = getattr(self, 'name', None)\n197|        if name is not None:\n198|            return '<%s: %s>' % (path, name)\n199|        return '<%s>' % path\n200|\n201|    def check(self, **kwargs):\n202|        return [\n203|            *self._check_field_name(),\n204|            *self._check_choices(),\n205|            *self._check_db_index(),\n206|            *self._check_null_allowed_for_primary_keys(),\n207|            *self._check_backend_specific_checks(**kwargs),\n208|            *self._check_validators(),\n209|            *self._check_deprecation_details(),\n210|        ]\n211|\n212|    def _check_field_name(self):\n213|        \"\"\"\n214|        Check if field name is valid, i.e. 1) does not end with an\n215|        underscore, 2) does not contain \"__\" and 3) is not \"pk\".\n216|        \"\"\"\n217|        if self.name.endswith('_'):\n218|            return [\n219|                checks.Error(\n220|                    'Field names must not end with an underscore.',\n221|                    obj=self,\n222|                    id='fields.E001',\n223|                )\n224|            ]\n225|        elif LOOKUP_SEP in self.name:\n226|            return [\n227|                checks.Error(\n228|                    'Field names must not contain \"%s\".' % (LOOKUP_SEP,),\n229|                    obj=self,\n230|                    id='fields.E002',\n231|                )\n232|            ]\n233|        elif self.name == 'pk':\n234|            return [\n235|                checks.Error(\n236|                    \"'pk' is a reserved word that cannot be used as a field name.\",\n237|                    obj=self,\n238|                    id='fields.E003',\n239|                )\n240|            ]\n241|        else:\n242|            return []\n243|\n244|    def _check_choices(self):\n245|        if not self.choices:\n246|            return []\n247|\n248|        def is_value(value, accept_promise=True):\n249|            return isinstance(value, (str, Promise) if accept_promise else str) or not is_iterable(value)\n250|\n251|        if is_value(self.choices, accept_promise=False):\n252|            return [\n253|                checks.Error(\n254|                    \"'choices' must be an iterable (e.g., a list or tuple).\",\n255|                    obj=self,\n256|                    id='fields.E004',\n257|                )\n258|            ]\n259|\n260|        # Expect [group_name, [value, display]]\n261|        for choices_group in self.choices:\n262|            try:\n263|                group_name, group_choices = choices_group\n264|            except (TypeError, ValueError):\n265|                # Containing non-pairs\n266|                break\n267|            try:\n268|                if not all(\n269|                    is_value(value) and is_value(human_name)\n270|                    for value, human_name in group_choices\n271|                ):\n272|                    break\n273|            except (TypeError, ValueError):\n274|                # No groups, choices in the form [value, display]\n275|                value, human_name = group_name, group_choices\n276|                if not is_value(value) or not is_value(human_name):\n277|                    break\n278|\n279|            # Special case: choices=['ab']\n280|            if isinstance(choices_group, str):\n281|                break\n282|        else:\n283|            return []\n284|\n285|        return [\n286|            checks.Error(\n287|                \"'choices' must be an iterable containing \"\n288|                \"(actual value, human readable name) tuples.\",\n289|                obj=self,\n290|                id='fields.E005',\n291|            )\n292|        ]\n293|\n294|    def _check_db_index(self):\n295|        if self.db_index not in (None, True, False):\n296|            return [\n297|                checks.Error(\n298|                    \"'db_index' must be None, True or False.\",\n299|                    obj=self,\n300|                    id='fields.E006',\n301|                )\n302|            ]\n303|        else:\n304|            return []\n305|\n306|    def _check_null_allowed_for_primary_keys(self):\n307|        if (self.primary_key and self.null and\n308|                not connection.features.interprets_empty_strings_as_nulls):\n309|            # We cannot reliably check this for backends like Oracle which\n310|            # consider NULL and '' to be equal (and thus set up\n311|            # character-based fields a little differently).\n312|            return [\n313|                checks.Error(\n314|                    'Primary keys must not have null=True.',\n315|                    hint=('Set null=False on the field, or '\n316|                          'remove primary_key=True argument.'),\n317|                    obj=self,\n318|                    id='fields.E007',\n319|                )\n320|            ]\n321|        else:\n322|            return []\n323|\n324|    def _check_backend_specific_checks(self, **kwargs):\n325|        app_label = self.model._meta.app_label\n326|        for db in connections:\n327|            if router.allow_migrate(db, app_label, model_name=self.model._meta.model_name):\n328|                return connections[db].validation.check_field(self, **kwargs)\n329|        return []\n330|\n331|    def _check_validators(self):\n332|        errors = []\n333|        for i, validator in enumerate(self.validators):\n334|            if not callable(validator):\n335|                errors.append(\n336|                    checks.Error(\n337|                        \"All 'validators' must be callable.\",\n338|                        hint=(\n339|                            \"validators[{i}] ({repr}) isn't a function or \"\n340|                            \"instance of a validator class.\".format(\n341|                                i=i, repr=repr(validator),\n342|                            )\n343|                        ),\n344|                        obj=self,\n345|                        id='fields.E008',\n346|                    )\n347|                )\n348|        return errors\n349|\n350|    def _check_deprecation_details(self):\n351|        if self.system_check_removed_details is not None:\n352|            return [\n353|                checks.Error(\n354|                    self.system_check_removed_details.get(\n355|                        'msg',\n356|                        '%s has been removed except for support in historical '\n357|                        'migrations.' % self.__class__.__name__\n358|                    ),\n359|                    hint=self.system_check_removed_details.get('hint'),\n360|                    obj=self,\n361|                    id=self.system_check_removed_details.get('id', 'fields.EXXX'),\n362|                )\n363|            ]\n364|        elif self.system_check_deprecated_details is not None:\n365|            return [\n366|                checks.Warning(\n367|                    self.system_check_deprecated_details.get(\n368|                        'msg',\n369|                        '%s has been deprecated.' % self.__class__.__name__\n370|                    ),\n371|                    hint=self.system_check_deprecated_details.get('hint'),\n372|                    obj=self,\n373|                    id=self.system_check_deprecated_details.get('id', 'fields.WXXX'),\n374|                )\n375|            ]\n376|        return []\n377|\n378|    def get_col(self, alias, output_field=None):\n379|        if output_field is None:\n380|            output_field = self\n381|        if alias != self.model._meta.db_table or output_field != self:\n382|            from django.db.models.expressions import Col\n383|            return Col(alias, self, output_field)\n384|        else:\n385|            return self.cached_col\n386|\n387|    @cached_property\n388|    def cached_col(self):\n389|        from django.db.models.expressions import Col\n390|        return Col(self.model._meta.db_table, self)\n391|\n392|    def select_format(self, compiler, sql, params):\n393|        \"\"\"\n394|        Custom format for select clauses. For example, GIS columns need to be\n395|        selected as AsText(table.col) on MySQL as the table.col data can't be\n396|        used by Django.\n397|        \"\"\"\n398|        return sql, params\n399|\n400|    def deconstruct(self):\n401|        \"\"\"\n402|        Return enough information to recreate the field as a 4-tuple:\n403|\n404|         * The name of the field on the model, if contribute_to_class() has\n405|           been run.\n406|         * The import path of the field, including the class:e.g.\n407|           django.db.models.IntegerField This should be the most portable\n408|           version, so less specific may be better.\n409|         * A list of positional arguments.\n410|         * A dict of keyword arguments.\n411|\n412|        Note that the positional or keyword arguments must contain values of\n413|        the following types (including inner values of collection types):\n414|\n415|         * None, bool, str, int, float, complex, set, frozenset, list, tuple,\n416|           dict\n417|         * UUID\n418|         * datetime.datetime (naive), datetime.date\n419|         * top-level classes, top-level functions - will be referenced by their\n420|           full import path\n421|         * Storage instances - these have their own deconstruct() method\n422|\n423|        This is because the values here must be serialized into a text format\n424|        (possibly new Python code, possibly JSON) and these are the only types\n425|        with encoding handlers defined.\n426|\n427|        There's no need to return the exact way the field was instantiated this\n428|        time, just ensure that the resulting field is the same - prefer keyword\n429|        arguments over positional ones, and omit parameters with their default\n430|        values.\n431|        \"\"\"\n432|        # Short-form way of fetching all the default parameters\n433|        keywords = {}\n434|        possibles = {\n435|            \"verbose_name\": None,\n436|            \"primary_key\": False,\n437|            \"max_length\": None,\n438|            \"unique\": False,\n439|            \"blank\": False,\n440|            \"null\": False,\n441|            \"db_index\": False,\n442|            \"default\": NOT_PROVIDED,\n443|            \"editable\": True,\n444|            \"serialize\": True,\n445|            \"unique_for_date\": None,\n446|            \"unique_for_month\": None,\n447|            \"unique_for_year\": None,\n448|            \"choices\": None,\n449|            \"help_text\": '',\n450|            \"db_column\": None,\n451|            \"db_tablespace\": None,\n452|            \"auto_created\": False,\n453|            \"validators\": [],\n454|            \"error_messages\": None,\n455|        }\n456|        attr_overrides = {\n457|            \"unique\": \"_unique\",\n458|            \"error_messages\": \"_error_messages\",\n459|            \"validators\": \"_validators\",\n460|            \"verbose_name\": \"_verbose_name\",\n461|            \"db_tablespace\": \"_db_tablespace\",\n462|        }\n463|        equals_comparison = {\"choices\", \"validators\"}\n464|        for name, default in possibles.items():\n465|            value = getattr(self, attr_overrides.get(name, name))\n466|            # Unroll anything iterable for choices into a concrete list\n467|            if name == \"choices\" and isinstance(value, collections.abc.Iterable):\n468|                value = list(value)\n469|            # Do correct kind of comparison\n470|            if name in equals_comparison:\n471|                if value != default:\n472|                    keywords[name] = value\n473|            else:\n474|                if value is not default:\n475|                    keywords[name] = value\n476|        # Work out path - we shorten it for known Django core fields\n477|        path = \"%s.%s\" % (self.__class__.__module__, self.__class__.__qualname__)\n478|        if path.startswith(\"django.db.models.fields.related\"):\n479|            path = path.replace(\"django.db.models.fields.related\", \"django.db.models\")\n480|        elif path.startswith(\"django.db.models.fields.files\"):\n481|            path = path.replace(\"django.db.models.fields.files\", \"django.db.models\")\n482|        elif path.startswith(\"django.db.models.fields.proxy\"):\n483|            path = path.replace(\"django.db.models.fields.proxy\", \"django.db.models\")\n484|        elif path.startswith(\"django.db.models.fields\"):\n485|            path = path.replace(\"django.db.models.fields\", \"django.db.models\")\n486|        # Return basic info - other fields should override this.\n487|        return (self.name, path, [], keywords)\n488|\n489|    def clone(self):\n490|        \"\"\"\n491|        Uses deconstruct() to clone a new copy of this Field.\n492|        Will not preserve any class attachments/attribute names.\n493|        \"\"\"\n494|        name, path, args, kwargs = self.deconstruct()\n495|        return self.__class__(*args, **kwargs)\n496|\n497|    def __eq__(self, other):\n498|        # Needed for @total_ordering\n499|        if isinstance(other, Field):\n500|            return self.creation_counter == other.creation_counter\n501|        return NotImplemented\n502|\n503|    def __lt__(self, other):\n504|        # This is needed because bisect does not take a comparison function.\n505|        if isinstance(other, Field):\n506|            return self.creation_counter < other.creation_counter\n507|        return NotImplemented\n508|\n509|    def __hash__(self):\n510|        return hash(self.creation_counter)\n511|\n512|    def __deepcopy__(self, memodict):\n513|        # We don't have to deepcopy very much here, since most things are not\n514|        # intended to be altered after initial creation.\n515|        obj = copy.copy(self)\n516|        if self.remote_field:\n517|            obj.remote_field = copy.copy(self.remote_field)\n518|            if hasattr(self.remote_field, 'field') and self.remote_field.field is self:\n519|                obj.remote_field.field = obj\n520|        memodict[id(self)] = obj\n521|        return obj\n522|\n523|    def __copy__(self):\n524|        # We need to avoid hitting __reduce__, so define this\n525|        # slightly weird copy construct.\n526|        obj = Empty()\n527|        obj.__class__ = self.__class__\n528|        obj.__dict__ = self.__dict__.copy()\n529|        return obj\n530|\n531|    def __reduce__(self):\n532|        \"\"\"\n533|        Pickling should return the model._meta.fields instance of the field,\n534|        not a new copy of that field. So, use the app registry to load the\n535|        model and then the field back.\n536|        \"\"\"\n537|        if not hasattr(self, 'model'):\n538|            # Fields are sometimes used without attaching them to models (for\n539|            # example in aggregation). In this case give back a plain field\n540|            # instance. The code below will create a new empty instance of\n541|            # class self.__class__, then update its dict with self.__dict__\n542|            # values - so, this is very close to normal pickle.\n543|            state = self.__dict__.copy()\n544|            # The _get_default cached_property can't be pickled due to lambda\n545|            # usage.\n546|            state.pop('_get_default', None)\n547|            return _empty, (self.__class__,), state\n548|        return _load_field, (self.model._meta.app_label, self.model._meta.object_name,\n549|                             self.name)\n550|\n551|    def get_pk_value_on_save(self, instance):\n552|        \"\"\"\n553|        Hook to generate new PK values on save. This method is called when\n554|        saving instances with no primary key value set. If this method returns\n555|        something else than None, then the returned value is used when saving\n556|        the new instance.\n557|        \"\"\"\n558|        if self.default:\n559|            return self.get_default()\n560|        return None\n561|\n562|    def to_python(self, value):\n563|        \"\"\"\n564|        Convert the input value into the expected Python data type, raising\n565|        django.core.exceptions.ValidationError if the data can't be converted.\n566|        Return the converted value. Subclasses should override this.\n567|        \"\"\"\n568|        return value\n569|\n570|    @cached_property\n571|    def validators(self):\n572|        \"\"\"\n573|        Some validators can't be created at field initialization time.\n574|        This method provides a way to delay their creation until required.\n575|        \"\"\"\n576|        return [*self.default_validators, *self._validators]\n577|\n578|    def run_validators(self, value):\n579|        if value in self.empty_values:\n580|            return\n581|\n582|        errors = []\n583|        for v in self.validators:\n584|            try:\n585|                v(value)\n586|            except exceptions.ValidationError as e:\n587|                if hasattr(e, 'code') and e.code in self.error_messages:\n588|                    e.message = self.error_messages[e.code]\n589|                errors.extend(e.error_list)\n590|\n591|        if errors:\n592|            raise exceptions.ValidationError(errors)\n593|\n594|    def validate(self, value, model_instance):\n595|        \"\"\"\n596|        Validate value and raise ValidationError if necessary. Subclasses\n597|        should override this to provide validation logic.\n598|        \"\"\"\n599|        if not self.editable:\n600|            # Skip validation for non-editable fields.\n601|            return\n602|\n603|        if self.choices is not None and value not in self.empty_values:\n604|            for option_key, option_value in self.choices:\n605|                if isinstance(option_value, (list, tuple)):\n606|                    # This is an optgroup, so look inside the group for\n607|                    # options.\n608|                    for optgroup_key, optgroup_value in option_value:\n609|                        if value == optgroup_key:\n610|                            return\n611|                elif value == option_key:\n612|                    return\n613|            raise exceptions.ValidationError(\n614|                self.error_messages['invalid_choice'],\n615|                code='invalid_choice',\n616|                params={'value': value},\n617|            )\n618|\n619|        if value is None and not self.null:\n620|            raise exceptions.ValidationError(self.error_messages['null'], code='null')\n621|\n622|        if not self.blank and value in self.empty_values:\n623|            raise exceptions.ValidationError(self.error_messages['blank'], code='blank')\n624|\n625|    def clean(self, value, model_instance):\n626|        \"\"\"\n627|        Convert the value's type and run validation. Validation errors\n628|        from to_python() and validate() are propagated. Return the correct\n629|        value if no error is raised.\n630|        \"\"\"\n631|        value = self.to_python(value)\n632|        self.validate(value, model_instance)\n633|        self.run_validators(value)\n634|        return value\n635|\n636|    def db_type_parameters(self, connection):\n637|        return DictWrapper(self.__dict__, connection.ops.quote_name, 'qn_')\n638|\n639|    def db_check(self, connection):\n640|        \"\"\"\n641|        Return the database column check constraint for this field, for the\n642|        provided connection. Works the same way as db_type() for the case that\n643|        get_internal_type() does not map to a preexisting model field.\n644|        \"\"\"\n645|        data = self.db_type_parameters(connection)\n646|        try:\n647|            return connection.data_type_check_constraints[self.get_internal_type()] % data\n648|        except KeyError:\n649|            return None\n650|\n651|    def db_type(self, connection):\n652|        \"\"\"\n653|        Return the database column data type for this field, for the provided\n654|        connection.\n655|        \"\"\"\n656|        # The default implementation of this method looks at the\n657|        # backend-specific data_types dictionary, looking up the field by its\n658|        # \"internal type\".\n659|        #\n660|        # A Field class can implement the get_internal_type() method to specify\n661|        # which *preexisting* Django Field class it's most similar to -- i.e.,\n662|        # a custom field might be represented by a TEXT column type, which is\n663|        # the same as the TextField Django field type, which means the custom\n664|        # field's get_internal_type() returns 'TextField'.\n665|        #\n666|        # But the limitation of the get_internal_type() / data_types approach\n667|        # is that it cannot handle database column types that aren't already\n668|        # mapped to one of the built-in Django field types. In this case, you\n669|        # can implement db_type() instead of get_internal_type() to specify\n670|        # exactly which wacky database column type you want to use.\n671|        data = self.db_type_parameters(connection)\n672|        try:\n673|            return connection.data_types[self.get_internal_type()] % data\n674|        except KeyError:\n675|            return None\n676|\n677|    def rel_db_type(self, connection):\n678|        \"\"\"\n679|        Return the data type that a related field pointing to this field should\n680|        use. For example, this method is called by ForeignKey and OneToOneField\n681|        to determine its data type.\n682|        \"\"\"\n683|        return self.db_type(connection)\n684|\n685|    def cast_db_type(self, connection):\n686|        \"\"\"Return the data type to use in the Cast() function.\"\"\"\n687|        db_type = connection.ops.cast_data_types.get(self.get_internal_type())\n688|        if db_type:\n689|            return db_type % self.db_type_parameters(connection)\n690|        return self.db_type(connection)\n691|\n692|    def db_parameters(self, connection):\n693|        \"\"\"\n694|        Extension of db_type(), providing a range of different return values\n695|        (type, checks). This will look at db_type(), allowing custom model\n696|        fields to override it.\n697|        \"\"\"\n698|        type_string = self.db_type(connection)\n699|        check_string = self.db_check(connection)\n700|        return {\n701|            \"type\": type_string,\n702|            \"check\": check_string,\n703|        }\n704|\n705|    def db_type_suffix(self, connection):\n706|        return connection.data_types_suffix.get(self.get_internal_type())\n707|\n708|    def get_db_converters(self, connection):\n709|        if hasattr(self, 'from_db_value'):\n710|            return [self.from_db_value]\n711|        return []\n712|\n713|    @property\n714|    def unique(self):\n715|        return self._unique or self.primary_key\n716|\n717|    @property\n718|    def db_tablespace(self):\n719|        return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE\n720|\n721|    def set_attributes_from_name(self, name):\n722|        self.name = self.name or name\n723|        self.attname, self.column = self.get_attname_column()\n724|        self.concrete = self.column is not None\n725|        if self.verbose_name is None and self.name:\n726|            self.verbose_name = self.name.replace('_', ' ')\n727|\n728|    def contribute_to_class(self, cls, name, private_only=False):\n729|        \"\"\"\n730|        Register the field with the model class it belongs to.\n731|\n732|        If private_only is True, create a separate instance of this field\n733|        for every subclass of cls, even if cls is not an abstract model.\n734|        \"\"\"\n735|        self.set_attributes_from_name(name)\n736|        self.model = cls\n737|        cls._meta.add_field(self, private=private_only)\n738|        if self.column:\n739|            # Don't override classmethods with the descriptor. This means that\n740|            # if you have a classmethod and a field with the same name, then\n741|            # such fields can't be deferred (we don't have a check for this).\n742|            if not getattr(cls, self.attname, None):\n743|                setattr(cls, self.attname, self.descriptor_class(self))\n744|        if self.choices is not None:\n745|            setattr(cls, 'get_%s_display' % self.name,\n746|                    partialmethod(cls._get_FIELD_display, field=self))\n747|\n748|    def get_filter_kwargs_for_object(self, obj):\n749|        \"\"\"\n750|        Return a dict that when passed as kwargs to self.model.filter(), would\n751|        yield all instances having the same value for this field as obj has.\n752|        \"\"\"\n753|        return {self.name: getattr(obj, self.attname)}\n754|\n755|    def get_attname(self):\n756|        return self.name\n757|\n758|    def get_attname_column(self):\n759|        attname = self.get_attname()\n760|        column = self.db_column or attname\n761|        return attname, column\n762|\n763|    def get_internal_type(self):\n764|        return self.__class__.__name__\n765|\n766|    def pre_save(self, model_instance, add):\n767|        \"\"\"Return field's value just before saving.\"\"\"\n768|        return getattr(model_instance, self.attname)\n769|\n770|    def get_prep_value(self, value):\n771|        \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n772|        if isinstance(value, Promise):\n773|            value = value._proxy____cast()\n774|        return value\n775|\n776|    def get_db_prep_value(self, value, connection, prepared=False):\n777|        \"\"\"\n778|        Return field's value prepared for interacting with the database backend.\n779|\n780|        Used by the default implementations of get_db_prep_save().\n781|        \"\"\"\n782|        if not prepared:\n783|            value = self.get_prep_value(value)\n784|        return value\n785|\n786|    def get_db_prep_save(self, value, connection):\n787|        \"\"\"Return field's value prepared for saving into a database.\"\"\"\n788|        return self.get_db_prep_value(value, connection=connection, prepared=False)\n789|\n790|    def has_default(self):\n791|        \"\"\"Return a boolean of whether this field has a default value.\"\"\"\n792|        return self.default is not NOT_PROVIDED\n793|\n794|    def get_default(self):\n795|        \"\"\"Return the default value for this field.\"\"\"\n796|        return self._get_default()\n797|\n798|    @cached_property\n799|    def _get_default(self):\n800|        if self.has_default():\n801|            if callable(self.default):\n802|                return self.default\n803|            return lambda: self.default\n804|\n805|        if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:\n806|            return return_None\n807|        return str  # return empty string\n808|\n809|    def get_choices(self, include_blank=True, blank_choice=BLANK_CHOICE_DASH, limit_choices_to=None, ordering=()):\n810|        \"\"\"\n811|        Return choices with a default blank choices included, for use\n812|        as <select> choices for this field.\n813|        \"\"\"\n814|        if self.choices is not None:\n815|            choices = list(self.choices)\n816|            if include_blank:\n817|                blank_defined = any(choice in ('', None) for choice, _ in self.flatchoices)\n818|                if not blank_defined:\n819|                    choices = blank_choice + choices\n820|            return choices\n821|        rel_model = self.remote_field.model\n822|        limit_choices_to = limit_choices_to or self.get_limit_choices_to()\n823|        choice_func = operator.attrgetter(\n824|            self.remote_field.get_related_field().attname\n825|            if hasattr(self.remote_field, 'get_related_field')\n826|            else 'pk'\n827|        )\n828|        qs = rel_model._default_manager.complex_filter(limit_choices_to)\n829|        if ordering:\n830|            qs = qs.order_by(*ordering)\n831|        return (blank_choice if include_blank else []) + [\n832|            (choice_func(x), str(x)) for x in qs\n833|        ]\n834|\n835|    def value_to_string(self, obj):\n836|        \"\"\"\n837|        Return a string value of this field from the passed obj.\n838|        This is used by the serialization framework.\n839|        \"\"\"\n840|        return str(self.value_from_object(obj))\n841|\n842|    def _get_flatchoices(self):\n843|        \"\"\"Flattened version of choices tuple.\"\"\"\n844|        if self.choices is None:\n845|            return []\n846|        flat = []\n847|        for choice, value in self.choices:\n848|            if isinstance(value, (list, tuple)):\n849|                flat.extend(value)\n850|            else:\n851|                flat.append((choice, value))\n852|        return flat\n853|    flatchoices = property(_get_flatchoices)\n854|\n855|    def save_form_data(self, instance, data):\n856|        setattr(instance, self.name, data)\n857|\n858|    def formfield(self, form_class=None, choices_form_class=None, **kwargs):\n859|        \"\"\"Return a django.forms.Field instance for this field.\"\"\"\n860|        defaults = {\n861|            'required': not self.blank,\n862|            'label': capfirst(self.verbose_name),\n863|            'help_text': self.help_text,\n864|        }\n865|        if self.has_default():\n866|            if callable(self.default):\n867|                defaults['initial'] = self.default\n868|                defaults['show_hidden_initial'] = True\n869|            else:\n870|                defaults['initial'] = self.get_default()\n871|        if self.choices is not None:\n872|            # Fields with choices get special treatment.\n873|            include_blank = (self.blank or\n874|                             not (self.has_default() or 'initial' in kwargs))\n875|            defaults['choices'] = self.get_choices(include_blank=include_blank)\n876|            defaults['coerce'] = self.to_python\n877|            if self.null:\n878|                defaults['empty_value'] = None\n879|            if choices_form_class is not None:\n880|                form_class = choices_form_class\n881|            else:\n882|                form_class = forms.TypedChoiceField\n883|            # Many of the subclass-specific formfield arguments (min_value,\n884|            # max_value) don't apply for choice fields, so be sure to only pass\n885|            # the values that TypedChoiceField will understand.\n886|            for k in list(kwargs):\n887|                if k not in ('coerce', 'empty_value', 'choices', 'required',\n888|                             'widget', 'label', 'initial', 'help_text',\n889|                             'error_messages', 'show_hidden_initial', 'disabled'):\n890|                    del kwargs[k]\n891|        defaults.update(kwargs)\n892|        if form_class is None:\n893|            form_class = forms.CharField\n894|        return form_class(**defaults)\n895|\n896|    def value_from_object(self, obj):\n897|        \"\"\"Return the value of this field in the given model instance.\"\"\"\n898|        return getattr(obj, self.attname)\n899|\n900|\n901|class BooleanField(Field):\n902|    empty_strings_allowed = False\n903|    default_error_messages = {\n904|        'invalid': _('\u201c%(value)s\u201d value must be either True or False.'),\n905|        'invalid_nullable': _('\u201c%(value)s\u201d value must be either True, False, or None.'),\n906|    }\n907|    description = _(\"Boolean (Either True or False)\")\n908|\n...\n937|            defaults = {'choices': self.get_choices(include_blank=include_blank)}\n938|        else:\n939|            form_class = forms.NullBooleanField if self.null else forms.BooleanField\n940|            # In HTML checkboxes, 'required' means \"must be checked\" which is\n941|            # different from the choices case (\"must select some value\").\n942|            # required=False allows unchecked checkboxes.\n943|            defaults = {'form_class': form_class, 'required': False}\n944|        return super().formfield(**{**defaults, **kwargs})\n945|\n946|\n947|class CharField(Field):\n948|    description = _(\"String (up to %(max_length)s)\")\n949|\n950|    def __init__(self, *args, **kwargs):\n951|        super().__init__(*args, **kwargs)\n952|        self.validators.append(validators.MaxLengthValidator(self.max_length))\n953|\n954|    def check(self, **kwargs):\n955|        return [\n956|            *super().check(**kwargs),\n957|            *self._check_max_length_attribute(**kwargs),\n958|        ]\n959|\n960|    def _check_max_length_attribute(self, **kwargs):\n961|        if self.max_length is None:\n962|            return [\n963|                checks.Error(\n964|                    \"CharFields must define a 'max_length' attribute.\",\n965|                    obj=self,\n966|                    id='fields.E120',\n967|                )\n968|            ]\n969|        elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or\n970|                self.max_length <= 0):\n971|            return [\n972|                checks.Error(\n973|                    \"'max_length' must be a positive integer.\",\n974|                    obj=self,\n975|                    id='fields.E121',\n976|                )\n977|            ]\n978|        else:\n979|            return []\n980|\n981|    def cast_db_type(self, connection):\n982|        if self.max_length is None:\n983|            return connection.ops.cast_char_field_without_max_length\n984|        return super().cast_db_type(connection)\n985|\n986|    def get_internal_type(self):\n987|        return \"CharField\"\n988|\n989|    def to_python(self, value):\n990|        if isinstance(value, str) or value is None:\n991|            return value\n992|        return str(value)\n993|\n994|    def get_prep_value(self, value):\n995|        value = super().get_prep_value(value)\n996|        return self.to_python(value)\n997|\n998|    def formfield(self, **kwargs):\n999|        # Passing max_length to forms.CharField means that the value's length\n1000|        # will be validated twice. This is considered acceptable since we want\n1001|        # the value in the form field (to pass into widget for example).\n1002|        defaults = {'max_length': self.max_length}\n1003|        # TODO: Handle multiple backends with different feature flags.\n1004|        if self.null and not connection.features.interprets_empty_strings_as_nulls:\n1005|            defaults['empty_value'] = None\n1006|        defaults.update(kwargs)\n1007|        return super().formfield(**defaults)\n1008|\n1009|\n1010|class CommaSeparatedIntegerField(CharField):\n1011|    default_validators = [validators.validate_comma_separated_integer_list]\n1012|    description = _(\"Comma-separated integers\")\n1013|    system_check_removed_details = {\n1014|        'msg': (\n1015|            'CommaSeparatedIntegerField is removed except for support in '\n1016|            'historical migrations.'\n1017|        ),\n...\n\n\n\n\n###\n\nPlease provide the class name, function or method name, or the exact line numbers that need to be edited.\n### Examples:\n```\nfull_path1/file1.py\nline: 10\nclass: MyClass1\nline: 51\n\nfull_path2/file2.py\nfunction: MyClass2.my_method\nline: 12\n\nfull_path3/file3.py\nfunction: my_function\nline: 24\nline: 156\n```\n\nReturn just the location(s)\n", "response": ["```\ndjango/db/models/fields/__init__.py\nfunction: Field._check_choices\nline: 244\nline: 283\n\ndjango/db/models/fields/__init__.py\nfunction: Field.__init__\nline: 158\n```", "```\ndjango/db/models/fields/__init__.py\nfunction: Field._check_choices\nline: 244\n\ndjango/db/models/fields/__init__.py\nfunction: CharField._check_max_length_attribute\nline: 960\n```", "```\ndjango/db/models/fields/__init__.py\nfunction: Field._check_choices\nline: 244\nline: 283\n\ndjango/db/models/fields/__init__.py\nfunction: CharField.check\nline: 954\n```", "```\ndjango/db/models/fields/__init__.py\nfunction: Field._check_choices\nline: 244\nline: 245\n\ndjango/db/models/fields/__init__.py\nfunction: CharField._check_max_length_attribute\nline: 960\n```"], "usage": {"completion_tokens": 207, "prompt_tokens": 9157}}}
