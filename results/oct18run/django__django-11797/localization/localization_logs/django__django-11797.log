2024-10-18 13:55:11,661 - INFO - Processing bug django__django-11797
2024-10-18 13:55:36,200 - INFO - ================ localize django__django-11797 ================
2024-10-18 13:55:36,264 - INFO - prompting with message:
Please look through the following GitHub problem description, and Repository structure and provide a list of files that one would need to edit to fix the problem.

### GitHub Problem Description ###
Filtering on query result overrides GROUP BY of internal query
Description
	
from django.contrib.auth import models
a = models.User.objects.filter(email__isnull=True).values('email').annotate(m=Max('id')).values('m')
print(a.query) # good
# SELECT MAX("auth_user"."id") AS "m" FROM "auth_user" WHERE "auth_user"."email" IS NULL GROUP BY "auth_user"."email"
print(a[:1].query) # good
# SELECT MAX("auth_user"."id") AS "m" FROM "auth_user" WHERE "auth_user"."email" IS NULL GROUP BY "auth_user"."email" LIMIT 1
b = models.User.objects.filter(id=a[:1])
print(b.query) # GROUP BY U0."id" should be GROUP BY U0."email"
# SELECT ... FROM "auth_user" WHERE "auth_user"."id" = (SELECT U0."id" FROM "auth_user" U0 WHERE U0."email" IS NULL GROUP BY U0."id" LIMIT 1)


###



### Repository Structure ###
django/
    setup.py
    shortcuts.py
    __init__.py
    __main__.py
    apps/
        config.py
        registry.py
        __init__.py
    template/
        response.py
        defaultfilters.py
        base.py
        exceptions.py
        defaulttags.py
        engine.py
        utils.py
        context_processors.py
        context.py
        smartif.py
        loader_tags.py
        loader.py
        __init__.py
        library.py
        loaders/
            base.py
            cached.py
            filesystem.py
            locmem.py
            app_directories.py
            __init__.py
        backends/
            django.py
            base.py
            dummy.py
            utils.py
            __init__.py
            jinja2.py
    contrib/
        __init__.py
        auth/
            urls.py
            hashers.py
            models.py
            views.py
            admin.py
            backends.py
            base_user.py
            middleware.py
            password_validation.py
            checks.py
            apps.py
            decorators.py
            forms.py
            mixins.py
            signals.py
            validators.py
            tokens.py
            context_processors.py
            __init__.py
            handlers/
                modwsgi.py
                __init__.py
            migrations/
                0002_alter_permission_name_max_length.py
                0005_alter_user_last_login_null.py
                0008_alter_user_username_max_length.py
                0010_alter_group_name_max_length.py
                0006_require_contenttypes_0002.py
                0007_alter_validators_add_error_messages.py
                0001_initial.py
                0004_alter_user_username_opts.py
                0009_alter_user_last_name_max_length.py
                0003_alter_user_email_max_length.py
                __init__.py
                0011_update_proxy_permissions.py
            management/
                __init__.py
                commands/
                    changepassword.py
                    createsuperuser.py
        sites/
            requests.py
            shortcuts.py
            models.py
            admin.py
            middleware.py
            managers.py
            apps.py
            management.py
            __init__.py
            migrations/
                0002_alter_domain_unique.py
                0001_initial.py
                __init__.py
        postgres/
            apps.py
            serializers.py
            signals.py
            validators.py
            operations.py
            search.py
            utils.py
            lookups.py
            indexes.py
            constraints.py
            __init__.py
            functions.py
            aggregates/
                statistics.py
                general.py
                mixins.py
                __init__.py
            fields/
                citext.py
                ranges.py
                hstore.py
                mixins.py
                array.py
                utils.py
                jsonb.py
                __init__.py
            forms/
                ranges.py
                hstore.py
                array.py
                jsonb.py
                __init__.py
        admin/
            sites.py
            models.py
            options.py
            actions.py
            exceptions.py
            checks.py
            filters.py
            apps.py
            decorators.py
            helpers.py
            forms.py
            utils.py
            widgets.py
            __init__.py
            bin/
                compress.py
            views/
                autocomplete.py
                decorators.py
                main.py
                __init__.py
            templatetags/
                base.py
                admin_urls.py
                admin_modify.py
                log.py
                admin_list.py
                __init__.py
            migrations/
                0002_logentry_remove_auto_add.py
                0003_logentry_add_action_flag_choices.py
                0001_initial.py
                __init__.py
        staticfiles/
            urls.py
            views.py
            storage.py
            checks.py
            apps.py
            finders.py
            handlers.py
            utils.py
            __init__.py
            management/
                commands/
                    runserver.py
                    collectstatic.py
                    findstatic.py
        gis/
            shortcuts.py
            views.py
            ptr.py
            geometry.py
            apps.py
            feeds.py
            measure.py
            __init__.py
            gdal/
                base.py
                error.py
                feature.py
                geometries.py
                libgdal.py
                layer.py
                srs.py
                driver.py
                envelope.py
                field.py
                geomtype.py
                __init__.py
                datasource.py
                prototypes/
                    errcheck.py
                    srs.py
                    ds.py
                    generation.py
                    geom.py
                    raster.py
                    __init__.py
                raster/
                    source.py
                    base.py
                    band.py
                    const.py
                    __init__.py
            serializers/
                __init__.py
                geojson.py
            admin/
                options.py
                widgets.py
                __init__.py
            geos/
                prepared.py
                base.py
                error.py
                geometry.py
                point.py
                factory.py
                io.py
                coordseq.py
                mutable_list.py
                linestring.py
                libgeos.py
                polygon.py
                collections.py
                __init__.py
                prototypes/
                    topology.py
                    prepared.py
                    misc.py
                    errcheck.py
                    io.py
                    coordseq.py
                    threadsafe.py
                    geom.py
                    predicates.py
                    __init__.py
            geoip2/
                base.py
                resources.py
                __init__.py
            db/
                __init__.py
                models/
                    aggregates.py
                    proxy.py
                    lookups.py
                    __init__.py
                    functions.py
                    fields.py
                    sql/
                        conversion.py
                        __init__.py
                backends/
                    utils.py
                    __init__.py
                    oracle/
                        models.py
                        schema.py
                        base.py
                        adapter.py
                        operations.py
                        introspection.py
                        __init__.py
                        features.py
                    postgis/
                        models.py
                        schema.py
                        base.py
                        adapter.py
                        const.py
                        operations.py
                        introspection.py
                        pgraster.py
                        __init__.py
                        features.py
                    base/
                        models.py
                        adapter.py
                        operations.py
                        __init__.py
                        features.py
                    mysql/
                        schema.py
                        base.py
                        operations.py
                        introspection.py
                        __init__.py
                        features.py
                    spatialite/
                        models.py
                        schema.py
                        base.py
                        adapter.py
                        client.py
                        operations.py
                        introspection.py
                        __init__.py
                        features.py
            utils/
                ogrinfo.py
                layermapping.py
                ogrinspect.py
                srs.py
                __init__.py
            forms/
                widgets.py
                __init__.py
                fields.py
            management/
                commands/
                    inspectdb.py
                    ogrinspect.py
            sitemaps/
                views.py
                kml.py
                __init__.py
        syndication/
            views.py
            apps.py
            __init__.py
        messages/
            views.py
            api.py
            constants.py
            middleware.py
            apps.py
            utils.py
            context_processors.py
            __init__.py
            storage/
                base.py
                session.py
                cookie.py
                fallback.py
                __init__.py
        sessions/
            models.py
            exceptions.py
            middleware.py
            apps.py
            serializers.py
            base_session.py
            __init__.py
            migrations/
                0001_initial.py
                __init__.py
            backends/
                file.py
                base.py
                signed_cookies.py
                cached_db.py
                db.py
                cache.py
                __init__.py
            management/
                commands/
                    clearsessions.py
        contenttypes/
            models.py
            views.py
            admin.py
            checks.py
            apps.py
            forms.py
            __init__.py
            fields.py
            migrations/
                0001_initial.py
                0002_remove_content_type_name.py
                __init__.py
            management/
                __init__.py
                commands/
                    remove_stale_contenttypes.py
        admindocs/
            urls.py
            views.py
            middleware.py
            apps.py
            utils.py
            __init__.py
        humanize/
            apps.py
            __init__.py
            templatetags/
                humanize.py
                __init__.py
        flatpages/
            urls.py
            sitemaps.py
            models.py
            views.py
            admin.py
            middleware.py
            apps.py
            forms.py
            __init__.py
            templatetags/
                flatpages.py
                __init__.py
            migrations/
                0001_initial.py
                __init__.py
        redirects/
            models.py
            admin.py
            middleware.py
            apps.py
            __init__.py
            migrations/
                0001_initial.py
                __init__.py
        sitemaps/
            views.py
            apps.py
            __init__.py
            management/
                commands/
                    ping_google.py
    core/
        signing.py
        exceptions.py
        asgi.py
        wsgi.py
        signals.py
        validators.py
        paginator.py
        __init__.py
        handlers/
            base.py
            asgi.py
            wsgi.py
            exception.py
            __init__.py
        checks/
            urls.py
            database.py
            translation.py
            templates.py
            messages.py
            caches.py
            registry.py
            model_checks.py
            __init__.py
            compatibility/
                __init__.py
            security/
                base.py
                csrf.py
                sessions.py
                __init__.py
        serializers/
            python.py
            base.py
            xml_serializer.py
            json.py
            pyyaml.py
            __init__.py
        mail/
            message.py
            utils.py
            __init__.py
            backends/
                base.py
                smtp.py
                locmem.py
                console.py
                dummy.py
                filebased.py
                __init__.py
        cache/
            utils.py
            __init__.py
            backends/
                base.py
                locmem.py
                db.py
                memcached.py
                dummy.py
                filebased.py
                __init__.py
        servers/
            basehttp.py
            __init__.py
        files/
            uploadhandler.py
            move.py
            base.py
            images.py
            storage.py
            uploadedfile.py
            temp.py
            utils.py
            locks.py
            __init__.py
        management/
            color.py
            base.py
            templates.py
            sql.py
            utils.py
            __init__.py
            commands/
                makemigrations.py
                dbshell.py
                makemessages.py
                inspectdb.py
                shell.py
                sendtestemail.py
                createcachetable.py
                runserver.py
                dumpdata.py
                compilemessages.py
                check.py
                loaddata.py
                diffsettings.py
                squashmigrations.py
                startproject.py
                sqlflush.py
                showmigrations.py
                sqlmigrate.py
                flush.py
                sqlsequencereset.py
                startapp.py
                migrate.py
    bin/
        django-admin.py
    http/
        response.py
        request.py
        cookie.py
        multipartparser.py
        __init__.py
    conf/
        global_settings.py
        __init__.py
        urls/
            i18n.py
            static.py
            __init__.py
        locale/
            __init__.py
            sv/
                formats.py
                __init__.py
            fr/
                formats.py
                __init__.py
            uk/
                formats.py
                __init__.py
            cy/
                formats.py
                __init__.py
            pl/
                formats.py
                __init__.py
            hr/
                formats.py
                __init__.py
            en_GB/
                formats.py
                __init__.py
            de_CH/
                formats.py
                __init__.py
            zh_Hant/
                formats.py
                __init__.py
            mn/
                formats.py
                __init__.py
            fi/
                formats.py
                __init__.py
            sr_Latn/
                formats.py
                __init__.py
            de/
                formats.py
                __init__.py
            he/
                formats.py
                __init__.py
            nn/
                formats.py
                __init__.py
            lv/
                formats.py
                __init__.py
            es/
                formats.py
                __init__.py
            kn/
                formats.py
                __init__.py
            sq/
                formats.py
                __init__.py
            fa/
                formats.py
                __init__.py
            id/
                formats.py
                __init__.py
            nb/
                formats.py
                __init__.py
            es_NI/
                formats.py
                __init__.py
            es_AR/
                formats.py
                __init__.py
            fy/
                formats.py
                __init__.py
            bg/
                formats.py
                __init__.py
            gd/
                formats.py
                __init__.py
            en/
                formats.py
                __init__.py
            pt_BR/
                formats.py
                __init__.py
            hi/
                formats.py
                __init__.py
            ko/
                formats.py
                __init__.py
            th/
                formats.py
                __init__.py
            bs/
                formats.py
                __init__.py
            sk/
                formats.py
                __init__.py
            nl/
                formats.py
                __init__.py
            eo/
                formats.py
                __init__.py
            en_AU/
                formats.py
                __init__.py
            bn/
                formats.py
                __init__.py
            km/
                formats.py
                __init__.py
            sl/
                formats.py
                __init__.py
            ar/
                formats.py
                __init__.py
            lt/
                formats.py
                __init__.py
            ga/
                formats.py
                __init__.py
            ka/
                formats.py
                __init__.py
            ml/
                formats.py
                __init__.py
            sr/
                formats.py
                __init__.py
            cs/
                formats.py
                __init__.py
            ru/
                formats.py
                __init__.py
            ja/
                formats.py
                __init__.py
            mk/
                formats.py
                __init__.py
            ta/
                formats.py
                __init__.py
            es_CO/
                formats.py
                __init__.py
            ca/
                formats.py
                __init__.py
            zh_Hans/
                formats.py
                __init__.py
            da/
                formats.py
                __init__.py
            gl/
                formats.py
                __init__.py
            es_MX/
                formats.py
                __init__.py
            it/
                formats.py
                __init__.py
            pt/
                formats.py
                __init__.py
            el/
                formats.py
                __init__.py
            tr/
                formats.py
                __init__.py
            vi/
                formats.py
                __init__.py
            te/
                formats.py
                __init__.py
            et/
                formats.py
                __init__.py
            is/
                formats.py
                __init__.py
            es_PR/
                formats.py
                __init__.py
            eu/
                formats.py
                __init__.py
            az/
                formats.py
                __init__.py
            hu/
                formats.py
                __init__.py
            ro/
                formats.py
                __init__.py
    middleware/
        common.py
        locale.py
        security.py
        csrf.py
        clickjacking.py
        gzip.py
        http.py
        cache.py
        __init__.py
    views/
        i18n.py
        debug.py
        csrf.py
        static.py
        defaults.py
        __init__.py
        generic/
            dates.py
            base.py
            edit.py
            detail.py
            list.py
            __init__.py
        decorators/
            debug.py
            vary.py
            csrf.py
            clickjacking.py
            gzip.py
            http.py
            cache.py
            __init__.py
    templatetags/
        l10n.py
        i18n.py
        tz.py
        static.py
        cache.py
        __init__.py
    dispatch/
        dispatcher.py
        __init__.py
    db/
        transaction.py
        utils.py
        __init__.py
        models/
            base.py
            constants.py
            options.py
            query.py
            query_utils.py
            enums.py
            manager.py
            deletion.py
            aggregates.py
            signals.py
            utils.py
            lookups.py
            indexes.py
            constraints.py
            __init__.py
            expressions.py
            sql/
                where.py
                constants.py
                query.py
                compiler.py
                subqueries.py
                datastructures.py
                __init__.py
            functions/
                datetime.py
                mixins.py
                comparison.py
                math.py
                window.py
                __init__.py
                text.py
            fields/
                reverse_related.py
                related.py
                mixins.py
                related_lookups.py
                proxy.py
                files.py
                __init__.py
                related_descriptors.py
        migrations/
            state.py
            serializer.py
            graph.py
            exceptions.py
            executor.py
            utils.py
            writer.py
            autodetector.py
            recorder.py
            loader.py
            questioner.py
            optimizer.py
            __init__.py
            migration.py
            operations/
                models.py
                base.py
                utils.py
                special.py
                __init__.py
                fields.py
        backends/
            ddl_references.py
            signals.py
            utils.py
            __init__.py
            oracle/
                validation.py
                schema.py
                base.py
                creation.py
                client.py
                operations.py
                utils.py
                introspection.py
                __init__.py
                features.py
                functions.py
            sqlite3/
                schema.py
                base.py
                creation.py
                client.py
                operations.py
                introspection.py
                __init__.py
                features.py
            postgresql/
                schema.py
                base.py
                creation.py
                client.py
                operations.py
                utils.py
                introspection.py
                __init__.py
                features.py
            base/
                validation.py
                schema.py
                base.py
                creation.py
                client.py
                operations.py
                introspection.py
                __init__.py
                features.py
            mysql/
                validation.py
                schema.py
                base.py
                creation.py
                compiler.py
                client.py
                operations.py
                introspection.py
                __init__.py
                features.py
            dummy/
                base.py
                __init__.py
                features.py
    urls/
        converters.py
        conf.py
        base.py
        exceptions.py
        utils.py
        resolvers.py
        __init__.py
    utils/
        dates.py
        feedgenerator.py
        autoreload.py
        timezone.py
        lorem_ipsum.py
        safestring.py
        topological_sort.py
        crypto.py
        datetime_safe.py
        jslex.py
        tree.py
        itercompat.py
        encoding.py
        version.py
        _os.py
        html.py
        numberformat.py
        dateformat.py
        formats.py
        deprecation.py
        decorators.py
        inspect.py
        log.py
        baseconv.py
        asyncio.py
        timesince.py
        deconstruct.py
        xmlutils.py
        module_loading.py
        regex_helper.py
        hashable.py
        archive.py
        termcolors.py
        dateparse.py
        http.py
        functional.py
        ipv6.py
        datastructures.py
        cache.py
        __init__.py
        text.py
        duration.py
        translation/
            template.py
            reloader.py
            trans_null.py
            trans_real.py
            __init__.py
    forms/
        models.py
        formsets.py
        forms.py
        utils.py
        widgets.py
        boundfield.py
        renderers.py
        __init__.py
        fields.py
docs/
    conf.py
    _ext/
        djangodocs.py
scripts/
    manage_translations.py

###

Please only provide the full path and return at most 5 files.
The returned files should be separated by new lines ordered by most to least important and wrapped with ```
For example:
```
file1.py
file2.py
```
2024-10-18 13:55:36,264 - INFO - ================================================================================
2024-10-18 13:55:36,317 - INFO - Creating API request
2024-10-18 13:55:37,857 - INFO - API response ChatCompletion(id='chatcmpl-AJoISqTby8kzZBtPy4uGU2zteF49G', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```\ndjango/db/models/query.py\ndjango/db/models/sql/compiler.py\ndjango/db/models/sql/query.py\ndjango/db/models/expressions.py\ndjango/contrib/auth/models.py\n```', refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1729284936, model='gpt-4o-2024-05-13', object='chat.completion', service_tier=None, system_fingerprint='fp_28a34a3a6a', usage=CompletionUsage(completion_tokens=38, prompt_tokens=4902, total_tokens=4940, completion_tokens_details=CompletionTokensDetails(audio_tokens=None, reasoning_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=None, cached_tokens=0)))
2024-10-18 13:55:37,863 - INFO - ```
django/db/models/query.py
django/db/models/sql/compiler.py
django/db/models/sql/query.py
django/db/models/expressions.py
django/contrib/auth/models.py
```
2024-10-18 13:55:39,470 - INFO - prompting with message:

Please look through the following GitHub Problem Description, and the Skeleton of Relevant Files.
Identify all locations that need inspection or editing to fix the problem, including directly related areas as well as any potentially related global variables, functions, and classes.
For each location you provide, either give the name of the class, the name of a method in a class, the name of a function, or the name of a global variable.

### GitHub Problem Description ###
Filtering on query result overrides GROUP BY of internal query
Description
	
from django.contrib.auth import models
a = models.User.objects.filter(email__isnull=True).values('email').annotate(m=Max('id')).values('m')
print(a.query) # good
# SELECT MAX("auth_user"."id") AS "m" FROM "auth_user" WHERE "auth_user"."email" IS NULL GROUP BY "auth_user"."email"
print(a[:1].query) # good
# SELECT MAX("auth_user"."id") AS "m" FROM "auth_user" WHERE "auth_user"."email" IS NULL GROUP BY "auth_user"."email" LIMIT 1
b = models.User.objects.filter(id=a[:1])
print(b.query) # GROUP BY U0."id" should be GROUP BY U0."email"
# SELECT ... FROM "auth_user" WHERE "auth_user"."id" = (SELECT U0."id" FROM "auth_user" U0 WHERE U0."email" IS NULL GROUP BY U0."id" LIMIT 1)


###



### Skeleton of Relevant Files ###

### File: django/db/models/query.py ###
```python

# The maximum number of results to fetch in a get() query.
MAX_GET_RESULTS = 21

# The maximum number of items to display in a QuerySet.__repr__
REPR_OUTPUT_SIZE = 20

# Pull into this namespace for backwards compatibility.
EmptyResultSet = sql.EmptyResultSet


class BaseIterable:
    def __init__(self, queryset, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE):
...

class ModelIterable(BaseIterable):

    def __iter__(self):
...

class ValuesIterable(BaseIterable):

    def __iter__(self):
...

class ValuesListIterable(BaseIterable):

    def __iter__(self):
...

class NamedValuesListIterable(ValuesListIterable):

    @staticmethod
    @lru_cache()
    def create_namedtuple_class(*names):
...
    def __iter__(self):
...

class FlatValuesListIterable(BaseIterable):

    def __iter__(self):
...

class QuerySet:

    def __init__(self, model=None, query=None, using=None, hints=None):
...
    def as_manager(cls):
...
    as_manager.queryset_only = True
    as_manager = classmethod(as_manager)

    ########################
    # PYTHON MAGIC METHODS #
    ########################

    def __deepcopy__(self, memo):
...
    def __getstate__(self):
...
    def __setstate__(self, state):
...
    def __repr__(self):
...
    def __len__(self):
...
    def __iter__(self):
...
    def __bool__(self):
...
    def __getitem__(self, k):
...
    def __and__(self, other):
...
    def __or__(self, other):
...
    ####################################
    # METHODS THAT DO DATABASE QUERIES #
    ####################################

    def _iterator(self, use_chunked_fetch, chunk_size):
...
    def iterator(self, chunk_size=2000):
...
    def aggregate(self, *args, **kwargs):
...
    def count(self):
...
    def get(self, *args, **kwargs):
...
    def create(self, **kwargs):
...
    def _populate_pk_values(self, objs):
...
    def bulk_create(self, objs, batch_size=None, ignore_conflicts=False):
...
    def bulk_update(self, objs, fields, batch_size=None):
...
    bulk_update.alters_data = True

    def get_or_create(self, defaults=None, **kwargs):
...
    def update_or_create(self, defaults=None, **kwargs):
...
    def _create_object_from_params(self, lookup, params, lock=False):
...
    def _extract_model_params(self, defaults, **kwargs):
...
    def _earliest(self, *fields):
...
    def earliest(self, *fields):
...
    def latest(self, *fields):
...
    def first(self):
...
    def last(self):
...
    def in_bulk(self, id_list=None, *, field_name='pk'):
...
    def delete(self):
...
    delete.alters_data = True
    delete.queryset_only = True

    def _raw_delete(self, using):
...
    _raw_delete.alters_data = True

    def update(self, **kwargs):
...
    update.alters_data = True

    def _update(self, values):
...
    _update.alters_data = True
    _update.queryset_only = False

    def exists(self):
...
    def _prefetch_related_objects(self):
...
    def explain(self, *, format=None, **options):
...
    ##################################################
    # PUBLIC METHODS THAT RETURN A QUERYSET SUBCLASS #
    ##################################################

    def raw(self, raw_query, params=None, translations=None, using=None):
...
    def _values(self, *fields, **expressions):
...
    def values(self, *fields, **expressions):
...
    def values_list(self, *fields, flat=False, named=False):
...
    def dates(self, field_name, kind, order='ASC'):
...
    def datetimes(self, field_name, kind, order='ASC', tzinfo=None):
...
    def none(self):
...
    ##################################################################
    # PUBLIC METHODS THAT ALTER ATTRIBUTES AND RETURN A NEW QUERYSET #
    ##################################################################

    def all(self):
...
    def filter(self, *args, **kwargs):
...
    def exclude(self, *args, **kwargs):
...
    def _filter_or_exclude(self, negate, *args, **kwargs):
...
    def complex_filter(self, filter_obj):
...
    def _combinator_query(self, combinator, *other_qs, all=False):
...
    def union(self, *other_qs, all=False):
...
    def intersection(self, *other_qs):
...
    def difference(self, *other_qs):
...
    def select_for_update(self, nowait=False, skip_locked=False, of=()):
...
    def select_related(self, *fields):
...
    def prefetch_related(self, *lookups):
...
    def annotate(self, *args, **kwargs):
...
    def order_by(self, *field_names):
...
    def distinct(self, *field_names):
...
    def extra(self, select=None, where=None, params=None, tables=None,
              order_by=None, select_params=None):
...
    def reverse(self):
...
    def defer(self, *fields):
...
    def only(self, *fields):
...
    def using(self, alias):
...
    ###################################
    # PUBLIC INTROSPECTION ATTRIBUTES #
    ###################################

    @property
    def ordered(self):
...
    @property
    def db(self):
...
    ###################
    # PRIVATE METHODS #
    ###################

    def _insert(self, objs, fields, returning_fields=None, raw=False, using=None, ignore_conflicts=False):
...
    _insert.alters_data = True
    _insert.queryset_only = False

    def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):
...
    def _chain(self, **kwargs):
...
    def _clone(self):
...
    def _fetch_all(self):
...
    def _next_is_sticky(self):
...
    def _merge_sanity_check(self, other):
...
    def _merge_known_related_objects(self, other):
...
    def resolve_expression(self, *args, **kwargs):
...
    resolve_expression.queryset_only = True

    def _add_hints(self, **hints):
...
    def _has_filters(self):
...
    @staticmethod
    def _validate_values_are_expressions(values, method_name):
...
    def _not_support_combined_queries(self, operation_name):
...

class InstanceCheckMeta(type):
    def __instancecheck__(self, instance):
...

class EmptyQuerySet(metaclass=InstanceCheckMeta):

    def __init__(self, *args, **kwargs):
...

class RawQuerySet:
    def __init__(self, raw_query, model=None, query=None, params=None,
                 translations=None, using=None, hints=None):
...
    def resolve_model_init_order(self):
...
    def prefetch_related(self, *lookups):
...
    def _prefetch_related_objects(self):
...
    def _clone(self):
...
    def _fetch_all(self):
...
    def __len__(self):
...
    def __bool__(self):
...
    def __iter__(self):
...
    def iterator(self):
...
    def __repr__(self):
...
    def __getitem__(self, k):
...
    @property
    def db(self):
...
    def using(self, alias):
...
    @cached_property
    def columns(self):
...
    @cached_property
    def model_fields(self):
...

class Prefetch:
    def __init__(self, lookup, queryset=None, to_attr=None):
...
    def __getstate__(self):
...
    def add_prefix(self, prefix):
...
    def get_current_prefetch_to(self, level):
...
    def get_current_to_attr(self, level):
...
    def get_current_queryset(self, level):
...
    def __eq__(self, other):
...
    def __hash__(self):
...

def normalize_prefetch_lookups(lookups, prefix=None):
...

def prefetch_related_objects(model_instances, *related_lookups):
...

def get_prefetcher(instance, through_attr, to_attr):
...

def prefetch_one_level(instances, prefetcher, lookup, level):
...

class RelatedPopulator:
    def __init__(self, klass_info, select, db):
...
    def populate(self, row, from_obj):
...

def get_related_populators(klass_info, select, db):

```

### File: django/db/models/sql/compiler.py ###
```python


class SQLCompiler:
    def __init__(self, query, connection, using):
...
    def setup_query(self):
...
    def pre_sql_setup(self):
...
    def get_group_by(self, select, order_by):
...
    def collapse_group_by(self, expressions, having):
...
    def get_select(self):
...
    def get_order_by(self):
...
    def get_extra_select(self, order_by, select):
...
    def quote_name_unless_alias(self, name):
...
    def compile(self, node):
...
    def get_combinator_sql(self, combinator, all):
...
    def as_sql(self, with_limits=True, with_col_aliases=False):
...
    def get_default_columns(self, start_alias=None, opts=None, from_parent=None):
...
    def get_distinct(self):
...
    def find_ordering_name(self, name, opts, alias=None, default_order='ASC',
                           already_seen=None):
...
    def _setup_joins(self, pieces, opts, alias):
...
    def get_from_clause(self):
...
    def get_related_selections(self, select, opts=None, root_alias=None, cur_depth=1,
                               requested=None, restricted=None):
...
    def get_select_for_update_of_arguments(self):
...
    def deferred_to_columns(self):
...
    def get_converters(self, expressions):
...
    def apply_converters(self, rows, converters):
...
    def results_iter(self, results=None, tuple_expected=False, chunked_fetch=False,
                     chunk_size=GET_ITERATOR_CHUNK_SIZE):
...
    def has_results(self):
...
    def execute_sql(self, result_type=MULTI, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE):
...
    def as_subquery_condition(self, alias, columns, compiler):
...
    def explain_query(self):
...

class SQLInsertCompiler(SQLCompiler):
    returning_fields = None

    def field_as_sql(self, field, val):
...
    def prepare_value(self, field, value):
...
    def pre_save_val(self, field, obj):
...
    def assemble_as_sql(self, fields, value_rows):
...
    def as_sql(self):
...
    def execute_sql(self, returning_fields=None):
...

class SQLDeleteCompiler(SQLCompiler):
    def as_sql(self):
...

class SQLUpdateCompiler(SQLCompiler):
    def as_sql(self):
...
    def execute_sql(self, result_type):
...
    def pre_sql_setup(self):
...

class SQLAggregateCompiler(SQLCompiler):
    def as_sql(self):
...

def cursor_iter(cursor, sentinel, col_count, itersize):

```

### File: django/db/models/sql/query.py ###
```python

__all__ = ['Query', 'RawQuery']


def get_field_names_from_opts(opts):
...

def get_children_from_q(q):
...

JoinInfo = namedtuple(
    'JoinInfo',
    ('final_field', 'targets', 'opts', 'joins', 'path', 'transform_function')
)


def _get_col(target, field, alias, simple_col):
...

class RawQuery:

    def __init__(self, sql, using, params=None):
...
    def chain(self, using):
...
    def clone(self, using):
...
    def get_columns(self):
...
    def __iter__(self):
...
    def __repr__(self):
...
    @property
    def params_type(self):
...
    def __str__(self):
...
    def _execute_query(self):
...

class Query(BaseExpression):

    alias_prefix = 'T'
    subq_aliases = frozenset([alias_prefix])

    compiler = 'SQLCompiler'

    def __init__(self, model, where=WhereNode):
...
    @property
    def output_field(self):
...
    @property
    def has_select_fields(self):
...
    @cached_property
    def base_table(self):
...
    def __str__(self):
...
    def sql_with_params(self):
...
    def __deepcopy__(self, memo):
...
    def get_compiler(self, using=None, connection=None):
...
    def get_meta(self):
...
    def clone(self):
...
    def chain(self, klass=None):
...
    def relabeled_clone(self, change_map):
...
    def rewrite_cols(self, annotation, col_cnt):
...
    def get_aggregation(self, using, added_aggregate_names):
...
    def get_count(self, using):
...
    def has_filters(self):
...
    def has_results(self, using):
...
    def explain(self, using, format=None, **options):
...
    def combine(self, rhs, connector):
...
    def deferred_to_data(self, target, callback):
...
    def table_alias(self, table_name, create=False, filtered_relation=None):
...
    def ref_alias(self, alias):
...
    def unref_alias(self, alias, amount=1):
...
    def promote_joins(self, aliases):
...
    def demote_joins(self, aliases):
...
    def reset_refcounts(self, to_counts):
...
    def change_aliases(self, change_map):
...
    def bump_prefix(self, outer_query):
...
    def get_initial_alias(self):
...
    def count_active_tables(self):
...
    def join(self, join, reuse=None, reuse_with_filtered_relation=False):
...
    def join_parent_model(self, opts, model, alias, seen):
...
    def add_annotation(self, annotation, alias, is_summary=False):
...
    def resolve_expression(self, query, *args, **kwargs):
...
    def as_sql(self, compiler, connection):
...
    def resolve_lookup_value(self, value, can_reuse, allow_joins, simple_col):
...
    def solve_lookup_type(self, lookup):
...
    def check_query_object_type(self, value, opts, field):
...
    def check_related_objects(self, field, value, opts):
...
    def check_filterable(self, expression):
...
    def build_lookup(self, lookups, lhs, rhs):
...
    def try_transform(self, lhs, name):
...
    def build_filter(self, filter_expr, branch_negated=False, current_negated=False,
                     can_reuse=None, allow_joins=True, split_subq=True,
                     reuse_with_filtered_relation=False, simple_col=False):
...
    def add_filter(self, filter_clause):
...
    def add_q(self, q_object):
...
    def build_where(self, q_object):
...
    def _add_q(self, q_object, used_aliases, branch_negated=False,
               current_negated=False, allow_joins=True, split_subq=True,
               simple_col=False):
...
    def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, current_negated=False):
...
    def add_filtered_relation(self, filtered_relation, alias):
...
    def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
...
    def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True,
                    reuse_with_filtered_relation=False):
...
    def trim_joins(self, targets, joins, path):
...
    @classmethod
    def _gen_col_aliases(cls, exprs):
...
    def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False, simple_col=False):
...
    def split_exclude(self, filter_expr, can_reuse, names_with_path):
...
    def set_empty(self):
...
    def is_empty(self):
...
    def set_limits(self, low=None, high=None):
...
    def clear_limits(self):
...
    @property
    def is_sliced(self):
...
    def has_limit_one(self):
...
    def can_filter(self):
...
    def clear_select_clause(self):
...
    def clear_select_fields(self):
...
    def add_select_col(self, col):
...
    def set_select(self, cols):
...
    def add_distinct_fields(self, *field_names):
...
    def add_fields(self, field_names, allow_m2m=True):
...
    def add_ordering(self, *ordering):
...
    def clear_ordering(self, force_empty):
...
    def set_group_by(self):
...
    def add_select_related(self, fields):
...
    def add_extra(self, select, select_params, where, params, tables, order_by):
...
    def clear_deferred_loading(self):
...
    def add_deferred_loading(self, field_names):
...
    def add_immediate_loading(self, field_names):
...
    def get_loaded_field_names(self):
...
    def get_loaded_field_names_cb(self, target, model, fields):
...
    def set_annotation_mask(self, names):
...
    def append_annotation_mask(self, names):
...
    def set_extra_mask(self, names):
...
    def set_values(self, fields):
...
    @property
    def annotation_select(self):
...
    @property
    def extra_select(self):
...
    def trim_start(self, names_with_path):
...
    def is_nullable(self, field):
...

def get_order_dir(field, default='ASC'):
...

def add_to_dict(data, key, value):
...

def is_reverse_o2o(field):
...

class JoinPromoter:

    def __init__(self, connector, num_children, negated):
...
    def add_votes(self, votes):
...
    def update_join_types(self, query):

```


###

Please provide the complete set of locations as either a class name, a function name, or a variable name.
Note that if you include a class, you do not need to list its specific methods.
You can include either the entire class or don't include the class name and instead include specific methods in the class.
### Examples:
```
full_path1/file1.py
function: my_function_1
class: MyClass1
function: MyClass2.my_method

full_path2/file2.py
variable: my_var
function: MyClass3.my_method

full_path3/file3.py
function: my_function_2
function: my_function_3
function: MyClass4.my_method_1
class: MyClass5
```

Return just the locations.

2024-10-18 13:55:39,470 - INFO - ================================================================================
2024-10-18 13:55:39,520 - INFO - Creating API request
2024-10-18 13:55:41,368 - INFO - API response ChatCompletion(id='chatcmpl-AJoIVWvSfEsT1k7EDTlVV1piEsqn4', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```\ndjango/db/models/query.py\nclass: QuerySet\nfunction: QuerySet.filter\nfunction: QuerySet._filter_or_exclude\nfunction: QuerySet.__getitem__\n\ndjango/db/models/sql/compiler.py\nclass: SQLCompiler\nfunction: SQLCompiler.as_sql\nfunction: SQLCompiler.as_subquery_condition\n\ndjango/db/models/sql/query.py\nclass: Query\nfunction: Query.add_filter\nfunction: Query.add_q\nfunction: Query.build_filter\nfunction: Query.build_where\nfunction: Query._add_q\nfunction: Query.set_group_by\n```', refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1729284939, model='gpt-4o-2024-05-13', object='chat.completion', service_tier=None, system_fingerprint='fp_568f3bfff7', usage=CompletionUsage(completion_tokens=114, prompt_tokens=4180, total_tokens=4294, completion_tokens_details=CompletionTokensDetails(audio_tokens=None, reasoning_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=None, cached_tokens=0)))
2024-10-18 13:55:41,368 - INFO - ==== raw output ====
2024-10-18 13:55:41,368 - INFO - ```
django/db/models/query.py
class: QuerySet
function: QuerySet.filter
function: QuerySet._filter_or_exclude
function: QuerySet.__getitem__

django/db/models/sql/compiler.py
class: SQLCompiler
function: SQLCompiler.as_sql
function: SQLCompiler.as_subquery_condition

django/db/models/sql/query.py
class: Query
function: Query.add_filter
function: Query.add_q
function: Query.build_filter
function: Query.build_where
function: Query._add_q
function: Query.set_group_by
```
2024-10-18 13:55:41,368 - INFO - ================================================================================
2024-10-18 13:55:41,368 - INFO - ==== extracted locs ====
2024-10-18 13:55:41,368 - INFO - ['class: QuerySet\nfunction: QuerySet.filter\nfunction: QuerySet._filter_or_exclude\nfunction: QuerySet.__getitem__']
2024-10-18 13:55:41,368 - INFO - ['class: SQLCompiler\nfunction: SQLCompiler.as_sql\nfunction: SQLCompiler.as_subquery_condition']
2024-10-18 13:55:41,368 - INFO - ['class: Query\nfunction: Query.add_filter\nfunction: Query.add_q\nfunction: Query.build_filter\nfunction: Query.build_where\nfunction: Query._add_q\nfunction: Query.set_group_by']
2024-10-18 13:55:41,368 - INFO - ================================================================================
2024-10-18 13:55:44,207 - INFO - prompting with message:

Please review the following GitHub problem description, and relevant files, and provide a set of locations that need to be edited to fix the issue.
The locations can be specified as class names, function or method names, or exact line numbers that require modification.

### GitHub Problem Description ###
Filtering on query result overrides GROUP BY of internal query
Description
	
from django.contrib.auth import models
a = models.User.objects.filter(email__isnull=True).values('email').annotate(m=Max('id')).values('m')
print(a.query) # good
# SELECT MAX("auth_user"."id") AS "m" FROM "auth_user" WHERE "auth_user"."email" IS NULL GROUP BY "auth_user"."email"
print(a[:1].query) # good
# SELECT MAX("auth_user"."id") AS "m" FROM "auth_user" WHERE "auth_user"."email" IS NULL GROUP BY "auth_user"."email" LIMIT 1
b = models.User.objects.filter(id=a[:1])
print(b.query) # GROUP BY U0."id" should be GROUP BY U0."email"
# SELECT ... FROM "auth_user" WHERE "auth_user"."id" = (SELECT U0."id" FROM "auth_user" U0 WHERE U0."email" IS NULL GROUP BY U0."id" LIMIT 1)


###



### django/db/models/query.py
...
178|    values.
179|    """
180|
181|    def __iter__(self):
182|        queryset = self.queryset
183|        compiler = queryset.query.get_compiler(queryset.db)
184|        for row in compiler.results_iter(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size):
185|            yield row[0]
186|
187|
188|class QuerySet:
189|    """Represent a lazy database lookup for a set of objects."""
190|
191|    def __init__(self, model=None, query=None, using=None, hints=None):
192|        self.model = model
193|        self._db = using
194|        self._hints = hints or {}
195|        self.query = query or sql.Query(self.model)
196|        self._result_cache = None
197|        self._sticky_filter = False
198|        self._for_write = False
199|        self._prefetch_related_lookups = ()
200|        self._prefetch_done = False
201|        self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
202|        self._iterable_class = ModelIterable
203|        self._fields = None
204|
205|    def as_manager(cls):
206|        # Address the circular dependency between `Queryset` and `Manager`.
207|        from django.db.models.manager import Manager
208|        manager = Manager.from_queryset(cls)()
209|        manager._built_with_as_manager = True
210|        return manager
211|    as_manager.queryset_only = True
212|    as_manager = classmethod(as_manager)
213|
214|    ########################
215|    # PYTHON MAGIC METHODS #
216|    ########################
217|
218|    def __deepcopy__(self, memo):
219|        """Don't populate the QuerySet's cache."""
220|        obj = self.__class__()
221|        for k, v in self.__dict__.items():
222|            if k == '_result_cache':
223|                obj.__dict__[k] = None
224|            else:
225|                obj.__dict__[k] = copy.deepcopy(v, memo)
226|        return obj
227|
228|    def __getstate__(self):
229|        # Force the cache to be fully populated.
230|        self._fetch_all()
231|        return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: get_version()}
232|
233|    def __setstate__(self, state):
234|        msg = None
235|        pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)
236|        if pickled_version:
237|            current_version = get_version()
238|            if current_version != pickled_version:
239|                msg = (
240|                    "Pickled queryset instance's Django version %s does not "
241|                    "match the current version %s." % (pickled_version, current_version)
242|                )
243|        else:
244|            msg = "Pickled queryset instance's Django version is not specified."
245|
246|        if msg:
247|            warnings.warn(msg, RuntimeWarning, stacklevel=2)
248|
249|        self.__dict__.update(state)
250|
251|    def __repr__(self):
252|        data = list(self[:REPR_OUTPUT_SIZE + 1])
253|        if len(data) > REPR_OUTPUT_SIZE:
254|            data[-1] = "...(remaining elements truncated)..."
255|        return '<%s %r>' % (self.__class__.__name__, data)
256|
257|    def __len__(self):
258|        self._fetch_all()
259|        return len(self._result_cache)
260|
261|    def __iter__(self):
262|        """
263|        The queryset iterator protocol uses three nested iterators in the
264|        default case:
265|            1. sql.compiler.execute_sql()
266|               - Returns 100 rows at time (constants.GET_ITERATOR_CHUNK_SIZE)
267|                 using cursor.fetchmany(). This part is responsible for
268|                 doing some column masking, and returning the rows in chunks.
269|            2. sql.compiler.results_iter()
270|               - Returns one row at time. At this point the rows are still just
271|                 tuples. In some cases the return values are converted to
272|                 Python values at this location.
273|            3. self.iterator()
274|               - Responsible for turning the rows into model objects.
275|        """
276|        self._fetch_all()
277|        return iter(self._result_cache)
278|
279|    def __bool__(self):
280|        self._fetch_all()
281|        return bool(self._result_cache)
282|
283|    def __getitem__(self, k):
284|        """Retrieve an item or slice from the set of results."""
285|        if not isinstance(k, (int, slice)):
286|            raise TypeError(
287|                'QuerySet indices must be integers or slices, not %s.'
288|                % type(k).__name__
289|            )
290|        assert ((not isinstance(k, slice) and (k >= 0)) or
291|                (isinstance(k, slice) and (k.start is None or k.start >= 0) and
292|                 (k.stop is None or k.stop >= 0))), \
293|            "Negative indexing is not supported."
294|
295|        if self._result_cache is not None:
296|            return self._result_cache[k]
297|
298|        if isinstance(k, slice):
299|            qs = self._chain()
300|            if k.start is not None:
301|                start = int(k.start)
302|            else:
303|                start = None
304|            if k.stop is not None:
305|                stop = int(k.stop)
306|            else:
307|                stop = None
308|            qs.query.set_limits(start, stop)
309|            return list(qs)[::k.step] if k.step else qs
310|
311|        qs = self._chain()
312|        qs.query.set_limits(k, k + 1)
313|        qs._fetch_all()
314|        return qs._result_cache[0]
315|
316|    def __and__(self, other):
317|        self._merge_sanity_check(other)
318|        if isinstance(other, EmptyQuerySet):
319|            return other
320|        if isinstance(self, EmptyQuerySet):
321|            return self
322|        combined = self._chain()
323|        combined._merge_known_related_objects(other)
324|        combined.query.combine(other.query, sql.AND)
325|        return combined
326|
327|    def __or__(self, other):
328|        self._merge_sanity_check(other)
329|        if isinstance(self, EmptyQuerySet):
330|            return other
331|        if isinstance(other, EmptyQuerySet):
332|            return self
333|        query = self if self.query.can_filter() else self.model._base_manager.filter(pk__in=self.values('pk'))
334|        combined = query._chain()
335|        combined._merge_known_related_objects(other)
336|        if not other.query.can_filter():
337|            other = other.model._base_manager.filter(pk__in=other.values('pk'))
338|        combined.query.combine(other.query, sql.OR)
339|        return combined
340|
341|    ####################################
342|    # METHODS THAT DO DATABASE QUERIES #
343|    ####################################
344|
345|    def _iterator(self, use_chunked_fetch, chunk_size):
346|        yield from self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size)
347|
348|    def iterator(self, chunk_size=2000):
349|        """
350|        An iterator over the results from applying this QuerySet to the
351|        database.
352|        """
353|        if chunk_size <= 0:
354|            raise ValueError('Chunk size must be strictly positive.')
355|        use_chunked_fetch = not connections[self.db].settings_dict.get('DISABLE_SERVER_SIDE_CURSORS')
356|        return self._iterator(use_chunked_fetch, chunk_size)
357|
358|    def aggregate(self, *args, **kwargs):
359|        """
360|        Return a dictionary containing the calculations (aggregation)
361|        over the current queryset.
362|
363|        If args is present the expression is passed as a kwarg using
364|        the Aggregate object's default alias.
365|        """
366|        if self.query.distinct_fields:
367|            raise NotImplementedError("aggregate() + distinct(fields) not implemented.")
368|        self._validate_values_are_expressions((*args, *kwargs.values()), method_name='aggregate')
369|        for arg in args:
370|            # The default_alias property raises TypeError if default_alias
371|            # can't be set automatically or AttributeError if it isn't an
372|            # attribute.
373|            try:
374|                arg.default_alias
375|            except (AttributeError, TypeError):
376|                raise TypeError("Complex aggregates require an alias")
377|            kwargs[arg.default_alias] = arg
378|
379|        query = self.query.chain()
380|        for (alias, aggregate_expr) in kwargs.items():
381|            query.add_annotation(aggregate_expr, alias, is_summary=True)
382|            if not query.annotations[alias].contains_aggregate:
383|                raise TypeError("%s is not an aggregate expression" % alias)
384|        return query.get_aggregation(self.db, kwargs)
385|
386|    def count(self):
387|        """
388|        Perform a SELECT COUNT() and return the number of records as an
389|        integer.
390|
391|        If the QuerySet is already fully cached, return the length of the
392|        cached results set to avoid multiple SELECT COUNT(*) calls.
393|        """
394|        if self._result_cache is not None:
395|            return len(self._result_cache)
396|
397|        return self.query.get_count(using=self.db)
398|
399|    def get(self, *args, **kwargs):
400|        """
401|        Perform the query and return a single object matching the given
402|        keyword arguments.
403|        """
404|        clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)
405|        if self.query.can_filter() and not self.query.distinct_fields:
406|            clone = clone.order_by()
407|        limit = None
408|        if not clone.query.select_for_update or connections[clone.db].features.supports_select_for_update_with_limit:
409|            limit = MAX_GET_RESULTS
410|            clone.query.set_limits(high=limit)
411|        num = len(clone)
412|        if num == 1:
413|            return clone._result_cache[0]
414|        if not num:
415|            raise self.model.DoesNotExist(
416|                "%s matching query does not exist." %
417|                self.model._meta.object_name
418|            )
419|        raise self.model.MultipleObjectsReturned(
420|            'get() returned more than one %s -- it returned %s!' % (
421|                self.model._meta.object_name,
422|                num if not limit or num < limit else 'more than %s' % (limit - 1),
423|            )
424|        )
425|
426|    def create(self, **kwargs):
427|        """
428|        Create a new object with the given kwargs, saving it to the database
429|        and returning the created object.
430|        """
431|        obj = self.model(**kwargs)
432|        self._for_write = True
433|        obj.save(force_insert=True, using=self.db)
434|        return obj
435|
436|    def _populate_pk_values(self, objs):
437|        for obj in objs:
438|            if obj.pk is None:
439|                obj.pk = obj._meta.pk.get_pk_value_on_save(obj)
440|
441|    def bulk_create(self, objs, batch_size=None, ignore_conflicts=False):
442|        """
443|        Insert each of the instances into the database. Do *not* call
444|        save() on each of the instances, do not send any pre/post_save
445|        signals, and do not set the primary key attribute if it is an
446|        autoincrement field (except if features.can_return_rows_from_bulk_insert=True).
447|        Multi-table models are not supported.
448|        """
449|        # When you bulk insert you don't get the primary keys back (if it's an
450|        # autoincrement, except if can_return_rows_from_bulk_insert=True), so
451|        # you can't insert into the child tables which references this. There
452|        # are two workarounds:
453|        # 1) This could be implemented if you didn't have an autoincrement pk
454|        # 2) You could do it by doing O(n) normal inserts into the parent
455|        #    tables to get the primary keys back and then doing a single bulk
456|        #    insert into the childmost table.
457|        # We currently set the primary keys on the objects when using
458|        # PostgreSQL via the RETURNING ID clause. It should be possible for
459|        # Oracle as well, but the semantics for extracting the primary keys is
460|        # trickier so it's not done yet.
461|        assert batch_size is None or batch_size > 0
462|        # Check that the parents share the same concrete model with the our
463|        # model to detect the inheritance pattern ConcreteGrandParent ->
464|        # MultiTableParent -> ProxyChild. Simply checking self.model._meta.proxy
465|        # would not identify that case as involving multiple tables.
466|        for parent in self.model._meta.get_parent_list():
467|            if parent._meta.concrete_model is not self.model._meta.concrete_model:
468|                raise ValueError("Can't bulk create a multi-table inherited model")
469|        if not objs:
470|            return objs
471|        self._for_write = True
472|        connection = connections[self.db]
473|        opts = self.model._meta
474|        fields = opts.concrete_fields
475|        objs = list(objs)
476|        self._populate_pk_values(objs)
477|        with transaction.atomic(using=self.db, savepoint=False):
478|            objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)
479|            if objs_with_pk:
480|                returned_columns = self._batched_insert(
481|                    objs_with_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
482|                )
483|                for obj_with_pk, results in zip(objs_with_pk, returned_columns):
484|                    for result, field in zip(results, opts.db_returning_fields):
485|                        if field != opts.pk:
486|                            setattr(obj_with_pk, field.attname, result)
487|                for obj_with_pk in objs_with_pk:
488|                    obj_with_pk._state.adding = False
489|                    obj_with_pk._state.db = self.db
490|            if objs_without_pk:
491|                fields = [f for f in fields if not isinstance(f, AutoField)]
492|                returned_columns = self._batched_insert(
493|                    objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
494|                )
495|                if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:
496|                    assert len(returned_columns) == len(objs_without_pk)
497|                for obj_without_pk, results in zip(objs_without_pk, returned_columns):
498|                    for result, field in zip(results, opts.db_returning_fields):
499|                        setattr(obj_without_pk, field.attname, result)
500|                    obj_without_pk._state.adding = False
501|                    obj_without_pk._state.db = self.db
502|
503|        return objs
504|
505|    def bulk_update(self, objs, fields, batch_size=None):
506|        """
507|        Update the given fields in each of the given objects in the database.
508|        """
509|        if batch_size is not None and batch_size < 0:
510|            raise ValueError('Batch size must be a positive integer.')
511|        if not fields:
512|            raise ValueError('Field names must be given to bulk_update().')
513|        objs = tuple(objs)
514|        if any(obj.pk is None for obj in objs):
515|            raise ValueError('All bulk_update() objects must have a primary key set.')
516|        fields = [self.model._meta.get_field(name) for name in fields]
517|        if any(not f.concrete or f.many_to_many for f in fields):
518|            raise ValueError('bulk_update() can only be used with concrete fields.')
519|        if any(f.primary_key for f in fields):
520|            raise ValueError('bulk_update() cannot be used with primary key fields.')
521|        if not objs:
522|            return
523|        # PK is used twice in the resulting update query, once in the filter
524|        # and once in the WHEN. Each field will also have one CAST.
525|        max_batch_size = connections[self.db].ops.bulk_batch_size(['pk', 'pk'] + fields, objs)
526|        batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
527|        requires_casting = connections[self.db].features.requires_casted_case_in_updates
528|        batches = (objs[i:i + batch_size] for i in range(0, len(objs), batch_size))
529|        updates = []
530|        for batch_objs in batches:
531|            update_kwargs = {}
532|            for field in fields:
533|                when_statements = []
534|                for obj in batch_objs:
535|                    attr = getattr(obj, field.attname)
536|                    if not isinstance(attr, Expression):
537|                        attr = Value(attr, output_field=field)
538|                    when_statements.append(When(pk=obj.pk, then=attr))
539|                case_statement = Case(*when_statements, output_field=field)
540|                if requires_casting:
541|                    case_statement = Cast(case_statement, output_field=field)
542|                update_kwargs[field.attname] = case_statement
543|            updates.append(([obj.pk for obj in batch_objs], update_kwargs))
544|        with transaction.atomic(using=self.db, savepoint=False):
545|            for pks, update_kwargs in updates:
546|                self.filter(pk__in=pks).update(**update_kwargs)
547|    bulk_update.alters_data = True
548|
549|    def get_or_create(self, defaults=None, **kwargs):
550|        """
551|        Look up an object with the given kwargs, creating one if necessary.
552|        Return a tuple of (object, created), where created is a boolean
553|        specifying whether an object was created.
554|        """
555|        # The get() needs to be targeted at the write database in order
556|        # to avoid potential transaction consistency problems.
557|        self._for_write = True
558|        try:
559|            return self.get(**kwargs), False
560|        except self.model.DoesNotExist:
561|            params = self._extract_model_params(defaults, **kwargs)
562|            return self._create_object_from_params(kwargs, params)
563|
564|    def update_or_create(self, defaults=None, **kwargs):
565|        """
566|        Look up an object with the given kwargs, updating one with defaults
567|        if it exists, otherwise create a new one.
568|        Return a tuple (object, created), where created is a boolean
569|        specifying whether an object was created.
570|        """
571|        defaults = defaults or {}
572|        self._for_write = True
573|        with transaction.atomic(using=self.db):
574|            try:
575|                obj = self.select_for_update().get(**kwargs)
576|            except self.model.DoesNotExist:
577|                params = self._extract_model_params(defaults, **kwargs)
578|                # Lock the row so that a concurrent update is blocked until
579|                # after update_or_create() has performed its save.
580|                obj, created = self._create_object_from_params(kwargs, params, lock=True)
581|                if created:
582|                    return obj, created
583|            for k, v in defaults.items():
584|                setattr(obj, k, v() if callable(v) else v)
585|            obj.save(using=self.db)
586|        return obj, False
587|
588|    def _create_object_from_params(self, lookup, params, lock=False):
589|        """
590|        Try to create an object using passed params. Used by get_or_create()
591|        and update_or_create().
592|        """
593|        try:
594|            with transaction.atomic(using=self.db):
595|                params = {k: v() if callable(v) else v for k, v in params.items()}
596|                obj = self.create(**params)
597|            return obj, True
598|        except IntegrityError as e:
599|            try:
600|                qs = self.select_for_update() if lock else self
601|                return qs.get(**lookup), False
602|            except self.model.DoesNotExist:
603|                pass
604|            raise e
605|
606|    def _extract_model_params(self, defaults, **kwargs):
607|        """
608|        Prepare `params` for creating a model instance based on the given
609|        kwargs; for use by get_or_create() and update_or_create().
610|        """
611|        defaults = defaults or {}
612|        params = {k: v for k, v in kwargs.items() if LOOKUP_SEP not in k}
613|        params.update(defaults)
614|        property_names = self.model._meta._property_names
615|        invalid_params = []
616|        for param in params:
617|            try:
618|                self.model._meta.get_field(param)
619|            except exceptions.FieldDoesNotExist:
620|                # It's okay to use a model's property if it has a setter.
621|                if not (param in property_names and getattr(self.model, param).fset):
622|                    invalid_params.append(param)
623|        if invalid_params:
624|            raise exceptions.FieldError(
625|                "Invalid field name(s) for model %s: '%s'." % (
626|                    self.model._meta.object_name,
627|                    "', '".join(sorted(invalid_params)),
628|                ))
629|        return params
630|
631|    def _earliest(self, *fields):
632|        """
633|        Return the earliest object according to fields (if given) or by the
634|        model's Meta.get_latest_by.
635|        """
636|        if fields:
637|            order_by = fields
638|        else:
639|            order_by = getattr(self.model._meta, 'get_latest_by')
640|            if order_by and not isinstance(order_by, (tuple, list)):
641|                order_by = (order_by,)
642|        if order_by is None:
643|            raise ValueError(
644|                "earliest() and latest() require either fields as positional "
645|                "arguments or 'get_latest_by' in the model's Meta."
646|            )
647|
648|        assert not self.query.is_sliced, \
649|            "Cannot change a query once a slice has been taken."
650|        obj = self._chain()
651|        obj.query.set_limits(high=1)
652|        obj.query.clear_ordering(force_empty=True)
653|        obj.query.add_ordering(*order_by)
654|        return obj.get()
655|
656|    def earliest(self, *fields):
657|        return self._earliest(*fields)
658|
659|    def latest(self, *fields):
660|        return self.reverse()._earliest(*fields)
661|
662|    def first(self):
663|        """Return the first object of a query or None if no match is found."""
664|        for obj in (self if self.ordered else self.order_by('pk'))[:1]:
665|            return obj
666|
667|    def last(self):
668|        """Return the last object of a query or None if no match is found."""
669|        for obj in (self.reverse() if self.ordered else self.order_by('-pk'))[:1]:
670|            return obj
671|
672|    def in_bulk(self, id_list=None, *, field_name='pk'):
673|        """
674|        Return a dictionary mapping each of the given IDs to the object with
675|        that ID. If `id_list` isn't provided, evaluate the entire QuerySet.
676|        """
677|        assert not self.query.is_sliced, \
678|            "Cannot use 'limit' or 'offset' with in_bulk"
679|        if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:
680|            raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
681|        if id_list is not None:
682|            if not id_list:
683|                return {}
684|            filter_key = '{}__in'.format(field_name)
685|            batch_size = connections[self.db].features.max_query_params
686|            id_list = tuple(id_list)
687|            # If the database has a limit on the number of query parameters
688|            # (e.g. SQLite), retrieve objects in batches if necessary.
689|            if batch_size and batch_size < len(id_list):
690|                qs = ()
691|                for offset in range(0, len(id_list), batch_size):
692|                    batch = id_list[offset:offset + batch_size]
693|                    qs += tuple(self.filter(**{filter_key: batch}).order_by())
694|            else:
695|                qs = self.filter(**{filter_key: id_list}).order_by()
696|        else:
697|            qs = self._chain()
698|        return {getattr(obj, field_name): obj for obj in qs}
699|
700|    def delete(self):
701|        """Delete the records in the current QuerySet."""
702|        assert not self.query.is_sliced, \
703|            "Cannot use 'limit' or 'offset' with delete."
704|
705|        if self._fields is not None:
706|            raise TypeError("Cannot call delete() after .values() or .values_list()")
707|
708|        del_query = self._chain()
709|
710|        # The delete is actually 2 queries - one to find related objects,
711|        # and one to delete. Make sure that the discovery of related
712|        # objects is performed on the same database as the deletion.
713|        del_query._for_write = True
714|
715|        # Disable non-supported fields.
716|        del_query.query.select_for_update = False
717|        del_query.query.select_related = False
718|        del_query.query.clear_ordering(force_empty=True)
719|
720|        collector = Collector(using=del_query.db)
721|        collector.collect(del_query)
722|        deleted, _rows_count = collector.delete()
723|
724|        # Clear the result cache, in case this QuerySet gets reused.
725|        self._result_cache = None
726|        return deleted, _rows_count
727|
728|    delete.alters_data = True
729|    delete.queryset_only = True
730|
731|    def _raw_delete(self, using):
732|        """
733|        Delete objects found from the given queryset in single direct SQL
734|        query. No signals are sent and there is no protection for cascades.
735|        """
736|        return sql.DeleteQuery(self.model).delete_qs(self, using)
737|    _raw_delete.alters_data = True
738|
739|    def update(self, **kwargs):
740|        """
741|        Update all elements in the current QuerySet, setting all the given
742|        fields to the appropriate values.
743|        """
744|        assert not self.query.is_sliced, \
745|            "Cannot update a query once a slice has been taken."
746|        self._for_write = True
747|        query = self.query.chain(sql.UpdateQuery)
748|        query.add_update_values(kwargs)
749|        # Clear any annotations so that they won't be present in subqueries.
750|        query.annotations = {}
751|        with transaction.mark_for_rollback_on_error(using=self.db):
752|            rows = query.get_compiler(self.db).execute_sql(CURSOR)
753|        self._result_cache = None
754|        return rows
755|    update.alters_data = True
756|
757|    def _update(self, values):
758|        """
759|        A version of update() that accepts field objects instead of field names.
760|        Used primarily for model saving and not intended for use by general
761|        code (it requires too much poking around at model internals to be
762|        useful at that level).
763|        """
764|        assert not self.query.is_sliced, \
765|            "Cannot update a query once a slice has been taken."
766|        query = self.query.chain(sql.UpdateQuery)
767|        query.add_update_fields(values)
768|        # Clear any annotations so that they won't be present in subqueries.
769|        query.annotations = {}
770|        self._result_cache = None
771|        return query.get_compiler(self.db).execute_sql(CURSOR)
772|    _update.alters_data = True
773|    _update.queryset_only = False
774|
775|    def exists(self):
776|        if self._result_cache is None:
777|            return self.query.has_results(using=self.db)
778|        return bool(self._result_cache)
779|
780|    def _prefetch_related_objects(self):
781|        # This method can only be called once the result cache has been filled.
782|        prefetch_related_objects(self._result_cache, *self._prefetch_related_lookups)
783|        self._prefetch_done = True
784|
785|    def explain(self, *, format=None, **options):
786|        return self.query.explain(using=self.db, format=format, **options)
787|
788|    ##################################################
789|    # PUBLIC METHODS THAT RETURN A QUERYSET SUBCLASS #
790|    ##################################################
791|
792|    def raw(self, raw_query, params=None, translations=None, using=None):
793|        if using is None:
794|            using = self.db
795|        qs = RawQuerySet(raw_query, model=self.model, params=params, translations=translations, using=using)
796|        qs._prefetch_related_lookups = self._prefetch_related_lookups[:]
797|        return qs
798|
799|    def _values(self, *fields, **expressions):
800|        clone = self._chain()
801|        if expressions:
802|            clone = clone.annotate(**expressions)
803|        clone._fields = fields
804|        clone.query.set_values(fields)
805|        return clone
806|
807|    def values(self, *fields, **expressions):
808|        fields += tuple(expressions)
809|        clone = self._values(*fields, **expressions)
810|        clone._iterable_class = ValuesIterable
811|        return clone
812|
813|    def values_list(self, *fields, flat=False, named=False):
814|        if flat and named:
815|            raise TypeError("'flat' and 'named' can't be used together.")
816|        if flat and len(fields) > 1:
817|            raise TypeError("'flat' is not valid when values_list is called with more than one field.")
818|
819|        field_names = {f for f in fields if not hasattr(f, 'resolve_expression')}
820|        _fields = []
821|        expressions = {}
822|        counter = 1
823|        for field in fields:
824|            if hasattr(field, 'resolve_expression'):
825|                field_id_prefix = getattr(field, 'default_alias', field.__class__.__name__.lower())
826|                while True:
827|                    field_id = field_id_prefix + str(counter)
828|                    counter += 1
829|                    if field_id not in field_names:
830|                        break
831|                expressions[field_id] = field
832|                _fields.append(field_id)
833|            else:
834|                _fields.append(field)
835|
836|        clone = self._values(*_fields, **expressions)
837|        clone._iterable_class = (
838|            NamedValuesListIterable if named
839|            else FlatValuesListIterable if flat
840|            else ValuesListIterable
841|        )
842|        return clone
843|
844|    def dates(self, field_name, kind, order='ASC'):
845|        """
846|        Return a list of date objects representing all available dates for
847|        the given field_name, scoped to 'kind'.
848|        """
849|        assert kind in ('year', 'month', 'week', 'day'), \
850|            "'kind' must be one of 'year', 'month', 'week', or 'day'."
851|        assert order in ('ASC', 'DESC'), \
852|            "'order' must be either 'ASC' or 'DESC'."
853|        return self.annotate(
854|            datefield=Trunc(field_name, kind, output_field=DateField()),
855|            plain_field=F(field_name)
856|        ).values_list(
857|            'datefield', flat=True
858|        ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datefield')
859|
860|    def datetimes(self, field_name, kind, order='ASC', tzinfo=None):
861|        """
862|        Return a list of datetime objects representing all available
863|        datetimes for the given field_name, scoped to 'kind'.
864|        """
865|        assert kind in ('year', 'month', 'week', 'day', 'hour', 'minute', 'second'), \
866|            "'kind' must be one of 'year', 'month', 'week', 'day', 'hour', 'minute', or 'second'."
867|        assert order in ('ASC', 'DESC'), \
868|            "'order' must be either 'ASC' or 'DESC'."
869|        if settings.USE_TZ:
870|            if tzinfo is None:
871|                tzinfo = timezone.get_current_timezone()
872|        else:
873|            tzinfo = None
874|        return self.annotate(
875|            datetimefield=Trunc(field_name, kind, output_field=DateTimeField(), tzinfo=tzinfo),
876|            plain_field=F(field_name)
877|        ).values_list(
878|            'datetimefield', flat=True
879|        ).distinct().filter(plain_field__isnull=False).order_by(('-' if order == 'DESC' else '') + 'datetimefield')
880|
881|    def none(self):
882|        """Return an empty QuerySet."""
883|        clone = self._chain()
884|        clone.query.set_empty()
885|        return clone
886|
887|    ##################################################################
888|    # PUBLIC METHODS THAT ALTER ATTRIBUTES AND RETURN A NEW QUERYSET #
889|    ##################################################################
890|
891|    def all(self):
892|        """
893|        Return a new QuerySet that is a copy of the current one. This allows a
894|        QuerySet to proxy for a model manager in some cases.
895|        """
896|        return self._chain()
897|
898|    def filter(self, *args, **kwargs):
899|        """
900|        Return a new QuerySet instance with the args ANDed to the existing
901|        set.
902|        """
903|        self._not_support_combined_queries('filter')
904|        return self._filter_or_exclude(False, *args, **kwargs)
905|
906|    def exclude(self, *args, **kwargs):
907|        """
908|        Return a new QuerySet instance with NOT (args) ANDed to the existing
909|        set.
910|        """
911|        self._not_support_combined_queries('exclude')
912|        return self._filter_or_exclude(True, *args, **kwargs)
913|
914|    def _filter_or_exclude(self, negate, *args, **kwargs):
915|        if args or kwargs:
916|            assert not self.query.is_sliced, \
917|                "Cannot filter a query once a slice has been taken."
918|
919|        clone = self._chain()
920|        if negate:
921|            clone.query.add_q(~Q(*args, **kwargs))
922|        else:
923|            clone.query.add_q(Q(*args, **kwargs))
924|        return clone
925|
926|    def complex_filter(self, filter_obj):
927|        """
928|        Return a new QuerySet instance with filter_obj added to the filters.
929|
930|        filter_obj can be a Q object or a dictionary of keyword lookup
931|        arguments.
932|
933|        This exists to support framework features such as 'limit_choices_to',
934|        and usually it will be more natural to use other methods.
935|        """
936|        if isinstance(filter_obj, Q):
937|            clone = self._chain()
938|            clone.query.add_q(filter_obj)
939|            return clone
940|        else:
941|            return self._filter_or_exclude(None, **filter_obj)
942|
943|    def _combinator_query(self, combinator, *other_qs, all=False):
944|        # Clone the query to inherit the select list and everything
945|        clone = self._chain()
946|        # Clear limits and ordering so they can be reapplied
947|        clone.query.clear_ordering(True)
948|        clone.query.clear_limits()
949|        clone.query.combined_queries = (self.query,) + tuple(qs.query for qs in other_qs)
950|        clone.query.combinator = combinator
951|        clone.query.combinator_all = all
952|        return clone
953|
954|    def union(self, *other_qs, all=False):
955|        # If the query is an EmptyQuerySet, combine all nonempty querysets.
956|        if isinstance(self, EmptyQuerySet):
957|            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]
958|            return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self
959|        return self._combinator_query('union', *other_qs, all=all)
960|
961|    def intersection(self, *other_qs):
962|        # If any query is an EmptyQuerySet, return it.
963|        if isinstance(self, EmptyQuerySet):
964|            return self
965|        for other in other_qs:
966|            if isinstance(other, EmptyQuerySet):
967|                return other
968|        return self._combinator_query('intersection', *other_qs)
969|
970|    def difference(self, *other_qs):
971|        # If the query is an EmptyQuerySet, return it.
972|        if isinstance(self, EmptyQuerySet):
973|            return self
974|        return self._combinator_query('difference', *other_qs)
975|
976|    def select_for_update(self, nowait=False, skip_locked=False, of=()):
977|        """
978|        Return a new QuerySet instance that will select objects with a
979|        FOR UPDATE lock.
980|        """
981|        if nowait and skip_locked:
982|            raise ValueError('The nowait option cannot be used with skip_locked.')
983|        obj = self._chain()
984|        obj._for_write = True
985|        obj.query.select_for_update = True
986|        obj.query.select_for_update_nowait = nowait
987|        obj.query.select_for_update_skip_locked = skip_locked
988|        obj.query.select_for_update_of = of
989|        return obj
990|
991|    def select_related(self, *fields):
992|        """
993|        Return a new QuerySet instance that will select related objects.
994|
995|        If fields are specified, they must be ForeignKey fields and only those
996|        related objects are included in the selection.
997|
998|        If select_related(None) is called, clear the list.
999|        """
1000|        self._not_support_combined_queries('select_related')
1001|        if self._fields is not None:
1002|            raise TypeError("Cannot call select_related() after .values() or .values_list()")
1003|
1004|        obj = self._chain()
1005|        if fields == (None,):
1006|            obj.query.select_related = False
1007|        elif fields:
1008|            obj.query.add_select_related(fields)
1009|        else:
1010|            obj.query.select_related = True
1011|        return obj
1012|
1013|    def prefetch_related(self, *lookups):
1014|        """
1015|        Return a new QuerySet instance that will prefetch the specified
1016|        Many-To-One and Many-To-Many related objects when the QuerySet is
1017|        evaluated.
1018|
1019|        When prefetch_related() is called more than once, append to the list of
1020|        prefetch lookups. If prefetch_related(None) is called, clear the list.
1021|        """
1022|        self._not_support_combined_queries('prefetch_related')
1023|        clone = self._chain()
1024|        if lookups == (None,):
1025|            clone._prefetch_related_lookups = ()
1026|        else:
1027|            for lookup in lookups:
1028|                if isinstance(lookup, Prefetch):
1029|                    lookup = lookup.prefetch_to
1030|                lookup = lookup.split(LOOKUP_SEP, 1)[0]
1031|                if lookup in self.query._filtered_relations:
1032|                    raise ValueError('prefetch_related() is not supported with FilteredRelation.')
1033|            clone._prefetch_related_lookups = clone._prefetch_related_lookups + lookups
1034|        return clone
1035|
1036|    def annotate(self, *args, **kwargs):
1037|        """
1038|        Return a query set in which the returned objects have been annotated
1039|        with extra data or aggregations.
1040|        """
1041|        self._not_support_combined_queries('annotate')
1042|        self._validate_values_are_expressions(args + tuple(kwargs.values()), method_name='annotate')
1043|        annotations = {}
1044|        for arg in args:
1045|            # The default_alias property may raise a TypeError.
1046|            try:
1047|                if arg.default_alias in kwargs:
1048|                    raise ValueError("The named annotation '%s' conflicts with the "
1049|                                     "default name for another annotation."
1050|                                     % arg.default_alias)
1051|            except TypeError:
1052|                raise TypeError("Complex annotations require an alias")
1053|            annotations[arg.default_alias] = arg
1054|        annotations.update(kwargs)
1055|
1056|        clone = self._chain()
1057|        names = self._fields
1058|        if names is None:
1059|            names = set(chain.from_iterable(
1060|                (field.name, field.attname) if hasattr(field, 'attname') else (field.name,)
1061|                for field in self.model._meta.get_fields()
1062|            ))
1063|
1064|        for alias, annotation in annotations.items():
1065|            if alias in names:
1066|                raise ValueError("The annotation '%s' conflicts with a field on "
1067|                                 "the model." % alias)
1068|            if isinstance(annotation, FilteredRelation):
1069|                clone.query.add_filtered_relation(annotation, alias)
1070|            else:
1071|                clone.query.add_annotation(annotation, alias, is_summary=False)
1072|
1073|        for alias, annotation in clone.query.annotations.items():
1074|            if alias in annotations and annotation.contains_aggregate:
1075|                if clone._fields is None:
1076|                    clone.query.group_by = True
1077|                else:
1078|                    clone.query.set_group_by()
1079|                break
1080|
1081|        return clone
1082|
1083|    def order_by(self, *field_names):
1084|        """Return a new QuerySet instance with the ordering changed."""
1085|        assert not self.query.is_sliced, \
1086|            "Cannot reorder a query once a slice has been taken."
1087|        obj = self._chain()
1088|        obj.query.clear_ordering(force_empty=False)
1089|        obj.query.add_ordering(*field_names)
1090|        return obj
1091|
1092|    def distinct(self, *field_names):
1093|        """
1094|        Return a new QuerySet instance that will select only distinct results.
1095|        """
1096|        assert not self.query.is_sliced, \
1097|            "Cannot create distinct fields once a slice has been taken."
1098|        obj = self._chain()
1099|        obj.query.add_distinct_fields(*field_names)
1100|        return obj
1101|
1102|    def extra(self, select=None, where=None, params=None, tables=None,
1103|              order_by=None, select_params=None):
1104|        """Add extra SQL fragments to the query."""
1105|        self._not_support_combined_queries('extra')
1106|        assert not self.query.is_sliced, \
1107|            "Cannot change a query once a slice has been taken"
1108|        clone = self._chain()
1109|        clone.query.add_extra(select, select_params, where, params, tables, order_by)
1110|        return clone
1111|
1112|    def reverse(self):
1113|        """Reverse the ordering of the QuerySet."""
1114|        if self.query.is_sliced:
1115|            raise TypeError('Cannot reverse a query once a slice has been taken.')
1116|        clone = self._chain()
1117|        clone.query.standard_ordering = not clone.query.standard_ordering
1118|        return clone
1119|
1120|    def defer(self, *fields):
1121|        """
1122|        Defer the loading of data for certain fields until they are accessed.
1123|        Add the set of deferred fields to any existing set of deferred fields.
1124|        The only exception to this is if None is passed in as the only
1125|        parameter, in which case removal all deferrals.
1126|        """
1127|        self._not_support_combined_queries('defer')
1128|        if self._fields is not None:
1129|            raise TypeError("Cannot call defer() after .values() or .values_list()")
1130|        clone = self._chain()
1131|        if fields == (None,):
1132|            clone.query.clear_deferred_loading()
1133|        else:
1134|            clone.query.add_deferred_loading(fields)
1135|        return clone
1136|
1137|    def only(self, *fields):
1138|        """
1139|        Essentially, the opposite of defer(). Only the fields passed into this
1140|        method and that are not already specified as deferred are loaded
1141|        immediately when the queryset is evaluated.
1142|        """
1143|        self._not_support_combined_queries('only')
1144|        if self._fields is not None:
1145|            raise TypeError("Cannot call only() after .values() or .values_list()")
1146|        if fields == (None,):
1147|            # Can only pass None to defer(), not only(), as the rest option.
1148|            # That won't stop people trying to do this, so let's be explicit.
1149|            raise TypeError("Cannot pass None as an argument to only().")
1150|        for field in fields:
1151|            field = field.split(LOOKUP_SEP, 1)[0]
1152|            if field in self.query._filtered_relations:
1153|                raise ValueError('only() is not supported with FilteredRelation.')
1154|        clone = self._chain()
1155|        clone.query.add_immediate_loading(fields)
1156|        return clone
1157|
1158|    def using(self, alias):
1159|        """Select which database this QuerySet should execute against."""
1160|        clone = self._chain()
1161|        clone._db = alias
1162|        return clone
1163|
1164|    ###################################
1165|    # PUBLIC INTROSPECTION ATTRIBUTES #
1166|    ###################################
1167|
1168|    @property
1169|    def ordered(self):
1170|        """
1171|        Return True if the QuerySet is ordered -- i.e. has an order_by()
1172|        clause or a default ordering on the model (or is empty).
1173|        """
1174|        if isinstance(self, EmptyQuerySet):
1175|            return True
1176|        if self.query.extra_order_by or self.query.order_by:
1177|            return True
1178|        elif self.query.default_ordering and self.query.get_meta().ordering:
1179|            return True
1180|        else:
1181|            return False
1182|
1183|    @property
1184|    def db(self):
1185|        """Return the database used if this query is executed now."""
1186|        if self._for_write:
1187|            return self._db or router.db_for_write(self.model, **self._hints)
1188|        return self._db or router.db_for_read(self.model, **self._hints)
1189|
1190|    ###################
1191|    # PRIVATE METHODS #
1192|    ###################
1193|
1194|    def _insert(self, objs, fields, returning_fields=None, raw=False, using=None, ignore_conflicts=False):
1195|        """
1196|        Insert a new record for the given model. This provides an interface to
1197|        the InsertQuery class and is how Model.save() is implemented.
1198|        """
1199|        self._for_write = True
1200|        if using is None:
1201|            using = self.db
1202|        query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
1203|        query.insert_values(fields, objs, raw=raw)
1204|        return query.get_compiler(using=using).execute_sql(returning_fields)
1205|    _insert.alters_data = True
1206|    _insert.queryset_only = False
1207|
1208|    def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):
1209|        """
1210|        Helper method for bulk_create() to insert objs one batch at a time.
1211|        """
1212|        if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
1213|            raise NotSupportedError('This database backend does not support ignoring conflicts.')
1214|        ops = connections[self.db].ops
1215|        batch_size = (batch_size or max(ops.bulk_batch_size(fields, objs), 1))
1216|        inserted_rows = []
1217|        bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
1218|        for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
1219|            if bulk_return and not ignore_conflicts:
1220|                inserted_columns = self._insert(
1221|                    item, fields=fields, using=self.db,
1222|                    returning_fields=self.model._meta.db_returning_fields,
1223|                    ignore_conflicts=ignore_conflicts,
1224|                )
1225|                if isinstance(inserted_columns, list):
1226|                    inserted_rows.extend(inserted_columns)
1227|                else:
1228|                    inserted_rows.append(inserted_columns)
1229|            else:
1230|                self._insert(item, fields=fields, using=self.db, ignore_conflicts=ignore_conflicts)
1231|        return inserted_rows
1232|
1233|    def _chain(self, **kwargs):
1234|        """
1235|        Return a copy of the current QuerySet that's ready for another
1236|        operation.
1237|        """
1238|        obj = self._clone()
1239|        if obj._sticky_filter:
1240|            obj.query.filter_is_sticky = True
1241|            obj._sticky_filter = False
1242|        obj.__dict__.update(kwargs)
1243|        return obj
1244|
1245|    def _clone(self):
1246|        """
1247|        Return a copy of the current QuerySet. A lightweight alternative
1248|        to deepcopy().
1249|        """
1250|        c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
1251|        c._sticky_filter = self._sticky_filter
1252|        c._for_write = self._for_write
1253|        c._prefetch_related_lookups = self._prefetch_related_lookups[:]
1254|        c._known_related_objects = self._known_related_objects
1255|        c._iterable_class = self._iterable_class
1256|        c._fields = self._fields
1257|        return c
1258|
1259|    def _fetch_all(self):
1260|        if self._result_cache is None:
1261|            self._result_cache = list(self._iterable_class(self))
1262|        if self._prefetch_related_lookups and not self._prefetch_done:
1263|            self._prefetch_related_objects()
1264|
1265|    def _next_is_sticky(self):
1266|        """
1267|        Indicate that the next filter call and the one following that should
1268|        be treated as a single filter. This is only important when it comes to
1269|        determining when to reuse tables for many-to-many filters. Required so
1270|        that we can filter naturally on the results of related managers.
1271|
1272|        This doesn't return a clone of the current QuerySet (it returns
1273|        "self"). The method is only used internally and should be immediately
1274|        followed by a filter() that does create a clone.
1275|        """
1276|        self._sticky_filter = True
1277|        return self
1278|
1279|    def _merge_sanity_check(self, other):
1280|        """Check that two QuerySet classes may be merged."""
1281|        if self._fields is not None and (
1282|                set(self.query.values_select) != set(other.query.values_select) or
1283|                set(self.query.extra_select) != set(other.query.extra_select) or
1284|                set(self.query.annotation_select) != set(other.query.annotation_select)):
1285|            raise TypeError(
1286|                "Merging '%s' classes must involve the same values in each case."
1287|                % self.__class__.__name__
1288|            )
1289|
1290|    def _merge_known_related_objects(self, other):
1291|        """
1292|        Keep track of all known related objects from either QuerySet instance.
1293|        """
1294|        for field, objects in other._known_related_objects.items():
1295|            self._known_related_objects.setdefault(field, {}).update(objects)
1296|
1297|    def resolve_expression(self, *args, **kwargs):
1298|        if self._fields and len(self._fields) > 1:
1299|            # values() queryset can only be used as nested queries
1300|            # if they are set up to select only a single field.
1301|            raise TypeError('Cannot use multi-field values as a filter value.')
1302|        query = self.query.resolve_expression(*args, **kwargs)
1303|        query._db = self._db
1304|        return query
1305|    resolve_expression.queryset_only = True
1306|
1307|    def _add_hints(self, **hints):
1308|        """
1309|        Update hinting information for use by routers. Add new key/values or
1310|        overwrite existing key/values.
1311|        """
1312|        self._hints.update(hints)
1313|
1314|    def _has_filters(self):
1315|        """
1316|        Check if this QuerySet has any filtering going on. This isn't
1317|        equivalent with checking if all objects are present in results, for
1318|        example, qs[1:]._has_filters() -> False.
1319|        """
1320|        return self.query.has_filters()
1321|
1322|    @staticmethod
1323|    def _validate_values_are_expressions(values, method_name):
1324|        invalid_args = sorted(str(arg) for arg in values if not hasattr(arg, 'resolve_expression'))
1325|        if invalid_args:
1326|            raise TypeError(
1327|                'QuerySet.%s() received non-expression(s): %s.' % (
1328|                    method_name,
1329|                    ', '.join(invalid_args),
1330|                )
1331|            )
1332|
1333|    def _not_support_combined_queries(self, operation_name):
1334|        if self.query.combinator:
1335|            raise NotSupportedError(
1336|                'Calling QuerySet.%s() after %s() is not supported.'
1337|                % (operation_name, self.query.combinator)
1338|            )
1339|
1340|
1341|class InstanceCheckMeta(type):
1342|    def __instancecheck__(self, instance):
1343|        return isinstance(instance, QuerySet) and instance.query.is_empty()
1344|
1345|
1346|class EmptyQuerySet(metaclass=InstanceCheckMeta):
1347|    """
1348|    Marker class to checking if a queryset is empty by .none():
...


### django/db/models/sql/compiler.py
...
9|from django.db.models.query_utils import QueryWrapper, select_related_descend
10|from django.db.models.sql.constants import (
11|    CURSOR, GET_ITERATOR_CHUNK_SIZE, MULTI, NO_RESULTS, ORDER_DIR, SINGLE,
12|)
13|from django.db.models.sql.query import Query, get_order_dir
14|from django.db.transaction import TransactionManagementError
15|from django.db.utils import DatabaseError, NotSupportedError
16|from django.utils.hashable import make_hashable
17|
18|
19|class SQLCompiler:
20|    def __init__(self, query, connection, using):
21|        self.query = query
22|        self.connection = connection
23|        self.using = using
24|        self.quote_cache = {'*': '*'}
25|        # The select, klass_info, and annotations are needed by QuerySet.iterator()
26|        # these are set as a side-effect of executing the query. Note that we calculate
27|        # separately a list of extra select columns needed for grammatical correctness
28|        # of the query, but these columns are not included in self.select.
29|        self.select = None
30|        self.annotation_col_map = None
31|        self.klass_info = None
32|        # Multiline ordering SQL clause may appear from RawSQL.
33|        self.ordering_parts = re.compile(r'^(.*)\s(ASC|DESC)(.*)', re.MULTILINE | re.DOTALL)
34|        self._meta_ordering = None
35|
36|    def setup_query(self):
37|        if all(self.query.alias_refcount[a] == 0 for a in self.query.alias_map):
38|            self.query.get_initial_alias()
39|        self.select, self.klass_info, self.annotation_col_map = self.get_select()
40|        self.col_count = len(self.select)
41|
42|    def pre_sql_setup(self):
43|        """
44|        Do any necessary class setup immediately prior to producing SQL. This
45|        is for things that can't necessarily be done in __init__ because we
46|        might not have all the pieces in place at that time.
47|        """
48|        self.setup_query()
49|        order_by = self.get_order_by()
50|        self.where, self.having = self.query.where.split_having()
51|        extra_select = self.get_extra_select(order_by, self.select)
52|        self.has_extra_select = bool(extra_select)
53|        group_by = self.get_group_by(self.select + extra_select, order_by)
54|        return extra_select, order_by, group_by
55|
56|    def get_group_by(self, select, order_by):
57|        """
58|        Return a list of 2-tuples of form (sql, params).
59|
60|        The logic of what exactly the GROUP BY clause contains is hard
61|        to describe in other words than "if it passes the test suite,
62|        then it is correct".
63|        """
64|        # Some examples:
65|        #     SomeModel.objects.annotate(Count('somecol'))
66|        #     GROUP BY: all fields of the model
67|        #
68|        #    SomeModel.objects.values('name').annotate(Count('somecol'))
69|        #    GROUP BY: name
70|        #
71|        #    SomeModel.objects.annotate(Count('somecol')).values('name')
72|        #    GROUP BY: all cols of the model
73|        #
74|        #    SomeModel.objects.values('name', 'pk').annotate(Count('somecol')).values('pk')
75|        #    GROUP BY: name, pk
76|        #
77|        #    SomeModel.objects.values('name').annotate(Count('somecol')).values('pk')
78|        #    GROUP BY: name, pk
79|        #
80|        # In fact, the self.query.group_by is the minimal set to GROUP BY. It
81|        # can't be ever restricted to a smaller set, but additional columns in
82|        # HAVING, ORDER BY, and SELECT clauses are added to it. Unfortunately
83|        # the end result is that it is impossible to force the query to have
84|        # a chosen GROUP BY clause - you can almost do this by using the form:
85|        #     .values(*wanted_cols).annotate(AnAggregate())
86|        # but any later annotations, extra selects, values calls that
87|        # refer some column outside of the wanted_cols, order_by, or even
88|        # filter calls can alter the GROUP BY clause.
89|
90|        # The query.group_by is either None (no GROUP BY at all), True
91|        # (group by select fields), or a list of expressions to be added
92|        # to the group by.
93|        if self.query.group_by is None:
94|            return []
95|        expressions = []
96|        if self.query.group_by is not True:
97|            # If the group by is set to a list (by .values() call most likely),
98|            # then we need to add everything in it to the GROUP BY clause.
99|            # Backwards compatibility hack for setting query.group_by. Remove
100|            # when  we have public API way of forcing the GROUP BY clause.
101|            # Converts string references to expressions.
102|            for expr in self.query.group_by:
103|                if not hasattr(expr, 'as_sql'):
104|                    expressions.append(self.query.resolve_ref(expr))
105|                else:
106|                    expressions.append(expr)
107|        # Note that even if the group_by is set, it is only the minimal
108|        # set to group by. So, we need to add cols in select, order_by, and
109|        # having into the select in any case.
110|        for expr, _, _ in select:
111|            cols = expr.get_group_by_cols()
112|            for col in cols:
113|                expressions.append(col)
114|        for expr, (sql, params, is_ref) in order_by:
115|            # Skip References to the select clause, as all expressions in the
116|            # select clause are already part of the group by.
117|            if not expr.contains_aggregate and not is_ref:
118|                expressions.extend(expr.get_source_expressions())
119|        having_group_by = self.having.get_group_by_cols() if self.having else ()
120|        for expr in having_group_by:
121|            expressions.append(expr)
122|        result = []
123|        seen = set()
124|        expressions = self.collapse_group_by(expressions, having_group_by)
125|
126|        for expr in expressions:
127|            sql, params = self.compile(expr)
128|            params_hash = make_hashable(params)
129|            if (sql, params_hash) not in seen:
130|                result.append((sql, params))
131|                seen.add((sql, params_hash))
132|        return result
133|
134|    def collapse_group_by(self, expressions, having):
135|        # If the DB can group by primary key, then group by the primary key of
136|        # query's main model. Note that for PostgreSQL the GROUP BY clause must
137|        # include the primary key of every table, but for MySQL it is enough to
138|        # have the main table's primary key.
139|        if self.connection.features.allows_group_by_pk:
140|            # Determine if the main model's primary key is in the query.
141|            pk = None
142|            for expr in expressions:
143|                # Is this a reference to query's base table primary key? If the
144|                # expression isn't a Col-like, then skip the expression.
145|                if (getattr(expr, 'target', None) == self.query.model._meta.pk and
146|                        getattr(expr, 'alias', None) == self.query.base_table):
147|                    pk = expr
148|                    break
149|            # If the main model's primary key is in the query, group by that
150|            # field, HAVING expressions, and expressions associated with tables
151|            # that don't have a primary key included in the grouped columns.
152|            if pk:
153|                pk_aliases = {
154|                    expr.alias for expr in expressions
155|                    if hasattr(expr, 'target') and expr.target.primary_key
156|                }
157|                expressions = [pk] + [
158|                    expr for expr in expressions
159|                    if expr in having or (
160|                        getattr(expr, 'alias', None) is not None and expr.alias not in pk_aliases
161|                    )
162|                ]
163|        elif self.connection.features.allows_group_by_selected_pks:
164|            # Filter out all expressions associated with a table's primary key
165|            # present in the grouped columns. This is done by identifying all
166|            # tables that have their primary key included in the grouped
167|            # columns and removing non-primary key columns referring to them.
168|            # Unmanaged models are excluded because they could be representing
169|            # database views on which the optimization might not be allowed.
170|            pks = {
171|                expr for expr in expressions
172|                if (
173|                    hasattr(expr, 'target') and
174|                    expr.target.primary_key and
175|                    self.connection.features.allows_group_by_selected_pks_on_model(expr.target.model)
176|                )
177|            }
178|            aliases = {expr.alias for expr in pks}
179|            expressions = [
180|                expr for expr in expressions if expr in pks or getattr(expr, 'alias', None) not in aliases
181|            ]
182|        return expressions
183|
184|    def get_select(self):
185|        """
186|        Return three values:
187|        - a list of 3-tuples of (expression, (sql, params), alias)
188|        - a klass_info structure,
189|        - a dictionary of annotations
190|
191|        The (sql, params) is what the expression will produce, and alias is the
192|        "AS alias" for the column (possibly None).
193|
194|        The klass_info structure contains the following information:
195|        - The base model of the query.
196|        - Which columns for that model are present in the query (by
197|          position of the select clause).
198|        - related_klass_infos: [f, klass_info] to descent into
199|
200|        The annotations is a dictionary of {'attname': column position} values.
201|        """
202|        select = []
203|        klass_info = None
204|        annotations = {}
205|        select_idx = 0
206|        for alias, (sql, params) in self.query.extra_select.items():
207|            annotations[alias] = select_idx
208|            select.append((RawSQL(sql, params), alias))
209|            select_idx += 1
210|        assert not (self.query.select and self.query.default_cols)
211|        if self.query.default_cols:
212|            cols = self.get_default_columns()
213|        else:
214|            # self.query.select is a special case. These columns never go to
215|            # any model.
216|            cols = self.query.select
217|        if cols:
218|            select_list = []
219|            for col in cols:
220|                select_list.append(select_idx)
221|                select.append((col, None))
222|                select_idx += 1
223|            klass_info = {
224|                'model': self.query.model,
225|                'select_fields': select_list,
226|            }
227|        for alias, annotation in self.query.annotation_select.items():
228|            annotations[alias] = select_idx
229|            select.append((annotation, alias))
230|            select_idx += 1
231|
232|        if self.query.select_related:
233|            related_klass_infos = self.get_related_selections(select)
234|            klass_info['related_klass_infos'] = related_klass_infos
235|
236|            def get_select_from_parent(klass_info):
237|                for ki in klass_info['related_klass_infos']:
238|                    if ki['from_parent']:
239|                        ki['select_fields'] = (klass_info['select_fields'] +
240|                                               ki['select_fields'])
241|                    get_select_from_parent(ki)
242|            get_select_from_parent(klass_info)
243|
244|        ret = []
245|        for col, alias in select:
246|            try:
247|                sql, params = self.compile(col)
248|            except EmptyResultSet:
249|                # Select a predicate that's always False.
250|                sql, params = '0', ()
251|            else:
252|                sql, params = col.select_format(self, sql, params)
253|            ret.append((col, (sql, params), alias))
254|        return ret, klass_info, annotations
255|
256|    def get_order_by(self):
257|        """
258|        Return a list of 2-tuples of form (expr, (sql, params, is_ref)) for the
259|        ORDER BY clause.
260|
261|        The order_by clause can alter the select clause (for example it
262|        can add aliases to clauses that do not yet have one, or it can
263|        add totally new select clauses).
264|        """
265|        if self.query.extra_order_by:
266|            ordering = self.query.extra_order_by
267|        elif not self.query.default_ordering:
268|            ordering = self.query.order_by
269|        elif self.query.order_by:
270|            ordering = self.query.order_by
271|        elif self.query.get_meta().ordering:
272|            ordering = self.query.get_meta().ordering
273|            self._meta_ordering = ordering
274|        else:
275|            ordering = []
276|        if self.query.standard_ordering:
277|            asc, desc = ORDER_DIR['ASC']
278|        else:
279|            asc, desc = ORDER_DIR['DESC']
280|
281|        order_by = []
282|        for field in ordering:
283|            if hasattr(field, 'resolve_expression'):
284|                if isinstance(field, Value):
285|                    # output_field must be resolved for constants.
286|                    field = Cast(field, field.output_field)
287|                if not isinstance(field, OrderBy):
288|                    field = field.asc()
289|                if not self.query.standard_ordering:
290|                    field = field.copy()
291|                    field.reverse_ordering()
292|                order_by.append((field, False))
293|                continue
294|            if field == '?':  # random
295|                order_by.append((OrderBy(Random()), False))
296|                continue
297|
298|            col, order = get_order_dir(field, asc)
299|            descending = order == 'DESC'
300|
301|            if col in self.query.annotation_select:
302|                # Reference to expression in SELECT clause
303|                order_by.append((
304|                    OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending),
305|                    True))
306|                continue
307|            if col in self.query.annotations:
308|                # References to an expression which is masked out of the SELECT
309|                # clause.
310|                expr = self.query.annotations[col]
311|                if isinstance(expr, Value):
312|                    # output_field must be resolved for constants.
313|                    expr = Cast(expr, expr.output_field)
314|                order_by.append((OrderBy(expr, descending=descending), False))
315|                continue
316|
317|            if '.' in field:
318|                # This came in through an extra(order_by=...) addition. Pass it
319|                # on verbatim.
320|                table, col = col.split('.', 1)
321|                order_by.append((
322|                    OrderBy(
323|                        RawSQL('%s.%s' % (self.quote_name_unless_alias(table), col), []),
324|                        descending=descending
325|                    ), False))
326|                continue
327|
328|            if not self.query.extra or col not in self.query.extra:
329|                # 'col' is of the form 'field' or 'field1__field2' or
330|                # '-field1__field2__field', etc.
331|                order_by.extend(self.find_ordering_name(
332|                    field, self.query.get_meta(), default_order=asc))
333|            else:
334|                if col not in self.query.extra_select:
335|                    order_by.append((
336|                        OrderBy(RawSQL(*self.query.extra[col]), descending=descending),
337|                        False))
338|                else:
339|                    order_by.append((
340|                        OrderBy(Ref(col, RawSQL(*self.query.extra[col])), descending=descending),
341|                        True))
342|        result = []
343|        seen = set()
344|
345|        for expr, is_ref in order_by:
346|            resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)
347|            if self.query.combinator:
348|                src = resolved.get_source_expressions()[0]
349|                # Relabel order by columns to raw numbers if this is a combined
350|                # query; necessary since the columns can't be referenced by the
351|                # fully qualified name and the simple column names may collide.
352|                for idx, (sel_expr, _, col_alias) in enumerate(self.select):
353|                    if is_ref and col_alias == src.refs:
354|                        src = src.source
355|                    elif col_alias:
356|                        continue
357|                    if src == sel_expr:
358|                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])
359|                        break
360|                else:
361|                    if col_alias:
362|                        raise DatabaseError('ORDER BY term does not match any column in the result set.')
363|                    # Add column used in ORDER BY clause without an alias to
364|                    # the selected columns.
365|                    self.query.add_select_col(src)
366|                    resolved.set_source_expressions([RawSQL('%d' % len(self.query.select), ())])
367|            sql, params = self.compile(resolved)
368|            # Don't add the same column twice, but the order direction is
369|            # not taken into account so we strip it. When this entire method
370|            # is refactored into expressions, then we can check each part as we
371|            # generate it.
372|            without_ordering = self.ordering_parts.search(sql).group(1)
373|            params_hash = make_hashable(params)
374|            if (without_ordering, params_hash) in seen:
375|                continue
376|            seen.add((without_ordering, params_hash))
377|            result.append((resolved, (sql, params, is_ref)))
378|        return result
379|
380|    def get_extra_select(self, order_by, select):
381|        extra_select = []
382|        if self.query.distinct and not self.query.distinct_fields:
383|            select_sql = [t[1] for t in select]
384|            for expr, (sql, params, is_ref) in order_by:
385|                without_ordering = self.ordering_parts.search(sql).group(1)
386|                if not is_ref and (without_ordering, params) not in select_sql:
387|                    extra_select.append((expr, (without_ordering, params), None))
388|        return extra_select
389|
390|    def quote_name_unless_alias(self, name):
391|        """
392|        A wrapper around connection.ops.quote_name that doesn't quote aliases
393|        for table names. This avoids problems with some SQL dialects that treat
394|        quoted strings specially (e.g. PostgreSQL).
395|        """
396|        if name in self.quote_cache:
397|            return self.quote_cache[name]
398|        if ((name in self.query.alias_map and name not in self.query.table_map) or
399|                name in self.query.extra_select or (
400|                    name in self.query.external_aliases and name not in self.query.table_map)):
401|            self.quote_cache[name] = name
402|            return name
403|        r = self.connection.ops.quote_name(name)
404|        self.quote_cache[name] = r
405|        return r
406|
407|    def compile(self, node):
408|        vendor_impl = getattr(node, 'as_' + self.connection.vendor, None)
409|        if vendor_impl:
410|            sql, params = vendor_impl(self, self.connection)
411|        else:
412|            sql, params = node.as_sql(self, self.connection)
413|        return sql, params
414|
415|    def get_combinator_sql(self, combinator, all):
416|        features = self.connection.features
417|        compilers = [
418|            query.get_compiler(self.using, self.connection)
419|            for query in self.query.combined_queries if not query.is_empty()
420|        ]
421|        if not features.supports_slicing_ordering_in_compound:
422|            for query, compiler in zip(self.query.combined_queries, compilers):
423|                if query.low_mark or query.high_mark:
424|                    raise DatabaseError('LIMIT/OFFSET not allowed in subqueries of compound statements.')
425|                if compiler.get_order_by():
426|                    raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')
427|        parts = ()
428|        for compiler in compilers:
429|            try:
430|                # If the columns list is limited, then all combined queries
431|                # must have the same columns list. Set the selects defined on
432|                # the query on all combined queries, if not already set.
433|                if not compiler.query.values_select and self.query.values_select:
434|                    compiler.query = compiler.query.clone()
435|                    compiler.query.set_values((
436|                        *self.query.extra_select,
437|                        *self.query.values_select,
438|                        *self.query.annotation_select,
439|                    ))
440|                part_sql, part_args = compiler.as_sql()
441|                if compiler.query.combinator:
442|                    # Wrap in a subquery if wrapping in parentheses isn't
443|                    # supported.
444|                    if not features.supports_parentheses_in_compound:
445|                        part_sql = 'SELECT * FROM ({})'.format(part_sql)
446|                    # Add parentheses when combining with compound query if not
447|                    # already added for all compound queries.
448|                    elif not features.supports_slicing_ordering_in_compound:
449|                        part_sql = '({})'.format(part_sql)
450|                parts += ((part_sql, part_args),)
451|            except EmptyResultSet:
452|                # Omit the empty queryset with UNION and with DIFFERENCE if the
453|                # first queryset is nonempty.
454|                if combinator == 'union' or (combinator == 'difference' and parts):
455|                    continue
456|                raise
457|        if not parts:
458|            raise EmptyResultSet
459|        combinator_sql = self.connection.ops.set_operators[combinator]
460|        if all and combinator == 'union':
461|            combinator_sql += ' ALL'
462|        braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'
463|        sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))
464|        result = [' {} '.format(combinator_sql).join(sql_parts)]
465|        params = []
466|        for part in args_parts:
467|            params.extend(part)
468|        return result, params
469|
470|    def as_sql(self, with_limits=True, with_col_aliases=False):
471|        """
472|        Create the SQL for this query. Return the SQL string and list of
473|        parameters.
474|
475|        If 'with_limits' is False, any limit/offset information is not included
476|        in the query.
477|        """
478|        refcounts_before = self.query.alias_refcount.copy()
479|        try:
480|            extra_select, order_by, group_by = self.pre_sql_setup()
481|            for_update_part = None
482|            # Is a LIMIT/OFFSET clause needed?
483|            with_limit_offset = with_limits and (self.query.high_mark is not None or self.query.low_mark)
484|            combinator = self.query.combinator
485|            features = self.connection.features
486|            if combinator:
487|                if not getattr(features, 'supports_select_{}'.format(combinator)):
488|                    raise NotSupportedError('{} is not supported on this database backend.'.format(combinator))
489|                result, params = self.get_combinator_sql(combinator, self.query.combinator_all)
490|            else:
491|                distinct_fields, distinct_params = self.get_distinct()
492|                # This must come after 'select', 'ordering', and 'distinct'
493|                # (see docstring of get_from_clause() for details).
494|                from_, f_params = self.get_from_clause()
495|                where, w_params = self.compile(self.where) if self.where is not None else ("", [])
496|                having, h_params = self.compile(self.having) if self.having is not None else ("", [])
497|                result = ['SELECT']
498|                params = []
499|
500|                if self.query.distinct:
501|                    distinct_result, distinct_params = self.connection.ops.distinct_sql(
502|                        distinct_fields,
503|                        distinct_params,
504|                    )
505|                    result += distinct_result
506|                    params += distinct_params
507|
508|                out_cols = []
509|                col_idx = 1
510|                for _, (s_sql, s_params), alias in self.select + extra_select:
511|                    if alias:
512|                        s_sql = '%s AS %s' % (s_sql, self.connection.ops.quote_name(alias))
513|                    elif with_col_aliases:
514|                        s_sql = '%s AS %s' % (s_sql, 'Col%d' % col_idx)
515|                        col_idx += 1
516|                    params.extend(s_params)
517|                    out_cols.append(s_sql)
518|
519|                result += [', '.join(out_cols), 'FROM', *from_]
520|                params.extend(f_params)
521|
522|                if self.query.select_for_update and self.connection.features.has_select_for_update:
523|                    if self.connection.get_autocommit():
524|                        raise TransactionManagementError('select_for_update cannot be used outside of a transaction.')
525|
526|                    if with_limit_offset and not self.connection.features.supports_select_for_update_with_limit:
527|                        raise NotSupportedError(
528|                            'LIMIT/OFFSET is not supported with '
529|                            'select_for_update on this database backend.'
530|                        )
531|                    nowait = self.query.select_for_update_nowait
532|                    skip_locked = self.query.select_for_update_skip_locked
533|                    of = self.query.select_for_update_of
534|                    # If it's a NOWAIT/SKIP LOCKED/OF query but the backend
535|                    # doesn't support it, raise NotSupportedError to prevent a
536|                    # possible deadlock.
537|                    if nowait and not self.connection.features.has_select_for_update_nowait:
538|                        raise NotSupportedError('NOWAIT is not supported on this database backend.')
539|                    elif skip_locked and not self.connection.features.has_select_for_update_skip_locked:
540|                        raise NotSupportedError('SKIP LOCKED is not supported on this database backend.')
541|                    elif of and not self.connection.features.has_select_for_update_of:
542|                        raise NotSupportedError('FOR UPDATE OF is not supported on this database backend.')
543|                    for_update_part = self.connection.ops.for_update_sql(
544|                        nowait=nowait,
545|                        skip_locked=skip_locked,
546|                        of=self.get_select_for_update_of_arguments(),
547|                    )
548|
549|                if for_update_part and self.connection.features.for_update_after_from:
550|                    result.append(for_update_part)
551|
552|                if where:
553|                    result.append('WHERE %s' % where)
554|                    params.extend(w_params)
555|
556|                grouping = []
557|                for g_sql, g_params in group_by:
558|                    grouping.append(g_sql)
559|                    params.extend(g_params)
560|                if grouping:
561|                    if distinct_fields:
562|                        raise NotImplementedError('annotate() + distinct(fields) is not implemented.')
563|                    order_by = order_by or self.connection.ops.force_no_ordering()
564|                    result.append('GROUP BY %s' % ', '.join(grouping))
565|                    if self._meta_ordering:
566|                        order_by = None
567|                if having:
568|                    result.append('HAVING %s' % having)
569|                    params.extend(h_params)
570|
571|            if self.query.explain_query:
572|                result.insert(0, self.connection.ops.explain_query_prefix(
573|                    self.query.explain_format,
574|                    **self.query.explain_options
575|                ))
576|
577|            if order_by:
578|                ordering = []
579|                for _, (o_sql, o_params, _) in order_by:
580|                    ordering.append(o_sql)
581|                    params.extend(o_params)
582|                result.append('ORDER BY %s' % ', '.join(ordering))
583|
584|            if with_limit_offset:
585|                result.append(self.connection.ops.limit_offset_sql(self.query.low_mark, self.query.high_mark))
586|
587|            if for_update_part and not self.connection.features.for_update_after_from:
588|                result.append(for_update_part)
589|
590|            if self.query.subquery and extra_select:
591|                # If the query is used as a subquery, the extra selects would
592|                # result in more columns than the left-hand side expression is
593|                # expecting. This can happen when a subquery uses a combination
594|                # of order_by() and distinct(), forcing the ordering expressions
595|                # to be selected as well. Wrap the query in another subquery
596|                # to exclude extraneous selects.
597|                sub_selects = []
598|                sub_params = []
599|                for index, (select, _, alias) in enumerate(self.select, start=1):
600|                    if not alias and with_col_aliases:
601|                        alias = 'col%d' % index
602|                    if alias:
603|                        sub_selects.append("%s.%s" % (
604|                            self.connection.ops.quote_name('subquery'),
605|                            self.connection.ops.quote_name(alias),
606|                        ))
607|                    else:
608|                        select_clone = select.relabeled_clone({select.alias: 'subquery'})
609|                        subselect, subparams = select_clone.as_sql(self, self.connection)
610|                        sub_selects.append(subselect)
611|                        sub_params.extend(subparams)
612|                return 'SELECT %s FROM (%s) subquery' % (
613|                    ', '.join(sub_selects),
614|                    ' '.join(result),
615|                ), tuple(sub_params + params)
616|
617|            return ' '.join(result), tuple(params)
618|        finally:
619|            # Finally do cleanup - get rid of the joins we created above.
620|            self.query.reset_refcounts(refcounts_before)
621|
622|    def get_default_columns(self, start_alias=None, opts=None, from_parent=None):
623|        """
624|        Compute the default columns for selecting every field in the base
625|        model. Will sometimes be called to pull in related models (e.g. via
626|        select_related), in which case "opts" and "start_alias" will be given
627|        to provide a starting point for the traversal.
628|
629|        Return a list of strings, quoted appropriately for use in SQL
630|        directly, as well as a set of aliases used in the select statement (if
631|        'as_pairs' is True, return a list of (alias, col_name) pairs instead
632|        of strings as the first component and None as the second component).
633|        """
634|        result = []
635|        if opts is None:
636|            opts = self.query.get_meta()
637|        only_load = self.deferred_to_columns()
638|        start_alias = start_alias or self.query.get_initial_alias()
639|        # The 'seen_models' is used to optimize checking the needed parent
640|        # alias for a given field. This also includes None -> start_alias to
641|        # be used by local fields.
642|        seen_models = {None: start_alias}
643|
644|        for field in opts.concrete_fields:
645|            model = field.model._meta.concrete_model
646|            # A proxy model will have a different model and concrete_model. We
647|            # will assign None if the field belongs to this model.
648|            if model == opts.model:
649|                model = None
650|            if from_parent and model is not None and issubclass(
651|                    from_parent._meta.concrete_model, model._meta.concrete_model):
652|                # Avoid loading data for already loaded parents.
653|                # We end up here in the case select_related() resolution
654|                # proceeds from parent model to child model. In that case the
655|                # parent model data is already present in the SELECT clause,
656|                # and we want to avoid reloading the same data again.
657|                continue
658|            if field.model in only_load and field.attname not in only_load[field.model]:
659|                continue
660|            alias = self.query.join_parent_model(opts, model, start_alias,
661|                                                 seen_models)
662|            column = field.get_col(alias)
663|            result.append(column)
664|        return result
665|
666|    def get_distinct(self):
667|        """
668|        Return a quoted list of fields to use in DISTINCT ON part of the query.
669|
670|        This method can alter the tables in the query, and thus it must be
671|        called before get_from_clause().
672|        """
673|        result = []
674|        params = []
675|        opts = self.query.get_meta()
676|
677|        for name in self.query.distinct_fields:
678|            parts = name.split(LOOKUP_SEP)
679|            _, targets, alias, joins, path, _, transform_function = self._setup_joins(parts, opts, None)
680|            targets, alias, _ = self.query.trim_joins(targets, joins, path)
681|            for target in targets:
682|                if name in self.query.annotation_select:
683|                    result.append(name)
684|                else:
685|                    r, p = self.compile(transform_function(target, alias))
686|                    result.append(r)
687|                    params.append(p)
688|        return result, params
689|
690|    def find_ordering_name(self, name, opts, alias=None, default_order='ASC',
691|                           already_seen=None):
692|        """
693|        Return the table alias (the name might be ambiguous, the alias will
694|        not be) and column name for ordering by the given 'name' parameter.
695|        The 'name' is of the form 'field1__field2__...__fieldN'.
696|        """
697|        name, order = get_order_dir(name, default_order)
698|        descending = order == 'DESC'
699|        pieces = name.split(LOOKUP_SEP)
700|        field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)
701|
702|        # If we get to this point and the field is a relation to another model,
703|        # append the default ordering for that model unless the attribute name
704|        # of the field is specified.
705|        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name:
706|            # Firstly, avoid infinite loops.
707|            already_seen = already_seen or set()
708|            join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)
709|            if join_tuple in already_seen:
710|                raise FieldError('Infinite loop caused by ordering.')
711|            already_seen.add(join_tuple)
712|
713|            results = []
714|            for item in opts.ordering:
715|                if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):
716|                    item = item.desc() if descending else item.asc()
717|                if isinstance(item, OrderBy):
718|                    results.append((item, False))
719|                    continue
720|                results.extend(self.find_ordering_name(item, opts, alias,
721|                                                       order, already_seen))
722|            return results
723|        targets, alias, _ = self.query.trim_joins(targets, joins, path)
724|        return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]
725|
726|    def _setup_joins(self, pieces, opts, alias):
727|        """
728|        Helper method for get_order_by() and get_distinct().
729|
730|        get_ordering() and get_distinct() must produce same target columns on
731|        same input, as the prefixes of get_ordering() and get_distinct() must
732|        match. Executing SQL where this is not true is an error.
733|        """
734|        alias = alias or self.query.get_initial_alias()
735|        field, targets, opts, joins, path, transform_function = self.query.setup_joins(pieces, opts, alias)
736|        alias = joins[-1]
737|        return field, targets, alias, joins, path, opts, transform_function
738|
739|    def get_from_clause(self):
740|        """
741|        Return a list of strings that are joined together to go after the
742|        "FROM" part of the query, as well as a list any extra parameters that
743|        need to be included. Subclasses, can override this to create a
744|        from-clause via a "select".
745|
746|        This should only be called after any SQL construction methods that
747|        might change the tables that are needed. This means the select columns,
748|        ordering, and distinct must be done first.
749|        """
750|        result = []
751|        params = []
752|        for alias in tuple(self.query.alias_map):
753|            if not self.query.alias_refcount[alias]:
754|                continue
755|            try:
756|                from_clause = self.query.alias_map[alias]
757|            except KeyError:
758|                # Extra tables can end up in self.tables, but not in the
759|                # alias_map if they aren't in a join. That's OK. We skip them.
760|                continue
761|            clause_sql, clause_params = self.compile(from_clause)
762|            result.append(clause_sql)
763|            params.extend(clause_params)
764|        for t in self.query.extra_tables:
765|            alias, _ = self.query.table_alias(t)
766|            # Only add the alias if it's not already present (the table_alias()
767|            # call increments the refcount, so an alias refcount of one means
768|            # this is the only reference).
769|            if alias not in self.query.alias_map or self.query.alias_refcount[alias] == 1:
770|                result.append(', %s' % self.quote_name_unless_alias(alias))
771|        return result, params
772|
773|    def get_related_selections(self, select, opts=None, root_alias=None, cur_depth=1,
774|                               requested=None, restricted=None):
775|        """
776|        Fill in the information needed for a select_related query. The current
777|        depth is measured as the number of connections away from the root model
778|        (for example, cur_depth=1 means we are looking at models with direct
779|        connections to the root model).
780|        """
781|        def _get_field_choices():
782|            direct_choices = (f.name for f in opts.fields if f.is_relation)
783|            reverse_choices = (
784|                f.field.related_query_name()
785|                for f in opts.related_objects if f.field.unique
786|            )
787|            return chain(direct_choices, reverse_choices, self.query._filtered_relations)
788|
789|        related_klass_infos = []
790|        if not restricted and cur_depth > self.query.max_depth:
791|            # We've recursed far enough; bail out.
792|            return related_klass_infos
793|
794|        if not opts:
795|            opts = self.query.get_meta()
796|            root_alias = self.query.get_initial_alias()
797|        only_load = self.query.get_loaded_field_names()
798|
799|        # Setup for the case when only particular related fields should be
800|        # included in the related selection.
801|        fields_found = set()
802|        if requested is None:
803|            restricted = isinstance(self.query.select_related, dict)
804|            if restricted:
805|                requested = self.query.select_related
806|
807|        def get_related_klass_infos(klass_info, related_klass_infos):
808|            klass_info['related_klass_infos'] = related_klass_infos
809|
810|        for f in opts.fields:
811|            field_model = f.model._meta.concrete_model
812|            fields_found.add(f.name)
813|
814|            if restricted:
815|                next = requested.get(f.name, {})
816|                if not f.is_relation:
817|                    # If a non-related field is used like a relation,
818|                    # or if a single non-relational field is given.
819|                    if next or f.name in requested:
820|                        raise FieldError(
821|                            "Non-relational field given in select_related: '%s'. "
822|                            "Choices are: %s" % (
823|                                f.name,
824|                                ", ".join(_get_field_choices()) or '(none)',
825|                            )
826|                        )
827|            else:
828|                next = False
829|
830|            if not select_related_descend(f, restricted, requested,
831|                                          only_load.get(field_model)):
832|                continue
833|            klass_info = {
834|                'model': f.remote_field.model,
835|                'field': f,
836|                'reverse': False,
837|                'local_setter': f.set_cached_value,
838|                'remote_setter': f.remote_field.set_cached_value if f.unique else lambda x, y: None,
839|                'from_parent': False,
840|            }
841|            related_klass_infos.append(klass_info)
842|            select_fields = []
843|            _, _, _, joins, _, _ = self.query.setup_joins(
844|                [f.name], opts, root_alias)
845|            alias = joins[-1]
846|            columns = self.get_default_columns(start_alias=alias, opts=f.remote_field.model._meta)
847|            for col in columns:
848|                select_fields.append(len(select))
849|                select.append((col, None))
850|            klass_info['select_fields'] = select_fields
851|            next_klass_infos = self.get_related_selections(
852|                select, f.remote_field.model._meta, alias, cur_depth + 1, next, restricted)
853|            get_related_klass_infos(klass_info, next_klass_infos)
854|
855|        if restricted:
856|            related_fields = [
857|                (o.field, o.related_model)
858|                for o in opts.related_objects
859|                if o.field.unique and not o.many_to_many
860|            ]
861|            for f, model in related_fields:
862|                if not select_related_descend(f, restricted, requested,
863|                                              only_load.get(model), reverse=True):
864|                    continue
865|
866|                related_field_name = f.related_query_name()
867|                fields_found.add(related_field_name)
868|
869|                join_info = self.query.setup_joins([related_field_name], opts, root_alias)
870|                alias = join_info.joins[-1]
871|                from_parent = issubclass(model, opts.model) and model is not opts.model
872|                klass_info = {
873|                    'model': model,
874|                    'field': f,
875|                    'reverse': True,
876|                    'local_setter': f.remote_field.set_cached_value,
877|                    'remote_setter': f.set_cached_value,
878|                    'from_parent': from_parent,
879|                }
880|                related_klass_infos.append(klass_info)
881|                select_fields = []
882|                columns = self.get_default_columns(
883|                    start_alias=alias, opts=model._meta, from_parent=opts.model)
884|                for col in columns:
885|                    select_fields.append(len(select))
886|                    select.append((col, None))
887|                klass_info['select_fields'] = select_fields
888|                next = requested.get(f.related_query_name(), {})
889|                next_klass_infos = self.get_related_selections(
890|                    select, model._meta, alias, cur_depth + 1,
891|                    next, restricted)
892|                get_related_klass_infos(klass_info, next_klass_infos)
893|            for name in list(requested):
894|                # Filtered relations work only on the topmost level.
895|                if cur_depth > 1:
896|                    break
897|                if name in self.query._filtered_relations:
898|                    fields_found.add(name)
899|                    f, _, join_opts, joins, _, _ = self.query.setup_joins([name], opts, root_alias)
900|                    model = join_opts.model
901|                    alias = joins[-1]
902|                    from_parent = issubclass(model, opts.model) and model is not opts.model
903|
904|                    def local_setter(obj, from_obj):
905|                        # Set a reverse fk object when relation is non-empty.
906|                        if from_obj:
907|                            f.remote_field.set_cached_value(from_obj, obj)
908|
909|                    def remote_setter(obj, from_obj):
910|                        setattr(from_obj, name, obj)
911|                    klass_info = {
912|                        'model': model,
913|                        'field': f,
914|                        'reverse': True,
915|                        'local_setter': local_setter,
916|                        'remote_setter': remote_setter,
917|                        'from_parent': from_parent,
918|                    }
919|                    related_klass_infos.append(klass_info)
920|                    select_fields = []
921|                    columns = self.get_default_columns(
922|                        start_alias=alias, opts=model._meta,
923|                        from_parent=opts.model,
924|                    )
925|                    for col in columns:
926|                        select_fields.append(len(select))
927|                        select.append((col, None))
928|                    klass_info['select_fields'] = select_fields
929|                    next_requested = requested.get(name, {})
930|                    next_klass_infos = self.get_related_selections(
931|                        select, opts=model._meta, root_alias=alias,
932|                        cur_depth=cur_depth + 1, requested=next_requested,
933|                        restricted=restricted,
934|                    )
935|                    get_related_klass_infos(klass_info, next_klass_infos)
936|            fields_not_found = set(requested).difference(fields_found)
937|            if fields_not_found:
938|                invalid_fields = ("'%s'" % s for s in fields_not_found)
939|                raise FieldError(
940|                    'Invalid field name(s) given in select_related: %s. '
941|                    'Choices are: %s' % (
942|                        ', '.join(invalid_fields),
943|                        ', '.join(_get_field_choices()) or '(none)',
944|                    )
945|                )
946|        return related_klass_infos
947|
948|    def get_select_for_update_of_arguments(self):
949|        """
950|        Return a quoted list of arguments for the SELECT FOR UPDATE OF part of
951|        the query.
952|        """
953|        def _get_field_choices():
954|            """Yield all allowed field paths in breadth-first search order."""
955|            queue = collections.deque([(None, self.klass_info)])
956|            while queue:
957|                parent_path, klass_info = queue.popleft()
958|                if parent_path is None:
959|                    path = []
960|                    yield 'self'
961|                else:
962|                    field = klass_info['field']
963|                    if klass_info['reverse']:
964|                        field = field.remote_field
965|                    path = parent_path + [field.name]
966|                    yield LOOKUP_SEP.join(path)
967|                queue.extend(
968|                    (path, klass_info)
969|                    for klass_info in klass_info.get('related_klass_infos', [])
970|                )
971|        result = []
972|        invalid_names = []
973|        for name in self.query.select_for_update_of:
974|            parts = [] if name == 'self' else name.split(LOOKUP_SEP)
975|            klass_info = self.klass_info
976|            for part in parts:
977|                for related_klass_info in klass_info.get('related_klass_infos', []):
978|                    field = related_klass_info['field']
979|                    if related_klass_info['reverse']:
980|                        field = field.remote_field
981|                    if field.name == part:
982|                        klass_info = related_klass_info
983|                        break
984|                else:
985|                    klass_info = None
986|                    break
987|            if klass_info is None:
988|                invalid_names.append(name)
989|                continue
990|            select_index = klass_info['select_fields'][0]
991|            col = self.select[select_index][0]
992|            if self.connection.features.select_for_update_of_column:
993|                result.append(self.compile(col)[0])
994|            else:
995|                result.append(self.quote_name_unless_alias(col.alias))
996|        if invalid_names:
997|            raise FieldError(
998|                'Invalid field name(s) given in select_for_update(of=(...)): %s. '
999|                'Only relational fields followed in the query are allowed. '
1000|                'Choices are: %s.' % (
1001|                    ', '.join(invalid_names),
1002|                    ', '.join(_get_field_choices()),
1003|                )
1004|            )
1005|        return result
1006|
1007|    def deferred_to_columns(self):
1008|        """
1009|        Convert the self.deferred_loading data structure to mapping of table
1010|        names to sets of column names which are to be loaded. Return the
1011|        dictionary.
1012|        """
1013|        columns = {}
1014|        self.query.deferred_to_data(columns, self.query.get_loaded_field_names_cb)
1015|        return columns
1016|
1017|    def get_converters(self, expressions):
1018|        converters = {}
1019|        for i, expression in enumerate(expressions):
1020|            if expression:
1021|                backend_converters = self.connection.ops.get_db_converters(expression)
1022|                field_converters = expression.get_db_converters(self.connection)
1023|                if backend_converters or field_converters:
1024|                    converters[i] = (backend_converters + field_converters, expression)
1025|        return converters
1026|
1027|    def apply_converters(self, rows, converters):
1028|        connection = self.connection
1029|        converters = list(converters.items())
1030|        for row in map(list, rows):
1031|            for pos, (convs, expression) in converters:
1032|                value = row[pos]
1033|                for converter in convs:
1034|                    value = converter(value, expression, connection)
1035|                row[pos] = value
1036|            yield row
1037|
1038|    def results_iter(self, results=None, tuple_expected=False, chunked_fetch=False,
1039|                     chunk_size=GET_ITERATOR_CHUNK_SIZE):
1040|        """Return an iterator over the results from executing this query."""
1041|        if results is None:
1042|            results = self.execute_sql(MULTI, chunked_fetch=chunked_fetch, chunk_size=chunk_size)
1043|        fields = [s[0] for s in self.select[0:self.col_count]]
1044|        converters = self.get_converters(fields)
1045|        rows = chain.from_iterable(results)
1046|        if converters:
1047|            rows = self.apply_converters(rows, converters)
1048|            if tuple_expected:
1049|                rows = map(tuple, rows)
1050|        return rows
1051|
1052|    def has_results(self):
1053|        """
1054|        Backends (e.g. NoSQL) can override this in order to use optimized
1055|        versions of "query has any results."
1056|        """
1057|        # This is always executed on a query clone, so we can modify self.query
1058|        self.query.add_extra({'a': 1}, None, None, None, None, None)
1059|        self.query.set_extra_mask(['a'])
1060|        return bool(self.execute_sql(SINGLE))
1061|
1062|    def execute_sql(self, result_type=MULTI, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE):
1063|        """
1064|        Run the query against the database and return the result(s). The
1065|        return value is a single data item if result_type is SINGLE, or an
1066|        iterator over the results if the result_type is MULTI.
1067|
1068|        result_type is either MULTI (use fetchmany() to retrieve all rows),
1069|        SINGLE (only retrieve a single row), or None. In this last case, the
1070|        cursor is returned if any query is executed, since it's used by
1071|        subclasses such as InsertQuery). It's possible, however, that no query
1072|        is needed, as the filters describe an empty set. In that case, None is
1073|        returned, to avoid any unnecessary database interaction.
1074|        """
1075|        result_type = result_type or NO_RESULTS
1076|        try:
1077|            sql, params = self.as_sql()
1078|            if not sql:
1079|                raise EmptyResultSet
1080|        except EmptyResultSet:
1081|            if result_type == MULTI:
1082|                return iter([])
1083|            else:
1084|                return
1085|        if chunked_fetch:
1086|            cursor = self.connection.chunked_cursor()
1087|        else:
1088|            cursor = self.connection.cursor()
1089|        try:
1090|            cursor.execute(sql, params)
1091|        except Exception:
1092|            # Might fail for server-side cursors (e.g. connection closed)
1093|            cursor.close()
1094|            raise
1095|
1096|        if result_type == CURSOR:
1097|            # Give the caller the cursor to process and close.
1098|            return cursor
1099|        if result_type == SINGLE:
1100|            try:
1101|                val = cursor.fetchone()
1102|                if val:
1103|                    return val[0:self.col_count]
1104|                return val
1105|            finally:
1106|                # done with the cursor
1107|                cursor.close()
1108|        if result_type == NO_RESULTS:
1109|            cursor.close()
1110|            return
1111|
1112|        result = cursor_iter(
1113|            cursor, self.connection.features.empty_fetchmany_value,
1114|            self.col_count if self.has_extra_select else None,
1115|            chunk_size,
1116|        )
1117|        if not chunked_fetch or not self.connection.features.can_use_chunked_reads:
1118|            try:
1119|                # If we are using non-chunked reads, we return the same data
1120|                # structure as normally, but ensure it is all read into memory
1121|                # before going any further. Use chunked_fetch if requested,
1122|                # unless the database doesn't support it.
1123|                return list(result)
1124|            finally:
1125|                # done with the cursor
1126|                cursor.close()
1127|        return result
1128|
1129|    def as_subquery_condition(self, alias, columns, compiler):
1130|        qn = compiler.quote_name_unless_alias
1131|        qn2 = self.connection.ops.quote_name
1132|
1133|        for index, select_col in enumerate(self.query.select):
1134|            lhs_sql, lhs_params = self.compile(select_col)
1135|            rhs = '%s.%s' % (qn(alias), qn2(columns[index]))
1136|            self.query.where.add(
1137|                QueryWrapper('%s = %s' % (lhs_sql, rhs), lhs_params), 'AND')
1138|
1139|        sql, params = self.as_sql()
1140|        return 'EXISTS (%s)' % sql, params
1141|
1142|    def explain_query(self):
1143|        result = list(self.execute_sql())
1144|        # Some backends return 1 item tuples with strings, and others return
1145|        # tuples with integers and strings. Flatten them out into strings.
1146|        for row in result[0]:
1147|            if not isinstance(row, str):
1148|                yield ' '.join(str(c) for c in row)
1149|            else:
1150|                yield row
1151|
1152|
1153|class SQLInsertCompiler(SQLCompiler):
1154|    returning_fields = None
1155|
1156|    def field_as_sql(self, field, val):
1157|        """
1158|        Take a field and a value intended to be saved on that field, and
1159|        return placeholder SQL and accompanying params. Check for raw values,
1160|        expressions, and fields with get_placeholder() defined in that order.
...


### django/db/models/sql/query.py
...
135|            params = tuple(adapter(val) for val in self.params)
136|        elif params_type is dict:
137|            params = {key: adapter(val) for key, val in self.params.items()}
138|        else:
139|            raise RuntimeError("Unexpected params type: %s" % params_type)
140|
141|        self.cursor = connection.cursor()
142|        self.cursor.execute(self.sql, params)
143|
144|
145|class Query(BaseExpression):
146|    """A single SQL query."""
147|
148|    alias_prefix = 'T'
149|    subq_aliases = frozenset([alias_prefix])
150|
151|    compiler = 'SQLCompiler'
152|
153|    def __init__(self, model, where=WhereNode):
154|        self.model = model
155|        self.alias_refcount = {}
156|        # alias_map is the most important data structure regarding joins.
157|        # It's used for recording which joins exist in the query and what
158|        # types they are. The key is the alias of the joined table (possibly
159|        # the table name) and the value is a Join-like object (see
160|        # sql.datastructures.Join for more information).
161|        self.alias_map = {}
162|        # Sometimes the query contains references to aliases in outer queries (as
163|        # a result of split_exclude). Correct alias quoting needs to know these
164|        # aliases too.
165|        self.external_aliases = set()
166|        self.table_map = {}     # Maps table names to list of aliases.
167|        self.default_cols = True
168|        self.default_ordering = True
169|        self.standard_ordering = True
170|        self.used_aliases = set()
171|        self.filter_is_sticky = False
172|        self.subquery = False
173|
174|        # SQL-related attributes
175|        # Select and related select clauses are expressions to use in the
176|        # SELECT clause of the query.
177|        # The select is used for cases where we want to set up the select
178|        # clause to contain other than default fields (values(), subqueries...)
179|        # Note that annotations go to annotations dictionary.
180|        self.select = ()
181|        self.where = where()
182|        self.where_class = where
183|        # The group_by attribute can have one of the following forms:
184|        #  - None: no group by at all in the query
185|        #  - A tuple of expressions: group by (at least) those expressions.
186|        #    String refs are also allowed for now.
187|        #  - True: group by all select fields of the model
188|        # See compiler.get_group_by() for details.
189|        self.group_by = None
190|        self.order_by = ()
191|        self.low_mark, self.high_mark = 0, None  # Used for offset/limit
192|        self.distinct = False
193|        self.distinct_fields = ()
194|        self.select_for_update = False
195|        self.select_for_update_nowait = False
196|        self.select_for_update_skip_locked = False
197|        self.select_for_update_of = ()
198|
199|        self.select_related = False
200|        # Arbitrary limit for select_related to prevents infinite recursion.
201|        self.max_depth = 5
202|
203|        # Holds the selects defined by a call to values() or values_list()
204|        # excluding annotation_select and extra_select.
205|        self.values_select = ()
206|
207|        # SQL annotation-related attributes
208|        self.annotations = {}  # Maps alias -> Annotation Expression
209|        self.annotation_select_mask = None
210|        self._annotation_select_cache = None
211|
212|        # Set combination attributes
213|        self.combinator = None
214|        self.combinator_all = False
215|        self.combined_queries = ()
216|
217|        # These are for extensions. The contents are more or less appended
218|        # verbatim to the appropriate clause.
219|        self.extra = {}  # Maps col_alias -> (col_sql, params).
220|        self.extra_select_mask = None
221|        self._extra_select_cache = None
222|
223|        self.extra_tables = ()
224|        self.extra_order_by = ()
225|
226|        # A tuple that is a set of model field names and either True, if these
227|        # are the fields to defer, or False if these are the only fields to
228|        # load.
229|        self.deferred_loading = (frozenset(), True)
230|
231|        self._filtered_relations = {}
232|
233|        self.explain_query = False
234|        self.explain_format = None
235|        self.explain_options = {}
236|
237|    @property
238|    def output_field(self):
239|        if len(self.select) == 1:
240|            return self.select[0].field
241|        elif len(self.annotation_select) == 1:
242|            return next(iter(self.annotation_select.values())).output_field
243|
244|    @property
245|    def has_select_fields(self):
246|        return bool(self.select or self.annotation_select_mask or self.extra_select_mask)
247|
248|    @cached_property
249|    def base_table(self):
250|        for alias in self.alias_map:
251|            return alias
252|
253|    def __str__(self):
254|        """
255|        Return the query as a string of SQL with the parameter values
256|        substituted in (use sql_with_params() to see the unsubstituted string).
257|
258|        Parameter values won't necessarily be quoted correctly, since that is
259|        done by the database interface at execution time.
260|        """
261|        sql, params = self.sql_with_params()
262|        return sql % params
263|
264|    def sql_with_params(self):
265|        """
266|        Return the query as an SQL string and the parameters that will be
267|        substituted into the query.
268|        """
269|        return self.get_compiler(DEFAULT_DB_ALIAS).as_sql()
270|
271|    def __deepcopy__(self, memo):
272|        """Limit the amount of work when a Query is deepcopied."""
273|        result = self.clone()
274|        memo[id(self)] = result
275|        return result
276|
277|    def get_compiler(self, using=None, connection=None):
278|        if using is None and connection is None:
279|            raise ValueError("Need either using or connection")
280|        if using:
281|            connection = connections[using]
282|        return connection.ops.compiler(self.compiler)(self, connection, using)
283|
284|    def get_meta(self):
285|        """
286|        Return the Options instance (the model._meta) from which to start
287|        processing. Normally, this is self.model._meta, but it can be changed
288|        by subclasses.
289|        """
290|        return self.model._meta
291|
292|    def clone(self):
293|        """
294|        Return a copy of the current Query. A lightweight alternative to
295|        to deepcopy().
296|        """
297|        obj = Empty()
298|        obj.__class__ = self.__class__
299|        # Copy references to everything.
300|        obj.__dict__ = self.__dict__.copy()
301|        # Clone attributes that can't use shallow copy.
302|        obj.alias_refcount = self.alias_refcount.copy()
303|        obj.alias_map = self.alias_map.copy()
304|        obj.external_aliases = self.external_aliases.copy()
305|        obj.table_map = self.table_map.copy()
306|        obj.where = self.where.clone()
307|        obj.annotations = self.annotations.copy()
308|        if self.annotation_select_mask is None:
309|            obj.annotation_select_mask = None
310|        else:
311|            obj.annotation_select_mask = self.annotation_select_mask.copy()
312|        # _annotation_select_cache cannot be copied, as doing so breaks the
313|        # (necessary) state in which both annotations and
314|        # _annotation_select_cache point to the same underlying objects.
315|        # It will get re-populated in the cloned queryset the next time it's
316|        # used.
317|        obj._annotation_select_cache = None
318|        obj.extra = self.extra.copy()
319|        if self.extra_select_mask is None:
320|            obj.extra_select_mask = None
321|        else:
322|            obj.extra_select_mask = self.extra_select_mask.copy()
323|        if self._extra_select_cache is None:
324|            obj._extra_select_cache = None
325|        else:
326|            obj._extra_select_cache = self._extra_select_cache.copy()
327|        if 'subq_aliases' in self.__dict__:
328|            obj.subq_aliases = self.subq_aliases.copy()
329|        obj.used_aliases = self.used_aliases.copy()
330|        obj._filtered_relations = self._filtered_relations.copy()
331|        # Clear the cached_property
332|        try:
333|            del obj.base_table
334|        except AttributeError:
335|            pass
336|        return obj
337|
338|    def chain(self, klass=None):
339|        """
340|        Return a copy of the current Query that's ready for another operation.
341|        The klass argument changes the type of the Query, e.g. UpdateQuery.
342|        """
343|        obj = self.clone()
344|        if klass and obj.__class__ != klass:
345|            obj.__class__ = klass
346|        if not obj.filter_is_sticky:
347|            obj.used_aliases = set()
348|        obj.filter_is_sticky = False
349|        if hasattr(obj, '_setup_query'):
350|            obj._setup_query()
351|        return obj
352|
353|    def relabeled_clone(self, change_map):
354|        clone = self.clone()
355|        clone.change_aliases(change_map)
356|        return clone
357|
358|    def rewrite_cols(self, annotation, col_cnt):
359|        # We must make sure the inner query has the referred columns in it.
360|        # If we are aggregating over an annotation, then Django uses Ref()
361|        # instances to note this. However, if we are annotating over a column
362|        # of a related model, then it might be that column isn't part of the
363|        # SELECT clause of the inner query, and we must manually make sure
364|        # the column is selected. An example case is:
365|        #    .aggregate(Sum('author__awards'))
366|        # Resolving this expression results in a join to author, but there
367|        # is no guarantee the awards column of author is in the select clause
368|        # of the query. Thus we must manually add the column to the inner
369|        # query.
370|        orig_exprs = annotation.get_source_expressions()
371|        new_exprs = []
372|        for expr in orig_exprs:
373|            # FIXME: These conditions are fairly arbitrary. Identify a better
374|            # method of having expressions decide which code path they should
375|            # take.
376|            if isinstance(expr, Ref):
377|                # Its already a Ref to subquery (see resolve_ref() for
378|                # details)
379|                new_exprs.append(expr)
380|            elif isinstance(expr, (WhereNode, Lookup)):
381|                # Decompose the subexpressions further. The code here is
382|                # copied from the else clause, but this condition must appear
383|                # before the contains_aggregate/is_summary condition below.
384|                new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
385|                new_exprs.append(new_expr)
386|            else:
387|                # Reuse aliases of expressions already selected in subquery.
388|                for col_alias, selected_annotation in self.annotation_select.items():
389|                    if selected_annotation == expr:
390|                        new_expr = Ref(col_alias, expr)
391|                        break
392|                else:
393|                    # An expression that is not selected the subquery.
394|                    if isinstance(expr, Col) or (expr.contains_aggregate and not expr.is_summary):
395|                        # Reference column or another aggregate. Select it
396|                        # under a non-conflicting alias.
397|                        col_cnt += 1
398|                        col_alias = '__col%d' % col_cnt
399|                        self.annotations[col_alias] = expr
400|                        self.append_annotation_mask([col_alias])
401|                        new_expr = Ref(col_alias, expr)
402|                    else:
403|                        # Some other expression not referencing database values
404|                        # directly. Its subexpression might contain Cols.
405|                        new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)
406|                new_exprs.append(new_expr)
407|        annotation.set_source_expressions(new_exprs)
408|        return annotation, col_cnt
409|
410|    def get_aggregation(self, using, added_aggregate_names):
411|        """
412|        Return the dictionary with the values of the existing aggregations.
413|        """
414|        if not self.annotation_select:
415|            return {}
416|        existing_annotations = [
417|            annotation for alias, annotation
418|            in self.annotations.items()
419|            if alias not in added_aggregate_names
420|        ]
421|        # Decide if we need to use a subquery.
422|        #
423|        # Existing annotations would cause incorrect results as get_aggregation()
424|        # must produce just one result and thus must not use GROUP BY. But we
425|        # aren't smart enough to remove the existing annotations from the
426|        # query, so those would force us to use GROUP BY.
427|        #
428|        # If the query has limit or distinct, or uses set operations, then
429|        # those operations must be done in a subquery so that the query
430|        # aggregates on the limit and/or distinct results instead of applying
431|        # the distinct and limit after the aggregation.
432|        if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or
433|                self.distinct or self.combinator):
434|            from django.db.models.sql.subqueries import AggregateQuery
435|            outer_query = AggregateQuery(self.model)
436|            inner_query = self.clone()
437|            inner_query.select_for_update = False
438|            inner_query.select_related = False
439|            inner_query.set_annotation_mask(self.annotation_select)
440|            if not self.is_sliced and not self.distinct_fields:
441|                # Queries with distinct_fields need ordering and when a limit
442|                # is applied we must take the slice from the ordered query.
443|                # Otherwise no need for ordering.
444|                inner_query.clear_ordering(True)
445|            if not inner_query.distinct:
446|                # If the inner query uses default select and it has some
447|                # aggregate annotations, then we must make sure the inner
448|                # query is grouped by the main model's primary key. However,
449|                # clearing the select clause can alter results if distinct is
450|                # used.
451|                has_existing_aggregate_annotations = any(
452|                    annotation for annotation in existing_annotations
453|                    if getattr(annotation, 'contains_aggregate', True)
454|                )
455|                if inner_query.default_cols and has_existing_aggregate_annotations:
456|                    inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
457|                inner_query.default_cols = False
458|
459|            relabels = {t: 'subquery' for t in inner_query.alias_map}
460|            relabels[None] = 'subquery'
461|            # Remove any aggregates marked for reduction from the subquery
462|            # and move them to the outer AggregateQuery.
463|            col_cnt = 0
464|            for alias, expression in list(inner_query.annotation_select.items()):
465|                annotation_select_mask = inner_query.annotation_select_mask
466|                if expression.is_summary:
467|                    expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)
468|                    outer_query.annotations[alias] = expression.relabeled_clone(relabels)
469|                    del inner_query.annotations[alias]
470|                    annotation_select_mask.remove(alias)
471|                # Make sure the annotation_select wont use cached results.
472|                inner_query.set_annotation_mask(inner_query.annotation_select_mask)
473|            if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
474|                # In case of Model.objects[0:3].count(), there would be no
475|                # field selected in the inner query, yet we must use a subquery.
476|                # So, make sure at least one field is selected.
477|                inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
478|            try:
479|                outer_query.add_subquery(inner_query, using)
480|            except EmptyResultSet:
481|                return {
482|                    alias: None
483|                    for alias in outer_query.annotation_select
484|                }
485|        else:
486|            outer_query = self
487|            self.select = ()
488|            self.default_cols = False
489|            self.extra = {}
490|
491|        outer_query.clear_ordering(True)
492|        outer_query.clear_limits()
493|        outer_query.select_for_update = False
494|        outer_query.select_related = False
495|        compiler = outer_query.get_compiler(using)
496|        result = compiler.execute_sql(SINGLE)
497|        if result is None:
498|            result = [None] * len(outer_query.annotation_select)
499|
500|        converters = compiler.get_converters(outer_query.annotation_select.values())
501|        result = next(compiler.apply_converters((result,), converters))
502|
503|        return dict(zip(outer_query.annotation_select, result))
504|
505|    def get_count(self, using):
506|        """
507|        Perform a COUNT() query using the current filter constraints.
508|        """
509|        obj = self.clone()
510|        obj.add_annotation(Count('*'), alias='__count', is_summary=True)
511|        number = obj.get_aggregation(using, ['__count'])['__count']
512|        if number is None:
513|            number = 0
514|        return number
515|
516|    def has_filters(self):
517|        return self.where
518|
519|    def has_results(self, using):
520|        q = self.clone()
521|        if not q.distinct:
522|            if q.group_by is True:
523|                q.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
524|                q.set_group_by()
525|            q.clear_select_clause()
526|        q.clear_ordering(True)
527|        q.set_limits(high=1)
528|        compiler = q.get_compiler(using=using)
529|        return compiler.has_results()
530|
531|    def explain(self, using, format=None, **options):
532|        q = self.clone()
533|        q.explain_query = True
534|        q.explain_format = format
535|        q.explain_options = options
536|        compiler = q.get_compiler(using=using)
537|        return '\n'.join(compiler.explain_query())
538|
539|    def combine(self, rhs, connector):
540|        """
541|        Merge the 'rhs' query into the current one (with any 'rhs' effects
542|        being applied *after* (that is, "to the right of") anything in the
543|        current query. 'rhs' is not modified during a call to this function.
544|
545|        The 'connector' parameter describes how to connect filters from the
546|        'rhs' query.
547|        """
548|        assert self.model == rhs.model, \
549|            "Cannot combine queries on two different base models."
550|        assert not self.is_sliced, \
551|            "Cannot combine queries once a slice has been taken."
552|        assert self.distinct == rhs.distinct, \
553|            "Cannot combine a unique query with a non-unique query."
554|        assert self.distinct_fields == rhs.distinct_fields, \
555|            "Cannot combine queries with different distinct fields."
556|
557|        # Work out how to relabel the rhs aliases, if necessary.
558|        change_map = {}
559|        conjunction = (connector == AND)
560|
561|        # Determine which existing joins can be reused. When combining the
562|        # query with AND we must recreate all joins for m2m filters. When
563|        # combining with OR we can reuse joins. The reason is that in AND
564|        # case a single row can't fulfill a condition like:
565|        #     revrel__col=1 & revrel__col=2
566|        # But, there might be two different related rows matching this
567|        # condition. In OR case a single True is enough, so single row is
568|        # enough, too.
569|        #
570|        # Note that we will be creating duplicate joins for non-m2m joins in
571|        # the AND case. The results will be correct but this creates too many
572|        # joins. This is something that could be fixed later on.
573|        reuse = set() if conjunction else set(self.alias_map)
574|        # Base table must be present in the query - this is the same
575|        # table on both sides.
576|        self.get_initial_alias()
577|        joinpromoter = JoinPromoter(connector, 2, False)
578|        joinpromoter.add_votes(
579|            j for j in self.alias_map if self.alias_map[j].join_type == INNER)
580|        rhs_votes = set()
581|        # Now, add the joins from rhs query into the new query (skipping base
582|        # table).
583|        rhs_tables = list(rhs.alias_map)[1:]
584|        for alias in rhs_tables:
585|            join = rhs.alias_map[alias]
586|            # If the left side of the join was already relabeled, use the
587|            # updated alias.
588|            join = join.relabeled_clone(change_map)
589|            new_alias = self.join(join, reuse=reuse)
590|            if join.join_type == INNER:
591|                rhs_votes.add(new_alias)
592|            # We can't reuse the same join again in the query. If we have two
593|            # distinct joins for the same connection in rhs query, then the
594|            # combined query must have two joins, too.
595|            reuse.discard(new_alias)
596|            if alias != new_alias:
597|                change_map[alias] = new_alias
598|            if not rhs.alias_refcount[alias]:
599|                # The alias was unused in the rhs query. Unref it so that it
600|                # will be unused in the new query, too. We have to add and
601|                # unref the alias so that join promotion has information of
602|                # the join type for the unused alias.
603|                self.unref_alias(new_alias)
604|        joinpromoter.add_votes(rhs_votes)
605|        joinpromoter.update_join_types(self)
606|
607|        # Now relabel a copy of the rhs where-clause and add it to the current
608|        # one.
609|        w = rhs.where.clone()
610|        w.relabel_aliases(change_map)
611|        self.where.add(w, connector)
612|
613|        # Selection columns and extra extensions are those provided by 'rhs'.
614|        if rhs.select:
615|            self.set_select([col.relabeled_clone(change_map) for col in rhs.select])
616|        else:
617|            self.select = ()
618|
619|        if connector == OR:
620|            # It would be nice to be able to handle this, but the queries don't
621|            # really make sense (or return consistent value sets). Not worth
622|            # the extra complexity when you can write a real query instead.
623|            if self.extra and rhs.extra:
624|                raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides.")
625|        self.extra.update(rhs.extra)
626|        extra_select_mask = set()
627|        if self.extra_select_mask is not None:
628|            extra_select_mask.update(self.extra_select_mask)
629|        if rhs.extra_select_mask is not None:
630|            extra_select_mask.update(rhs.extra_select_mask)
631|        if extra_select_mask:
632|            self.set_extra_mask(extra_select_mask)
633|        self.extra_tables += rhs.extra_tables
634|
635|        # Ordering uses the 'rhs' ordering, unless it has none, in which case
636|        # the current ordering is used.
637|        self.order_by = rhs.order_by or self.order_by
638|        self.extra_order_by = rhs.extra_order_by or self.extra_order_by
639|
640|    def deferred_to_data(self, target, callback):
641|        """
642|        Convert the self.deferred_loading data structure to an alternate data
643|        structure, describing the field that *will* be loaded. This is used to
644|        compute the columns to select from the database and also by the
645|        QuerySet class to work out which fields are being initialized on each
646|        model. Models that have all their fields included aren't mentioned in
647|        the result, only those that have field restrictions in place.
648|
649|        The "target" parameter is the instance that is populated (in place).
650|        The "callback" is a function that is called whenever a (model, field)
651|        pair need to be added to "target". It accepts three parameters:
652|        "target", and the model and list of fields being added for that model.
653|        """
654|        field_names, defer = self.deferred_loading
655|        if not field_names:
656|            return
657|        orig_opts = self.get_meta()
658|        seen = {}
659|        must_include = {orig_opts.concrete_model: {orig_opts.pk}}
660|        for field_name in field_names:
661|            parts = field_name.split(LOOKUP_SEP)
662|            cur_model = self.model._meta.concrete_model
663|            opts = orig_opts
664|            for name in parts[:-1]:
665|                old_model = cur_model
666|                if name in self._filtered_relations:
667|                    name = self._filtered_relations[name].relation_name
668|                source = opts.get_field(name)
669|                if is_reverse_o2o(source):
670|                    cur_model = source.related_model
671|                else:
672|                    cur_model = source.remote_field.model
673|                opts = cur_model._meta
674|                # Even if we're "just passing through" this model, we must add
675|                # both the current model's pk and the related reference field
676|                # (if it's not a reverse relation) to the things we select.
677|                if not is_reverse_o2o(source):
678|                    must_include[old_model].add(source)
679|                add_to_dict(must_include, cur_model, opts.pk)
680|            field = opts.get_field(parts[-1])
681|            is_reverse_object = field.auto_created and not field.concrete
682|            model = field.related_model if is_reverse_object else field.model
683|            model = model._meta.concrete_model
684|            if model == opts.model:
685|                model = cur_model
686|            if not is_reverse_o2o(field):
687|                add_to_dict(seen, model, field)
688|
689|        if defer:
690|            # We need to load all fields for each model, except those that
691|            # appear in "seen" (for all models that appear in "seen"). The only
692|            # slight complexity here is handling fields that exist on parent
693|            # models.
694|            workset = {}
695|            for model, values in seen.items():
696|                for field in model._meta.local_fields:
697|                    if field not in values:
698|                        m = field.model._meta.concrete_model
699|                        add_to_dict(workset, m, field)
700|            for model, values in must_include.items():
701|                # If we haven't included a model in workset, we don't add the
702|                # corresponding must_include fields for that model, since an
703|                # empty set means "include all fields". That's why there's no
704|                # "else" branch here.
705|                if model in workset:
706|                    workset[model].update(values)
707|            for model, values in workset.items():
708|                callback(target, model, values)
709|        else:
710|            for model, values in must_include.items():
711|                if model in seen:
712|                    seen[model].update(values)
713|                else:
714|                    # As we've passed through this model, but not explicitly
715|                    # included any fields, we have to make sure it's mentioned
716|                    # so that only the "must include" fields are pulled in.
717|                    seen[model] = values
718|            # Now ensure that every model in the inheritance chain is mentioned
719|            # in the parent list. Again, it must be mentioned to ensure that
720|            # only "must include" fields are pulled in.
721|            for model in orig_opts.get_parent_list():
722|                seen.setdefault(model, set())
723|            for model, values in seen.items():
724|                callback(target, model, values)
725|
726|    def table_alias(self, table_name, create=False, filtered_relation=None):
727|        """
728|        Return a table alias for the given table_name and whether this is a
729|        new alias or not.
730|
731|        If 'create' is true, a new alias is always created. Otherwise, the
732|        most recently created alias for the table (if one exists) is reused.
733|        """
734|        alias_list = self.table_map.get(table_name)
735|        if not create and alias_list:
736|            alias = alias_list[0]
737|            self.alias_refcount[alias] += 1
738|            return alias, False
739|
740|        # Create a new alias for this table.
741|        if alias_list:
742|            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)
743|            alias_list.append(alias)
744|        else:
745|            # The first occurrence of a table uses the table name directly.
746|            alias = filtered_relation.alias if filtered_relation is not None else table_name
747|            self.table_map[table_name] = [alias]
748|        self.alias_refcount[alias] = 1
749|        return alias, True
750|
751|    def ref_alias(self, alias):
752|        """Increases the reference count for this alias."""
753|        self.alias_refcount[alias] += 1
754|
755|    def unref_alias(self, alias, amount=1):
756|        """Decreases the reference count for this alias."""
757|        self.alias_refcount[alias] -= amount
758|
759|    def promote_joins(self, aliases):
760|        """
761|        Promote recursively the join type of given aliases and its children to
762|        an outer join. If 'unconditional' is False, only promote the join if
763|        it is nullable or the parent join is an outer join.
764|
765|        The children promotion is done to avoid join chains that contain a LOUTER
766|        b INNER c. So, if we have currently a INNER b INNER c and a->b is promoted,
767|        then we must also promote b->c automatically, or otherwise the promotion
768|        of a->b doesn't actually change anything in the query results.
769|        """
770|        aliases = list(aliases)
771|        while aliases:
772|            alias = aliases.pop(0)
773|            if self.alias_map[alias].join_type is None:
774|                # This is the base table (first FROM entry) - this table
775|                # isn't really joined at all in the query, so we should not
776|                # alter its join type.
777|                continue
778|            # Only the first alias (skipped above) should have None join_type
779|            assert self.alias_map[alias].join_type is not None
780|            parent_alias = self.alias_map[alias].parent_alias
781|            parent_louter = parent_alias and self.alias_map[parent_alias].join_type == LOUTER
782|            already_louter = self.alias_map[alias].join_type == LOUTER
783|            if ((self.alias_map[alias].nullable or parent_louter) and
784|                    not already_louter):
785|                self.alias_map[alias] = self.alias_map[alias].promote()
786|                # Join type of 'alias' changed, so re-examine all aliases that
787|                # refer to this one.
788|                aliases.extend(
789|                    join for join in self.alias_map
790|                    if self.alias_map[join].parent_alias == alias and join not in aliases
791|                )
792|
793|    def demote_joins(self, aliases):
794|        """
795|        Change join type from LOUTER to INNER for all joins in aliases.
796|
797|        Similarly to promote_joins(), this method must ensure no join chains
798|        containing first an outer, then an inner join are generated. If we
799|        are demoting b->c join in chain a LOUTER b LOUTER c then we must
800|        demote a->b automatically, or otherwise the demotion of b->c doesn't
801|        actually change anything in the query results. .
802|        """
803|        aliases = list(aliases)
804|        while aliases:
805|            alias = aliases.pop(0)
806|            if self.alias_map[alias].join_type == LOUTER:
807|                self.alias_map[alias] = self.alias_map[alias].demote()
808|                parent_alias = self.alias_map[alias].parent_alias
809|                if self.alias_map[parent_alias].join_type == INNER:
810|                    aliases.append(parent_alias)
811|
812|    def reset_refcounts(self, to_counts):
813|        """
814|        Reset reference counts for aliases so that they match the value passed
815|        in `to_counts`.
816|        """
817|        for alias, cur_refcount in self.alias_refcount.copy().items():
818|            unref_amount = cur_refcount - to_counts.get(alias, 0)
819|            self.unref_alias(alias, unref_amount)
820|
821|    def change_aliases(self, change_map):
822|        """
823|        Change the aliases in change_map (which maps old-alias -> new-alias),
824|        relabelling any references to them in select columns and the where
825|        clause.
826|        """
827|        assert set(change_map).isdisjoint(change_map.values())
828|
829|        # 1. Update references in "select" (normal columns plus aliases),
830|        # "group by" and "where".
831|        self.where.relabel_aliases(change_map)
832|        if isinstance(self.group_by, tuple):
833|            self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])
834|        self.select = tuple([col.relabeled_clone(change_map) for col in self.select])
835|        self.annotations = self.annotations and {
836|            key: col.relabeled_clone(change_map) for key, col in self.annotations.items()
837|        }
838|
839|        # 2. Rename the alias in the internal table/alias datastructures.
840|        for old_alias, new_alias in change_map.items():
841|            if old_alias not in self.alias_map:
842|                continue
843|            alias_data = self.alias_map[old_alias].relabeled_clone(change_map)
844|            self.alias_map[new_alias] = alias_data
845|            self.alias_refcount[new_alias] = self.alias_refcount[old_alias]
846|            del self.alias_refcount[old_alias]
847|            del self.alias_map[old_alias]
848|
849|            table_aliases = self.table_map[alias_data.table_name]
850|            for pos, alias in enumerate(table_aliases):
851|                if alias == old_alias:
852|                    table_aliases[pos] = new_alias
853|                    break
854|        self.external_aliases = {change_map.get(alias, alias)
855|                                 for alias in self.external_aliases}
856|
857|    def bump_prefix(self, outer_query):
858|        """
859|        Change the alias prefix to the next letter in the alphabet in a way
860|        that the outer query's aliases and this query's aliases will not
861|        conflict. Even tables that previously had no alias will get an alias
862|        after this call.
863|        """
864|        def prefix_gen():
865|            """
866|            Generate a sequence of characters in alphabetical order:
867|                -> 'A', 'B', 'C', ...
868|
869|            When the alphabet is finished, the sequence will continue with the
870|            Cartesian product:
871|                -> 'AA', 'AB', 'AC', ...
872|            """
873|            alphabet = ascii_uppercase
874|            prefix = chr(ord(self.alias_prefix) + 1)
875|            yield prefix
876|            for n in count(1):
877|                seq = alphabet[alphabet.index(prefix):] if prefix else alphabet
878|                for s in product(seq, repeat=n):
879|                    yield ''.join(s)
880|                prefix = None
881|
882|        if self.alias_prefix != outer_query.alias_prefix:
883|            # No clashes between self and outer query should be possible.
884|            return
885|
886|        # Explicitly avoid infinite loop. The constant divider is based on how
887|        # much depth recursive subquery references add to the stack. This value
888|        # might need to be adjusted when adding or removing function calls from
889|        # the code path in charge of performing these operations.
890|        local_recursion_limit = sys.getrecursionlimit() // 16
891|        for pos, prefix in enumerate(prefix_gen()):
892|            if prefix not in self.subq_aliases:
893|                self.alias_prefix = prefix
894|                break
895|            if pos > local_recursion_limit:
896|                raise RecursionError(
897|                    'Maximum recursion depth exceeded: too many subqueries.'
898|                )
899|        self.subq_aliases = self.subq_aliases.union([self.alias_prefix])
900|        outer_query.subq_aliases = outer_query.subq_aliases.union(self.subq_aliases)
901|        self.change_aliases({
902|            alias: '%s%d' % (self.alias_prefix, pos)
903|            for pos, alias in enumerate(self.alias_map)
904|        })
905|
906|    def get_initial_alias(self):
907|        """
908|        Return the first alias for this query, after increasing its reference
909|        count.
910|        """
911|        if self.alias_map:
912|            alias = self.base_table
913|            self.ref_alias(alias)
914|        else:
915|            alias = self.join(BaseTable(self.get_meta().db_table, None))
916|        return alias
917|
918|    def count_active_tables(self):
919|        """
920|        Return the number of tables in this query with a non-zero reference
921|        count. After execution, the reference counts are zeroed, so tables
922|        added in compiler will not be seen by this method.
923|        """
924|        return len([1 for count in self.alias_refcount.values() if count])
925|
926|    def join(self, join, reuse=None, reuse_with_filtered_relation=False):
927|        """
928|        Return an alias for the 'join', either reusing an existing alias for
929|        that join or creating a new one. 'join' is either a
930|        sql.datastructures.BaseTable or Join.
931|
932|        The 'reuse' parameter can be either None which means all joins are
933|        reusable, or it can be a set containing the aliases that can be reused.
934|
935|        The 'reuse_with_filtered_relation' parameter is used when computing
936|        FilteredRelation instances.
937|
938|        A join is always created as LOUTER if the lhs alias is LOUTER to make
939|        sure chains like t1 LOUTER t2 INNER t3 aren't generated. All new
940|        joins are created as LOUTER if the join is nullable.
941|        """
942|        if reuse_with_filtered_relation and reuse:
943|            reuse_aliases = [
944|                a for a, j in self.alias_map.items()
945|                if a in reuse and j.equals(join, with_filtered_relation=False)
946|            ]
947|        else:
948|            reuse_aliases = [
949|                a for a, j in self.alias_map.items()
950|                if (reuse is None or a in reuse) and j == join
951|            ]
952|        if reuse_aliases:
953|            if join.table_alias in reuse_aliases:
954|                reuse_alias = join.table_alias
955|            else:
956|                # Reuse the most recent alias of the joined table
957|                # (a many-to-many relation may be joined multiple times).
958|                reuse_alias = reuse_aliases[-1]
959|            self.ref_alias(reuse_alias)
960|            return reuse_alias
961|
962|        # No reuse is possible, so we need a new alias.
963|        alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)
964|        if join.join_type:
965|            if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:
966|                join_type = LOUTER
967|            else:
968|                join_type = INNER
969|            join.join_type = join_type
970|        join.table_alias = alias
971|        self.alias_map[alias] = join
972|        return alias
973|
974|    def join_parent_model(self, opts, model, alias, seen):
975|        """
976|        Make sure the given 'model' is joined in the query. If 'model' isn't
977|        a parent of 'opts' or if it is None this method is a no-op.
978|
979|        The 'alias' is the root alias for starting the join, 'seen' is a dict
980|        of model -> alias of existing joins. It must also contain a mapping
981|        of None -> some alias. This will be returned in the no-op case.
982|        """
983|        if model in seen:
984|            return seen[model]
985|        chain = opts.get_base_chain(model)
986|        if not chain:
987|            return alias
988|        curr_opts = opts
989|        for int_model in chain:
990|            if int_model in seen:
991|                curr_opts = int_model._meta
992|                alias = seen[int_model]
993|                continue
994|            # Proxy model have elements in base chain
995|            # with no parents, assign the new options
996|            # object and skip to the next base in that
997|            # case
998|            if not curr_opts.parents[int_model]:
999|                curr_opts = int_model._meta
1000|                continue
1001|            link_field = curr_opts.get_ancestor_link(int_model)
1002|            join_info = self.setup_joins([link_field.name], curr_opts, alias)
1003|            curr_opts = int_model._meta
1004|            alias = seen[int_model] = join_info.joins[-1]
1005|        return alias or seen[None]
1006|
1007|    def add_annotation(self, annotation, alias, is_summary=False):
1008|        """Add a single annotation expression to the Query."""
1009|        annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None,
1010|                                                   summarize=is_summary)
1011|        self.append_annotation_mask([alias])
1012|        self.annotations[alias] = annotation
1013|
1014|    def resolve_expression(self, query, *args, **kwargs):
1015|        clone = self.clone()
1016|        # Subqueries need to use a different set of aliases than the outer query.
1017|        clone.bump_prefix(query)
1018|        clone.subquery = True
1019|        # It's safe to drop ordering if the queryset isn't using slicing,
1020|        # distinct(*fields) or select_for_update().
1021|        if (self.low_mark == 0 and self.high_mark is None and
1022|                not self.distinct_fields and
1023|                not self.select_for_update):
1024|            clone.clear_ordering(True)
1025|        clone.where.resolve_expression(query, *args, **kwargs)
1026|        for key, value in clone.annotations.items():
1027|            resolved = value.resolve_expression(query, *args, **kwargs)
1028|            if hasattr(resolved, 'external_aliases'):
1029|                resolved.external_aliases.update(clone.alias_map)
1030|            clone.annotations[key] = resolved
1031|        # Outer query's aliases are considered external.
1032|        clone.external_aliases.update(
1033|            alias for alias, table in query.alias_map.items()
1034|            if (
1035|                isinstance(table, Join) and table.join_field.related_model._meta.db_table != alias
1036|            ) or (
1037|                isinstance(table, BaseTable) and table.table_name != table.table_alias
1038|            )
1039|        )
1040|        return clone
1041|
1042|    def as_sql(self, compiler, connection):
1043|        sql, params = self.get_compiler(connection=connection).as_sql()
1044|        if self.subquery:
1045|            sql = '(%s)' % sql
1046|        return sql, params
1047|
1048|    def resolve_lookup_value(self, value, can_reuse, allow_joins, simple_col):
1049|        if hasattr(value, 'resolve_expression'):
1050|            kwargs = {'reuse': can_reuse, 'allow_joins': allow_joins}
1051|            if isinstance(value, F):
1052|                kwargs['simple_col'] = simple_col
1053|            value = value.resolve_expression(self, **kwargs)
1054|        elif isinstance(value, (list, tuple)):
1055|            # The items of the iterable may be expressions and therefore need
1056|            # to be resolved independently.
1057|            resolved_values = []
1058|            for sub_value in value:
1059|                if hasattr(sub_value, 'resolve_expression'):
1060|                    if isinstance(sub_value, F):
1061|                        resolved_values.append(sub_value.resolve_expression(
1062|                            self, reuse=can_reuse, allow_joins=allow_joins,
1063|                            simple_col=simple_col,
1064|                        ))
1065|                    else:
1066|                        resolved_values.append(sub_value.resolve_expression(
1067|                            self, reuse=can_reuse, allow_joins=allow_joins,
1068|                        ))
1069|                else:
1070|                    resolved_values.append(sub_value)
1071|            value = tuple(resolved_values)
1072|        return value
1073|
1074|    def solve_lookup_type(self, lookup):
1075|        """
1076|        Solve the lookup type from the lookup (e.g.: 'foobar__id__icontains').
1077|        """
1078|        lookup_splitted = lookup.split(LOOKUP_SEP)
1079|        if self.annotations:
1080|            expression, expression_lookups = refs_expression(lookup_splitted, self.annotations)
1081|            if expression:
1082|                return expression_lookups, (), expression
1083|        _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
1084|        field_parts = lookup_splitted[0:len(lookup_splitted) - len(lookup_parts)]
1085|        if len(lookup_parts) > 1 and not field_parts:
1086|            raise FieldError(
1087|                'Invalid lookup "%s" for model %s".' %
1088|                (lookup, self.get_meta().model.__name__)
1089|            )
1090|        return lookup_parts, field_parts, False
1091|
1092|    def check_query_object_type(self, value, opts, field):
1093|        """
1094|        Check whether the object passed while querying is of the correct type.
1095|        If not, raise a ValueError specifying the wrong object.
1096|        """
1097|        if hasattr(value, '_meta'):
1098|            if not check_rel_lookup_compatibility(value._meta.model, opts, field):
1099|                raise ValueError(
1100|                    'Cannot query "%s": Must be "%s" instance.' %
1101|                    (value, opts.object_name))
1102|
1103|    def check_related_objects(self, field, value, opts):
1104|        """Check the type of object passed to query relations."""
1105|        if field.is_relation:
1106|            # Check that the field and the queryset use the same model in a
1107|            # query like .filter(author=Author.objects.all()). For example, the
1108|            # opts would be Author's (from the author field) and value.model
1109|            # would be Author.objects.all() queryset's .model (Author also).
1110|            # The field is the related field on the lhs side.
1111|            if (isinstance(value, Query) and not value.has_select_fields and
1112|                    not check_rel_lookup_compatibility(value.model, opts, field)):
1113|                raise ValueError(
1114|                    'Cannot use QuerySet for "%s": Use a QuerySet for "%s".' %
1115|                    (value.model._meta.object_name, opts.object_name)
1116|                )
1117|            elif hasattr(value, '_meta'):
1118|                self.check_query_object_type(value, opts, field)
1119|            elif hasattr(value, '__iter__'):
1120|                for v in value:
1121|                    self.check_query_object_type(v, opts, field)
1122|
1123|    def check_filterable(self, expression):
1124|        """Raise an error if expression cannot be used in a WHERE clause."""
1125|        if not getattr(expression, 'filterable', 'True'):
1126|            raise NotSupportedError(
1127|                expression.__class__.__name__ + ' is disallowed in the filter '
1128|                'clause.'
1129|            )
1130|        if hasattr(expression, 'get_source_expressions'):
1131|            for expr in expression.get_source_expressions():
1132|                self.check_filterable(expr)
1133|
1134|    def build_lookup(self, lookups, lhs, rhs):
1135|        """
1136|        Try to extract transforms and lookup from given lhs.
1137|
1138|        The lhs value is something that works like SQLExpression.
1139|        The rhs value is what the lookup is going to compare against.
1140|        The lookups is a list of names to extract using get_lookup()
1141|        and get_transform().
1142|        """
1143|        # __exact is the default lookup if one isn't given.
1144|        *transforms, lookup_name = lookups or ['exact']
1145|        for name in transforms:
1146|            lhs = self.try_transform(lhs, name)
1147|        # First try get_lookup() so that the lookup takes precedence if the lhs
1148|        # supports both transform and lookup for the name.
1149|        lookup_class = lhs.get_lookup(lookup_name)
1150|        if not lookup_class:
1151|            if lhs.field.is_relation:
1152|                raise FieldError('Related Field got invalid lookup: {}'.format(lookup_name))
1153|            # A lookup wasn't found. Try to interpret the name as a transform
1154|            # and do an Exact lookup against it.
1155|            lhs = self.try_transform(lhs, lookup_name)
1156|            lookup_name = 'exact'
1157|            lookup_class = lhs.get_lookup(lookup_name)
1158|            if not lookup_class:
1159|                return
1160|
1161|        lookup = lookup_class(lhs, rhs)
1162|        # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all
1163|        # uses of None as a query value unless the lookup supports it.
1164|        if lookup.rhs is None and not lookup.can_use_none_as_rhs:
1165|            if lookup_name not in ('exact', 'iexact'):
1166|                raise ValueError("Cannot use None as a query value")
1167|            return lhs.get_lookup('isnull')(lhs, True)
1168|
1169|        # For Oracle '' is equivalent to null. The check must be done at this
1170|        # stage because join promotion can't be done in the compiler. Using
1171|        # DEFAULT_DB_ALIAS isn't nice but it's the best that can be done here.
1172|        # A similar thing is done in is_nullable(), too.
1173|        if (connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
1174|                lookup_name == 'exact' and lookup.rhs == ''):
1175|            return lhs.get_lookup('isnull')(lhs, True)
1176|
1177|        return lookup
1178|
1179|    def try_transform(self, lhs, name):
1180|        """
1181|        Helper method for build_lookup(). Try to fetch and initialize
1182|        a transform for name parameter from lhs.
1183|        """
1184|        transform_class = lhs.get_transform(name)
1185|        if transform_class:
1186|            return transform_class(lhs)
1187|        else:
1188|            output_field = lhs.output_field.__class__
1189|            suggested_lookups = difflib.get_close_matches(name, output_field.get_lookups())
1190|            if suggested_lookups:
1191|                suggestion = ', perhaps you meant %s?' % ' or '.join(suggested_lookups)
1192|            else:
1193|                suggestion = '.'
1194|            raise FieldError(
1195|                "Unsupported lookup '%s' for %s or join on the field not "
1196|                "permitted%s" % (name, output_field.__name__, suggestion)
1197|            )
1198|
1199|    def build_filter(self, filter_expr, branch_negated=False, current_negated=False,
1200|                     can_reuse=None, allow_joins=True, split_subq=True,
1201|                     reuse_with_filtered_relation=False, simple_col=False):
1202|        """
1203|        Build a WhereNode for a single filter clause but don't add it
1204|        to this Query. Query.add_q() will then add this filter to the where
1205|        Node.
1206|
1207|        The 'branch_negated' tells us if the current branch contains any
1208|        negations. This will be used to determine if subqueries are needed.
1209|
1210|        The 'current_negated' is used to determine if the current filter is
1211|        negated or not and this will be used to determine if IS NULL filtering
1212|        is needed.
1213|
1214|        The difference between current_negated and branch_negated is that
1215|        branch_negated is set on first negation, but current_negated is
1216|        flipped for each negation.
1217|
1218|        Note that add_filter will not do any negating itself, that is done
1219|        upper in the code by add_q().
1220|
1221|        The 'can_reuse' is a set of reusable joins for multijoins.
1222|
1223|        If 'reuse_with_filtered_relation' is True, then only joins in can_reuse
1224|        will be reused.
1225|
1226|        The method will create a filter clause that can be added to the current
1227|        query. However, if the filter isn't added to the query then the caller
1228|        is responsible for unreffing the joins used.
1229|        """
1230|        if isinstance(filter_expr, dict):
1231|            raise FieldError("Cannot parse keyword query as dict")
1232|        if hasattr(filter_expr, 'resolve_expression') and getattr(filter_expr, 'conditional', False):
1233|            if connections[DEFAULT_DB_ALIAS].ops.conditional_expression_supported_in_where_clause(filter_expr):
1234|                condition = filter_expr.resolve_expression(self)
1235|            else:
1236|                # Expression is not supported in the WHERE clause, add
1237|                # comparison with True.
1238|                condition = self.build_lookup(['exact'], filter_expr.resolve_expression(self), True)
1239|            clause = self.where_class()
1240|            clause.add(condition, AND)
1241|            return clause, []
1242|        arg, value = filter_expr
1243|        if not arg:
1244|            raise FieldError("Cannot parse keyword query %r" % arg)
1245|        lookups, parts, reffed_expression = self.solve_lookup_type(arg)
1246|
1247|        self.check_filterable(reffed_expression)
1248|
1249|        if not allow_joins and len(parts) > 1:
1250|            raise FieldError("Joined field references are not permitted in this query")
1251|
1252|        pre_joins = self.alias_refcount.copy()
1253|        value = self.resolve_lookup_value(value, can_reuse, allow_joins, simple_col)
1254|        used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}
1255|
1256|        self.check_filterable(value)
1257|
1258|        clause = self.where_class()
1259|        if reffed_expression:
1260|            condition = self.build_lookup(lookups, reffed_expression, value)
1261|            clause.add(condition, AND)
1262|            return clause, []
1263|
1264|        opts = self.get_meta()
1265|        alias = self.get_initial_alias()
1266|        allow_many = not branch_negated or not split_subq
1267|
1268|        try:
1269|            join_info = self.setup_joins(
1270|                parts, opts, alias, can_reuse=can_reuse, allow_many=allow_many,
1271|                reuse_with_filtered_relation=reuse_with_filtered_relation,
1272|            )
1273|
1274|            # Prevent iterator from being consumed by check_related_objects()
1275|            if isinstance(value, Iterator):
1276|                value = list(value)
1277|            self.check_related_objects(join_info.final_field, value, join_info.opts)
1278|
1279|            # split_exclude() needs to know which joins were generated for the
1280|            # lookup parts
1281|            self._lookup_joins = join_info.joins
1282|        except MultiJoin as e:
1283|            return self.split_exclude(filter_expr, can_reuse, e.names_with_path)
1284|
1285|        # Update used_joins before trimming since they are reused to determine
1286|        # which joins could be later promoted to INNER.
1287|        used_joins.update(join_info.joins)
1288|        targets, alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1289|        if can_reuse is not None:
1290|            can_reuse.update(join_list)
1291|
1292|        if join_info.final_field.is_relation:
1293|            # No support for transforms for relational fields
1294|            num_lookups = len(lookups)
1295|            if num_lookups > 1:
1296|                raise FieldError('Related Field got invalid lookup: {}'.format(lookups[0]))
1297|            if len(targets) == 1:
1298|                col = _get_col(targets[0], join_info.final_field, alias, simple_col)
1299|            else:
1300|                col = MultiColSource(alias, targets, join_info.targets, join_info.final_field)
1301|        else:
1302|            col = _get_col(targets[0], join_info.final_field, alias, simple_col)
1303|
1304|        condition = self.build_lookup(lookups, col, value)
1305|        lookup_type = condition.lookup_name
1306|        clause.add(condition, AND)
1307|
1308|        require_outer = lookup_type == 'isnull' and condition.rhs is True and not current_negated
1309|        if current_negated and (lookup_type != 'isnull' or condition.rhs is False) and condition.rhs is not None:
1310|            require_outer = True
1311|            if (lookup_type != 'isnull' and (
1312|                    self.is_nullable(targets[0]) or
1313|                    self.alias_map[join_list[-1]].join_type == LOUTER)):
1314|                # The condition added here will be SQL like this:
1315|                # NOT (col IS NOT NULL), where the first NOT is added in
1316|                # upper layers of code. The reason for addition is that if col
1317|                # is null, then col != someval will result in SQL "unknown"
1318|                # which isn't the same as in Python. The Python None handling
1319|                # is wanted, and it can be gotten by
1320|                # (col IS NULL OR col != someval)
1321|                #   <=>
1322|                # NOT (col IS NOT NULL AND col = someval).
1323|                lookup_class = targets[0].get_lookup('isnull')
1324|                col = _get_col(targets[0], join_info.targets[0], alias, simple_col)
1325|                clause.add(lookup_class(col, False), AND)
1326|        return clause, used_joins if not require_outer else ()
1327|
1328|    def add_filter(self, filter_clause):
1329|        self.add_q(Q(**{filter_clause[0]: filter_clause[1]}))
1330|
1331|    def add_q(self, q_object):
1332|        """
1333|        A preprocessor for the internal _add_q(). Responsible for doing final
1334|        join promotion.
1335|        """
1336|        # For join promotion this case is doing an AND for the added q_object
1337|        # and existing conditions. So, any existing inner join forces the join
1338|        # type to remain inner. Existing outer joins can however be demoted.
1339|        # (Consider case where rel_a is LOUTER and rel_a__col=1 is added - if
1340|        # rel_a doesn't produce any rows, then the whole condition must fail.
1341|        # So, demotion is OK.
1342|        existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}
1343|        clause, _ = self._add_q(q_object, self.used_aliases)
1344|        if clause:
1345|            self.where.add(clause, AND)
1346|        self.demote_joins(existing_inner)
1347|
1348|    def build_where(self, q_object):
1349|        return self._add_q(q_object, used_aliases=set(), allow_joins=False, simple_col=True)[0]
1350|
1351|    def _add_q(self, q_object, used_aliases, branch_negated=False,
1352|               current_negated=False, allow_joins=True, split_subq=True,
1353|               simple_col=False):
1354|        """Add a Q-object to the current filter."""
1355|        connector = q_object.connector
1356|        current_negated = current_negated ^ q_object.negated
1357|        branch_negated = branch_negated or q_object.negated
1358|        target_clause = self.where_class(connector=connector,
1359|                                         negated=q_object.negated)
1360|        joinpromoter = JoinPromoter(q_object.connector, len(q_object.children), current_negated)
1361|        for child in q_object.children:
1362|            if isinstance(child, Node):
1363|                child_clause, needed_inner = self._add_q(
1364|                    child, used_aliases, branch_negated,
1365|                    current_negated, allow_joins, split_subq, simple_col)
1366|                joinpromoter.add_votes(needed_inner)
1367|            else:
1368|                child_clause, needed_inner = self.build_filter(
1369|                    child, can_reuse=used_aliases, branch_negated=branch_negated,
1370|                    current_negated=current_negated, allow_joins=allow_joins,
1371|                    split_subq=split_subq, simple_col=simple_col,
1372|                )
1373|                joinpromoter.add_votes(needed_inner)
1374|            if child_clause:
1375|                target_clause.add(child_clause, connector)
1376|        needed_inner = joinpromoter.update_join_types(self)
1377|        return target_clause, needed_inner
1378|
1379|    def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, current_negated=False):
1380|        """Add a FilteredRelation object to the current filter."""
1381|        connector = q_object.connector
1382|        current_negated ^= q_object.negated
1383|        branch_negated = branch_negated or q_object.negated
1384|        target_clause = self.where_class(connector=connector, negated=q_object.negated)
1385|        for child in q_object.children:
1386|            if isinstance(child, Node):
1387|                child_clause = self.build_filtered_relation_q(
1388|                    child, reuse=reuse, branch_negated=branch_negated,
1389|                    current_negated=current_negated,
1390|                )
1391|            else:
1392|                child_clause, _ = self.build_filter(
1393|                    child, can_reuse=reuse, branch_negated=branch_negated,
1394|                    current_negated=current_negated,
1395|                    allow_joins=True, split_subq=False,
1396|                    reuse_with_filtered_relation=True,
1397|                )
1398|            target_clause.add(child_clause, connector)
1399|        return target_clause
1400|
1401|    def add_filtered_relation(self, filtered_relation, alias):
1402|        filtered_relation.alias = alias
1403|        lookups = dict(get_children_from_q(filtered_relation.condition))
1404|        for lookup in chain((filtered_relation.relation_name,), lookups):
1405|            lookup_parts, field_parts, _ = self.solve_lookup_type(lookup)
1406|            shift = 2 if not lookup_parts else 1
1407|            if len(field_parts) > (shift + len(lookup_parts)):
1408|                raise ValueError(
1409|                    "FilteredRelation's condition doesn't support nested "
1410|                    "relations (got %r)." % lookup
1411|                )
1412|        self._filtered_relations[filtered_relation.alias] = filtered_relation
1413|
1414|    def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
1415|        """
1416|        Walk the list of names and turns them into PathInfo tuples. A single
1417|        name in 'names' can generate multiple PathInfos (m2m, for example).
1418|
1419|        'names' is the path of names to travel, 'opts' is the model Options we
1420|        start the name resolving from, 'allow_many' is as for setup_joins().
1421|        If fail_on_missing is set to True, then a name that can't be resolved
1422|        will generate a FieldError.
1423|
1424|        Return a list of PathInfo tuples. In addition return the final field
1425|        (the last used join field) and target (which is a field guaranteed to
1426|        contain the same value as the final field). Finally, return those names
1427|        that weren't found (which are likely transforms and the final lookup).
1428|        """
1429|        path, names_with_path = [], []
1430|        for pos, name in enumerate(names):
1431|            cur_names_with_path = (name, [])
1432|            if name == 'pk':
1433|                name = opts.pk.name
1434|
1435|            field = None
1436|            filtered_relation = None
1437|            try:
1438|                field = opts.get_field(name)
1439|            except FieldDoesNotExist:
1440|                if name in self.annotation_select:
1441|                    field = self.annotation_select[name].output_field
1442|                elif name in self._filtered_relations and pos == 0:
1443|                    filtered_relation = self._filtered_relations[name]
1444|                    field = opts.get_field(filtered_relation.relation_name)
1445|            if field is not None:
1446|                # Fields that contain one-to-many relations with a generic
1447|                # model (like a GenericForeignKey) cannot generate reverse
1448|                # relations and therefore cannot be used for reverse querying.
1449|                if field.is_relation and not field.related_model:
1450|                    raise FieldError(
1451|                        "Field %r does not generate an automatic reverse "
1452|                        "relation and therefore cannot be used for reverse "
1453|                        "querying. If it is a GenericForeignKey, consider "
1454|                        "adding a GenericRelation." % name
1455|                    )
1456|                try:
1457|                    model = field.model._meta.concrete_model
1458|                except AttributeError:
1459|                    # QuerySet.annotate() may introduce fields that aren't
1460|                    # attached to a model.
1461|                    model = None
1462|            else:
1463|                # We didn't find the current field, so move position back
1464|                # one step.
1465|                pos -= 1
1466|                if pos == -1 or fail_on_missing:
1467|                    available = sorted([
1468|                        *get_field_names_from_opts(opts),
1469|                        *self.annotation_select,
1470|                        *self._filtered_relations,
1471|                    ])
1472|                    raise FieldError("Cannot resolve keyword '%s' into field. "
1473|                                     "Choices are: %s" % (name, ", ".join(available)))
1474|                break
1475|            # Check if we need any joins for concrete inheritance cases (the
1476|            # field lives in parent, but we are currently in one of its
1477|            # children)
1478|            if model is not opts.model:
1479|                path_to_parent = opts.get_path_to_parent(model)
1480|                if path_to_parent:
1481|                    path.extend(path_to_parent)
1482|                    cur_names_with_path[1].extend(path_to_parent)
1483|                    opts = path_to_parent[-1].to_opts
1484|            if hasattr(field, 'get_path_info'):
1485|                pathinfos = field.get_path_info(filtered_relation)
1486|                if not allow_many:
1487|                    for inner_pos, p in enumerate(pathinfos):
1488|                        if p.m2m:
1489|                            cur_names_with_path[1].extend(pathinfos[0:inner_pos + 1])
1490|                            names_with_path.append(cur_names_with_path)
1491|                            raise MultiJoin(pos + 1, names_with_path)
1492|                last = pathinfos[-1]
1493|                path.extend(pathinfos)
1494|                final_field = last.join_field
1495|                opts = last.to_opts
1496|                targets = last.target_fields
1497|                cur_names_with_path[1].extend(pathinfos)
1498|                names_with_path.append(cur_names_with_path)
1499|            else:
1500|                # Local non-relational field.
1501|                final_field = field
1502|                targets = (field,)
1503|                if fail_on_missing and pos + 1 != len(names):
1504|                    raise FieldError(
1505|                        "Cannot resolve keyword %r into field. Join on '%s'"
1506|                        " not permitted." % (names[pos + 1], name))
1507|                break
1508|        return path, final_field, targets, names[pos + 1:]
1509|
1510|    def setup_joins(self, names, opts, alias, can_reuse=None, allow_many=True,
1511|                    reuse_with_filtered_relation=False):
1512|        """
1513|        Compute the necessary table joins for the passage through the fields
1514|        given in 'names'. 'opts' is the Options class for the current model
1515|        (which gives the table we are starting from), 'alias' is the alias for
1516|        the table to start the joining from.
1517|
1518|        The 'can_reuse' defines the reverse foreign key joins we can reuse. It
1519|        can be None in which case all joins are reusable or a set of aliases
1520|        that can be reused. Note that non-reverse foreign keys are always
1521|        reusable when using setup_joins().
1522|
1523|        The 'reuse_with_filtered_relation' can be used to force 'can_reuse'
1524|        parameter and force the relation on the given connections.
1525|
1526|        If 'allow_many' is False, then any reverse foreign key seen will
1527|        generate a MultiJoin exception.
1528|
1529|        Return the final field involved in the joins, the target field (used
1530|        for any 'where' constraint), the final 'opts' value, the joins, the
1531|        field path traveled to generate the joins, and a transform function
1532|        that takes a field and alias and is equivalent to `field.get_col(alias)`
1533|        in the simple case but wraps field transforms if they were included in
1534|        names.
1535|
1536|        The target field is the field containing the concrete value. Final
1537|        field can be something different, for example foreign key pointing to
1538|        that value. Final field is needed for example in some value
1539|        conversions (convert 'obj' in fk__id=obj to pk val using the foreign
1540|        key field for example).
1541|        """
1542|        joins = [alias]
1543|        # The transform can't be applied yet, as joins must be trimmed later.
1544|        # To avoid making every caller of this method look up transforms
1545|        # directly, compute transforms here and create a partial that converts
1546|        # fields to the appropriate wrapped version.
1547|
1548|        def final_transformer(field, alias):
1549|            return field.get_col(alias)
1550|
1551|        # Try resolving all the names as fields first. If there's an error,
1552|        # treat trailing names as lookups until a field can be resolved.
1553|        last_field_exception = None
1554|        for pivot in range(len(names), 0, -1):
1555|            try:
1556|                path, final_field, targets, rest = self.names_to_path(
1557|                    names[:pivot], opts, allow_many, fail_on_missing=True,
1558|                )
1559|            except FieldError as exc:
1560|                if pivot == 1:
1561|                    # The first item cannot be a lookup, so it's safe
1562|                    # to raise the field error here.
1563|                    raise
1564|                else:
1565|                    last_field_exception = exc
1566|            else:
1567|                # The transforms are the remaining items that couldn't be
1568|                # resolved into fields.
1569|                transforms = names[pivot:]
1570|                break
1571|        for name in transforms:
1572|            def transform(field, alias, *, name, previous):
1573|                try:
1574|                    wrapped = previous(field, alias)
1575|                    return self.try_transform(wrapped, name)
1576|                except FieldError:
1577|                    # FieldError is raised if the transform doesn't exist.
1578|                    if isinstance(final_field, Field) and last_field_exception:
1579|                        raise last_field_exception
1580|                    else:
1581|                        raise
1582|            final_transformer = functools.partial(transform, name=name, previous=final_transformer)
1583|        # Then, add the path to the query's joins. Note that we can't trim
1584|        # joins at this stage - we will need the information about join type
1585|        # of the trimmed joins.
1586|        for join in path:
1587|            if join.filtered_relation:
1588|                filtered_relation = join.filtered_relation.clone()
1589|                table_alias = filtered_relation.alias
1590|            else:
1591|                filtered_relation = None
1592|                table_alias = None
1593|            opts = join.to_opts
1594|            if join.direct:
1595|                nullable = self.is_nullable(join.join_field)
1596|            else:
1597|                nullable = True
1598|            connection = Join(
1599|                opts.db_table, alias, table_alias, INNER, join.join_field,
1600|                nullable, filtered_relation=filtered_relation,
1601|            )
1602|            reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None
1603|            alias = self.join(
1604|                connection, reuse=reuse,
1605|                reuse_with_filtered_relation=reuse_with_filtered_relation,
1606|            )
1607|            joins.append(alias)
1608|            if filtered_relation:
1609|                filtered_relation.path = joins[:]
1610|        return JoinInfo(final_field, targets, opts, joins, path, final_transformer)
1611|
1612|    def trim_joins(self, targets, joins, path):
1613|        """
1614|        The 'target' parameter is the final field being joined to, 'joins'
1615|        is the full list of join aliases. The 'path' contain the PathInfos
1616|        used to create the joins.
1617|
1618|        Return the final target field and table alias and the new active
1619|        joins.
1620|
1621|        Always trim any direct join if the target column is already in the
1622|        previous table. Can't trim reverse joins as it's unknown if there's
1623|        anything on the other side of the join.
1624|        """
1625|        joins = joins[:]
1626|        for pos, info in enumerate(reversed(path)):
1627|            if len(joins) == 1 or not info.direct:
1628|                break
1629|            if info.filtered_relation:
1630|                break
1631|            join_targets = {t.column for t in info.join_field.foreign_related_fields}
1632|            cur_targets = {t.column for t in targets}
1633|            if not cur_targets.issubset(join_targets):
1634|                break
1635|            targets_dict = {r[1].column: r[0] for r in info.join_field.related_fields if r[1].column in cur_targets}
1636|            targets = tuple(targets_dict[t.column] for t in targets)
1637|            self.unref_alias(joins.pop())
1638|        return targets, joins[-1], joins
1639|
1640|    @classmethod
1641|    def _gen_col_aliases(cls, exprs):
1642|        for expr in exprs:
1643|            if isinstance(expr, Col):
1644|                yield expr.alias
1645|            else:
1646|                yield from cls._gen_col_aliases(expr.get_source_expressions())
1647|
1648|    def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False, simple_col=False):
1649|        if not allow_joins and LOOKUP_SEP in name:
1650|            raise FieldError("Joined field references are not permitted in this query")
1651|        annotation = self.annotations.get(name)
1652|        if annotation is not None:
1653|            if not allow_joins:
1654|                for alias in self._gen_col_aliases([annotation]):
1655|                    if isinstance(self.alias_map[alias], Join):
1656|                        raise FieldError(
1657|                            'Joined field references are not permitted in '
1658|                            'this query'
1659|                        )
1660|            if summarize:
1661|                # Summarize currently means we are doing an aggregate() query
1662|                # which is executed as a wrapped subquery if any of the
1663|                # aggregate() elements reference an existing annotation. In
1664|                # that case we need to return a Ref to the subquery's annotation.
1665|                return Ref(name, self.annotation_select[name])
1666|            else:
1667|                return annotation
1668|        else:
1669|            field_list = name.split(LOOKUP_SEP)
1670|            join_info = self.setup_joins(field_list, self.get_meta(), self.get_initial_alias(), can_reuse=reuse)
1671|            targets, final_alias, join_list = self.trim_joins(join_info.targets, join_info.joins, join_info.path)
1672|            if not allow_joins and len(join_list) > 1:
1673|                raise FieldError('Joined field references are not permitted in this query')
1674|            if len(targets) > 1:
1675|                raise FieldError("Referencing multicolumn fields with F() objects "
1676|                                 "isn't supported")
1677|            # Verify that the last lookup in name is a field or a transform:
1678|            # transform_function() raises FieldError if not.
1679|            join_info.transform_function(targets[0], final_alias)
1680|            if reuse is not None:
1681|                reuse.update(join_list)
1682|            col = _get_col(targets[0], join_info.targets[0], join_list[-1], simple_col)
1683|            return col
1684|
1685|    def split_exclude(self, filter_expr, can_reuse, names_with_path):
1686|        """
1687|        When doing an exclude against any kind of N-to-many relation, we need
1688|        to use a subquery. This method constructs the nested query, given the
1689|        original exclude filter (filter_expr) and the portion up to the first
1690|        N-to-many relation field.
1691|
1692|        For example, if the origin filter is ~Q(child__name='foo'), filter_expr
1693|        is ('child__name', 'foo') and can_reuse is a set of joins usable for
1694|        filters in the original query.
1695|
1696|        We will turn this into equivalent of:
1697|            WHERE NOT (pk IN (SELECT parent_id FROM thetable
1698|                              WHERE name = 'foo' AND parent_id IS NOT NULL))
1699|
1700|        It might be worth it to consider using WHERE NOT EXISTS as that has
1701|        saner null handling, and is easier for the backend's optimizer to
1702|        handle.
1703|        """
1704|        filter_lhs, filter_rhs = filter_expr
1705|        if isinstance(filter_rhs, OuterRef):
1706|            filter_expr = (filter_lhs, OuterRef(filter_rhs))
1707|        elif isinstance(filter_rhs, F):
1708|            filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
1709|        # Generate the inner query.
1710|        query = Query(self.model)
1711|        query._filtered_relations = self._filtered_relations
1712|        query.add_filter(filter_expr)
1713|        query.clear_ordering(True)
1714|        # Try to have as simple as possible subquery -> trim leading joins from
1715|        # the subquery.
1716|        trimmed_prefix, contains_louter = query.trim_start(names_with_path)
1717|
1718|        # Add extra check to make sure the selected field will not be null
1719|        # since we are adding an IN <subquery> clause. This prevents the
1720|        # database from tripping over IN (...,NULL,...) selects and returning
1721|        # nothing
1722|        col = query.select[0]
1723|        select_field = col.target
1724|        alias = col.alias
1725|        if self.is_nullable(select_field):
1726|            lookup_class = select_field.get_lookup('isnull')
1727|            lookup = lookup_class(select_field.get_col(alias), False)
1728|            query.where.add(lookup, AND)
1729|        if alias in can_reuse:
1730|            pk = select_field.model._meta.pk
1731|            # Need to add a restriction so that outer query's filters are in effect for
1732|            # the subquery, too.
1733|            query.bump_prefix(self)
1734|            lookup_class = select_field.get_lookup('exact')
1735|            # Note that the query.select[0].alias is different from alias
1736|            # due to bump_prefix above.
1737|            lookup = lookup_class(pk.get_col(query.select[0].alias),
1738|                                  pk.get_col(alias))
1739|            query.where.add(lookup, AND)
1740|            query.external_aliases.add(alias)
1741|
1742|        condition, needed_inner = self.build_filter(
1743|            ('%s__in' % trimmed_prefix, query),
1744|            current_negated=True, branch_negated=True, can_reuse=can_reuse)
1745|        if contains_louter:
1746|            or_null_condition, _ = self.build_filter(
1747|                ('%s__isnull' % trimmed_prefix, True),
1748|                current_negated=True, branch_negated=True, can_reuse=can_reuse)
1749|            condition.add(or_null_condition, OR)
1750|            # Note that the end result will be:
1751|            # (outercol NOT IN innerq AND outercol IS NOT NULL) OR outercol IS NULL.
1752|            # This might look crazy but due to how IN works, this seems to be
1753|            # correct. If the IS NOT NULL check is removed then outercol NOT
1754|            # IN will return UNKNOWN. If the IS NULL check is removed, then if
1755|            # outercol IS NULL we will not match the row.
1756|        return condition, needed_inner
1757|
1758|    def set_empty(self):
1759|        self.where.add(NothingNode(), AND)
1760|
1761|    def is_empty(self):
1762|        return any(isinstance(c, NothingNode) for c in self.where.children)
1763|
1764|    def set_limits(self, low=None, high=None):
1765|        """
1766|        Adjust the limits on the rows retrieved. Use low/high to set these,
1767|        as it makes it more Pythonic to read and write. When the SQL query is
1768|        created, convert them to the appropriate offset and limit values.
1769|
1770|        Apply any limits passed in here to the existing constraints. Add low
1771|        to the current low value and clamp both to any existing high value.
1772|        """
1773|        if high is not None:
1774|            if self.high_mark is not None:
1775|                self.high_mark = min(self.high_mark, self.low_mark + high)
1776|            else:
1777|                self.high_mark = self.low_mark + high
1778|        if low is not None:
1779|            if self.high_mark is not None:
1780|                self.low_mark = min(self.high_mark, self.low_mark + low)
1781|            else:
1782|                self.low_mark = self.low_mark + low
1783|
1784|        if self.low_mark == self.high_mark:
1785|            self.set_empty()
1786|
1787|    def clear_limits(self):
1788|        """Clear any existing limits."""
1789|        self.low_mark, self.high_mark = 0, None
1790|
1791|    @property
1792|    def is_sliced(self):
1793|        return self.low_mark != 0 or self.high_mark is not None
1794|
1795|    def has_limit_one(self):
1796|        return self.high_mark is not None and (self.high_mark - self.low_mark) == 1
1797|
1798|    def can_filter(self):
1799|        """
1800|        Return True if adding filters to this instance is still possible.
1801|
1802|        Typically, this means no limits or offsets have been put on the results.
1803|        """
1804|        return not self.is_sliced
1805|
1806|    def clear_select_clause(self):
1807|        """Remove all fields from SELECT clause."""
1808|        self.select = ()
1809|        self.default_cols = False
1810|        self.select_related = False
1811|        self.set_extra_mask(())
1812|        self.set_annotation_mask(())
1813|
1814|    def clear_select_fields(self):
1815|        """
1816|        Clear the list of fields to select (but not extra_select columns).
1817|        Some queryset types completely replace any existing list of select
1818|        columns.
1819|        """
1820|        self.select = ()
1821|        self.values_select = ()
1822|
1823|    def add_select_col(self, col):
1824|        self.select += col,
1825|        self.values_select += col.output_field.name,
1826|
1827|    def set_select(self, cols):
1828|        self.default_cols = False
1829|        self.select = tuple(cols)
1830|
1831|    def add_distinct_fields(self, *field_names):
1832|        """
1833|        Add and resolve the given fields to the query's "distinct on" clause.
1834|        """
1835|        self.distinct_fields = field_names
1836|        self.distinct = True
1837|
1838|    def add_fields(self, field_names, allow_m2m=True):
1839|        """
1840|        Add the given (model) fields to the select set. Add the field names in
1841|        the order specified.
1842|        """
1843|        alias = self.get_initial_alias()
1844|        opts = self.get_meta()
1845|
1846|        try:
1847|            cols = []
1848|            for name in field_names:
1849|                # Join promotion note - we must not remove any rows here, so
1850|                # if there is no existing joins, use outer join.
1851|                join_info = self.setup_joins(name.split(LOOKUP_SEP), opts, alias, allow_many=allow_m2m)
1852|                targets, final_alias, joins = self.trim_joins(
1853|                    join_info.targets,
1854|                    join_info.joins,
1855|                    join_info.path,
1856|                )
1857|                for target in targets:
1858|                    cols.append(join_info.transform_function(target, final_alias))
1859|            if cols:
1860|                self.set_select(cols)
1861|        except MultiJoin:
1862|            raise FieldError("Invalid field name: '%s'" % name)
1863|        except FieldError:
1864|            if LOOKUP_SEP in name:
1865|                # For lookups spanning over relationships, show the error
1866|                # from the model on which the lookup failed.
1867|                raise
1868|            else:
1869|                names = sorted([
1870|                    *get_field_names_from_opts(opts), *self.extra,
1871|                    *self.annotation_select, *self._filtered_relations
1872|                ])
1873|                raise FieldError("Cannot resolve keyword %r into field. "
1874|                                 "Choices are: %s" % (name, ", ".join(names)))
1875|
1876|    def add_ordering(self, *ordering):
1877|        """
1878|        Add items from the 'ordering' sequence to the query's "order by"
1879|        clause. These items are either field names (not column names) --
1880|        possibly with a direction prefix ('-' or '?') -- or OrderBy
1881|        expressions.
1882|
1883|        If 'ordering' is empty, clear all ordering from the query.
1884|        """
1885|        errors = []
1886|        for item in ordering:
1887|            if not hasattr(item, 'resolve_expression') and not ORDER_PATTERN.match(item):
1888|                errors.append(item)
1889|            if getattr(item, 'contains_aggregate', False):
1890|                raise FieldError(
1891|                    'Using an aggregate in order_by() without also including '
1892|                    'it in annotate() is not allowed: %s' % item
1893|                )
1894|        if errors:
1895|            raise FieldError('Invalid order_by arguments: %s' % errors)
1896|        if ordering:
1897|            self.order_by += ordering
1898|        else:
1899|            self.default_ordering = False
1900|
1901|    def clear_ordering(self, force_empty):
1902|        """
1903|        Remove any ordering settings. If 'force_empty' is True, there will be
1904|        no ordering in the resulting query (not even the model's default).
1905|        """
1906|        self.order_by = ()
1907|        self.extra_order_by = ()
1908|        if force_empty:
1909|            self.default_ordering = False
1910|
1911|    def set_group_by(self):
1912|        """
1913|        Expand the GROUP BY clause required by the query.
1914|
1915|        This will usually be the set of all non-aggregate fields in the
1916|        return data. If the database backend supports grouping by the
1917|        primary key, and the query would be equivalent, the optimization
1918|        will be made automatically.
1919|        """
1920|        group_by = list(self.select)
1921|        if self.annotation_select:
1922|            for alias, annotation in self.annotation_select.items():
1923|                try:
1924|                    inspect.getcallargs(annotation.get_group_by_cols, alias=alias)
1925|                except TypeError:
1926|                    annotation_class = annotation.__class__
1927|                    msg = (
1928|                        '`alias=None` must be added to the signature of '
1929|                        '%s.%s.get_group_by_cols().'
1930|                    ) % (annotation_class.__module__, annotation_class.__qualname__)
1931|                    warnings.warn(msg, category=RemovedInDjango40Warning)
1932|                    group_by_cols = annotation.get_group_by_cols()
1933|                else:
1934|                    group_by_cols = annotation.get_group_by_cols(alias=alias)
1935|                group_by.extend(group_by_cols)
1936|        self.group_by = tuple(group_by)
1937|
1938|    def add_select_related(self, fields):
1939|        """
1940|        Set up the select_related data structure so that we only select
1941|        certain related models (as opposed to all models, when
1942|        self.select_related=True).
1943|        """
1944|        if isinstance(self.select_related, bool):
1945|            field_dict = {}
1946|        else:
1947|            field_dict = self.select_related
1948|        for field in fields:
1949|            d = field_dict
1950|            for part in field.split(LOOKUP_SEP):
1951|                d = d.setdefault(part, {})
1952|        self.select_related = field_dict
1953|
1954|    def add_extra(self, select, select_params, where, params, tables, order_by):
1955|        """
1956|        Add data to the various extra_* attributes for user-created additions
1957|        to the query.
1958|        """
1959|        if select:
1960|            # We need to pair any placeholder markers in the 'select'
1961|            # dictionary with their parameters in 'select_params' so that
1962|            # subsequent updates to the select dictionary also adjust the
1963|            # parameters appropriately.
1964|            select_pairs = {}
1965|            if select_params:
1966|                param_iter = iter(select_params)
1967|            else:
1968|                param_iter = iter([])
1969|            for name, entry in select.items():
1970|                entry = str(entry)
1971|                entry_params = []
1972|                pos = entry.find("%s")
1973|                while pos != -1:
1974|                    if pos == 0 or entry[pos - 1] != '%':
1975|                        entry_params.append(next(param_iter))
1976|                    pos = entry.find("%s", pos + 2)
1977|                select_pairs[name] = (entry, entry_params)
1978|            self.extra.update(select_pairs)
1979|        if where or params:
1980|            self.where.add(ExtraWhere(where, params), AND)
1981|        if tables:
1982|            self.extra_tables += tuple(tables)
1983|        if order_by:
1984|            self.extra_order_by = order_by
1985|
1986|    def clear_deferred_loading(self):
1987|        """Remove any fields from the deferred loading set."""
1988|        self.deferred_loading = (frozenset(), True)
1989|
1990|    def add_deferred_loading(self, field_names):
1991|        """
1992|        Add the given list of model field names to the set of fields to
1993|        exclude from loading from the database when automatic column selection
1994|        is done. Add the new field names to any existing field names that
1995|        are deferred (or removed from any existing field names that are marked
1996|        as the only ones for immediate loading).
1997|        """
1998|        # Fields on related models are stored in the literal double-underscore
1999|        # format, so that we can use a set datastructure. We do the foo__bar
2000|        # splitting and handling when computing the SQL column names (as part of
2001|        # get_columns()).
2002|        existing, defer = self.deferred_loading
2003|        if defer:
2004|            # Add to existing deferred names.
2005|            self.deferred_loading = existing.union(field_names), True
2006|        else:
2007|            # Remove names from the set of any existing "immediate load" names.
2008|            self.deferred_loading = existing.difference(field_names), False
2009|
2010|    def add_immediate_loading(self, field_names):
2011|        """
2012|        Add the given list of model field names to the set of fields to
2013|        retrieve when the SQL is executed ("immediate loading" fields). The
2014|        field names replace any existing immediate loading field names. If
2015|        there are field names already specified for deferred loading, remove
2016|        those names from the new field_names before storing the new names
2017|        for immediate loading. (That is, immediate loading overrides any
2018|        existing immediate values, but respects existing deferrals.)
2019|        """
2020|        existing, defer = self.deferred_loading
2021|        field_names = set(field_names)
2022|        if 'pk' in field_names:
2023|            field_names.remove('pk')
2024|            field_names.add(self.get_meta().pk.name)
2025|
2026|        if defer:
2027|            # Remove any existing deferred names from the current set before
2028|            # setting the new names.
2029|            self.deferred_loading = field_names.difference(existing), False
2030|        else:
2031|            # Replace any existing "immediate load" field names.
2032|            self.deferred_loading = frozenset(field_names), False
2033|
2034|    def get_loaded_field_names(self):
2035|        """
2036|        If any fields are marked to be deferred, return a dictionary mapping
2037|        models to a set of names in those fields that will be loaded. If a
2038|        model is not in the returned dictionary, none of its fields are
2039|        deferred.
2040|
2041|        If no fields are marked for deferral, return an empty dictionary.
2042|        """
2043|        # We cache this because we call this function multiple times
2044|        # (compiler.fill_related_selections, query.iterator)
2045|        try:
2046|            return self._loaded_field_names_cache
2047|        except AttributeError:
2048|            collection = {}
2049|            self.deferred_to_data(collection, self.get_loaded_field_names_cb)
2050|            self._loaded_field_names_cache = collection
2051|            return collection
2052|
2053|    def get_loaded_field_names_cb(self, target, model, fields):
2054|        """Callback used by get_deferred_field_names()."""
2055|        target[model] = {f.attname for f in fields}
2056|
2057|    def set_annotation_mask(self, names):
2058|        """Set the mask of annotations that will be returned by the SELECT."""
2059|        if names is None:
2060|            self.annotation_select_mask = None
2061|        else:
2062|            self.annotation_select_mask = set(names)
2063|        self._annotation_select_cache = None
2064|
2065|    def append_annotation_mask(self, names):
2066|        if self.annotation_select_mask is not None:
2067|            self.set_annotation_mask(self.annotation_select_mask.union(names))
2068|
2069|    def set_extra_mask(self, names):
2070|        """
2071|        Set the mask of extra select items that will be returned by SELECT.
2072|        Don't remove them from the Query since they might be used later.
2073|        """
2074|        if names is None:
2075|            self.extra_select_mask = None
2076|        else:
2077|            self.extra_select_mask = set(names)
2078|        self._extra_select_cache = None
2079|
2080|    def set_values(self, fields):
2081|        self.select_related = False
2082|        self.clear_deferred_loading()
2083|        self.clear_select_fields()
2084|
2085|        if self.group_by is True:
2086|            self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)
2087|            self.set_group_by()
2088|            self.clear_select_fields()
2089|
2090|        if fields:
2091|            field_names = []
2092|            extra_names = []
2093|            annotation_names = []
2094|            if not self.extra and not self.annotations:
2095|                # Shortcut - if there are no extra or annotations, then
2096|                # the values() clause must be just field names.
2097|                field_names = list(fields)
2098|            else:
2099|                self.default_cols = False
2100|                for f in fields:
2101|                    if f in self.extra_select:
2102|                        extra_names.append(f)
2103|                    elif f in self.annotation_select:
2104|                        annotation_names.append(f)
2105|                    else:
2106|                        field_names.append(f)
2107|            self.set_extra_mask(extra_names)
2108|            self.set_annotation_mask(annotation_names)
2109|        else:
2110|            field_names = [f.attname for f in self.model._meta.concrete_fields]
2111|
2112|        self.values_select = tuple(field_names)
2113|        self.add_fields(field_names, True)
2114|
2115|    @property
2116|    def annotation_select(self):
2117|        """
2118|        Return the dictionary of aggregate columns that are not masked and
2119|        should be used in the SELECT clause. Cache this result for performance.
2120|        """
2121|        if self._annotation_select_cache is not None:
2122|            return self._annotation_select_cache
2123|        elif not self.annotations:
2124|            return {}
2125|        elif self.annotation_select_mask is not None:
2126|            self._annotation_select_cache = {
2127|                k: v for k, v in self.annotations.items()
2128|                if k in self.annotation_select_mask
2129|            }
2130|            return self._annotation_select_cache
2131|        else:
2132|            return self.annotations
2133|
2134|    @property
2135|    def extra_select(self):
2136|        if self._extra_select_cache is not None:
2137|            return self._extra_select_cache
2138|        if not self.extra:
2139|            return {}
2140|        elif self.extra_select_mask is not None:
2141|            self._extra_select_cache = {
2142|                k: v for k, v in self.extra.items()
2143|                if k in self.extra_select_mask
2144|            }
2145|            return self._extra_select_cache
2146|        else:
2147|            return self.extra
2148|
2149|    def trim_start(self, names_with_path):
2150|        """
2151|        Trim joins from the start of the join path. The candidates for trim
2152|        are the PathInfos in names_with_path structure that are m2m joins.
2153|
2154|        Also set the select column so the start matches the join.
2155|
2156|        This method is meant to be used for generating the subquery joins &
2157|        cols in split_exclude().
2158|
2159|        Return a lookup usable for doing outerq.filter(lookup=self) and a
2160|        boolean indicating if the joins in the prefix contain a LEFT OUTER join.
2161|        _"""
2162|        all_paths = []
2163|        for _, paths in names_with_path:
2164|            all_paths.extend(paths)
2165|        contains_louter = False
2166|        # Trim and operate only on tables that were generated for
2167|        # the lookup part of the query. That is, avoid trimming
2168|        # joins generated for F() expressions.
2169|        lookup_tables = [
2170|            t for t in self.alias_map
2171|            if t in self._lookup_joins or t == self.base_table
2172|        ]
2173|        for trimmed_paths, path in enumerate(all_paths):
2174|            if path.m2m:
2175|                break
2176|            if self.alias_map[lookup_tables[trimmed_paths + 1]].join_type == LOUTER:
2177|                contains_louter = True
2178|            alias = lookup_tables[trimmed_paths]
2179|            self.unref_alias(alias)
2180|        # The path.join_field is a Rel, lets get the other side's field
2181|        join_field = path.join_field.field
2182|        # Build the filter prefix.
2183|        paths_in_prefix = trimmed_paths
2184|        trimmed_prefix = []
2185|        for name, path in names_with_path:
2186|            if paths_in_prefix - len(path) < 0:
2187|                break
2188|            trimmed_prefix.append(name)
2189|            paths_in_prefix -= len(path)
2190|        trimmed_prefix.append(
2191|            join_field.foreign_related_fields[0].name)
2192|        trimmed_prefix = LOOKUP_SEP.join(trimmed_prefix)
2193|        # Lets still see if we can trim the first join from the inner query
2194|        # (that is, self). We can't do this for:
2195|        # - LEFT JOINs because we would miss those rows that have nothing on
2196|        #   the outer side,
2197|        # - INNER JOINs from filtered relations because we would miss their
2198|        #   filters.
2199|        first_join = self.alias_map[lookup_tables[trimmed_paths + 1]]
2200|        if first_join.join_type != LOUTER and not first_join.filtered_relation:
2201|            select_fields = [r[0] for r in join_field.related_fields]
2202|            select_alias = lookup_tables[trimmed_paths + 1]
2203|            self.unref_alias(lookup_tables[trimmed_paths])
2204|            extra_restriction = join_field.get_extra_restriction(
2205|                self.where_class, None, lookup_tables[trimmed_paths + 1])
2206|            if extra_restriction:
2207|                self.where.add(extra_restriction, AND)
2208|        else:
2209|            # TODO: It might be possible to trim more joins from the start of the
2210|            # inner query if it happens to have a longer join chain containing the
2211|            # values in select_fields. Lets punt this one for now.
2212|            select_fields = [r[1] for r in join_field.related_fields]
2213|            select_alias = lookup_tables[trimmed_paths]
2214|        # The found starting point is likely a Join instead of a BaseTable reference.
2215|        # But the first entry in the query's FROM clause must not be a JOIN.
2216|        for table in self.alias_map:
2217|            if self.alias_refcount[table] > 0:
2218|                self.alias_map[table] = BaseTable(self.alias_map[table].table_name, table)
2219|                break
2220|        self.set_select([f.get_col(select_alias) for f in select_fields])
2221|        return trimmed_prefix, contains_louter
2222|
2223|    def is_nullable(self, field):
2224|        """
2225|        Check if the given field should be treated as nullable.
2226|
2227|        Some backends treat '' as null and Django treats such fields as
2228|        nullable for those backends. In such situations field.null can be
2229|        False even if we should treat the field as nullable.
2230|        """
2231|        # We need to use DEFAULT_DB_ALIAS here, as QuerySet does not have
2232|        # (nor should it have) knowledge of which connection is going to be
2233|        # used. The proper fix would be to defer all decisions where
2234|        # is_nullable() is needed to the compiler stage, but that is not easy
2235|        # to do currently.
2236|        return (
2237|            connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and
2238|            field.empty_strings_allowed
2239|        ) or field.null
2240|
2241|
2242|def get_order_dir(field, default='ASC'):
2243|    """
2244|    Return the field name and direction for an order specification. For
2245|    example, '-foo' is returned as ('foo', 'DESC').
2246|
2247|    The 'default' param is used to indicate which way no prefix (or a '+'
2248|    prefix) should sort. The '-' prefix always sorts the opposite way.
2249|    """
...




###

Please provide the class name, function or method name, or the exact line numbers that need to be edited.
### Examples:
```
full_path1/file1.py
line: 10
class: MyClass1
line: 51

full_path2/file2.py
function: MyClass2.my_method
line: 12

full_path3/file3.py
function: my_function
line: 24
line: 156
```

Return just the location(s)

2024-10-18 13:55:44,208 - INFO - ================================================================================
2024-10-18 13:55:44,314 - INFO - Creating API request
2024-10-18 13:55:46,423 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:55:46,423 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:55:51,428 - INFO - Creating API request
2024-10-18 13:55:53,732 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:55:53,732 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:55:58,737 - INFO - Creating API request
2024-10-18 13:56:00,716 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:56:00,716 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:56:05,721 - INFO - Creating API request
2024-10-18 13:56:07,937 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:56:07,937 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:56:12,940 - INFO - Creating API request
2024-10-18 13:56:15,023 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:56:15,023 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:56:20,028 - INFO - Creating API request
2024-10-18 13:56:22,018 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:56:22,019 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:56:27,023 - INFO - Creating API request
2024-10-18 13:56:29,162 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:56:29,162 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:56:34,164 - INFO - Creating API request
2024-10-18 13:56:36,250 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:56:36,250 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:56:41,255 - INFO - Creating API request
2024-10-18 13:56:43,316 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:56:43,316 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:56:48,321 - INFO - Creating API request
2024-10-18 13:56:50,473 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:56:50,473 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:56:55,479 - INFO - Creating API request
2024-10-18 13:56:57,794 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:56:57,794 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:57:02,799 - INFO - Creating API request
2024-10-18 13:57:05,051 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:57:05,051 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:57:10,055 - INFO - Creating API request
2024-10-18 13:57:12,091 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:57:12,091 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:57:17,096 - INFO - Creating API request
2024-10-18 13:57:19,238 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:57:19,238 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:57:24,243 - INFO - Creating API request
2024-10-18 13:57:26,533 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:57:26,533 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:57:31,533 - INFO - Creating API request
2024-10-18 13:57:33,698 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:57:33,698 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:57:38,700 - INFO - Creating API request
2024-10-18 13:57:40,870 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:57:40,870 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:57:45,875 - INFO - Creating API request
2024-10-18 13:57:48,033 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:57:48,033 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:57:53,039 - INFO - Creating API request
2024-10-18 13:57:55,408 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:57:55,409 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:58:00,414 - INFO - Creating API request
2024-10-18 13:58:02,310 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:58:02,311 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:58:07,316 - INFO - Creating API request
2024-10-18 13:58:09,509 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:58:09,509 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:58:14,514 - INFO - Creating API request
2024-10-18 13:58:17,016 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:58:17,016 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:58:22,021 - INFO - Creating API request
2024-10-18 13:58:24,069 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:58:24,069 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:58:29,074 - INFO - Creating API request
2024-10-18 13:58:31,350 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:58:31,350 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:58:36,352 - INFO - Creating API request
2024-10-18 13:58:38,518 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:58:38,518 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:58:43,524 - INFO - Creating API request
2024-10-18 13:58:45,750 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:58:45,750 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:58:50,756 - INFO - Creating API request
2024-10-18 13:58:52,734 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:58:52,734 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:58:57,735 - INFO - Creating API request
2024-10-18 13:58:59,715 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:58:59,715 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:59:04,718 - INFO - Creating API request
2024-10-18 13:59:06,660 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:59:06,661 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:59:11,666 - INFO - Creating API request
2024-10-18 13:59:13,631 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:59:13,631 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:59:18,633 - INFO - Creating API request
2024-10-18 13:59:20,708 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:59:20,708 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:59:25,713 - INFO - Creating API request
2024-10-18 13:59:27,520 - INFO - API connection error. Waiting...
2024-10-18 13:59:27,520 - INFO - Connection error.
2024-10-18 13:59:32,525 - INFO - Creating API request
2024-10-18 13:59:34,565 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:59:34,565 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:59:39,571 - INFO - Creating API request
2024-10-18 13:59:42,584 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:59:42,584 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:59:47,586 - INFO - Creating API request
2024-10-18 13:59:49,891 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:59:49,891 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 13:59:54,895 - INFO - Creating API request
2024-10-18 13:59:56,958 - INFO - Rate limit exceeded. Waiting...
2024-10-18 13:59:56,958 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 14:00:01,963 - INFO - Creating API request
2024-10-18 14:00:04,228 - INFO - Rate limit exceeded. Waiting...
2024-10-18 14:00:04,228 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 14:00:09,233 - INFO - Creating API request
2024-10-18 14:00:11,425 - INFO - Rate limit exceeded. Waiting...
2024-10-18 14:00:11,426 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 14:00:16,431 - INFO - Creating API request
2024-10-18 14:00:18,770 - INFO - Rate limit exceeded. Waiting...
2024-10-18 14:00:18,770 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 14:00:23,775 - INFO - Creating API request
2024-10-18 14:00:25,915 - INFO - Rate limit exceeded. Waiting...
2024-10-18 14:00:25,915 - INFO - Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-e0H0yq54IgffRtA0RBE2Arsx on tokens per min (TPM): Limit 30000, Requested 54882. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
2024-10-18 14:00:30,920 - INFO - API response None
2024-10-18 14:00:30,920 - INFO - ==== raw output ====
2024-10-18 14:00:30,920 - INFO - 
2024-10-18 14:00:30,920 - INFO - ================================================================================
2024-10-18 14:00:30,920 - INFO - ==== extracted locs ====
2024-10-18 14:00:30,920 - INFO - ['']
2024-10-18 14:00:30,921 - INFO - ['']
2024-10-18 14:00:30,921 - INFO - ['']
2024-10-18 14:00:30,921 - INFO - ================================================================================
2024-10-18 14:00:30,921 - INFO - ==== Input coarse_locs
2024-10-18 14:00:30,921 - INFO - 
### django/db/models/query.py
class: QuerySet
function: QuerySet.filter
function: QuerySet._filter_or_exclude
function: QuerySet.__getitem__
### django/db/models/sql/compiler.py
class: SQLCompiler
function: SQLCompiler.as_sql
function: SQLCompiler.as_subquery_condition
### django/db/models/sql/query.py
class: Query
function: Query.add_filter
function: Query.add_q
function: Query.build_filter
function: Query.build_where
function: Query._add_q
function: Query.set_group_by

