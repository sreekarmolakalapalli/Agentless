{"instance_id": "sympy__sympy-16503", "found_files": ["sympy/printing/pretty/pretty.py", "sympy/printing/pretty/stringpict.py", "sympy/printing/pretty/pretty_symbology.py", "sympy/printing/latex.py", "sympy/printing/printer.py"], "additional_artifact_loc_file": {"raw_output_files": "```\nsympy/printing/pretty/pretty.py\nsympy/printing/pretty/stringpict.py\nsympy/printing/pretty/pretty_symbology.py\nsympy/printing/latex.py\nsympy/printing/printer.py\n```"}, "file_traj": {"response": "```\nsympy/printing/pretty/pretty.py\nsympy/printing/pretty/stringpict.py\nsympy/printing/pretty/pretty_symbology.py\nsympy/printing/latex.py\nsympy/printing/printer.py\n```", "usage": {"completion_tokens": 53, "prompt_tokens": 4317}, "prompt": "Please look through the following GitHub problem description, and Repository structure and provide a list of files that one would need to edit to fix the problem.\n\n### GitHub Problem Description ###\nBad centering for Sum pretty print\n```\r\n>>> pprint(Sum(x, (x, 1, oo)) + 3)\r\n  \u221e\r\n ___\r\n \u2572\r\n  \u2572   x\r\n  \u2571     + 3\r\n \u2571\r\n \u203e\u203e\u203e\r\nx = 1\r\n```\r\n\r\nThe `x` and the `+ 3` should be aligned. I'm not sure if the `x` should be lower of if the `+ 3` should be higher. \n\n\n###\n\n\n\n### Repository Structure ###\nsympy/\n    conftest.py\n    setupegg.py\n    isympy.py\n    setup.py\n    galgebra.py\n    this.py\n    abc.py\n    __init__.py\n    release.py\n    simplify/\n        cse_opts.py\n        sqrtdenest.py\n        simplify.py\n        traversaltools.py\n        epathtools.py\n        trigsimp.py\n        powsimp.py\n        cse_main.py\n        combsimp.py\n        ratsimp.py\n        hyperexpand_doc.py\n        radsimp.py\n        fu.py\n        gammasimp.py\n        hyperexpand.py\n        __init__.py\n    calculus/\n        singularities.py\n        euler.py\n        finite_diff.py\n        util.py\n        __init__.py\n    crypto/\n        crypto.py\n        __init__.py\n    sandbox/\n        indexed_integrals.py\n        __init__.py\n    vector/\n        coordsysrect.py\n        point.py\n        basisdependent.py\n        operators.py\n        vector.py\n        dyadic.py\n        orienters.py\n        deloperator.py\n        scalar.py\n        __init__.py\n        functions.py\n    tensor/\n        indexed.py\n        tensor.py\n        toperators.py\n        index_methods.py\n        __init__.py\n        functions.py\n        array/\n            dense_ndim_array.py\n            arrayop.py\n            mutable_ndim_array.py\n            __init__.py\n            sparse_ndim_array.py\n            ndim_array.py\n    liealgebras/\n        type_f.py\n        weyl_group.py\n        type_g.py\n        dynkin_diagram.py\n        cartan_type.py\n        cartan_matrix.py\n        root_system.py\n        type_c.py\n        type_d.py\n        type_b.py\n        type_a.py\n        type_e.py\n        __init__.py\n    diffgeom/\n        diffgeom.py\n        __init__.py\n        rn.py\n    assumptions/\n        refine.py\n        satask.py\n        ask_generated.py\n        ask.py\n        assume.py\n        __init__.py\n        sathandlers.py\n        handlers/\n            common.py\n            order.py\n            calculus.py\n            matrices.py\n            ntheory.py\n            sets.py\n            __init__.py\n    combinatorics/\n        prufer.py\n        rewritingsystem_fsm.py\n        subsets.py\n        fp_groups.py\n        group_constructs.py\n        coset_table.py\n        free_groups.py\n        tensor_can.py\n        named_groups.py\n        graycode.py\n        permutations.py\n        generators.py\n        partitions.py\n        perm_groups.py\n        polyhedron.py\n        rewritingsystem.py\n        homomorphisms.py\n        util.py\n        __init__.py\n    discrete/\n        transforms.py\n        convolutions.py\n        recurrences.py\n        __init__.py\n    matrices/\n        common.py\n        densesolve.py\n        normalforms.py\n        sparsetools.py\n        densearith.py\n        immutable.py\n        sparse.py\n        dense.py\n        matrices.py\n        densetools.py\n        __init__.py\n        expressions/\n            matpow.py\n            transpose.py\n            matexpr.py\n            hadamard.py\n            adjoint.py\n            applyfunc.py\n            kronecker.py\n            inverse.py\n            funcmatrix.py\n            blockmatrix.py\n            determinant.py\n            diagonal.py\n            trace.py\n            dotproduct.py\n            fourier.py\n            slice.py\n            matadd.py\n            __init__.py\n            factorizations.py\n            matmul.py\n        benchmarks/\n            bench_matrix.py\n            __init__.py\n    solvers/\n        bivariate.py\n        diophantine.py\n        inequalities.py\n        deutils.py\n        recurr.py\n        polysys.py\n        decompogen.py\n        solvers.py\n        pde.py\n        ode.py\n        solveset.py\n        __init__.py\n        benchmarks/\n            bench_solvers.py\n            __init__.py\n    holonomic/\n        recurrence.py\n        numerical.py\n        linearsolver.py\n        holonomicerrors.py\n        holonomic.py\n        __init__.py\n    physics/\n        secondquant.py\n        paulialgebra.py\n        gaussopt.py\n        wigner.py\n        hydrogen.py\n        qho_1d.py\n        sho.py\n        matrices.py\n        pring.py\n        __init__.py\n        continuum_mechanics/\n            beam.py\n            __init__.py\n        quantum/\n            qubit.py\n            shor.py\n            identitysearch.py\n            state.py\n            circuitutils.py\n            operator.py\n            constants.py\n            qft.py\n            piab.py\n            fermion.py\n            operatorordering.py\n            matrixutils.py\n            innerproduct.py\n            operatorset.py\n            pauli.py\n            tensorproduct.py\n            commutator.py\n            cg.py\n            anticommutator.py\n            cartesian.py\n            circuitplot.py\n            gate.py\n            represent.py\n            grover.py\n            matrixcache.py\n            spin.py\n            sho1d.py\n            qexpr.py\n            qapply.py\n            hilbert.py\n            qasm.py\n            density.py\n            dagger.py\n            __init__.py\n            boson.py\n        vector/\n            printing.py\n            fieldfunctions.py\n            point.py\n            vector.py\n            frame.py\n            dyadic.py\n            __init__.py\n            functions.py\n        hep/\n            gamma_matrices.py\n            __init__.py\n        units/\n            definitions.py\n            prefixes.py\n            dimensions.py\n            quantities.py\n            util.py\n            unitsystem.py\n            __init__.py\n            systems/\n                mksa.py\n                natural.py\n                si.py\n                mks.py\n                __init__.py\n        mechanics/\n            models.py\n            linearize.py\n            body.py\n            system.py\n            lagrange.py\n            kane.py\n            rigidbody.py\n            __init__.py\n            functions.py\n            particle.py\n        optics/\n            medium.py\n            gaussopt.py\n            waves.py\n            utils.py\n            __init__.py\n    algebras/\n        quaternion.py\n        __init__.py\n    core/\n        alphabets.py\n        rules.py\n        symbol.py\n        multidimensional.py\n        function.py\n        assumptions.py\n        backend.py\n        evaluate.py\n        mod.py\n        compatibility.py\n        core.py\n        relational.py\n        sympify.py\n        facts.py\n        evalf.py\n        power.py\n        logic.py\n        decorators.py\n        basic.py\n        trace.py\n        coreerrors.py\n        singleton.py\n        numbers.py\n        expr.py\n        operations.py\n        containers.py\n        exprtools.py\n        mul.py\n        add.py\n        cache.py\n        __init__.py\n        benchmarks/\n            bench_arit.py\n            bench_expand.py\n            bench_numbers.py\n            bench_basic.py\n            bench_sympify.py\n            bench_assumptions.py\n            __init__.py\n    stats/\n        frv_types.py\n        crv.py\n        rv_interface.py\n        error_prop.py\n        drv.py\n        crv_types.py\n        frv.py\n        joint_rv_types.py\n        joint_rv.py\n        rv.py\n        symbolic_probability.py\n        __init__.py\n        drv_types.py\n    strategies/\n        tools.py\n        core.py\n        tree.py\n        traverse.py\n        rl.py\n        util.py\n        __init__.py\n        branch/\n            tools.py\n            core.py\n            traverse.py\n            __init__.py\n    plotting/\n        plot.py\n        experimental_lambdify.py\n        textplot.py\n        plot_implicit.py\n        __init__.py\n        intervalmath/\n            lib_interval.py\n            interval_arithmetic.py\n            __init__.py\n        pygletplot/\n            managed_window.py\n            plot_controller.py\n            plot_object.py\n            plot_interval.py\n            plot_mode_base.py\n            plot_axes.py\n            plot_curve.py\n            color_scheme.py\n            plot.py\n            plot_camera.py\n            plot_window.py\n            plot_rotation.py\n            plot_modes.py\n            util.py\n            plot_surface.py\n            __init__.py\n            plot_mode.py\n    functions/\n        __init__.py\n        special/\n            hyper.py\n            delta_functions.py\n            polynomials.py\n            bsplines.py\n            error_functions.py\n            singularity_functions.py\n            tensor_functions.py\n            mathieu_functions.py\n            bessel.py\n            zeta_functions.py\n            spherical_harmonics.py\n            elliptic_integrals.py\n            beta_functions.py\n            __init__.py\n            gamma_functions.py\n            benchmarks/\n                bench_special.py\n                __init__.py\n        elementary/\n            piecewise.py\n            exponential.py\n            complexes.py\n            trigonometric.py\n            integers.py\n            miscellaneous.py\n            hyperbolic.py\n            __init__.py\n            benchmarks/\n                bench_exp.py\n                __init__.py\n        combinatorial/\n            numbers.py\n            factorials.py\n            __init__.py\n    polys/\n        polyoptions.py\n        polyfuncs.py\n        groebnertools.py\n        numberfields.py\n        rootisolation.py\n        constructor.py\n        densearith.py\n        polymatrix.py\n        heuristicgcd.py\n        compatibility.py\n        monomials.py\n        sqfreetools.py\n        polyquinticconst.py\n        partfrac.py\n        specialpolys.py\n        factortools.py\n        euclidtools.py\n        polyconfig.py\n        modulargcd.py\n        solvers.py\n        subresultants_qq_zz.py\n        fglmtools.py\n        rings.py\n        polyutils.py\n        densebasic.py\n        galoistools.py\n        multivariate_resultants.py\n        dispersion.py\n        distributedmodules.py\n        orthopolys.py\n        rationaltools.py\n        densetools.py\n        polyerrors.py\n        polyroots.py\n        rootoftools.py\n        ring_series.py\n        orderings.py\n        __init__.py\n        polyclasses.py\n        polytools.py\n        fields.py\n        domains/\n            realfield.py\n            pythonfinitefield.py\n            ring.py\n            algebraicfield.py\n            modularinteger.py\n            groundtypes.py\n            expressiondomain.py\n            fractionfield.py\n            compositedomain.py\n            domain.py\n            rationalfield.py\n            complexfield.py\n            gmpyrationalfield.py\n            old_polynomialring.py\n            gmpyfinitefield.py\n            finitefield.py\n            integerring.py\n            domainelement.py\n            mpelements.py\n            simpledomain.py\n            pythonrationalfield.py\n            old_fractionfield.py\n            gmpyintegerring.py\n            field.py\n            pythonintegerring.py\n            quotientring.py\n            characteristiczero.py\n            pythonrational.py\n            polynomialring.py\n            __init__.py\n        benchmarks/\n            bench_galoispolys.py\n            bench_solvers.py\n            bench_groebnertools.py\n            __init__.py\n        agca/\n            extensions.py\n            modules.py\n            ideals.py\n            homomorphisms.py\n            __init__.py\n    printing/\n        gtk.py\n        jscode.py\n        octave.py\n        python.py\n        cxxcode.py\n        llvmjitcode.py\n        repr.py\n        lambdarepr.py\n        str.py\n        julia.py\n        tensorflow.py\n        tree.py\n        dot.py\n        latex.py\n        pycode.py\n        preview.py\n        mathml.py\n        tableform.py\n        rcode.py\n        ccode.py\n        conventions.py\n        glsl.py\n        mathematica.py\n        codeprinter.py\n        theanocode.py\n        printer.py\n        defaults.py\n        fcode.py\n        __init__.py\n        precedence.py\n        rust.py\n        pretty/\n            pretty.py\n            stringpict.py\n            pretty_symbology.py\n            __init__.py\n    interactive/\n        printing.py\n        ipythonprinting.py\n        session.py\n        __init__.py\n    categories/\n        baseclasses.py\n        diagram_drawing.py\n        __init__.py\n    utilities/\n        source.py\n        memoization.py\n        misc.py\n        exceptions.py\n        codegen.py\n        magic.py\n        iterables.py\n        decorator.py\n        lambdify.py\n        enumerative.py\n        pytest.py\n        benchmarking.py\n        randtest.py\n        autowrap.py\n        timeutils.py\n        tmpfiles.py\n        __init__.py\n        runtests.py\n        pkgdata.py\n        _compilation/\n            runners.py\n            compilation.py\n            util.py\n            __init__.py\n            availability.py\n        mathml/\n            __init__.py\n    integrals/\n        transforms.py\n        trigonometry.py\n        integrals.py\n        meijerint_doc.py\n        risch.py\n        singularityfunctions.py\n        deltafunctions.py\n        intpoly.py\n        prde.py\n        rationaltools.py\n        meijerint.py\n        rde.py\n        manualintegrate.py\n        heurisch.py\n        __init__.py\n        quadrature.py\n        rubi/\n            symbol.py\n            utility_function.py\n            rubi.py\n            constraints.py\n            __init__.py\n            parsetools/\n                generate_rules.py\n                generate_tests.py\n                parse.py\n                __init__.py\n            rules/\n                special_functions.py\n                trinomial_products.py\n                miscellaneous_trig.py\n                secant.py\n                tangent.py\n                integrand_simplification.py\n                miscellaneous_integration.py\n                logarithms.py\n                quadratic_products.py\n                binomial_products.py\n                exponential.py\n                linear_products.py\n                inverse_hyperbolic.py\n                piecewise_linear.py\n                miscellaneous_algebraic.py\n                sine.py\n                hyperbolic.py\n                __init__.py\n                inverse_trig.py\n            rubi_tests/\n                __init__.py\n        benchmarks/\n            bench_trigintegrate.py\n            bench_integrate.py\n            __init__.py\n    concrete/\n        gosper.py\n        expr_with_intlimits.py\n        products.py\n        summations.py\n        expr_with_limits.py\n        delta.py\n        guess.py\n        __init__.py\n    multipledispatch/\n        conflict.py\n        core.py\n        dispatcher.py\n        utils.py\n        __init__.py\n    logic/\n        boolalg.py\n        inference.py\n        __init__.py\n        utilities/\n            dimacs.py\n            __init__.py\n        algorithms/\n            dpll2.py\n            dpll.py\n            __init__.py\n    ntheory/\n        generate.py\n        primetest.py\n        bbp_pi.py\n        modular.py\n        continued_fraction.py\n        egyptian_fraction.py\n        residue_ntheory.py\n        partitions_.py\n        multinomial.py\n        __init__.py\n        factor_.py\n    parsing/\n        ast_parser.py\n        mathematica.py\n        maxima.py\n        __init__.py\n        sympy_parser.py\n        latex/\n            _build_latex_antlr.py\n            errors.py\n            _parse_latex_antlr.py\n            __init__.py\n            _antlr/\n                latexparser.py\n                latexlexer.py\n                __init__.py\n        autolev/\n            _parse_autolev_antlr.py\n            __init__.py\n            _listener_autolev_antlr.py\n            _antlr/\n                autolevlistener.py\n                autolevlexer.py\n                autolevparser.py\n                __init__.py\n    geometry/\n        plane.py\n        ellipse.py\n        exceptions.py\n        point.py\n        parabola.py\n        polygon.py\n        curve.py\n        line.py\n        entity.py\n        util.py\n        __init__.py\n    deprecated/\n        class_registry.py\n        __init__.py\n    unify/\n        usympy.py\n        rewrite.py\n        core.py\n        __init__.py\n    benchmarks/\n        bench_meijerint.py\n        bench_discrete_log.py\n        bench_symbench.py\n        __init__.py\n    sets/\n        contains.py\n        fancysets.py\n        setexpr.py\n        ordinals.py\n        sets.py\n        conditionset.py\n        __init__.py\n        handlers/\n            union.py\n            power.py\n            intersection.py\n            mul.py\n            add.py\n            __init__.py\n            functions.py\n    external/\n        importtools.py\n        __init__.py\n    codegen/\n        rewriting.py\n        ast.py\n        approximations.py\n        pyutils.py\n        array_utils.py\n        futils.py\n        cutils.py\n        algorithms.py\n        cnodes.py\n        cxxnodes.py\n        fnodes.py\n        cfunctions.py\n        __init__.py\n    series/\n        approximants.py\n        acceleration.py\n        series.py\n        order.py\n        formal.py\n        residues.py\n        limits.py\n        kauers.py\n        series_class.py\n        fourier.py\n        sequences.py\n        limitseq.py\n        gruntz.py\n        __init__.py\n        benchmarks/\n            bench_order.py\n            bench_limit.py\n            __init__.py\nbin/\n    coverage_report.py\n    mailmap_update.py\n    sympy_time.py\n    get_sympy.py\n    authors_update.py\n    sympy_time_cache.py\n    ask_update.py\n    generate_test_list.py\n    generate_module_list.py\n    coverage_doctest.py\nrelease/\n    fabfile.py\ndoc/\n    generate_logos.py\n    src/\n        conf.py\n    ext/\n        docscrape.py\n        docscrape_sphinx.py\n        sympylive.py\n        numpydoc.py\n    api/\n        conf.py\nexamples/\n    all.py\n    intermediate/\n        coupled_cluster.py\n        vandermonde.py\n        trees.py\n        differential_equations.py\n        infinite_1d_box.py\n        mplot3d.py\n        partial_differential_eqs.py\n        print_gtk.py\n        mplot2d.py\n        sample.py\n    beginner/\n        plotting_nice_plot.py\n        limits_examples.py\n        series.py\n        print_pretty.py\n        plot_examples.py\n        substitution.py\n        precision.py\n        basic.py\n        differentiation.py\n        expansion.py\n        functions.py\n    advanced/\n        autowrap_ufuncify.py\n        grover_example.py\n        pidigits.py\n        qft.py\n        relativity.py\n        gibbs_phenomenon.py\n        autowrap_integrators.py\n        hydrogen.py\n        curvilinear_coordinates.py\n        fem.py\n        dense_coding_example.py\n        pyglet_plotting.py\n\n###\n\nPlease only provide the full path and return at most 5 files.\nThe returned files should be separated by new lines ordered by most to least important and wrapped with ```\nFor example:\n```\nfile1.py\nfile2.py\n```"}, "found_related_locs": [["function: PrettyPrinter._print_Sum\nfunction: PrettyPrinter._print_Add"], ["class: stringPict\nclass: prettyForm"], [""]], "additional_artifact_loc_related": [{"raw_output_loc": "```\nsympy/printing/pretty/pretty.py\nfunction: PrettyPrinter._print_Sum\nfunction: PrettyPrinter._print_Add\n\nsympy/printing/pretty/stringpict.py\nclass: stringPict\nclass: prettyForm\n```"}], "related_loc_traj": {"response": "```\nsympy/printing/pretty/pretty.py\nfunction: PrettyPrinter._print_Sum\nfunction: PrettyPrinter._print_Add\n\nsympy/printing/pretty/stringpict.py\nclass: stringPict\nclass: prettyForm\n```", "usage": {"completion_tokens": 52, "prompt_tokens": 7130}, "prompt": "\nPlease look through the following GitHub Problem Description, and the Skeleton of Relevant Files.\nIdentify all locations that need inspection or editing to fix the problem, including directly related areas as well as any potentially related global variables, functions, and classes.\nFor each location you provide, either give the name of the class, the name of a method in a class, the name of a function, or the name of a global variable.\n\n### GitHub Problem Description ###\nBad centering for Sum pretty print\n```\r\n>>> pprint(Sum(x, (x, 1, oo)) + 3)\r\n  \u221e\r\n ___\r\n \u2572\r\n  \u2572   x\r\n  \u2571     + 3\r\n \u2571\r\n \u203e\u203e\u203e\r\nx = 1\r\n```\r\n\r\nThe `x` and the `+ 3` should be aligned. I'm not sure if the `x` should be lower of if the `+ 3` should be higher. \n\n\n###\n\n\n\n### Skeleton of Relevant Files ###\n\n### File: sympy/printing/pretty/pretty.py ###\n```python\n\n# rename for usage from outside\npprint_use_unicode = pretty_use_unicode\npprint_try_use_unicode = pretty_try_use_unicode\n\n\nclass PrettyPrinter(Printer):\n    printmethod = \"_pretty\"\n\n    _default_settings = {\n        \"order\": None,\n        \"full_prec\": \"auto\",\n        \"use_unicode\": None,\n        \"wrap_line\": True,\n        \"num_columns\": None,\n        \"use_unicode_sqrt_char\": True,\n        \"root_notation\": True,\n        \"mat_symbol_style\": \"plain\",\n        \"imaginary_unit\": \"i\",\n    }\n\n    def __init__(self, settings=None):\n...\n    @property\n    def _use_unicode(self):\n...\n    def doprint(self, expr):\n...\n    # empty op so _print(stringPict) returns the same\n    def _print_stringPict(self, e):\n...\n    def _print_basestring(self, e):\n...\n    def _print_atan2(self, e):\n...\n    def _print_Symbol(self, e, bold_name=False):\n...\n    _print_RandomSymbol = _print_Symbol\n    def _print_MatrixSymbol(self, e):\n...\n    def _print_Float(self, e):\n...\n    def _print_Cross(self, e):\n...\n    def _print_Curl(self, e):\n...\n    def _print_Divergence(self, e):\n...\n    def _print_Dot(self, e):\n...\n    def _print_Gradient(self, e):\n...\n    def _print_Laplacian(self, e):\n...\n    def _print_Atom(self, e):\n...\n    # Infinity inherits from Number, so we have to override _print_XXX order\n    _print_Infinity = _print_Atom\n    _print_NegativeInfinity = _print_Atom\n    _print_EmptySet = _print_Atom\n    _print_Naturals = _print_Atom\n    _print_Naturals0 = _print_Atom\n    _print_Integers = _print_Atom\n    _print_Complexes = _print_Atom\n\n    def _print_Reals(self, e):\n...\n    def _print_subfactorial(self, e):\n...\n    def _print_factorial(self, e):\n...\n    def _print_factorial2(self, e):\n...\n    def _print_binomial(self, e):\n...\n    def _print_Relational(self, e):\n...\n    def _print_Not(self, e):\n...\n    def __print_Boolean(self, e, char, sort=True):\n...\n    def _print_And(self, e):\n...\n    def _print_Or(self, e):\n...\n    def _print_Xor(self, e):\n...\n    def _print_Nand(self, e):\n...\n    def _print_Nor(self, e):\n...\n    def _print_Implies(self, e, altchar=None):\n...\n    def _print_Equivalent(self, e, altchar=None):\n...\n    def _print_conjugate(self, e):\n...\n    def _print_Abs(self, e):\n...\n    _print_Determinant = _print_Abs\n\n    def _print_floor(self, e):\n...\n    def _print_ceiling(self, e):\n...\n    def _print_Derivative(self, deriv):\n...\n    def _print_Cycle(self, dc):\n...\n    def _print_PDF(self, pdf):\n...\n    def _print_Integral(self, integral):\n...\n    def _print_Product(self, expr):\n...\n    def _print_Sum(self, expr):\n...\n    def _print_Limit(self, l):\n...\n    def _print_matrix_contents(self, e):\n...\n    def _print_MatrixBase(self, e):\n...\n    _print_ImmutableMatrix = _print_MatrixBase\n    _print_Matrix = _print_MatrixBase\n\n    def _print_TensorProduct(self, expr):\n...\n    def _print_WedgeProduct(self, expr):\n...\n    def _print_Trace(self, e):\n...\n\n    def _print_MatrixElement(self, expr):\n...\n\n    def _print_MatrixSlice(self, m):\n...\n    def _print_Transpose(self, expr):\n...\n    def _print_Adjoint(self, expr):\n...\n    def _print_BlockMatrix(self, B):\n...\n    def _print_MatAdd(self, expr):\n...\n    def _print_MatMul(self, expr):\n...\n    def _print_DotProduct(self, expr):\n...\n    def _print_MatPow(self, expr):\n...\n    def _print_HadamardProduct(self, expr):\n...\n    def _print_KroneckerProduct(self, expr):\n...\n    def _print_FunctionMatrix(self, X):\n...\n    def _print_BasisDependent(self, expr):\n...\n    def _print_NDimArray(self, expr):\n...\n    _print_ImmutableDenseNDimArray = _print_NDimArray\n    _print_ImmutableSparseNDimArray = _print_NDimArray\n    _print_MutableDenseNDimArray = _print_NDimArray\n    _print_MutableSparseNDimArray = _print_NDimArray\n\n    def _printer_tensor_indices(self, name, indices, index_map={}):\n...\n    def _print_Tensor(self, expr):\n...\n    def _print_TensorElement(self, expr):\n...\n    def _print_TensMul(self, expr):\n...\n    def _print_TensAdd(self, expr):\n...\n    def _print_TensorIndex(self, expr):\n...\n    def _print_PartialDerivative(self, deriv):\n...\n    def _print_Piecewise(self, pexpr):\n...\n    def _print_ITE(self, ite):\n...\n    def _hprint_vec(self, v):\n...\n    def _hprint_vseparator(self, p1, p2):\n...\n    def _print_hyper(self, e):\n...\n    def _print_meijerg(self, e):\n...\n    def _print_ExpBase(self, e):\n...\n    def _print_Function(self, e, sort=False, func_name=None):\n...\n    @property\n    def _special_function_classes(self):\n...\n    def _print_FunctionClass(self, expr):\n...\n    def _print_GeometryEntity(self, expr):\n...\n    def _print_lerchphi(self, e):\n...\n    def _print_Lambda(self, e):\n...\n    def _print_Order(self, expr):\n...\n    def _print_SingularityFunction(self, e):\n...\n    def _print_beta(self, e):\n...\n    def _print_gamma(self, e):\n...\n    def _print_uppergamma(self, e):\n...\n    def _print_lowergamma(self, e):\n...\n    def _print_DiracDelta(self, e):\n...\n    def _print_expint(self, e):\n...\n    def _print_Chi(self, e):\n...\n    def _print_elliptic_e(self, e):\n...\n    def _print_elliptic_k(self, e):\n...\n    def _print_elliptic_f(self, e):\n...\n    def _print_elliptic_pi(self, e):\n...\n    def _print_GoldenRatio(self, expr):\n...\n    def _print_EulerGamma(self, expr):\n...\n    def _print_Mod(self, expr):\n...\n    def _print_Add(self, expr, order=None):\n...\n    def _print_Mul(self, product):\n...\n    # A helper function for _print_Pow to print x**(1/n)\n    def _print_nth_root(self, base, expt):\n...\n    def _print_Pow(self, power):\n...\n    def _print_UnevaluatedExpr(self, expr):\n...\n    def __print_numer_denom(self, p, q):\n...\n    def _print_Rational(self, expr):\n...\n    def _print_Fraction(self, expr):\n...\n    def _print_ProductSet(self, p):\n...\n    def _print_FiniteSet(self, s):\n...\n    def _print_Range(self, s):\n...\n    def _print_Interval(self, i):\n...\n    def _print_AccumulationBounds(self, i):\n...\n    def _print_Intersection(self, u):\n...\n    def _print_Union(self, u):\n...\n    def _print_SymmetricDifference(self, u):\n...\n    def _print_Complement(self, u):\n...\n    def _print_ImageSet(self, ts):\n...\n    def _print_ConditionSet(self, ts):\n...\n    def _print_ComplexRegion(self, ts):\n...\n    def _print_Contains(self, e):\n...\n    def _print_FourierSeries(self, s):\n...\n    def _print_FormalPowerSeries(self, s):\n...\n    def _print_SetExpr(self, se):\n...\n    def _print_SeqFormula(self, s):\n...\n    _print_SeqPer = _print_SeqFormula\n    _print_SeqAdd = _print_SeqFormula\n    _print_SeqMul = _print_SeqFormula\n\n    def _print_seq(self, seq, left=None, right=None, delimiter=', ',\n            parenthesize=lambda x: False):\n...\n    def join(self, delimiter, args):\n...\n    def _print_list(self, l):\n...\n    def _print_tuple(self, t):\n...\n    def _print_Tuple(self, expr):\n...\n    def _print_dict(self, d):\n...\n    def _print_Dict(self, d):\n...\n    def _print_set(self, s):\n...\n    def _print_frozenset(self, s):\n...\n    def _print_PolyRing(self, ring):\n...\n    def _print_FracField(self, field):\n...\n    def _print_FreeGroupElement(self, elm):\n...\n    def _print_PolyElement(self, poly):\n...\n    def _print_FracElement(self, frac):\n...\n    def _print_AlgebraicNumber(self, expr):\n...\n    def _print_ComplexRootOf(self, expr):\n...\n    def _print_RootSum(self, expr):\n...\n    def _print_FiniteField(self, expr):\n...\n    def _print_IntegerRing(self, expr):\n...\n    def _print_RationalField(self, expr):\n...\n    def _print_RealField(self, domain):\n...\n    def _print_ComplexField(self, domain):\n...\n    def _print_PolynomialRing(self, expr):\n...\n    def _print_FractionField(self, expr):\n...\n    def _print_PolynomialRingBase(self, expr):\n...\n    def _print_GroebnerBasis(self, basis):\n...\n    def _print_Subs(self, e):\n...\n    def _print_euler(self, e):\n...\n    def _print_catalan(self, e):\n...\n    def _print_bernoulli(self, e):\n...\n    _print_bell = _print_bernoulli\n\n    def _print_lucas(self, e):\n...\n    def _print_fibonacci(self, e):\n...\n    def _print_tribonacci(self, e):\n...\n    def _print_KroneckerDelta(self, e):\n...\n    def _print_RandomDomain(self, d):\n...\n    def _print_DMP(self, p):\n...\n    def _print_DMF(self, p):\n...\n    def _print_Object(self, object):\n...\n    def _print_Morphism(self, morphism):\n...\n    def _print_NamedMorphism(self, morphism):\n...\n    def _print_IdentityMorphism(self, morphism):\n...\n    def _print_CompositeMorphism(self, morphism):\n...\n    def _print_Category(self, category):\n...\n    def _print_Diagram(self, diagram):\n...\n    def _print_DiagramGrid(self, grid):\n...\n    def _print_FreeModuleElement(self, m):\n...\n    def _print_SubModule(self, M):\n...\n    def _print_FreeModule(self, M):\n...\n    def _print_ModuleImplementedIdeal(self, M):\n...\n    def _print_QuotientRing(self, R):\n...\n    def _print_QuotientRingElement(self, R):\n...\n    def _print_QuotientModuleElement(self, m):\n...\n    def _print_QuotientModule(self, M):\n...\n    def _print_MatrixHomomorphism(self, h):\n...\n    def _print_BaseScalarField(self, field):\n...\n    def _print_BaseVectorField(self, field):\n...\n    def _print_Differential(self, diff):\n...\n    def _print_Tr(self, p):\n...\n    def _print_primenu(self, e):\n...\n    def _print_primeomega(self, e):\n...\n    def _print_Quantity(self, e):\n...\n    def _print_AssignmentBase(self, e):\n...\n\ndef pretty(expr, **settings):\n...\n\ndef pretty_print(expr, wrap_line=True, num_columns=None, use_unicode=None,\n                 full_prec=\"auto\", order=None, use_unicode_sqrt_char=True,\n                 root_notation = True, mat_symbol_style=\"plain\", imaginary_unit=\"i\"):\n...\npprint = pretty_print\n\n\ndef pager_print(expr, **settings):\n\n```\n\n### File: sympy/printing/pretty/stringpict.py ###\n```python\n\n\nclass stringPict(object):\n    #special value for stringPict.below\n    LINE = 'line'\n\n    def __init__(self, s, baseline=0):\n...\n    @staticmethod\n    def equalLengths(lines):\n...\n    def height(self):\n...\n    def width(self):\n...\n    @staticmethod\n    def next(*args):\n...\n    def right(self, *args):\n...\n    def left(self, *args):\n...\n    @staticmethod\n    def stack(*args):\n...\n    def below(self, *args):\n...\n    def above(self, *args):\n...\n    def parens(self, left='(', right=')', ifascii_nougly=False):\n...\n    def leftslash(self):\n...\n    def root(self, n=None):\n...\n    def render(self, * args, **kwargs):\n...\n    def terminal_width(self):\n...\n    def __eq__(self, o):\n...\n    def __hash__(self):\n...\n    def __str__(self):\n...\n    def __unicode__(self):\n...\n    def __repr__(self):\n...\n    def __getitem__(self, index):\n...\n    def __len__(self):\n...\n\nclass prettyForm(stringPict):\n    ATOM, FUNC, DIV, POW, MUL, ADD, NEG, OPEN = range(8)\n\n    def __init__(self, s, baseline=0, binding=0, unicode=None):\n...\n    # Note: code to handle subtraction is in _print_Add\n\n    def __add__(self, *others):\n...\n    def __div__(self, den, slashed=False):\n...\n    def __truediv__(self, o):\n...\n    def __mul__(self, *others):\n...\n    def __repr__(self):\n...\n    def __pow__(self, b):\n...\n    simpleFunctions = [\"sin\", \"cos\", \"tan\"]\n\n    @staticmethod\n    def apply(function, *args):\n\n```\n\n### File: sympy/printing/pretty/pretty_symbology.py ###\n```python\n\nunicode_warnings = ''\n\n# prefix conventions when constructing tables\n# L   - LATIN     i\n# G   - GREEK     beta\n# D   - DIGIT     0\n# S   - SYMBOL    +\n\n\n__all__ = ['greek_unicode', 'sub', 'sup', 'xsym', 'vobj', 'hobj', 'pretty_symbol',\n           'annotated']\n\n\n_use_unicode = False\n\n\ndef pretty_use_unicode(flag=None):\n...\n\ndef pretty_try_use_unicode():\n...\n\ndef xstr(*args):\n...\n# GREEK\ng = lambda l: U('GREEK SMALL LETTER %s' % l.upper())\nG = lambda l: U('GREEK CAPITAL LETTER %s' % l.upper())\n\ngreek_letters = list(greeks) # make a copy\n# deal with Unicode's funny spelling of lambda\ngreek_letters[greek_letters.index('lambda')] = 'lamda'\n\n# {}  greek letter -> (g,G)\ngreek_unicode = {l: (g(l), G(l)) for l in greek_letters}\ngreek_unicode = dict((L, g(L)) for L in greek_letters)\n\n# aliases\ngreek_unicode['lambda'] = greek_unicode['lamda']\ngreek_unicode['Lambda'] = greek_unicode['Lamda']\ngreek_unicode['varsigma'] = u'\\N{GREEK SMALL LETTER FINAL SIGMA}'\n\n# BOLD\nb = lambda l: U('MATHEMATICAL BOLD SMALL %s' % l.upper())\nB = lambda l: U('MATHEMATICAL BOLD CAPITAL %s' % l.upper())\n\nbold_unicode = dict((l, b(l)) for l in ascii_lowercase)\n\n# GREEK BOLD\ngb = lambda l: U('MATHEMATICAL BOLD SMALL %s' % l.upper())\nGB = lambda l: U('MATHEMATICAL BOLD CAPITAL  %s' % l.upper())\n\ngreek_bold_letters = list(greeks) # make a copy, not strictly required here\n# deal with Unicode's funny spelling of lambda\ngreek_bold_letters[greek_bold_letters.index('lambda')] = 'lamda'\n\n# {}  greek letter -> (g,G)\ngreek_bold_unicode = {l: (g(l), G(l)) for l in greek_bold_letters}\ngreek_bold_unicode = dict((L, g(L)) for L in greek_bold_letters)\ngreek_bold_unicode['lambda'] = greek_unicode['lamda']\ngreek_bold_unicode['Lambda'] = greek_unicode['Lamda']\ngreek_bold_unicode['varsigma'] = u'\\N{MATHEMATICAL BOLD SMALL FINAL SIGMA}'\n\ndigit_2txt = {\n    '0':    'ZERO',\n    '1':    'ONE',\n    '2':    'TWO',\n    '3':    'THREE',\n    '4':    'FOUR',\n    '5':    'FIVE',\n    '6':    'SIX',\n    '7':    'SEVEN',\n    '8':    'EIGHT',\n    '9':    'NINE',\n}\n\nsymb_2txt = {\n    '+':    'PLUS SIGN',\n    '-':    'MINUS',\n    '=':    'EQUALS SIGN',\n    '(':    'LEFT PARENTHESIS',\n    ')':    'RIGHT PARENTHESIS',\n    '[':    'LEFT SQUARE BRACKET',\n    ']':    'RIGHT SQUARE BRACKET',\n    '{':    'LEFT CURLY BRACKET',\n    '}':    'RIGHT CURLY BRACKET',\n\n    # non-std\n    '{}':   'CURLY BRACKET',\n    'sum':  'SUMMATION',\n    'int':  'INTEGRAL',\n}\n\n# SUBSCRIPT & SUPERSCRIPT\nLSUB = lambda letter: U('LATIN SUBSCRIPT SMALL LETTER %s' % letter.upper())\nGSUB = lambda letter: U('GREEK SUBSCRIPT SMALL LETTER %s' % letter.upper())\nDSUB = lambda digit:  U('SUBSCRIPT %s' % digit_2txt[digit])\nSSUB = lambda symb:   U('SUBSCRIPT %s' % symb_2txt[symb])\n\nLSUP = lambda letter: U('SUPERSCRIPT LATIN SMALL LETTER %s' % letter.upper())\nDSUP = lambda digit:  U('SUPERSCRIPT %s' % digit_2txt[digit])\nSSUP = lambda symb:   U('SUPERSCRIPT %s' % symb_2txt[symb])\n\nsub = {}    # symb -> subscript symbol\nsup = {}    # symb -> superscript symbol\n\n# Variable modifiers\n# TODO: Make brackets adjust to height of contents\nmodifier_dict = {\n    # Accents\n    'mathring': lambda s: center_accent(s, u'\\N{COMBINING RING ABOVE}'),\n    'ddddot': lambda s: center_accent(s, u'\\N{COMBINING FOUR DOTS ABOVE}'),\n    'dddot': lambda s: center_accent(s, u'\\N{COMBINING THREE DOTS ABOVE}'),\n    'ddot': lambda s: center_accent(s, u'\\N{COMBINING DIAERESIS}'),\n    'dot': lambda s: center_accent(s, u'\\N{COMBINING DOT ABOVE}'),\n    'check': lambda s: center_accent(s, u'\\N{COMBINING CARON}'),\n    'breve': lambda s: center_accent(s, u'\\N{COMBINING BREVE}'),\n    'acute': lambda s: center_accent(s, u'\\N{COMBINING ACUTE ACCENT}'),\n    'grave': lambda s: center_accent(s, u'\\N{COMBINING GRAVE ACCENT}'),\n    'tilde': lambda s: center_accent(s, u'\\N{COMBINING TILDE}'),\n    'hat': lambda s: center_accent(s, u'\\N{COMBINING CIRCUMFLEX ACCENT}'),\n    'bar': lambda s: center_accent(s, u'\\N{COMBINING OVERLINE}'),\n    'vec': lambda s: center_accent(s, u'\\N{COMBINING RIGHT ARROW ABOVE}'),\n    'prime': lambda s: s+u'\\N{PRIME}',\n    'prm': lambda s: s+u'\\N{PRIME}',\n    # # Faces -- these are here for some compatibility with latex printing\n    # 'bold': lambda s: s,\n    # 'bm': lambda s: s,\n    # 'cal': lambda s: s,\n    # 'scr': lambda s: s,\n    # 'frak': lambda s: s,\n    # Brackets\n    'norm': lambda s: u'\\N{DOUBLE VERTICAL LINE}'+s+u'\\N{DOUBLE VERTICAL LINE}',\n    'avg': lambda s: u'\\N{MATHEMATICAL LEFT ANGLE BRACKET}'+s+u'\\N{MATHEMATICAL RIGHT ANGLE BRACKET}',\n    'abs': lambda s: u'\\N{VERTICAL LINE}'+s+u'\\N{VERTICAL LINE}',\n    'mag': lambda s: u'\\N{VERTICAL LINE}'+s+u'\\N{VERTICAL LINE}',\n}\n\n# VERTICAL OBJECTS\nHUP = lambda symb: U('%s UPPER HOOK' % symb_2txt[symb])\nCUP = lambda symb: U('%s UPPER CORNER' % symb_2txt[symb])\nMID = lambda symb: U('%s MIDDLE PIECE' % symb_2txt[symb])\nEXT = lambda symb: U('%s EXTENSION' % symb_2txt[symb])\nHLO = lambda symb: U('%s LOWER HOOK' % symb_2txt[symb])\nCLO = lambda symb: U('%s LOWER CORNER' % symb_2txt[symb])\nTOP = lambda symb: U('%s TOP' % symb_2txt[symb])\nBOT = lambda symb: U('%s BOTTOM' % symb_2txt[symb])\n\n# {} '('  ->  (extension, start, end, middle) 1-character\n_xobj_unicode = {\n\n    # vertical symbols\n    #       (( ext, top, bot, mid ), c1)\n    '(':    (( EXT('('), HUP('('), HLO('(') ), '('),\n    ')':    (( EXT(')'), HUP(')'), HLO(')') ), ')'),\n    '[':    (( EXT('['), CUP('['), CLO('[') ), '['),\n    ']':    (( EXT(']'), CUP(']'), CLO(']') ), ']'),\n    '{':    (( EXT('{}'), HUP('{'), HLO('{'), MID('{') ), '{'),\n    '}':    (( EXT('{}'), HUP('}'), HLO('}'), MID('}') ), '}'),\n    '|':    U('BOX DRAWINGS LIGHT VERTICAL'),\n\n    '<':    ((U('BOX DRAWINGS LIGHT VERTICAL'),\n              U('BOX DRAWINGS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT'),\n              U('BOX DRAWINGS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT')), '<'),\n\n    '>':    ((U('BOX DRAWINGS LIGHT VERTICAL'),\n              U('BOX DRAWINGS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT'),\n              U('BOX DRAWINGS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT')), '>'),\n\n    'lfloor': (( EXT('['), EXT('['), CLO('[') ), U('LEFT FLOOR')),\n    'rfloor': (( EXT(']'), EXT(']'), CLO(']') ), U('RIGHT FLOOR')),\n    'lceil':  (( EXT('['), CUP('['), EXT('[') ), U('LEFT CEILING')),\n    'rceil':  (( EXT(']'), CUP(']'), EXT(']') ), U('RIGHT CEILING')),\n\n    'int':  (( EXT('int'), U('TOP HALF INTEGRAL'), U('BOTTOM HALF INTEGRAL') ), U('INTEGRAL')),\n    'sum':  (( U('BOX DRAWINGS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT'), '_', U('OVERLINE'), U('BOX DRAWINGS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT')), U('N-ARY SUMMATION')),\n\n    # horizontal objects\n    #'-':   '-',\n    '-':    U('BOX DRAWINGS LIGHT HORIZONTAL'),\n    '_':    U('LOW LINE'),\n    # We used to use this, but LOW LINE looks better for roots, as it's a\n    # little lower (i.e., it lines up with the / perfectly.  But perhaps this\n    # one would still be wanted for some cases?\n    # '_':    U('HORIZONTAL SCAN LINE-9'),\n\n    # diagonal objects '\\' & '/' ?\n    '/':    U('BOX DRAWINGS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT'),\n    '\\\\':   U('BOX DRAWINGS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT'),\n}\n\n_xobj_ascii = {\n    # vertical symbols\n    #       (( ext, top, bot, mid ), c1)\n    '(':    (( '|', '/', '\\\\' ), '('),\n    ')':    (( '|', '\\\\', '/' ), ')'),\n\n# XXX this looks ugly\n#   '[':    (( '|', '-', '-' ), '['),\n#   ']':    (( '|', '-', '-' ), ']'),\n# XXX not so ugly :(\n    '[':    (( '[', '[', '[' ), '['),\n    ']':    (( ']', ']', ']' ), ']'),\n\n    '{':    (( '|', '/', '\\\\', '<' ), '{'),\n    '}':    (( '|', '\\\\', '/', '>' ), '}'),\n    '|':    '|',\n\n    '<':    (( '|', '/', '\\\\' ), '<'),\n    '>':    (( '|', '\\\\', '/' ), '>'),\n\n    'int':  ( ' | ', '  /', '/  ' ),\n\n    # horizontal objects\n    '-':    '-',\n    '_':    '_',\n\n    # diagonal objects '\\' & '/' ?\n    '/':    '/',\n    '\\\\':   '\\\\',\n}\n\n\ndef xobj(symb, length):\n...\n\ndef vobj(symb, height):\n...\n\ndef hobj(symb, width):\n...\n# RADICAL\n# n -> symbol\nroot = {\n    2: U('SQUARE ROOT'),   # U('RADICAL SYMBOL BOTTOM')\n    3: U('CUBE ROOT'),\n    4: U('FOURTH ROOT'),\n}\n\n\n# RATIONAL\nVF = lambda txt: U('VULGAR FRACTION %s' % txt)\n\n# (p,q) -> symbol\nfrac = {\n    (1, 2): VF('ONE HALF'),\n    (1, 3): VF('ONE THIRD'),\n    (2, 3): VF('TWO THIRDS'),\n    (1, 4): VF('ONE QUARTER'),\n    (3, 4): VF('THREE QUARTERS'),\n    (1, 5): VF('ONE FIFTH'),\n    (2, 5): VF('TWO FIFTHS'),\n    (3, 5): VF('THREE FIFTHS'),\n    (4, 5): VF('FOUR FIFTHS'),\n    (1, 6): VF('ONE SIXTH'),\n    (5, 6): VF('FIVE SIXTHS'),\n    (1, 8): VF('ONE EIGHTH'),\n    (3, 8): VF('THREE EIGHTHS'),\n    (5, 8): VF('FIVE EIGHTHS'),\n    (7, 8): VF('SEVEN EIGHTHS'),\n}\n\n\n# atom symbols\n_xsym = {\n    '==':  ('=', '='),\n    '<':   ('<', '<'),\n    '>':   ('>', '>'),\n    '<=':  ('<=', U('LESS-THAN OR EQUAL TO')),\n    '>=':  ('>=', U('GREATER-THAN OR EQUAL TO')),\n    '!=':  ('!=', U('NOT EQUAL TO')),\n    ':=':  (':=', ':='),\n    '+=':  ('+=', '+='),\n    '-=':  ('-=', '-='),\n    '*=':  ('*=', '*='),\n    '/=':  ('/=', '/='),\n    '%=':  ('%=', '%='),\n    '*':   ('*', U('DOT OPERATOR')),\n    '-->': ('-->', U('EM DASH') + U('EM DASH') +\n            U('BLACK RIGHT-POINTING TRIANGLE') if U('EM DASH')\n            and U('BLACK RIGHT-POINTING TRIANGLE') else None),\n    '==>': ('==>', U('BOX DRAWINGS DOUBLE HORIZONTAL') +\n            U('BOX DRAWINGS DOUBLE HORIZONTAL') +\n            U('BLACK RIGHT-POINTING TRIANGLE') if\n            U('BOX DRAWINGS DOUBLE HORIZONTAL') and\n            U('BOX DRAWINGS DOUBLE HORIZONTAL') and\n            U('BLACK RIGHT-POINTING TRIANGLE') else None),\n    '.':   ('*', U('RING OPERATOR')),\n}\n\n\ndef xsym(sym):\n...\n\n# SYMBOLS\n\natoms_table = {\n    # class                    how-to-display\n    'Exp1':                    U('SCRIPT SMALL E'),\n    'Pi':                      U('GREEK SMALL LETTER PI'),\n    'Infinity':                U('INFINITY'),\n    'NegativeInfinity':        U('INFINITY') and ('-' + U('INFINITY')),  # XXX what to do here\n    #'ImaginaryUnit':          U('GREEK SMALL LETTER IOTA'),\n    #'ImaginaryUnit':          U('MATHEMATICAL ITALIC SMALL I'),\n    'ImaginaryUnit':           U('DOUBLE-STRUCK ITALIC SMALL I'),\n    'EmptySet':                U('EMPTY SET'),\n    'Naturals':                U('DOUBLE-STRUCK CAPITAL N'),\n    'Naturals0':               (U('DOUBLE-STRUCK CAPITAL N') and\n                                (U('DOUBLE-STRUCK CAPITAL N') +\n                                 U('SUBSCRIPT ZERO'))),\n    'Integers':                U('DOUBLE-STRUCK CAPITAL Z'),\n    'Reals':                   U('DOUBLE-STRUCK CAPITAL R'),\n    'Complexes':               U('DOUBLE-STRUCK CAPITAL C'),\n    'Union':                   U('UNION'),\n    'SymmetricDifference':     U('INCREMENT'),\n    'Intersection':            U('INTERSECTION'),\n    'Ring':                    U('RING OPERATOR')\n}\n\n\ndef pretty_atom(atom_name, default=None, printer=None):\n...\n\ndef pretty_symbol(symb_name, bold_name=False):\n...\n\ndef annotated(letter):\n...\n\ndef center_accent(string, accent):\n\n```\n\n\n###\n\nPlease provide the complete set of locations as either a class name, a function name, or a variable name.\nNote that if you include a class, you do not need to list its specific methods.\nYou can include either the entire class or don't include the class name and instead include specific methods in the class.\n### Examples:\n```\nfull_path1/file1.py\nfunction: my_function_1\nclass: MyClass1\nfunction: MyClass2.my_method\n\nfull_path2/file2.py\nvariable: my_var\nfunction: MyClass3.my_method\n\nfull_path3/file3.py\nfunction: my_function_2\nfunction: my_function_3\nfunction: MyClass4.my_method_1\nclass: MyClass5\n```\n\nReturn just the locations.\n"}, "found_edit_locs": ["line: 532\nline: 622\nline: 632", "line: 61\nline: 66\nline: 77\nline: 83", ""], "additional_artifact_loc_edit_location": [{"raw_output_loc": ["```\nsympy/printing/pretty/pretty.py\nfunction: PrettyPrinter._print_Sum\nline: 632\n\nsympy/printing/pretty/stringpict.py\nclass: stringPict\nfunction: stringPict.next\nline: 83\n\nsympy/printing/pretty/stringpict.py\nclass: stringPict\nfunction: stringPict.equalLengths\nline: 46\n```", "```\nsympy/printing/pretty/pretty.py\nline: 529\nline: 531\nline: 632\n\nsympy/printing/pretty/stringpict.py\nline: 146\n```", "```\nsympy/printing/pretty/pretty.py\nline: 532\nline: 622\nline: 632\n\nsympy/printing/pretty/stringpict.py\nline: 61\nline: 66\nline: 77\nline: 83\n```", "```\nsympy/printing/pretty/pretty.py\nline: 631\n\nsympy/printing/pretty/stringpict.py\nfunction: stringPict.right\nfunction: stringPict.next\n```"]}], "edit_loc_traj": {"prompt": "\nPlease review the following GitHub problem description, and relevant files, and provide a set of locations that need to be edited to fix the issue.\nThe locations can be specified as class names, function or method names, or exact line numbers that require modification.\n\n### GitHub Problem Description ###\nBad centering for Sum pretty print\n```\r\n>>> pprint(Sum(x, (x, 1, oo)) + 3)\r\n  \u221e\r\n ___\r\n \u2572\r\n  \u2572   x\r\n  \u2571     + 3\r\n \u2571\r\n \u203e\u203e\u203e\r\nx = 1\r\n```\r\n\r\nThe `x` and the `+ 3` should be aligned. I'm not sure if the `x` should be lower of if the `+ 3` should be higher. \n\n\n###\n\n\n\n### sympy/printing/pretty/pretty.py\n...\n525|            padding = stringPict('')\n526|            padding = prettyForm(*padding.stack(*[' ']*(height - 1)))\n527|            pretty_sign = prettyForm(*pretty_sign.right(padding))\n528|\n529|            pretty_func = prettyForm(*pretty_sign.right(pretty_func))\n530|\n531|        pretty_func.baseline = max_upper + sign_height//2\n532|        pretty_func.binding = prettyForm.MUL\n533|        return pretty_func\n534|\n535|    def _print_Sum(self, expr):\n536|        ascii_mode = not self._use_unicode\n537|\n538|        def asum(hrequired, lower, upper, use_ascii):\n539|            def adjust(s, wid=None, how='<^>'):\n540|                if not wid or len(s) > wid:\n541|                    return s\n542|                need = wid - len(s)\n543|                if how == '<^>' or how == \"<\" or how not in list('<^>'):\n544|                    return s + ' '*need\n545|                half = need//2\n546|                lead = ' '*half\n547|                if how == \">\":\n548|                    return \" \"*need + s\n549|                return lead + s + ' '*(need - len(lead))\n550|\n551|            h = max(hrequired, 2)\n552|            d = h//2\n553|            w = d + 1\n554|            more = hrequired % 2\n555|\n556|            lines = []\n557|            if use_ascii:\n558|                lines.append(\"_\"*(w) + ' ')\n559|                lines.append(r\"\\%s`\" % (' '*(w - 1)))\n560|                for i in range(1, d):\n561|                    lines.append('%s\\\\%s' % (' '*i, ' '*(w - i)))\n562|                if more:\n563|                    lines.append('%s)%s' % (' '*(d), ' '*(w - d)))\n564|                for i in reversed(range(1, d)):\n565|                    lines.append('%s/%s' % (' '*i, ' '*(w - i)))\n566|                lines.append(\"/\" + \"_\"*(w - 1) + ',')\n567|                return d, h + more, lines, 0\n568|            else:\n569|                w = w + more\n570|                d = d + more\n571|                vsum = vobj('sum', 4)\n572|                lines.append(\"_\"*(w))\n573|                for i in range(0, d):\n574|                    lines.append('%s%s%s' % (' '*i, vsum[2], ' '*(w - i - 1)))\n575|                for i in reversed(range(0, d)):\n576|                    lines.append('%s%s%s' % (' '*i, vsum[4], ' '*(w - i - 1)))\n577|                lines.append(vsum[8]*(w))\n578|                return d, h + 2*more, lines, more\n579|\n580|        f = expr.function\n581|\n582|        prettyF = self._print(f)\n583|\n584|        if f.is_Add:  # add parens\n585|            prettyF = prettyForm(*prettyF.parens())\n586|\n587|        H = prettyF.height() + 2\n588|\n589|        # \\sum \\sum \\sum ...\n590|        first = True\n591|        max_upper = 0\n592|        sign_height = 0\n593|\n594|        for lim in expr.limits:\n595|            if len(lim) == 3:\n596|                prettyUpper = self._print(lim[2])\n597|                prettyLower = self._print(Equality(lim[0], lim[1]))\n598|            elif len(lim) == 2:\n599|                prettyUpper = self._print(\"\")\n600|                prettyLower = self._print(Equality(lim[0], lim[1]))\n601|            elif len(lim) == 1:\n602|                prettyUpper = self._print(\"\")\n603|                prettyLower = self._print(lim[0])\n604|\n605|            max_upper = max(max_upper, prettyUpper.height())\n606|\n607|            # Create sum sign based on the height of the argument\n608|            d, h, slines, adjustment = asum(\n609|                H, prettyLower.width(), prettyUpper.width(), ascii_mode)\n610|            prettySign = stringPict('')\n611|            prettySign = prettyForm(*prettySign.stack(*slines))\n612|\n613|            if first:\n614|                sign_height = prettySign.height()\n615|\n616|            prettySign = prettyForm(*prettySign.above(prettyUpper))\n617|            prettySign = prettyForm(*prettySign.below(prettyLower))\n618|\n619|            if first:\n620|                # change F baseline so it centers on the sign\n621|                prettyF.baseline -= d - (prettyF.height()//2 -\n622|                                         prettyF.baseline) - adjustment\n623|                first = False\n624|\n625|            # put padding to the right\n626|            pad = stringPict('')\n627|            pad = prettyForm(*pad.stack(*[' ']*h))\n628|            prettySign = prettyForm(*prettySign.right(pad))\n629|            # put the present prettyF to the right\n630|            prettyF = prettyForm(*prettySign.right(prettyF))\n631|\n632|        prettyF.baseline = max_upper + sign_height//2\n633|        prettyF.binding = prettyForm.MUL\n634|        return prettyF\n635|\n636|    def _print_Limit(self, l):\n637|        e, z, z0, dir = l.args\n638|\n639|        E = self._print(e)\n640|        if precedence(e) <= PRECEDENCE[\"Mul\"]:\n641|            E = prettyForm(*E.parens('(', ')'))\n642|        Lim = prettyForm('lim')\n643|\n644|        LimArg = self._print(z)\n...\n1564|\n1565|    def _print_Mod(self, expr):\n1566|        pform = self._print(expr.args[0])\n1567|        if pform.binding > prettyForm.MUL:\n1568|            pform = prettyForm(*pform.parens())\n1569|        pform = prettyForm(*pform.right(' mod '))\n1570|        pform = prettyForm(*pform.right(self._print(expr.args[1])))\n1571|        pform.binding = prettyForm.OPEN\n1572|        return pform\n1573|\n1574|    def _print_Add(self, expr, order=None):\n1575|        if self.order == 'none':\n1576|            terms = list(expr.args)\n1577|        else:\n1578|            terms = self._as_ordered_terms(expr, order=order)\n1579|        pforms, indices = [], []\n1580|\n1581|        def pretty_negative(pform, index):\n1582|            \"\"\"Prepend a minus sign to a pretty form. \"\"\"\n1583|            #TODO: Move this code to prettyForm\n1584|            if index == 0:\n1585|                if pform.height() > 1:\n1586|                    pform_neg = '- '\n1587|                else:\n1588|                    pform_neg = '-'\n1589|            else:\n1590|                pform_neg = ' - '\n1591|\n1592|            if (pform.binding > prettyForm.NEG\n1593|                or pform.binding == prettyForm.ADD):\n1594|                p = stringPict(*pform.parens())\n1595|            else:\n1596|                p = pform\n1597|            p = stringPict.next(pform_neg, p)\n1598|            # Lower the binding to NEG, even if it was higher. Otherwise, it\n1599|            # will print as a + ( - (b)), instead of a - (b).\n1600|            return prettyForm(binding=prettyForm.NEG, *p)\n1601|\n1602|        for i, term in enumerate(terms):\n1603|            if term.is_Mul and _coeff_isneg(term):\n1604|                coeff, other = term.as_coeff_mul(rational=False)\n1605|                pform = self._print(Mul(-coeff, *other, evaluate=False))\n1606|                pforms.append(pretty_negative(pform, i))\n1607|            elif term.is_Rational and term.q > 1:\n1608|                pforms.append(None)\n1609|                indices.append(i)\n1610|            elif term.is_Number and term < 0:\n1611|                pform = self._print(-term)\n1612|                pforms.append(pretty_negative(pform, i))\n1613|            elif term.is_Relational:\n1614|                pforms.append(prettyForm(*self._print(term).parens()))\n1615|            else:\n1616|                pforms.append(self._print(term))\n1617|\n1618|        if indices:\n1619|            large = True\n1620|\n1621|            for pform in pforms:\n1622|                if pform is not None and pform.height() > 1:\n1623|                    break\n1624|            else:\n1625|                large = False\n1626|\n1627|            for i in indices:\n1628|                term, negative = terms[i], False\n1629|\n1630|                if term < 0:\n1631|                    term, negative = -term, True\n1632|\n1633|                if large:\n1634|                    pform = prettyForm(str(term.p))/prettyForm(str(term.q))\n1635|                else:\n1636|                    pform = self._print(term)\n1637|\n1638|                if negative:\n1639|                    pform = pretty_negative(pform, i)\n1640|\n1641|                pforms[i] = pform\n1642|\n1643|        return prettyForm.__add__(*pforms)\n1644|\n1645|    def _print_Mul(self, product):\n1646|        from sympy.physics.units import Quantity\n1647|        a = []  # items in the numerator\n1648|        b = []  # items that are in the denominator (if any)\n1649|\n1650|        if self.order not in ('old', 'none'):\n1651|            args = product.as_ordered_factors()\n1652|        else:\n1653|            args = list(product.args)\n...\n\n\n### sympy/printing/pretty/stringpict.py\n...\n11|    - Allow left/center/right alignment options for above/below and\n12|      top/center/bottom alignment options for left/right\n13|\"\"\"\n14|\n15|from __future__ import print_function, division\n16|\n17|from .pretty_symbology import hobj, vobj, xsym, xobj, pretty_use_unicode\n18|from sympy.core.compatibility import string_types, range, unicode\n19|\n20|\n21|class stringPict(object):\n22|    \"\"\"An ASCII picture.\n23|    The pictures are represented as a list of equal length strings.\n24|    \"\"\"\n25|    #special value for stringPict.below\n26|    LINE = 'line'\n27|\n28|    def __init__(self, s, baseline=0):\n29|        \"\"\"Initialize from string.\n30|        Multiline strings are centered.\n31|        \"\"\"\n32|        self.s = s\n33|        #picture is a string that just can be printed\n34|        self.picture = stringPict.equalLengths(s.splitlines())\n35|        #baseline is the line number of the \"base line\"\n36|        self.baseline = baseline\n37|        self.binding = None\n38|\n39|    @staticmethod\n40|    def equalLengths(lines):\n41|        # empty lines\n42|        if not lines:\n43|            return ['']\n44|\n45|        width = max(len(line) for line in lines)\n46|        return [line.center(width) for line in lines]\n47|\n48|    def height(self):\n49|        \"\"\"The height of the picture in characters.\"\"\"\n50|        return len(self.picture)\n51|\n52|    def width(self):\n53|        \"\"\"The width of the picture in characters.\"\"\"\n54|        return len(self.picture[0])\n55|\n56|    @staticmethod\n57|    def next(*args):\n58|        \"\"\"Put a string of stringPicts next to each other.\n59|        Returns string, baseline arguments for stringPict.\n60|        \"\"\"\n61|        #convert everything to stringPicts\n62|        objects = []\n63|        for arg in args:\n64|            if isinstance(arg, string_types):\n65|                arg = stringPict(arg)\n66|            objects.append(arg)\n67|\n68|        #make a list of pictures, with equal height and baseline\n69|        newBaseline = max(obj.baseline for obj in objects)\n70|        newHeightBelowBaseline = max(\n71|            obj.height() - obj.baseline\n72|            for obj in objects)\n73|        newHeight = newBaseline + newHeightBelowBaseline\n74|\n75|        pictures = []\n76|        for obj in objects:\n77|            oneEmptyLine = [' '*obj.width()]\n78|            basePadding = newBaseline - obj.baseline\n79|            totalPadding = newHeight - obj.height()\n80|            pictures.append(\n81|                oneEmptyLine * basePadding +\n82|                obj.picture +\n83|                oneEmptyLine * (totalPadding - basePadding))\n84|\n85|        result = [''.join(lines) for lines in zip(*pictures)]\n86|        return '\\n'.join(result), newBaseline\n87|\n88|    def right(self, *args):\n89|        r\"\"\"Put pictures next to this one.\n90|        Returns string, baseline arguments for stringPict.\n91|        (Multiline) strings are allowed, and are given a baseline of 0.\n92|\n93|        Examples\n94|        ========\n95|\n96|        >>> from sympy.printing.pretty.stringpict import stringPict\n97|        >>> print(stringPict(\"10\").right(\" + \",stringPict(\"1\\r-\\r2\",1))[0])\n98|             1\n99|        10 + -\n100|             2\n101|\n102|        \"\"\"\n103|        return stringPict.next(self, *args)\n104|\n105|    def left(self, *args):\n106|        \"\"\"Put pictures (left to right) at left.\n107|        Returns string, baseline arguments for stringPict.\n108|        \"\"\"\n109|        return stringPict.next(*(args + (self,)))\n110|\n111|    @staticmethod\n112|    def stack(*args):\n113|        \"\"\"Put pictures on top of each other,\n114|        from top to bottom.\n115|        Returns string, baseline arguments for stringPict.\n116|        The baseline is the baseline of the second picture.\n117|        Everything is centered.\n118|        Baseline is the baseline of the second picture.\n119|        Strings are allowed.\n120|        The special value stringPict.LINE is a row of '-' extended to the width.\n121|        \"\"\"\n122|        #convert everything to stringPicts; keep LINE\n123|        objects = []\n124|        for arg in args:\n125|            if arg is not stringPict.LINE and isinstance(arg, string_types):\n126|                arg = stringPict(arg)\n127|            objects.append(arg)\n128|\n129|        #compute new width\n130|        newWidth = max(\n131|            obj.width()\n132|            for obj in objects\n133|            if obj is not stringPict.LINE)\n134|\n135|        lineObj = stringPict(hobj('-', newWidth))\n136|\n137|        #replace LINE with proper lines\n138|        for i, obj in enumerate(objects):\n139|            if obj is stringPict.LINE:\n140|                objects[i] = lineObj\n141|\n142|        #stack the pictures, and center the result\n143|        newPicture = []\n144|        for obj in objects:\n145|            newPicture.extend(obj.picture)\n146|        newPicture = [line.center(newWidth) for line in newPicture]\n147|        newBaseline = objects[0].height() + objects[1].baseline\n148|        return '\\n'.join(newPicture), newBaseline\n149|\n150|    def below(self, *args):\n151|        \"\"\"Put pictures under this picture.\n152|        Returns string, baseline arguments for stringPict.\n153|        Baseline is baseline of top picture\n154|\n155|        Examples\n156|        ========\n157|\n158|        >>> from sympy.printing.pretty.stringpict import stringPict\n159|        >>> print(stringPict(\"x+3\").below(\n160|        ...       stringPict.LINE, '3')[0]) #doctest: +NORMALIZE_WHITESPACE\n161|        x+3\n162|        ---\n163|         3\n164|\n165|        \"\"\"\n166|        s, baseline = stringPict.stack(self, *args)\n167|        return s, self.baseline\n168|\n169|    def above(self, *args):\n170|        \"\"\"Put pictures above this picture.\n171|        Returns string, baseline arguments for stringPict.\n172|        Baseline is baseline of bottom picture.\n173|        \"\"\"\n174|        string, baseline = stringPict.stack(*(args + (self,)))\n175|        baseline = len(string.splitlines()) - self.height() + self.baseline\n176|        return string, baseline\n177|\n178|    def parens(self, left='(', right=')', ifascii_nougly=False):\n179|        \"\"\"Put parentheses around self.\n180|        Returns string, baseline arguments for stringPict.\n181|\n182|        left or right can be None or empty string which means 'no paren from\n183|        that side'\n184|        \"\"\"\n185|        h = self.height()\n186|        b = self.baseline\n187|\n188|        # XXX this is a hack -- ascii parens are ugly!\n189|        if ifascii_nougly and not pretty_use_unicode():\n190|            h = 1\n191|            b = 0\n192|\n193|        res = self\n194|\n195|        if left:\n196|            lparen = stringPict(vobj(left, h), baseline=b)\n197|            res = stringPict(*lparen.right(self))\n198|        if right:\n199|            rparen = stringPict(vobj(right, h), baseline=b)\n200|            res = stringPict(*res.right(rparen))\n201|\n202|        return ('\\n'.join(res.picture), res.baseline)\n203|\n204|    def leftslash(self):\n205|        \"\"\"Precede object by a slash of the proper size.\n206|        \"\"\"\n207|        # XXX not used anywhere ?\n208|        height = max(\n209|            self.baseline,\n210|            self.height() - 1 - self.baseline)*2 + 1\n211|        slash = '\\n'.join(\n212|            ' '*(height - i - 1) + xobj('/', 1) + ' '*i\n213|            for i in range(height)\n214|        )\n215|        return self.left(stringPict(slash, height//2))\n216|\n217|    def root(self, n=None):\n218|        \"\"\"Produce a nice root symbol.\n219|        Produces ugly results for big n inserts.\n220|        \"\"\"\n221|        # XXX not used anywhere\n222|        # XXX duplicate of root drawing in pretty.py\n223|        #put line over expression\n224|        result = self.above('_'*self.width())\n225|        #construct right half of root symbol\n226|        height = self.height()\n227|        slash = '\\n'.join(\n228|            ' ' * (height - i - 1) + '/' + ' ' * i\n229|            for i in range(height)\n230|        )\n231|        slash = stringPict(slash, height - 1)\n232|        #left half of root symbol\n233|        if height > 2:\n234|            downline = stringPict('\\\\ \\n \\\\', 1)\n235|        else:\n236|            downline = stringPict('\\\\')\n237|        #put n on top, as low as possible\n238|        if n is not None and n.width() > downline.width():\n239|            downline = downline.left(' '*(n.width() - downline.width()))\n240|            downline = downline.above(n)\n241|        #build root symbol\n242|        root = downline.right(slash)\n243|        #glue it on at the proper height\n244|        #normally, the root symbel is as high as self\n245|        #which is one less than result\n246|        #this moves the root symbol one down\n247|        #if the root became higher, the baseline has to grow too\n248|        root.baseline = result.baseline - result.height() + root.height()\n249|        return result.left(root)\n250|\n251|    def render(self, * args, **kwargs):\n252|        \"\"\"Return the string form of self.\n253|\n254|           Unless the argument line_break is set to False, it will\n255|           break the expression in a form that can be printed\n256|           on the terminal without being broken up.\n257|         \"\"\"\n258|        if kwargs[\"wrap_line\"] is False:\n259|            return \"\\n\".join(self.picture)\n260|\n261|        if kwargs[\"num_columns\"] is not None:\n262|            # Read the argument num_columns if it is not None\n263|            ncols = kwargs[\"num_columns\"]\n264|        else:\n265|            # Attempt to get a terminal width\n266|            ncols = self.terminal_width()\n267|\n268|        ncols -= 2\n269|        if ncols <= 0:\n270|            ncols = 78\n271|\n272|        # If smaller than the terminal width, no need to correct\n273|        if self.width() <= ncols:\n274|            return type(self.picture[0])(self)\n275|\n276|        # for one-line pictures we don't need v-spacers. on the other hand, for\n277|        # multiline-pictures, we need v-spacers between blocks, compare:\n278|        #\n279|        #    2  2        3    | a*c*e + a*c*f + a*d  | a*c*e + a*c*f + a*d  | 3.14159265358979323\n280|        # 6*x *y  + 4*x*y  +  |                      | *e + a*d*f + b*c*e   | 84626433832795\n281|        #                     | *e + a*d*f + b*c*e   | + b*c*f + b*d*e + b  |\n282|        #      3    4    4    |                      | *d*f                 |\n283|        # 4*y*x  + x  + y     | + b*c*f + b*d*e + b  |                      |\n284|        #                     |                      |                      |\n285|        #                     | *d*f\n286|\n287|        i = 0\n288|        svals = []\n289|        do_vspacers = (self.height() > 1)\n290|        while i < self.width():\n291|            svals.extend([ sval[i:i + ncols] for sval in self.picture ])\n292|            if do_vspacers:\n293|                svals.append(\"\")  # a vertical spacer\n294|            i += ncols\n295|\n296|        if svals[-1] == '':\n297|            del svals[-1]  # Get rid of the last spacer\n298|\n299|        return \"\\n\".join(svals)\n300|\n301|    def terminal_width(self):\n302|        \"\"\"Return the terminal width if possible, otherwise return 0.\n303|        \"\"\"\n304|        ncols = 0\n305|        try:\n306|            import curses\n307|            import io\n308|            try:\n309|                curses.setupterm()\n310|                ncols = curses.tigetnum('cols')\n311|            except AttributeError:\n312|                # windows curses doesn't implement setupterm or tigetnum\n313|                # code below from\n314|                # http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/440694\n315|                from ctypes import windll, create_string_buffer\n316|                # stdin handle is -10\n317|                # stdout handle is -11\n318|                # stderr handle is -12\n319|                h = windll.kernel32.GetStdHandle(-12)\n320|                csbi = create_string_buffer(22)\n321|                res = windll.kernel32.GetConsoleScreenBufferInfo(h, csbi)\n322|                if res:\n323|                    import struct\n324|                    (bufx, bufy, curx, cury, wattr,\n325|                     left, top, right, bottom, maxx, maxy) = struct.unpack(\"hhhhHhhhhhh\", csbi.raw)\n326|                    ncols = right - left + 1\n327|            except curses.error:\n328|                pass\n329|            except io.UnsupportedOperation:\n330|                pass\n331|        except (ImportError, TypeError):\n332|            pass\n333|        return ncols\n334|\n335|    def __eq__(self, o):\n336|        if isinstance(o, string_types):\n337|            return '\\n'.join(self.picture) == o\n338|        elif isinstance(o, stringPict):\n339|            return o.picture == self.picture\n340|        return False\n341|\n342|    def __hash__(self):\n343|        return super(stringPict, self).__hash__()\n344|\n345|    def __str__(self):\n346|        return str.join('\\n', self.picture)\n347|\n348|    def __unicode__(self):\n349|        return unicode.join(u'\\n', self.picture)\n350|\n351|    def __repr__(self):\n352|        return \"stringPict(%r,%d)\" % ('\\n'.join(self.picture), self.baseline)\n353|\n354|    def __getitem__(self, index):\n355|        return self.picture[index]\n356|\n357|    def __len__(self):\n358|        return len(self.s)\n359|\n360|\n361|class prettyForm(stringPict):\n362|    \"\"\"\n363|    Extension of the stringPict class that knows about basic math applications,\n364|    optimizing double minus signs.\n365|\n366|    \"Binding\" is interpreted as follows::\n367|\n368|        ATOM this is an atom: never needs to be parenthesized\n369|        FUNC this is a function application: parenthesize if added (?)\n370|        DIV  this is a division: make wider division if divided\n371|        POW  this is a power: only parenthesize if exponent\n372|        MUL  this is a multiplication: parenthesize if powered\n373|        ADD  this is an addition: parenthesize if multiplied or powered\n374|        NEG  this is a negative number: optimize if added, parenthesize if\n375|             multiplied or powered\n376|        OPEN this is an open object: parenthesize if added, multiplied, or\n377|             powered (example: Piecewise)\n378|    \"\"\"\n379|    ATOM, FUNC, DIV, POW, MUL, ADD, NEG, OPEN = range(8)\n380|\n381|    def __init__(self, s, baseline=0, binding=0, unicode=None):\n382|        \"\"\"Initialize from stringPict and binding power.\"\"\"\n383|        stringPict.__init__(self, s, baseline)\n384|        self.binding = binding\n385|        self.unicode = unicode or s\n386|\n387|    # Note: code to handle subtraction is in _print_Add\n388|\n389|    def __add__(self, *others):\n390|        \"\"\"Make a pretty addition.\n391|        Addition of negative numbers is simplified.\n392|        \"\"\"\n393|        arg = self\n394|        if arg.binding > prettyForm.NEG:\n395|            arg = stringPict(*arg.parens())\n396|        result = [arg]\n397|        for arg in others:\n398|            #add parentheses for weak binders\n399|            if arg.binding > prettyForm.NEG:\n400|                arg = stringPict(*arg.parens())\n401|            #use existing minus sign if available\n402|            if arg.binding != prettyForm.NEG:\n403|                result.append(' + ')\n404|            result.append(arg)\n405|        return prettyForm(binding=prettyForm.ADD, *stringPict.next(*result))\n406|\n407|    def __div__(self, den, slashed=False):\n408|        \"\"\"Make a pretty division; stacked or slashed.\n409|        \"\"\"\n410|        if slashed:\n411|            raise NotImplementedError(\"Can't do slashed fraction yet\")\n412|        num = self\n413|        if num.binding == prettyForm.DIV:\n414|            num = stringPict(*num.parens())\n415|        if den.binding == prettyForm.DIV:\n416|            den = stringPict(*den.parens())\n417|\n418|        if num.binding==prettyForm.NEG:\n419|            num = num.right(\" \")[0]\n420|\n421|        return prettyForm(binding=prettyForm.DIV, *stringPict.stack(\n422|            num,\n423|            stringPict.LINE,\n424|            den))\n425|\n426|    def __truediv__(self, o):\n427|        return self.__div__(o)\n428|\n429|    def __mul__(self, *others):\n430|        \"\"\"Make a pretty multiplication.\n431|        Parentheses are needed around +, - and neg.\n432|        \"\"\"\n433|        quantity = {\n434|            'degree': u\"\\N{DEGREE SIGN}\"\n435|        }\n436|\n437|        if len(others) == 0:\n438|            return self # We aren't actually multiplying... So nothing to do here.\n439|        args = self\n440|        if args.binding > prettyForm.MUL:\n441|            arg = stringPict(*args.parens())\n442|        result = [args]\n443|        for arg in others:\n444|            if arg.picture[0] not in quantity.values():\n445|                result.append(xsym('*'))\n446|            #add parentheses for weak binders\n447|            if arg.binding > prettyForm.MUL:\n448|                arg = stringPict(*arg.parens())\n449|            result.append(arg)\n450|        len_res = len(result)\n451|        for i in range(len_res):\n452|            if i < len_res - 1 and result[i] == '-1' and result[i + 1] == xsym('*'):\n453|                # substitute -1 by -, like in -1*x -> -x\n454|                result.pop(i)\n455|                result.pop(i)\n456|                result.insert(i, '-')\n457|        if result[0][0] == '-':\n458|            # if there is a - sign in front of all\n459|            # This test was failing to catch a prettyForm.__mul__(prettyForm(\"-1\", 0, 6)) being negative\n460|            bin = prettyForm.NEG\n461|            if result[0] == '-':\n462|                right = result[1]\n463|                if right.picture[right.baseline][0] == '-':\n464|                    result[0] = '- '\n465|        else:\n466|            bin = prettyForm.MUL\n467|        return prettyForm(binding=bin, *stringPict.next(*result))\n468|\n469|    def __repr__(self):\n470|        return \"prettyForm(%r,%d,%d)\" % (\n471|            '\\n'.join(self.picture),\n472|            self.baseline,\n473|            self.binding)\n474|\n475|    def __pow__(self, b):\n476|        \"\"\"Make a pretty power.\n477|        \"\"\"\n478|        a = self\n479|        use_inline_func_form = False\n480|        if b.binding == prettyForm.POW:\n481|            b = stringPict(*b.parens())\n482|        if a.binding > prettyForm.FUNC:\n483|            a = stringPict(*a.parens())\n484|        elif a.binding == prettyForm.FUNC:\n485|            # heuristic for when to use inline power\n486|            if b.height() > 1:\n487|                a = stringPict(*a.parens())\n488|            else:\n489|                use_inline_func_form = True\n490|\n491|        if use_inline_func_form:\n492|            #         2\n493|            #  sin  +   + (x)\n494|            b.baseline = a.prettyFunc.baseline + b.height()\n495|            func = stringPict(*a.prettyFunc.right(b))\n496|            return prettyForm(*func.right(a.prettyArgs))\n497|        else:\n498|            #      2    <-- top\n499|            # (x+y)     <-- bot\n500|            top = stringPict(*b.left(' '*a.width()))\n501|            bot = stringPict(*a.right(' '*b.width()))\n502|\n503|        return prettyForm(binding=prettyForm.POW, *bot.above(top))\n504|\n505|    simpleFunctions = [\"sin\", \"cos\", \"tan\"]\n506|\n507|    @staticmethod\n508|    def apply(function, *args):\n509|        \"\"\"Functions of one or more variables.\n510|        \"\"\"\n511|        if function in prettyForm.simpleFunctions:\n512|            #simple function: use only space if possible\n513|            assert len(\n514|                args) == 1, \"Simple function %s must have 1 argument\" % function\n515|            arg = args[0].__pretty__()\n516|            if arg.binding <= prettyForm.DIV:\n517|                #optimization: no parentheses necessary\n518|                return prettyForm(binding=prettyForm.FUNC, *arg.left(function + ' '))\n519|        argumentList = []\n520|        for arg in args:\n521|            argumentList.append(',')\n522|            argumentList.append(arg.__pretty__())\n523|        argumentList = stringPict(*stringPict.next(*argumentList[1:]))\n524|        argumentList = stringPict(*argumentList.parens())\n525|        return prettyForm(binding=prettyForm.ATOM, *argumentList.left(function))\n\n\n\n\n###\n\nPlease provide the class name, function or method name, or the exact line numbers that need to be edited.\n### Examples:\n```\nfull_path1/file1.py\nline: 10\nclass: MyClass1\nline: 51\n\nfull_path2/file2.py\nfunction: MyClass2.my_method\nline: 12\n\nfull_path3/file3.py\nfunction: my_function\nline: 24\nline: 156\n```\n\nReturn just the location(s)\n", "response": ["```\nsympy/printing/pretty/pretty.py\nfunction: PrettyPrinter._print_Sum\nline: 632\n\nsympy/printing/pretty/stringpict.py\nclass: stringPict\nfunction: stringPict.next\nline: 83\n\nsympy/printing/pretty/stringpict.py\nclass: stringPict\nfunction: stringPict.equalLengths\nline: 46\n```", "```\nsympy/printing/pretty/pretty.py\nline: 529\nline: 531\nline: 632\n\nsympy/printing/pretty/stringpict.py\nline: 146\n```", "```\nsympy/printing/pretty/pretty.py\nline: 532\nline: 622\nline: 632\n\nsympy/printing/pretty/stringpict.py\nline: 61\nline: 66\nline: 77\nline: 83\n```", "```\nsympy/printing/pretty/pretty.py\nline: 631\n\nsympy/printing/pretty/stringpict.py\nfunction: stringPict.right\nfunction: stringPict.next\n```"], "usage": {"completion_tokens": 232, "prompt_tokens": 7854}}}
