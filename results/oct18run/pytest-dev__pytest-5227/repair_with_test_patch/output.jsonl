{"instance_id": "pytest-dev__pytest-5227", "raw_output": ["Based on the issue statement and the provided patch, it seems the main problem is with the default logging format. We need to update the `DEFAULT_LOG_FORMAT` to include the `name` (module name) and adjust the unit tests accordingly.\n\nHere are the necessary *SEARCH/REPLACE* edits:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nThe unit tests in `testing/logging/test_reporting.py` need to be updated to match the new log format:\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n=======\n                \"CRITICAL *test_log_cli_enabled_disabled.py*test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n=======\n            \"WARNING*test_log_cli_default_level.py*test_log_cli_default_level.py* message will be shown*\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_level.py*This log message will be shown\",\n=======\n            \"*test_log_cli_level.py*test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_level.py* This log message will be shown\",\n=======\n            \"*test_log_cli_level.py*test_log_cli_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_ini_level.py* This log message will be shown\",\n=======\n            \"*test_log_cli_ini_level.py*test_log_cli_ini_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\nThese changes should address the issue by updating the default logging format and ensuring the unit tests reflect the new format.", "The issue is related to changing the default logging format to include the module name (`name`) instead of just the filename (`filename`). We also need to update the unit tests to reflect this new format.\n\nLet's go ahead and make the necessary changes based on the provided issue and patch texts.\n\nHere are the *SEARCH/REPLACE* edits:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nNext, we need to update the unit tests to match the new format:\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n=======\n                \"CRITICAL *pytest_testing.logging.test_reporting:test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n=======\n            \"WARNING*pytest_testing.logging.test_reporting:test_log_cli_default_level.py* message will be shown*\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\n+WARNING(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log finish(.+)\\nWARNING(.+)\\n+WARNING(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_level.py*This log message will be shown\",\n=======\n            \"*pytest_testing.logging.test_reporting:test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_level.py* This log message will be shown\",\n=======\n            \"*pytest_testing.logging.test_reporting:test_log_cli_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_ini_level.py* This log message will be shown\",\n=======\n            \"*pytest_testing.logging.test_reporting:test_log_cli_ini_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\nThese changes should update the logging format and ensure that the unit tests are checking for the new format as well. \n\nHere is how the full set of changes would look:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n=======\n                \"CRITICAL *pytest_testing.logging.test_reporting:test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n```\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n=======\n            \"WARNING*pytest_testing.logging.test_reporting:test_log_cli_default_level.py* message will be shown*\",\n>>>>>>> REPLACE\n```\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\n+WARNING(.+)\",\n>>>>>>> REPLACE\n```\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log finish(.+)\\nWARNING(.+)\\n+WARNING(.+)\",\n>>>>>>> REPLACE\n```\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_level.py*This log message will be shown\",\n=======\n            \"*pytest_testing.logging.test_reporting:test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_level.py", "Based on the issue description and the failed unit test, it seems that the problem is primarily with the `DEFAULT_LOG_FORMAT` in the `_pytest/logging.py` file. The user wants to include the module name (`name`) in the log format. Let's localize the bug and provide the necessary changes to fix it.\n\nHere are the necessary *SEARCH/REPLACE* edits:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nLet's review the changes and ensure the `log_cli_format` uses the updated `DEFAULT_LOG_FORMAT`:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n=======\n        log_cli_format = get_option_ini(config, \"log_cli_format\", DEFAULT_LOG_FORMAT)\n>>>>>>> REPLACE\n```\n\nThat should cover the necessary changes. The updated log format will include the module name, filename, and line number, as requested.\n\nThe complete list of changes is as follows:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n\n### src/_pytest/logging.py\n<<<<<<< SEARCH\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n=======\n        log_cli_format = get_option_ini(config, \"log_cli_format\", DEFAULT_LOG_FORMAT)\n>>>>>>> REPLACE\n```\n\nThese updates should fix the issue as described and make sure the logging format includes the module name.", "Based on the issue statement and the provided patch, the problem seems to be with the logging format. The current format uses `%(filename)` which only includes the base filename. The proposed format should include `%(name)s` (the module name) and possibly `%(pathname)s` (the full path).\n\nTo implement this, we will update the `DEFAULT_LOG_FORMAT` in the `src/_pytest/logging.py` file. Here are the necessary changes:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nThis change updates the logging format to include the module name (`%(name)s`), the base filename (`%(filename)s`), and the line number (`%(lineno)d`), preceded by the log level (`%(levelname)-8s`).\n\nNext, we need to ensure that this format is used in the appropriate context within the `LoggingPlugin` class. Specifically, this format should be used when setting up CLI logging. Thus, we will also update the `_setup_cli_logging` method:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n=======\n        log_cli_format = get_option_ini(config, \"log_cli_format\", DEFAULT_LOG_FORMAT)\n>>>>>>> REPLACE\n```\n\nThis ensures that the default format is correctly picked up if not otherwise specified in the configuration.\n\nThese changes should address the issue and ensure that the new logging format is correctly applied.", "To address the issue, we need to update the `DEFAULT_LOG_FORMAT` to include the module name (`name`) as specified in the new format. The tests also need to validate the new format. Let's perform the necessary changes.\n\n### File 1: `src/_pytest/logging.py`\n\nWe need to update the `DEFAULT_LOG_FORMAT` to the new format specified in the issue.\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\n### File 2: `testing/logging/test_reporting.py`\n\nThe tests rely on the old format, so we'll update the expected log lines to match the new format.\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n=======\n                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n=======\n            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            \"test_log_cli_level.py*This log message will be shown\",\n=======\n            \"*test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            \"test_log_cli_level.py* This log message will be shown\",\n=======\n            \"*test_log_cli_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            \"test_log_cli_ini_level.py* This log message will be shown\",\n=======\n            \"*test_log_cli_ini_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\nThese changes update the logging format in the main configuration and update the unit tests to align with the new logging format. Now the logs will include the log level, module name, filename, line number, and the message, as specified in the issue description.", "Based on the issue statement, we need to modify the `DEFAULT_LOG_FORMAT` to include the `name` attribute for better logging details. This change will primarily take place in the `src/_pytest/logging.py` file. Along with that, the relevant test cases need to be updated to reflect this new format.\n\nHere are the necessary *SEARCH/REPLACE* edits:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n\n\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n=======\n                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n<<<<<<< SEARCH\n            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n=======\n            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n>>>>>>> REPLACE\n<<<<<<< SEARCH\n            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n<<<<<<< SEARCH\n            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n<<<<<<< SEARCH\n            \"test_log_cli_level.py*This log message will be shown\",\n=======\n            \"*test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n<<<<<<< SEARCH\n            \"test_log_cli_level.py* This log message will be shown\",\n=======\n            \"*test_log_cli_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n<<<<<<< SEARCH\n            \"test_log_cli_ini_level.py* This log message will be shown\",\n=======\n            \"*test_log_cli_ini_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\nThese changes update the default logging format and ensure that the tests are checking the correct format. Specifically, the format now includes the `name` (module name) along with the filename and line number, providing more detailed log information.", "Based on the issue statement, it appears that the modification needs to be done in the logging format specified in the `DEFAULT_LOG_FORMAT` and potentially other related log formats within the `_pytest/logging.py` file. The tests provided suggest changes to the expected log output.\n\nHere are the necessary changes:\n\n1. Update the `DEFAULT_LOG_FORMAT` to include the module name (`name`) alongside the filename.\n2. Ensure related instances where the log format is used are updated accordingly.\n\nHere's the *SEARCH/REPLACE* edit to address the issue:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nGiven that `DEFAULT_LOG_FORMAT` is used to initialize the formatter in the `LoggingPlugin` class, we should also ensure changes in `_setup_cli_logging` method to match the new format.\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n=======\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\", \"DEFAULT_LOG_FORMAT\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n>>>>>>> REPLACE\n```\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n=======\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"DEFAULT_LOG_FORMAT\")\n>>>>>>> REPLACE\n```\n\nThese changes should ensure that the new log format includes the module name and integrates seamlessly with the existing setup.\n\nNext, update the test cases to match the new format:\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n+                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n=======\n-                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n+                \"CRITICAL *test_log_cli_enabled_disabled.py:25* critical message logged by test\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n=======\n-            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py:25* message will be shown*\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n=======\n-            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n+            r\"(.+)live log teardown(.+)\\nWARNING(.+):test_log_cli_tear(.+)\\nWARNING(.+):test_log_cli_tear(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n=======\n-            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+):test_log_cli_finish(.+)\\nWARNING(.+):test_log_cli_finish(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"*test_log_cli_level.py*This log message will be shown\",\n+            \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n=======\n-            \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n+            \"WARNING*test_log_cli_level.py:60*This log message will be shown\",\n             \"PASSED\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"*test_log_cli_level.py* This log message will be shown\",\n+            \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n=======\n-           ", "Based on the issue statement and the provided code snippets, it appears that the issue lies in the default logging format and how it is handled within the `LoggingPlugin` class. The unit tests' outputs also indicate that the logging format does not match the expected format.\n\nLet's focus on updating the `DEFAULT_LOG_FORMAT` to include the `name` (module name) and ensure the unit tests reflect this format.\n\nHere are the required *SEARCH/REPLACE* edits:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nUpdating the test expectations to match the new log format:\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n+                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n=======\n-                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n+                \"CRITICAL*test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n=======\n-            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py*message will be shown*\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n-            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n=======\n-            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py* This log message will be shown\",\n=======\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py* This log message will be shown\",\n=======\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"test_log_cli_ini_level.py* This log message will be shown\",\n+            \"*test_log_cli_ini_level.py* This log message will be shown\",\n=======\n-            \"test_log_cli_ini_level.py* This log message will be shown\",\n+            \"*test_log_cli_ini_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n\nWith these changes, your logging format will include the module name, and the unit tests will match the expected output format.", "Based on the provided issue statement and the failing unit tests, it seems like we need to improve the default logging format in the `LoggingPlugin` class in the `src/_pytest/logging.py` file. Specifically, we need to adjust the `DEFAULT_LOG_FORMAT` to include the module name (`name`) along with the filename.\n\nHere is the proposed *SEARCH/REPLACE* edit to fix the issue:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nThis should fix the logging format issue as described in the repository issue. The unit tests have also been modified to match the new logging format, where the log level appears first, followed by the module name, filename, and line number.\n\nApplying this change should resolve the formatting problem and ensure that the log output includes the module name as requested.", "Based on the issue statement and the provided patch, we need to improve the default logging format to include the module name and adjust the unit tests accordingly. Let's generate the required *SEARCH/REPLACE* edits.\n\n### Step 1: Update the Default Log Format in `src/_pytest/logging.py`\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\n### Step 2: Ensure the Tests Match the New Log Format in `testing/logging/test_reporting.py`\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n=======\n                \"CRITICAL *test_log_cli_enabled_disabled*:test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n=======\n            \"WARNING*test_log_cli_default_level*:test_log_cli_default_level.py* message will be shown*\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log teardown(.+)\\nWARNING(.+):(.+)\\nWARNING(.+):(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log finish(.+)\\nWARNING(.+):(.+)\\nWARNING(.+):(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"*test_log_cli_level.py*This log message will be shown\",\n=======\n            \"WARNING*test_log_cli_level*:test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"*test_log_cli_level.py* This log message will be shown\",\n=======\n            \"WARNING*test_log_cli_level*:test_log_cli_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"*test_log_cli_ini_level.py* This log message will be shown\",\n=======\n            \"WARNING*test_log_cli_ini_level*:test_log_cli_ini_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n### Summary\n\nWe updated the default log format to include the module name and filename in `src/_pytest/logging.py` and adjusted the unit tests in `testing/logging/test_reporting.py` to match the new log format. These changes should address the issue by providing more useful information in the log messages."], "all_generations": [["Based on the issue statement and the provided patch, it seems the main problem is with the default logging format. We need to update the `DEFAULT_LOG_FORMAT` to include the `name` (module name) and adjust the unit tests accordingly.\n\nHere are the necessary *SEARCH/REPLACE* edits:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nThe unit tests in `testing/logging/test_reporting.py` need to be updated to match the new log format:\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n=======\n                \"CRITICAL *test_log_cli_enabled_disabled.py*test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n=======\n            \"WARNING*test_log_cli_default_level.py*test_log_cli_default_level.py* message will be shown*\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_level.py*This log message will be shown\",\n=======\n            \"*test_log_cli_level.py*test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_level.py* This log message will be shown\",\n=======\n            \"*test_log_cli_level.py*test_log_cli_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_ini_level.py* This log message will be shown\",\n=======\n            \"*test_log_cli_ini_level.py*test_log_cli_ini_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\nThese changes should address the issue by updating the default logging format and ensuring the unit tests reflect the new format.", "The issue is related to changing the default logging format to include the module name (`name`) instead of just the filename (`filename`). We also need to update the unit tests to reflect this new format.\n\nLet's go ahead and make the necessary changes based on the provided issue and patch texts.\n\nHere are the *SEARCH/REPLACE* edits:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nNext, we need to update the unit tests to match the new format:\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n=======\n                \"CRITICAL *pytest_testing.logging.test_reporting:test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n=======\n            \"WARNING*pytest_testing.logging.test_reporting:test_log_cli_default_level.py* message will be shown*\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\n+WARNING(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log finish(.+)\\nWARNING(.+)\\n+WARNING(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_level.py*This log message will be shown\",\n=======\n            \"*pytest_testing.logging.test_reporting:test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_level.py* This log message will be shown\",\n=======\n            \"*pytest_testing.logging.test_reporting:test_log_cli_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_ini_level.py* This log message will be shown\",\n=======\n            \"*pytest_testing.logging.test_reporting:test_log_cli_ini_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\nThese changes should update the logging format and ensure that the unit tests are checking for the new format as well. \n\nHere is how the full set of changes would look:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n=======\n                \"CRITICAL *pytest_testing.logging.test_reporting:test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n```\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n=======\n            \"WARNING*pytest_testing.logging.test_reporting:test_log_cli_default_level.py* message will be shown*\",\n>>>>>>> REPLACE\n```\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\n+WARNING(.+)\",\n>>>>>>> REPLACE\n```\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log finish(.+)\\nWARNING(.+)\\n+WARNING(.+)\",\n>>>>>>> REPLACE\n```\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_level.py*This log message will be shown\",\n=======\n            \"*pytest_testing.logging.test_reporting:test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_level.py", "Based on the issue description and the failed unit test, it seems that the problem is primarily with the `DEFAULT_LOG_FORMAT` in the `_pytest/logging.py` file. The user wants to include the module name (`name`) in the log format. Let's localize the bug and provide the necessary changes to fix it.\n\nHere are the necessary *SEARCH/REPLACE* edits:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nLet's review the changes and ensure the `log_cli_format` uses the updated `DEFAULT_LOG_FORMAT`:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n=======\n        log_cli_format = get_option_ini(config, \"log_cli_format\", DEFAULT_LOG_FORMAT)\n>>>>>>> REPLACE\n```\n\nThat should cover the necessary changes. The updated log format will include the module name, filename, and line number, as requested.\n\nThe complete list of changes is as follows:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n\n### src/_pytest/logging.py\n<<<<<<< SEARCH\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n=======\n        log_cli_format = get_option_ini(config, \"log_cli_format\", DEFAULT_LOG_FORMAT)\n>>>>>>> REPLACE\n```\n\nThese updates should fix the issue as described and make sure the logging format includes the module name.", "Based on the issue statement and the provided patch, the problem seems to be with the logging format. The current format uses `%(filename)` which only includes the base filename. The proposed format should include `%(name)s` (the module name) and possibly `%(pathname)s` (the full path).\n\nTo implement this, we will update the `DEFAULT_LOG_FORMAT` in the `src/_pytest/logging.py` file. Here are the necessary changes:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nThis change updates the logging format to include the module name (`%(name)s`), the base filename (`%(filename)s`), and the line number (`%(lineno)d`), preceded by the log level (`%(levelname)-8s`).\n\nNext, we need to ensure that this format is used in the appropriate context within the `LoggingPlugin` class. Specifically, this format should be used when setting up CLI logging. Thus, we will also update the `_setup_cli_logging` method:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n=======\n        log_cli_format = get_option_ini(config, \"log_cli_format\", DEFAULT_LOG_FORMAT)\n>>>>>>> REPLACE\n```\n\nThis ensures that the default format is correctly picked up if not otherwise specified in the configuration.\n\nThese changes should address the issue and ensure that the new logging format is correctly applied.", "To address the issue, we need to update the `DEFAULT_LOG_FORMAT` to include the module name (`name`) as specified in the new format. The tests also need to validate the new format. Let's perform the necessary changes.\n\n### File 1: `src/_pytest/logging.py`\n\nWe need to update the `DEFAULT_LOG_FORMAT` to the new format specified in the issue.\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\n### File 2: `testing/logging/test_reporting.py`\n\nThe tests rely on the old format, so we'll update the expected log lines to match the new format.\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n=======\n                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n=======\n            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            \"test_log_cli_level.py*This log message will be shown\",\n=======\n            \"*test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            \"test_log_cli_level.py* This log message will be shown\",\n=======\n            \"*test_log_cli_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            \"test_log_cli_ini_level.py* This log message will be shown\",\n=======\n            \"*test_log_cli_ini_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\nThese changes update the logging format in the main configuration and update the unit tests to align with the new logging format. Now the logs will include the log level, module name, filename, line number, and the message, as specified in the issue description.", "Based on the issue statement, we need to modify the `DEFAULT_LOG_FORMAT` to include the `name` attribute for better logging details. This change will primarily take place in the `src/_pytest/logging.py` file. Along with that, the relevant test cases need to be updated to reflect this new format.\n\nHere are the necessary *SEARCH/REPLACE* edits:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n\n\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n=======\n                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n<<<<<<< SEARCH\n            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n=======\n            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n>>>>>>> REPLACE\n<<<<<<< SEARCH\n            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n<<<<<<< SEARCH\n            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n<<<<<<< SEARCH\n            \"test_log_cli_level.py*This log message will be shown\",\n=======\n            \"*test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n<<<<<<< SEARCH\n            \"test_log_cli_level.py* This log message will be shown\",\n=======\n            \"*test_log_cli_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n<<<<<<< SEARCH\n            \"test_log_cli_ini_level.py* This log message will be shown\",\n=======\n            \"*test_log_cli_ini_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\nThese changes update the default logging format and ensure that the tests are checking the correct format. Specifically, the format now includes the `name` (module name) along with the filename and line number, providing more detailed log information.", "Based on the issue statement, it appears that the modification needs to be done in the logging format specified in the `DEFAULT_LOG_FORMAT` and potentially other related log formats within the `_pytest/logging.py` file. The tests provided suggest changes to the expected log output.\n\nHere are the necessary changes:\n\n1. Update the `DEFAULT_LOG_FORMAT` to include the module name (`name`) alongside the filename.\n2. Ensure related instances where the log format is used are updated accordingly.\n\nHere's the *SEARCH/REPLACE* edit to address the issue:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nGiven that `DEFAULT_LOG_FORMAT` is used to initialize the formatter in the `LoggingPlugin` class, we should also ensure changes in `_setup_cli_logging` method to match the new format.\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n=======\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\", \"DEFAULT_LOG_FORMAT\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n>>>>>>> REPLACE\n```\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n=======\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"DEFAULT_LOG_FORMAT\")\n>>>>>>> REPLACE\n```\n\nThese changes should ensure that the new log format includes the module name and integrates seamlessly with the existing setup.\n\nNext, update the test cases to match the new format:\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n+                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n=======\n-                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n+                \"CRITICAL *test_log_cli_enabled_disabled.py:25* critical message logged by test\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n=======\n-            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py:25* message will be shown*\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n=======\n-            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n+            r\"(.+)live log teardown(.+)\\nWARNING(.+):test_log_cli_tear(.+)\\nWARNING(.+):test_log_cli_tear(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n=======\n-            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+):test_log_cli_finish(.+)\\nWARNING(.+):test_log_cli_finish(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"*test_log_cli_level.py*This log message will be shown\",\n+            \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n=======\n-            \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n+            \"WARNING*test_log_cli_level.py:60*This log message will be shown\",\n             \"PASSED\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"*test_log_cli_level.py* This log message will be shown\",\n+            \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n=======\n-           ", "Based on the issue statement and the provided code snippets, it appears that the issue lies in the default logging format and how it is handled within the `LoggingPlugin` class. The unit tests' outputs also indicate that the logging format does not match the expected format.\n\nLet's focus on updating the `DEFAULT_LOG_FORMAT` to include the `name` (module name) and ensure the unit tests reflect this format.\n\nHere are the required *SEARCH/REPLACE* edits:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nUpdating the test expectations to match the new log format:\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n+                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n=======\n-                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n+                \"CRITICAL*test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n=======\n-            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py*message will be shown*\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n-            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n=======\n-            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py* This log message will be shown\",\n=======\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py* This log message will be shown\",\n=======\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"test_log_cli_ini_level.py* This log message will be shown\",\n+            \"*test_log_cli_ini_level.py* This log message will be shown\",\n=======\n-            \"test_log_cli_ini_level.py* This log message will be shown\",\n+            \"*test_log_cli_ini_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n\nWith these changes, your logging format will include the module name, and the unit tests will match the expected output format.", "Based on the provided issue statement and the failing unit tests, it seems like we need to improve the default logging format in the `LoggingPlugin` class in the `src/_pytest/logging.py` file. Specifically, we need to adjust the `DEFAULT_LOG_FORMAT` to include the module name (`name`) along with the filename.\n\nHere is the proposed *SEARCH/REPLACE* edit to fix the issue:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nThis should fix the logging format issue as described in the repository issue. The unit tests have also been modified to match the new logging format, where the log level appears first, followed by the module name, filename, and line number.\n\nApplying this change should resolve the formatting problem and ensure that the log output includes the module name as requested.", "Based on the issue statement and the provided patch, we need to improve the default logging format to include the module name and adjust the unit tests accordingly. Let's generate the required *SEARCH/REPLACE* edits.\n\n### Step 1: Update the Default Log Format in `src/_pytest/logging.py`\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\n### Step 2: Ensure the Tests Match the New Log Format in `testing/logging/test_reporting.py`\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n=======\n                \"CRITICAL *test_log_cli_enabled_disabled*:test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n=======\n            \"WARNING*test_log_cli_default_level*:test_log_cli_default_level.py* message will be shown*\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log teardown(.+)\\nWARNING(.+):(.+)\\nWARNING(.+):(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log finish(.+)\\nWARNING(.+):(.+)\\nWARNING(.+):(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"*test_log_cli_level.py*This log message will be shown\",\n=======\n            \"WARNING*test_log_cli_level*:test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"*test_log_cli_level.py* This log message will be shown\",\n=======\n            \"WARNING*test_log_cli_level*:test_log_cli_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"*test_log_cli_ini_level.py* This log message will be shown\",\n=======\n            \"WARNING*test_log_cli_ini_level*:test_log_cli_ini_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n### Summary\n\nWe updated the default log format to include the module name and filename in `src/_pytest/logging.py` and adjusted the unit tests in `testing/logging/test_reporting.py` to match the new log format. These changes should address the issue by providing more useful information in the log messages."]], "try_count": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "traj": [{"response": "Based on the issue statement and the provided patch, it seems the main problem is with the default logging format. We need to update the `DEFAULT_LOG_FORMAT` to include the `name` (module name) and adjust the unit tests accordingly.\n\nHere are the necessary *SEARCH/REPLACE* edits:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nThe unit tests in `testing/logging/test_reporting.py` need to be updated to match the new log format:\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n=======\n                \"CRITICAL *test_log_cli_enabled_disabled.py*test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n=======\n            \"WARNING*test_log_cli_default_level.py*test_log_cli_default_level.py* message will be shown*\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_level.py*This log message will be shown\",\n=======\n            \"*test_log_cli_level.py*test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_level.py* This log message will be shown\",\n=======\n            \"*test_log_cli_level.py*test_log_cli_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_ini_level.py* This log message will be shown\",\n=======\n            \"*test_log_cli_ini_level.py*test_log_cli_ini_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\nThese changes should address the issue by updating the default logging format and ensuring the unit tests reflect the new format.", "usage": {"completion_tokens": 612, "prompt_tokens": 2560}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nImprove default logging format\nCurrently it is:\r\n\r\n> DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\r\n\r\nI think `name` (module name) would be very useful here, instead of just the base filename.\r\n\r\n(It might also be good to have the relative path there (maybe at the end), but it is usually still very long (but e.g. `$VIRTUAL_ENV` could be substituted therein))\r\n\r\nCurrently it would look like this:\r\n```\r\nutils.py                   114 DEBUG    (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nmultipart.py               604 DEBUG    Calling on_field_start with no data\r\n```\r\n\r\n\r\nUsing `DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"` instead:\r\n\r\n```\r\nDEBUG    django.db.backends:utils.py:114 (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nDEBUG    multipart.multipart:multipart.py:604 Calling on_field_start with no data\r\n```\n\n--- END ISSUE ---\n\n\nWe also have a fail to pass unit test for the given issue. We can use this to help identify and fix the issue. Here is the patch text:\n--- BEGIN PATCH ---\ndiff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -248,7 +248,7 @@ def test_log_cli():\n             [\n                 \"test_log_cli_enabled_disabled.py::test_log_cli \",\n                 \"*-- live log call --*\",\n-                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n+                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n                 \"PASSED*\",\n             ]\n         )\n@@ -282,7 +282,7 @@ def test_log_cli(request):\n     result.stdout.fnmatch_lines(\n         [\n             \"test_log_cli_default_level.py::test_log_cli \",\n-            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n         ]\n     )\n     assert \"INFO message won't be shown\" not in result.stdout.str()\n@@ -523,7 +523,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -531,7 +531,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -565,7 +565,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py*This log message will be shown\",\n+            \"*test_log_cli_level.py*This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -579,7 +579,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -615,7 +615,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_ini_level.py* This log message will be shown\",\n+            \"*test_log_cli_ini_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n\n--- END PATCH ---\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### src/_pytest/logging.py\n...\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n...\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n...\n\n\n### src/_pytest/terminal.py\n...\n        if \"KeyboardInterrupt\" in msg:\n            if self.config.option.fulltrace:\n                excrepr.toterminal(self._tw)\n            else:\n                excrepr.reprcrash.toterminal(self._tw)\n                self._tw.line(\n                    \"(to show a full traceback on KeyboardInterrupt use --fulltrace)\",\n                    yellow=True,\n                )\n\n    def _locationline(self, nodeid, fspath, lineno, domain):\n        def mkrel(nodeid):\n            line = self.config.cwd_relative_nodeid(nodeid)\n            if domain and line.endswith(domain):\n                line = line[: -len(domain)]\n                values = domain.split(\"[\")\n                values[0] = values[0].replace(\".\", \"::\")  # don't replace '.' in params\n                line += \"[\".join(values)\n            return line\n\n        # collect_fspath comes from testid which has a \"/\"-normalized path\n\n        if fspath:\n            res = mkrel(nodeid)\n            if self.verbosity >= 2 and nodeid.split(\"::\")[0] != fspath.replace(\n                \"\\\\\", nodes.SEP\n            ):\n                res += \" <- \" + self.startdir.bestrelpath(fspath)\n        else:\n            res = \"[location]\"\n        return res + \" \"\n\n    def _getfailureheadline(self, rep):\n        head_line = rep.head_line\n        if head_line:\n            return head_line\n        return \"test session\"  # XXX?\n\n    def _getcrashline(self, rep):\n        try:\n            return str(rep.longrepr.reprcrash)\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}, {"response": "The issue is related to changing the default logging format to include the module name (`name`) instead of just the filename (`filename`). We also need to update the unit tests to reflect this new format.\n\nLet's go ahead and make the necessary changes based on the provided issue and patch texts.\n\nHere are the *SEARCH/REPLACE* edits:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nNext, we need to update the unit tests to match the new format:\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n=======\n                \"CRITICAL *pytest_testing.logging.test_reporting:test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n=======\n            \"WARNING*pytest_testing.logging.test_reporting:test_log_cli_default_level.py* message will be shown*\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\n+WARNING(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log finish(.+)\\nWARNING(.+)\\n+WARNING(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_level.py*This log message will be shown\",\n=======\n            \"*pytest_testing.logging.test_reporting:test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_level.py* This log message will be shown\",\n=======\n            \"*pytest_testing.logging.test_reporting:test_log_cli_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_ini_level.py* This log message will be shown\",\n=======\n            \"*pytest_testing.logging.test_reporting:test_log_cli_ini_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\nThese changes should update the logging format and ensure that the unit tests are checking for the new format as well. \n\nHere is how the full set of changes would look:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n=======\n                \"CRITICAL *pytest_testing.logging.test_reporting:test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n```\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n=======\n            \"WARNING*pytest_testing.logging.test_reporting:test_log_cli_default_level.py* message will be shown*\",\n>>>>>>> REPLACE\n```\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\n+WARNING(.+)\",\n>>>>>>> REPLACE\n```\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log finish(.+)\\nWARNING(.+)\\n+WARNING(.+)\",\n>>>>>>> REPLACE\n```\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_level.py*This log message will be shown\",\n=======\n            \"*pytest_testing.logging.test_reporting:test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_level.py", "usage": {"completion_tokens": 5668, "prompt_tokens": 2560}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nImprove default logging format\nCurrently it is:\r\n\r\n> DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\r\n\r\nI think `name` (module name) would be very useful here, instead of just the base filename.\r\n\r\n(It might also be good to have the relative path there (maybe at the end), but it is usually still very long (but e.g. `$VIRTUAL_ENV` could be substituted therein))\r\n\r\nCurrently it would look like this:\r\n```\r\nutils.py                   114 DEBUG    (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nmultipart.py               604 DEBUG    Calling on_field_start with no data\r\n```\r\n\r\n\r\nUsing `DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"` instead:\r\n\r\n```\r\nDEBUG    django.db.backends:utils.py:114 (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nDEBUG    multipart.multipart:multipart.py:604 Calling on_field_start with no data\r\n```\n\n--- END ISSUE ---\n\n\nWe also have a fail to pass unit test for the given issue. We can use this to help identify and fix the issue. Here is the patch text:\n--- BEGIN PATCH ---\ndiff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -248,7 +248,7 @@ def test_log_cli():\n             [\n                 \"test_log_cli_enabled_disabled.py::test_log_cli \",\n                 \"*-- live log call --*\",\n-                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n+                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n                 \"PASSED*\",\n             ]\n         )\n@@ -282,7 +282,7 @@ def test_log_cli(request):\n     result.stdout.fnmatch_lines(\n         [\n             \"test_log_cli_default_level.py::test_log_cli \",\n-            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n         ]\n     )\n     assert \"INFO message won't be shown\" not in result.stdout.str()\n@@ -523,7 +523,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -531,7 +531,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -565,7 +565,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py*This log message will be shown\",\n+            \"*test_log_cli_level.py*This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -579,7 +579,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -615,7 +615,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_ini_level.py* This log message will be shown\",\n+            \"*test_log_cli_ini_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n\n--- END PATCH ---\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### src/_pytest/logging.py\n...\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n...\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n...\n\n\n### src/_pytest/terminal.py\n...\n        if \"KeyboardInterrupt\" in msg:\n            if self.config.option.fulltrace:\n                excrepr.toterminal(self._tw)\n            else:\n                excrepr.reprcrash.toterminal(self._tw)\n                self._tw.line(\n                    \"(to show a full traceback on KeyboardInterrupt use --fulltrace)\",\n                    yellow=True,\n                )\n\n    def _locationline(self, nodeid, fspath, lineno, domain):\n        def mkrel(nodeid):\n            line = self.config.cwd_relative_nodeid(nodeid)\n            if domain and line.endswith(domain):\n                line = line[: -len(domain)]\n                values = domain.split(\"[\")\n                values[0] = values[0].replace(\".\", \"::\")  # don't replace '.' in params\n                line += \"[\".join(values)\n            return line\n\n        # collect_fspath comes from testid which has a \"/\"-normalized path\n\n        if fspath:\n            res = mkrel(nodeid)\n            if self.verbosity >= 2 and nodeid.split(\"::\")[0] != fspath.replace(\n                \"\\\\\", nodes.SEP\n            ):\n                res += \" <- \" + self.startdir.bestrelpath(fspath)\n        else:\n            res = \"[location]\"\n        return res + \" \"\n\n    def _getfailureheadline(self, rep):\n        head_line = rep.head_line\n        if head_line:\n            return head_line\n        return \"test session\"  # XXX?\n\n    def _getcrashline(self, rep):\n        try:\n            return str(rep.longrepr.reprcrash)\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}, {"response": "Based on the issue description and the failed unit test, it seems that the problem is primarily with the `DEFAULT_LOG_FORMAT` in the `_pytest/logging.py` file. The user wants to include the module name (`name`) in the log format. Let's localize the bug and provide the necessary changes to fix it.\n\nHere are the necessary *SEARCH/REPLACE* edits:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nLet's review the changes and ensure the `log_cli_format` uses the updated `DEFAULT_LOG_FORMAT`:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n=======\n        log_cli_format = get_option_ini(config, \"log_cli_format\", DEFAULT_LOG_FORMAT)\n>>>>>>> REPLACE\n```\n\nThat should cover the necessary changes. The updated log format will include the module name, filename, and line number, as requested.\n\nThe complete list of changes is as follows:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n\n### src/_pytest/logging.py\n<<<<<<< SEARCH\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n=======\n        log_cli_format = get_option_ini(config, \"log_cli_format\", DEFAULT_LOG_FORMAT)\n>>>>>>> REPLACE\n```\n\nThese updates should fix the issue as described and make sure the logging format includes the module name.", "usage": {"completion_tokens": 0, "prompt_tokens": 0}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nImprove default logging format\nCurrently it is:\r\n\r\n> DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\r\n\r\nI think `name` (module name) would be very useful here, instead of just the base filename.\r\n\r\n(It might also be good to have the relative path there (maybe at the end), but it is usually still very long (but e.g. `$VIRTUAL_ENV` could be substituted therein))\r\n\r\nCurrently it would look like this:\r\n```\r\nutils.py                   114 DEBUG    (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nmultipart.py               604 DEBUG    Calling on_field_start with no data\r\n```\r\n\r\n\r\nUsing `DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"` instead:\r\n\r\n```\r\nDEBUG    django.db.backends:utils.py:114 (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nDEBUG    multipart.multipart:multipart.py:604 Calling on_field_start with no data\r\n```\n\n--- END ISSUE ---\n\n\nWe also have a fail to pass unit test for the given issue. We can use this to help identify and fix the issue. Here is the patch text:\n--- BEGIN PATCH ---\ndiff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -248,7 +248,7 @@ def test_log_cli():\n             [\n                 \"test_log_cli_enabled_disabled.py::test_log_cli \",\n                 \"*-- live log call --*\",\n-                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n+                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n                 \"PASSED*\",\n             ]\n         )\n@@ -282,7 +282,7 @@ def test_log_cli(request):\n     result.stdout.fnmatch_lines(\n         [\n             \"test_log_cli_default_level.py::test_log_cli \",\n-            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n         ]\n     )\n     assert \"INFO message won't be shown\" not in result.stdout.str()\n@@ -523,7 +523,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -531,7 +531,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -565,7 +565,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py*This log message will be shown\",\n+            \"*test_log_cli_level.py*This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -579,7 +579,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -615,7 +615,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_ini_level.py* This log message will be shown\",\n+            \"*test_log_cli_ini_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n\n--- END PATCH ---\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### src/_pytest/logging.py\n...\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n...\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n...\n\n\n### src/_pytest/terminal.py\n...\n        if \"KeyboardInterrupt\" in msg:\n            if self.config.option.fulltrace:\n                excrepr.toterminal(self._tw)\n            else:\n                excrepr.reprcrash.toterminal(self._tw)\n                self._tw.line(\n                    \"(to show a full traceback on KeyboardInterrupt use --fulltrace)\",\n                    yellow=True,\n                )\n\n    def _locationline(self, nodeid, fspath, lineno, domain):\n        def mkrel(nodeid):\n            line = self.config.cwd_relative_nodeid(nodeid)\n            if domain and line.endswith(domain):\n                line = line[: -len(domain)]\n                values = domain.split(\"[\")\n                values[0] = values[0].replace(\".\", \"::\")  # don't replace '.' in params\n                line += \"[\".join(values)\n            return line\n\n        # collect_fspath comes from testid which has a \"/\"-normalized path\n\n        if fspath:\n            res = mkrel(nodeid)\n            if self.verbosity >= 2 and nodeid.split(\"::\")[0] != fspath.replace(\n                \"\\\\\", nodes.SEP\n            ):\n                res += \" <- \" + self.startdir.bestrelpath(fspath)\n        else:\n            res = \"[location]\"\n        return res + \" \"\n\n    def _getfailureheadline(self, rep):\n        head_line = rep.head_line\n        if head_line:\n            return head_line\n        return \"test session\"  # XXX?\n\n    def _getcrashline(self, rep):\n        try:\n            return str(rep.longrepr.reprcrash)\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}, {"response": "Based on the issue statement and the provided patch, the problem seems to be with the logging format. The current format uses `%(filename)` which only includes the base filename. The proposed format should include `%(name)s` (the module name) and possibly `%(pathname)s` (the full path).\n\nTo implement this, we will update the `DEFAULT_LOG_FORMAT` in the `src/_pytest/logging.py` file. Here are the necessary changes:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nThis change updates the logging format to include the module name (`%(name)s`), the base filename (`%(filename)s`), and the line number (`%(lineno)d`), preceded by the log level (`%(levelname)-8s`).\n\nNext, we need to ensure that this format is used in the appropriate context within the `LoggingPlugin` class. Specifically, this format should be used when setting up CLI logging. Thus, we will also update the `_setup_cli_logging` method:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n=======\n        log_cli_format = get_option_ini(config, \"log_cli_format\", DEFAULT_LOG_FORMAT)\n>>>>>>> REPLACE\n```\n\nThis ensures that the default format is correctly picked up if not otherwise specified in the configuration.\n\nThese changes should address the issue and ensure that the new logging format is correctly applied.", "usage": {"completion_tokens": 0, "prompt_tokens": 0}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nImprove default logging format\nCurrently it is:\r\n\r\n> DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\r\n\r\nI think `name` (module name) would be very useful here, instead of just the base filename.\r\n\r\n(It might also be good to have the relative path there (maybe at the end), but it is usually still very long (but e.g. `$VIRTUAL_ENV` could be substituted therein))\r\n\r\nCurrently it would look like this:\r\n```\r\nutils.py                   114 DEBUG    (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nmultipart.py               604 DEBUG    Calling on_field_start with no data\r\n```\r\n\r\n\r\nUsing `DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"` instead:\r\n\r\n```\r\nDEBUG    django.db.backends:utils.py:114 (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nDEBUG    multipart.multipart:multipart.py:604 Calling on_field_start with no data\r\n```\n\n--- END ISSUE ---\n\n\nWe also have a fail to pass unit test for the given issue. We can use this to help identify and fix the issue. Here is the patch text:\n--- BEGIN PATCH ---\ndiff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -248,7 +248,7 @@ def test_log_cli():\n             [\n                 \"test_log_cli_enabled_disabled.py::test_log_cli \",\n                 \"*-- live log call --*\",\n-                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n+                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n                 \"PASSED*\",\n             ]\n         )\n@@ -282,7 +282,7 @@ def test_log_cli(request):\n     result.stdout.fnmatch_lines(\n         [\n             \"test_log_cli_default_level.py::test_log_cli \",\n-            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n         ]\n     )\n     assert \"INFO message won't be shown\" not in result.stdout.str()\n@@ -523,7 +523,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -531,7 +531,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -565,7 +565,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py*This log message will be shown\",\n+            \"*test_log_cli_level.py*This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -579,7 +579,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -615,7 +615,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_ini_level.py* This log message will be shown\",\n+            \"*test_log_cli_ini_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n\n--- END PATCH ---\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### src/_pytest/logging.py\n...\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n...\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n...\n\n\n### src/_pytest/terminal.py\n...\n        if \"KeyboardInterrupt\" in msg:\n            if self.config.option.fulltrace:\n                excrepr.toterminal(self._tw)\n            else:\n                excrepr.reprcrash.toterminal(self._tw)\n                self._tw.line(\n                    \"(to show a full traceback on KeyboardInterrupt use --fulltrace)\",\n                    yellow=True,\n                )\n\n    def _locationline(self, nodeid, fspath, lineno, domain):\n        def mkrel(nodeid):\n            line = self.config.cwd_relative_nodeid(nodeid)\n            if domain and line.endswith(domain):\n                line = line[: -len(domain)]\n                values = domain.split(\"[\")\n                values[0] = values[0].replace(\".\", \"::\")  # don't replace '.' in params\n                line += \"[\".join(values)\n            return line\n\n        # collect_fspath comes from testid which has a \"/\"-normalized path\n\n        if fspath:\n            res = mkrel(nodeid)\n            if self.verbosity >= 2 and nodeid.split(\"::\")[0] != fspath.replace(\n                \"\\\\\", nodes.SEP\n            ):\n                res += \" <- \" + self.startdir.bestrelpath(fspath)\n        else:\n            res = \"[location]\"\n        return res + \" \"\n\n    def _getfailureheadline(self, rep):\n        head_line = rep.head_line\n        if head_line:\n            return head_line\n        return \"test session\"  # XXX?\n\n    def _getcrashline(self, rep):\n        try:\n            return str(rep.longrepr.reprcrash)\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}, {"response": "To address the issue, we need to update the `DEFAULT_LOG_FORMAT` to include the module name (`name`) as specified in the new format. The tests also need to validate the new format. Let's perform the necessary changes.\n\n### File 1: `src/_pytest/logging.py`\n\nWe need to update the `DEFAULT_LOG_FORMAT` to the new format specified in the issue.\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\n### File 2: `testing/logging/test_reporting.py`\n\nThe tests rely on the old format, so we'll update the expected log lines to match the new format.\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n=======\n                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n=======\n            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            \"test_log_cli_level.py*This log message will be shown\",\n=======\n            \"*test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            \"test_log_cli_level.py* This log message will be shown\",\n=======\n            \"*test_log_cli_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            \"test_log_cli_ini_level.py* This log message will be shown\",\n=======\n            \"*test_log_cli_ini_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\nThese changes update the logging format in the main configuration and update the unit tests to align with the new logging format. Now the logs will include the log level, module name, filename, line number, and the message, as specified in the issue description.", "usage": {"completion_tokens": 0, "prompt_tokens": 0}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nImprove default logging format\nCurrently it is:\r\n\r\n> DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\r\n\r\nI think `name` (module name) would be very useful here, instead of just the base filename.\r\n\r\n(It might also be good to have the relative path there (maybe at the end), but it is usually still very long (but e.g. `$VIRTUAL_ENV` could be substituted therein))\r\n\r\nCurrently it would look like this:\r\n```\r\nutils.py                   114 DEBUG    (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nmultipart.py               604 DEBUG    Calling on_field_start with no data\r\n```\r\n\r\n\r\nUsing `DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"` instead:\r\n\r\n```\r\nDEBUG    django.db.backends:utils.py:114 (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nDEBUG    multipart.multipart:multipart.py:604 Calling on_field_start with no data\r\n```\n\n--- END ISSUE ---\n\n\nWe also have a fail to pass unit test for the given issue. We can use this to help identify and fix the issue. Here is the patch text:\n--- BEGIN PATCH ---\ndiff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -248,7 +248,7 @@ def test_log_cli():\n             [\n                 \"test_log_cli_enabled_disabled.py::test_log_cli \",\n                 \"*-- live log call --*\",\n-                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n+                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n                 \"PASSED*\",\n             ]\n         )\n@@ -282,7 +282,7 @@ def test_log_cli(request):\n     result.stdout.fnmatch_lines(\n         [\n             \"test_log_cli_default_level.py::test_log_cli \",\n-            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n         ]\n     )\n     assert \"INFO message won't be shown\" not in result.stdout.str()\n@@ -523,7 +523,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -531,7 +531,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -565,7 +565,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py*This log message will be shown\",\n+            \"*test_log_cli_level.py*This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -579,7 +579,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -615,7 +615,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_ini_level.py* This log message will be shown\",\n+            \"*test_log_cli_ini_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n\n--- END PATCH ---\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### src/_pytest/logging.py\n...\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n...\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n...\n\n\n### src/_pytest/terminal.py\n...\n        if \"KeyboardInterrupt\" in msg:\n            if self.config.option.fulltrace:\n                excrepr.toterminal(self._tw)\n            else:\n                excrepr.reprcrash.toterminal(self._tw)\n                self._tw.line(\n                    \"(to show a full traceback on KeyboardInterrupt use --fulltrace)\",\n                    yellow=True,\n                )\n\n    def _locationline(self, nodeid, fspath, lineno, domain):\n        def mkrel(nodeid):\n            line = self.config.cwd_relative_nodeid(nodeid)\n            if domain and line.endswith(domain):\n                line = line[: -len(domain)]\n                values = domain.split(\"[\")\n                values[0] = values[0].replace(\".\", \"::\")  # don't replace '.' in params\n                line += \"[\".join(values)\n            return line\n\n        # collect_fspath comes from testid which has a \"/\"-normalized path\n\n        if fspath:\n            res = mkrel(nodeid)\n            if self.verbosity >= 2 and nodeid.split(\"::\")[0] != fspath.replace(\n                \"\\\\\", nodes.SEP\n            ):\n                res += \" <- \" + self.startdir.bestrelpath(fspath)\n        else:\n            res = \"[location]\"\n        return res + \" \"\n\n    def _getfailureheadline(self, rep):\n        head_line = rep.head_line\n        if head_line:\n            return head_line\n        return \"test session\"  # XXX?\n\n    def _getcrashline(self, rep):\n        try:\n            return str(rep.longrepr.reprcrash)\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}, {"response": "Based on the issue statement, we need to modify the `DEFAULT_LOG_FORMAT` to include the `name` attribute for better logging details. This change will primarily take place in the `src/_pytest/logging.py` file. Along with that, the relevant test cases need to be updated to reflect this new format.\n\nHere are the necessary *SEARCH/REPLACE* edits:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n\n\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n=======\n                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n<<<<<<< SEARCH\n            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n=======\n            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n>>>>>>> REPLACE\n<<<<<<< SEARCH\n            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n<<<<<<< SEARCH\n            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n<<<<<<< SEARCH\n            \"test_log_cli_level.py*This log message will be shown\",\n=======\n            \"*test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n<<<<<<< SEARCH\n            \"test_log_cli_level.py* This log message will be shown\",\n=======\n            \"*test_log_cli_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n<<<<<<< SEARCH\n            \"test_log_cli_ini_level.py* This log message will be shown\",\n=======\n            \"*test_log_cli_ini_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\nThese changes update the default logging format and ensure that the tests are checking the correct format. Specifically, the format now includes the `name` (module name) along with the filename and line number, providing more detailed log information.", "usage": {"completion_tokens": 0, "prompt_tokens": 0}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nImprove default logging format\nCurrently it is:\r\n\r\n> DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\r\n\r\nI think `name` (module name) would be very useful here, instead of just the base filename.\r\n\r\n(It might also be good to have the relative path there (maybe at the end), but it is usually still very long (but e.g. `$VIRTUAL_ENV` could be substituted therein))\r\n\r\nCurrently it would look like this:\r\n```\r\nutils.py                   114 DEBUG    (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nmultipart.py               604 DEBUG    Calling on_field_start with no data\r\n```\r\n\r\n\r\nUsing `DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"` instead:\r\n\r\n```\r\nDEBUG    django.db.backends:utils.py:114 (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nDEBUG    multipart.multipart:multipart.py:604 Calling on_field_start with no data\r\n```\n\n--- END ISSUE ---\n\n\nWe also have a fail to pass unit test for the given issue. We can use this to help identify and fix the issue. Here is the patch text:\n--- BEGIN PATCH ---\ndiff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -248,7 +248,7 @@ def test_log_cli():\n             [\n                 \"test_log_cli_enabled_disabled.py::test_log_cli \",\n                 \"*-- live log call --*\",\n-                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n+                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n                 \"PASSED*\",\n             ]\n         )\n@@ -282,7 +282,7 @@ def test_log_cli(request):\n     result.stdout.fnmatch_lines(\n         [\n             \"test_log_cli_default_level.py::test_log_cli \",\n-            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n         ]\n     )\n     assert \"INFO message won't be shown\" not in result.stdout.str()\n@@ -523,7 +523,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -531,7 +531,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -565,7 +565,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py*This log message will be shown\",\n+            \"*test_log_cli_level.py*This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -579,7 +579,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -615,7 +615,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_ini_level.py* This log message will be shown\",\n+            \"*test_log_cli_ini_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n\n--- END PATCH ---\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### src/_pytest/logging.py\n...\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n...\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n...\n\n\n### src/_pytest/terminal.py\n...\n        if \"KeyboardInterrupt\" in msg:\n            if self.config.option.fulltrace:\n                excrepr.toterminal(self._tw)\n            else:\n                excrepr.reprcrash.toterminal(self._tw)\n                self._tw.line(\n                    \"(to show a full traceback on KeyboardInterrupt use --fulltrace)\",\n                    yellow=True,\n                )\n\n    def _locationline(self, nodeid, fspath, lineno, domain):\n        def mkrel(nodeid):\n            line = self.config.cwd_relative_nodeid(nodeid)\n            if domain and line.endswith(domain):\n                line = line[: -len(domain)]\n                values = domain.split(\"[\")\n                values[0] = values[0].replace(\".\", \"::\")  # don't replace '.' in params\n                line += \"[\".join(values)\n            return line\n\n        # collect_fspath comes from testid which has a \"/\"-normalized path\n\n        if fspath:\n            res = mkrel(nodeid)\n            if self.verbosity >= 2 and nodeid.split(\"::\")[0] != fspath.replace(\n                \"\\\\\", nodes.SEP\n            ):\n                res += \" <- \" + self.startdir.bestrelpath(fspath)\n        else:\n            res = \"[location]\"\n        return res + \" \"\n\n    def _getfailureheadline(self, rep):\n        head_line = rep.head_line\n        if head_line:\n            return head_line\n        return \"test session\"  # XXX?\n\n    def _getcrashline(self, rep):\n        try:\n            return str(rep.longrepr.reprcrash)\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}, {"response": "Based on the issue statement, it appears that the modification needs to be done in the logging format specified in the `DEFAULT_LOG_FORMAT` and potentially other related log formats within the `_pytest/logging.py` file. The tests provided suggest changes to the expected log output.\n\nHere are the necessary changes:\n\n1. Update the `DEFAULT_LOG_FORMAT` to include the module name (`name`) alongside the filename.\n2. Ensure related instances where the log format is used are updated accordingly.\n\nHere's the *SEARCH/REPLACE* edit to address the issue:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nGiven that `DEFAULT_LOG_FORMAT` is used to initialize the formatter in the `LoggingPlugin` class, we should also ensure changes in `_setup_cli_logging` method to match the new format.\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n=======\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\", \"DEFAULT_LOG_FORMAT\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n>>>>>>> REPLACE\n```\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n=======\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"DEFAULT_LOG_FORMAT\")\n>>>>>>> REPLACE\n```\n\nThese changes should ensure that the new log format includes the module name and integrates seamlessly with the existing setup.\n\nNext, update the test cases to match the new format:\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n+                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n=======\n-                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n+                \"CRITICAL *test_log_cli_enabled_disabled.py:25* critical message logged by test\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n=======\n-            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py:25* message will be shown*\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n=======\n-            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n+            r\"(.+)live log teardown(.+)\\nWARNING(.+):test_log_cli_tear(.+)\\nWARNING(.+):test_log_cli_tear(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n=======\n-            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+):test_log_cli_finish(.+)\\nWARNING(.+):test_log_cli_finish(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"*test_log_cli_level.py*This log message will be shown\",\n+            \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n=======\n-            \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n+            \"WARNING*test_log_cli_level.py:60*This log message will be shown\",\n             \"PASSED\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"*test_log_cli_level.py* This log message will be shown\",\n+            \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n=======\n-           ", "usage": {"completion_tokens": 0, "prompt_tokens": 0}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nImprove default logging format\nCurrently it is:\r\n\r\n> DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\r\n\r\nI think `name` (module name) would be very useful here, instead of just the base filename.\r\n\r\n(It might also be good to have the relative path there (maybe at the end), but it is usually still very long (but e.g. `$VIRTUAL_ENV` could be substituted therein))\r\n\r\nCurrently it would look like this:\r\n```\r\nutils.py                   114 DEBUG    (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nmultipart.py               604 DEBUG    Calling on_field_start with no data\r\n```\r\n\r\n\r\nUsing `DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"` instead:\r\n\r\n```\r\nDEBUG    django.db.backends:utils.py:114 (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nDEBUG    multipart.multipart:multipart.py:604 Calling on_field_start with no data\r\n```\n\n--- END ISSUE ---\n\n\nWe also have a fail to pass unit test for the given issue. We can use this to help identify and fix the issue. Here is the patch text:\n--- BEGIN PATCH ---\ndiff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -248,7 +248,7 @@ def test_log_cli():\n             [\n                 \"test_log_cli_enabled_disabled.py::test_log_cli \",\n                 \"*-- live log call --*\",\n-                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n+                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n                 \"PASSED*\",\n             ]\n         )\n@@ -282,7 +282,7 @@ def test_log_cli(request):\n     result.stdout.fnmatch_lines(\n         [\n             \"test_log_cli_default_level.py::test_log_cli \",\n-            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n         ]\n     )\n     assert \"INFO message won't be shown\" not in result.stdout.str()\n@@ -523,7 +523,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -531,7 +531,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -565,7 +565,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py*This log message will be shown\",\n+            \"*test_log_cli_level.py*This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -579,7 +579,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -615,7 +615,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_ini_level.py* This log message will be shown\",\n+            \"*test_log_cli_ini_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n\n--- END PATCH ---\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### src/_pytest/logging.py\n...\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n...\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n...\n\n\n### src/_pytest/terminal.py\n...\n        if \"KeyboardInterrupt\" in msg:\n            if self.config.option.fulltrace:\n                excrepr.toterminal(self._tw)\n            else:\n                excrepr.reprcrash.toterminal(self._tw)\n                self._tw.line(\n                    \"(to show a full traceback on KeyboardInterrupt use --fulltrace)\",\n                    yellow=True,\n                )\n\n    def _locationline(self, nodeid, fspath, lineno, domain):\n        def mkrel(nodeid):\n            line = self.config.cwd_relative_nodeid(nodeid)\n            if domain and line.endswith(domain):\n                line = line[: -len(domain)]\n                values = domain.split(\"[\")\n                values[0] = values[0].replace(\".\", \"::\")  # don't replace '.' in params\n                line += \"[\".join(values)\n            return line\n\n        # collect_fspath comes from testid which has a \"/\"-normalized path\n\n        if fspath:\n            res = mkrel(nodeid)\n            if self.verbosity >= 2 and nodeid.split(\"::\")[0] != fspath.replace(\n                \"\\\\\", nodes.SEP\n            ):\n                res += \" <- \" + self.startdir.bestrelpath(fspath)\n        else:\n            res = \"[location]\"\n        return res + \" \"\n\n    def _getfailureheadline(self, rep):\n        head_line = rep.head_line\n        if head_line:\n            return head_line\n        return \"test session\"  # XXX?\n\n    def _getcrashline(self, rep):\n        try:\n            return str(rep.longrepr.reprcrash)\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}, {"response": "Based on the issue statement and the provided code snippets, it appears that the issue lies in the default logging format and how it is handled within the `LoggingPlugin` class. The unit tests' outputs also indicate that the logging format does not match the expected format.\n\nLet's focus on updating the `DEFAULT_LOG_FORMAT` to include the `name` (module name) and ensure the unit tests reflect this format.\n\nHere are the required *SEARCH/REPLACE* edits:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nUpdating the test expectations to match the new log format:\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n+                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n=======\n-                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n+                \"CRITICAL*test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n=======\n-            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py*message will be shown*\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n-            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n=======\n-            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py* This log message will be shown\",\n=======\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py* This log message will be shown\",\n=======\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n-            \"test_log_cli_ini_level.py* This log message will be shown\",\n+            \"*test_log_cli_ini_level.py* This log message will be shown\",\n=======\n-            \"test_log_cli_ini_level.py* This log message will be shown\",\n+            \"*test_log_cli_ini_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n\nWith these changes, your logging format will include the module name, and the unit tests will match the expected output format.", "usage": {"completion_tokens": 0, "prompt_tokens": 0}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nImprove default logging format\nCurrently it is:\r\n\r\n> DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\r\n\r\nI think `name` (module name) would be very useful here, instead of just the base filename.\r\n\r\n(It might also be good to have the relative path there (maybe at the end), but it is usually still very long (but e.g. `$VIRTUAL_ENV` could be substituted therein))\r\n\r\nCurrently it would look like this:\r\n```\r\nutils.py                   114 DEBUG    (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nmultipart.py               604 DEBUG    Calling on_field_start with no data\r\n```\r\n\r\n\r\nUsing `DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"` instead:\r\n\r\n```\r\nDEBUG    django.db.backends:utils.py:114 (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nDEBUG    multipart.multipart:multipart.py:604 Calling on_field_start with no data\r\n```\n\n--- END ISSUE ---\n\n\nWe also have a fail to pass unit test for the given issue. We can use this to help identify and fix the issue. Here is the patch text:\n--- BEGIN PATCH ---\ndiff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -248,7 +248,7 @@ def test_log_cli():\n             [\n                 \"test_log_cli_enabled_disabled.py::test_log_cli \",\n                 \"*-- live log call --*\",\n-                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n+                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n                 \"PASSED*\",\n             ]\n         )\n@@ -282,7 +282,7 @@ def test_log_cli(request):\n     result.stdout.fnmatch_lines(\n         [\n             \"test_log_cli_default_level.py::test_log_cli \",\n-            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n         ]\n     )\n     assert \"INFO message won't be shown\" not in result.stdout.str()\n@@ -523,7 +523,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -531,7 +531,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -565,7 +565,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py*This log message will be shown\",\n+            \"*test_log_cli_level.py*This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -579,7 +579,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -615,7 +615,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_ini_level.py* This log message will be shown\",\n+            \"*test_log_cli_ini_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n\n--- END PATCH ---\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### src/_pytest/logging.py\n...\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n...\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n...\n\n\n### src/_pytest/terminal.py\n...\n        if \"KeyboardInterrupt\" in msg:\n            if self.config.option.fulltrace:\n                excrepr.toterminal(self._tw)\n            else:\n                excrepr.reprcrash.toterminal(self._tw)\n                self._tw.line(\n                    \"(to show a full traceback on KeyboardInterrupt use --fulltrace)\",\n                    yellow=True,\n                )\n\n    def _locationline(self, nodeid, fspath, lineno, domain):\n        def mkrel(nodeid):\n            line = self.config.cwd_relative_nodeid(nodeid)\n            if domain and line.endswith(domain):\n                line = line[: -len(domain)]\n                values = domain.split(\"[\")\n                values[0] = values[0].replace(\".\", \"::\")  # don't replace '.' in params\n                line += \"[\".join(values)\n            return line\n\n        # collect_fspath comes from testid which has a \"/\"-normalized path\n\n        if fspath:\n            res = mkrel(nodeid)\n            if self.verbosity >= 2 and nodeid.split(\"::\")[0] != fspath.replace(\n                \"\\\\\", nodes.SEP\n            ):\n                res += \" <- \" + self.startdir.bestrelpath(fspath)\n        else:\n            res = \"[location]\"\n        return res + \" \"\n\n    def _getfailureheadline(self, rep):\n        head_line = rep.head_line\n        if head_line:\n            return head_line\n        return \"test session\"  # XXX?\n\n    def _getcrashline(self, rep):\n        try:\n            return str(rep.longrepr.reprcrash)\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}, {"response": "Based on the provided issue statement and the failing unit tests, it seems like we need to improve the default logging format in the `LoggingPlugin` class in the `src/_pytest/logging.py` file. Specifically, we need to adjust the `DEFAULT_LOG_FORMAT` to include the module name (`name`) along with the filename.\n\nHere is the proposed *SEARCH/REPLACE* edit to fix the issue:\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\nThis should fix the logging format issue as described in the repository issue. The unit tests have also been modified to match the new logging format, where the log level appears first, followed by the module name, filename, and line number.\n\nApplying this change should resolve the formatting problem and ensure that the log output includes the module name as requested.", "usage": {"completion_tokens": 0, "prompt_tokens": 0}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nImprove default logging format\nCurrently it is:\r\n\r\n> DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\r\n\r\nI think `name` (module name) would be very useful here, instead of just the base filename.\r\n\r\n(It might also be good to have the relative path there (maybe at the end), but it is usually still very long (but e.g. `$VIRTUAL_ENV` could be substituted therein))\r\n\r\nCurrently it would look like this:\r\n```\r\nutils.py                   114 DEBUG    (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nmultipart.py               604 DEBUG    Calling on_field_start with no data\r\n```\r\n\r\n\r\nUsing `DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"` instead:\r\n\r\n```\r\nDEBUG    django.db.backends:utils.py:114 (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nDEBUG    multipart.multipart:multipart.py:604 Calling on_field_start with no data\r\n```\n\n--- END ISSUE ---\n\n\nWe also have a fail to pass unit test for the given issue. We can use this to help identify and fix the issue. Here is the patch text:\n--- BEGIN PATCH ---\ndiff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -248,7 +248,7 @@ def test_log_cli():\n             [\n                 \"test_log_cli_enabled_disabled.py::test_log_cli \",\n                 \"*-- live log call --*\",\n-                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n+                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n                 \"PASSED*\",\n             ]\n         )\n@@ -282,7 +282,7 @@ def test_log_cli(request):\n     result.stdout.fnmatch_lines(\n         [\n             \"test_log_cli_default_level.py::test_log_cli \",\n-            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n         ]\n     )\n     assert \"INFO message won't be shown\" not in result.stdout.str()\n@@ -523,7 +523,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -531,7 +531,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -565,7 +565,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py*This log message will be shown\",\n+            \"*test_log_cli_level.py*This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -579,7 +579,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -615,7 +615,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_ini_level.py* This log message will be shown\",\n+            \"*test_log_cli_ini_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n\n--- END PATCH ---\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### src/_pytest/logging.py\n...\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n...\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n...\n\n\n### src/_pytest/terminal.py\n...\n        if \"KeyboardInterrupt\" in msg:\n            if self.config.option.fulltrace:\n                excrepr.toterminal(self._tw)\n            else:\n                excrepr.reprcrash.toterminal(self._tw)\n                self._tw.line(\n                    \"(to show a full traceback on KeyboardInterrupt use --fulltrace)\",\n                    yellow=True,\n                )\n\n    def _locationline(self, nodeid, fspath, lineno, domain):\n        def mkrel(nodeid):\n            line = self.config.cwd_relative_nodeid(nodeid)\n            if domain and line.endswith(domain):\n                line = line[: -len(domain)]\n                values = domain.split(\"[\")\n                values[0] = values[0].replace(\".\", \"::\")  # don't replace '.' in params\n                line += \"[\".join(values)\n            return line\n\n        # collect_fspath comes from testid which has a \"/\"-normalized path\n\n        if fspath:\n            res = mkrel(nodeid)\n            if self.verbosity >= 2 and nodeid.split(\"::\")[0] != fspath.replace(\n                \"\\\\\", nodes.SEP\n            ):\n                res += \" <- \" + self.startdir.bestrelpath(fspath)\n        else:\n            res = \"[location]\"\n        return res + \" \"\n\n    def _getfailureheadline(self, rep):\n        head_line = rep.head_line\n        if head_line:\n            return head_line\n        return \"test session\"  # XXX?\n\n    def _getcrashline(self, rep):\n        try:\n            return str(rep.longrepr.reprcrash)\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}, {"response": "Based on the issue statement and the provided patch, we need to improve the default logging format to include the module name and adjust the unit tests accordingly. Let's generate the required *SEARCH/REPLACE* edits.\n\n### Step 1: Update the Default Log Format in `src/_pytest/logging.py`\n\n```python\n### src/_pytest/logging.py\n<<<<<<< SEARCH\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n=======\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n>>>>>>> REPLACE\n```\n\n### Step 2: Ensure the Tests Match the New Log Format in `testing/logging/test_reporting.py`\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n=======\n                \"CRITICAL *test_log_cli_enabled_disabled*:test_log_cli_enabled_disabled.py* critical message logged by test\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n=======\n            \"WARNING*test_log_cli_default_level*:test_log_cli_default_level.py* message will be shown*\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log teardown(.+)\\nWARNING(.+):(.+)\\nWARNING(.+):(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n=======\n            r\"(.+)live log finish(.+)\\nWARNING(.+):(.+)\\nWARNING(.+):(.+)\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"*test_log_cli_level.py*This log message will be shown\",\n=======\n            \"WARNING*test_log_cli_level*:test_log_cli_level.py*This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"*test_log_cli_level.py* This log message will be shown\",\n=======\n            \"WARNING*test_log_cli_level*:test_log_cli_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n```python\n### testing/logging/test_reporting.py\n<<<<<<< SEARCH\n            \"*test_log_cli_ini_level.py* This log message will be shown\",\n=======\n            \"WARNING*test_log_cli_ini_level*:test_log_cli_ini_level.py* This log message will be shown\",\n>>>>>>> REPLACE\n```\n\n### Summary\n\nWe updated the default log format to include the module name and filename in `src/_pytest/logging.py` and adjusted the unit tests in `testing/logging/test_reporting.py` to match the new log format. These changes should address the issue by providing more useful information in the log messages.", "usage": {"completion_tokens": 0, "prompt_tokens": 0}, "prompt": "We are currently solving the following issue within our repository. Here is the issue text:\n--- BEGIN ISSUE ---\nImprove default logging format\nCurrently it is:\r\n\r\n> DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\r\n\r\nI think `name` (module name) would be very useful here, instead of just the base filename.\r\n\r\n(It might also be good to have the relative path there (maybe at the end), but it is usually still very long (but e.g. `$VIRTUAL_ENV` could be substituted therein))\r\n\r\nCurrently it would look like this:\r\n```\r\nutils.py                   114 DEBUG    (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nmultipart.py               604 DEBUG    Calling on_field_start with no data\r\n```\r\n\r\n\r\nUsing `DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"` instead:\r\n\r\n```\r\nDEBUG    django.db.backends:utils.py:114 (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nDEBUG    multipart.multipart:multipart.py:604 Calling on_field_start with no data\r\n```\n\n--- END ISSUE ---\n\n\nWe also have a fail to pass unit test for the given issue. We can use this to help identify and fix the issue. Here is the patch text:\n--- BEGIN PATCH ---\ndiff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -248,7 +248,7 @@ def test_log_cli():\n             [\n                 \"test_log_cli_enabled_disabled.py::test_log_cli \",\n                 \"*-- live log call --*\",\n-                \"test_log_cli_enabled_disabled.py* CRITICAL critical message logged by test\",\n+                \"CRITICAL *test_log_cli_enabled_disabled.py* critical message logged by test\",\n                 \"PASSED*\",\n             ]\n         )\n@@ -282,7 +282,7 @@ def test_log_cli(request):\n     result.stdout.fnmatch_lines(\n         [\n             \"test_log_cli_default_level.py::test_log_cli \",\n-            \"test_log_cli_default_level.py*WARNING message will be shown*\",\n+            \"WARNING*test_log_cli_default_level.py* message will be shown*\",\n         ]\n     )\n     assert \"INFO message won't be shown\" not in result.stdout.str()\n@@ -523,7 +523,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log teardown(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log teardown(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -531,7 +531,7 @@ def test_log_1(fix):\n     )\n     assert (\n         re.search(\n-            r\"(.+)live log finish(.+)\\n(.+)WARNING(.+)\\n(.+)WARNING(.+)\",\n+            r\"(.+)live log finish(.+)\\nWARNING(.+)\\nWARNING(.+)\",\n             result.stdout.str(),\n             re.MULTILINE,\n         )\n@@ -565,7 +565,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py*This log message will be shown\",\n+            \"*test_log_cli_level.py*This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -579,7 +579,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_level.py* This log message will be shown\",\n+            \"*test_log_cli_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n@@ -615,7 +615,7 @@ def test_log_cli(request):\n     # fnmatch_lines does an assertion internally\n     result.stdout.fnmatch_lines(\n         [\n-            \"test_log_cli_ini_level.py* This log message will be shown\",\n+            \"*test_log_cli_ini_level.py* This log message will be shown\",\n             \"PASSED\",  # 'PASSED' on its own line because the log message prints a new line\n         ]\n     )\n\n--- END PATCH ---\n\n\n\nBelow are some code segments, each from a relevant file. One or more of these files may contain bugs.\n\n--- BEGIN FILE ---\n```\n### src/_pytest/logging.py\n...\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n...\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n...\n\n\n### src/_pytest/terminal.py\n...\n        if \"KeyboardInterrupt\" in msg:\n            if self.config.option.fulltrace:\n                excrepr.toterminal(self._tw)\n            else:\n                excrepr.reprcrash.toterminal(self._tw)\n                self._tw.line(\n                    \"(to show a full traceback on KeyboardInterrupt use --fulltrace)\",\n                    yellow=True,\n                )\n\n    def _locationline(self, nodeid, fspath, lineno, domain):\n        def mkrel(nodeid):\n            line = self.config.cwd_relative_nodeid(nodeid)\n            if domain and line.endswith(domain):\n                line = line[: -len(domain)]\n                values = domain.split(\"[\")\n                values[0] = values[0].replace(\".\", \"::\")  # don't replace '.' in params\n                line += \"[\".join(values)\n            return line\n\n        # collect_fspath comes from testid which has a \"/\"-normalized path\n\n        if fspath:\n            res = mkrel(nodeid)\n            if self.verbosity >= 2 and nodeid.split(\"::\")[0] != fspath.replace(\n                \"\\\\\", nodes.SEP\n            ):\n                res += \" <- \" + self.startdir.bestrelpath(fspath)\n        else:\n            res = \"[location]\"\n        return res + \" \"\n\n    def _getfailureheadline(self, rep):\n        head_line = rep.head_line\n        if head_line:\n            return head_line\n        return \"test session\"  # XXX?\n\n    def _getcrashline(self, rep):\n        try:\n            return str(rep.longrepr.reprcrash)\n...\n```\n--- END FILE ---\n\nPlease first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.\n\nEvery *SEARCH/REPLACE* edit must use this format:\n1. The file path\n2. The start of search block: <<<<<<< SEARCH\n3. A contiguous chunk of lines to search for in the existing source code\n4. The dividing line: =======\n5. The lines to replace into the source code\n6. The end of the replace block: >>>>>>> REPLACE\n\nHere is an example:\n\n```python\n### mathweb/flask/app.py\n<<<<<<< SEARCH\nfrom flask import Flask\n=======\nimport math\nfrom flask import Flask\n>>>>>>> REPLACE\n```\n\nPlease note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!\nWrap the *SEARCH/REPLACE* edit in blocks ```python...```."}], "prev_content": [["\"\"\" Access and control log capturing. \"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-cli-date-format\",\n        dest=\"log_cli_date_format\",\n        default=None,\n        help=\"log date format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file\",\n        dest=\"log_file\",\n        default=None,\n        help=\"path to a file when logging will be written to.\",\n    )\n    add_option_ini(\n        \"--log-file-level\",\n        dest=\"log_file_level\",\n        default=None,\n        help=\"log file logging level.\",\n    )\n    add_option_ini(\n        \"--log-file-format\",\n        dest=\"log_file_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file-date-format\",\n        dest=\"log_file_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n\n\n@contextmanager\ndef catching_logs(handler, formatter=None, level=None):\n    \"\"\"Context manager that prepares the whole logging machinery properly.\"\"\"\n    root_logger = logging.getLogger()\n\n    if formatter is not None:\n        handler.setFormatter(formatter)\n    if level is not None:\n        handler.setLevel(level)\n\n    # Adding the same handler twice would confuse logging system.\n    # Just don't do that.\n    add_new_handler = handler not in root_logger.handlers\n\n    if add_new_handler:\n        root_logger.addHandler(handler)\n    if level is not None:\n        orig_level = root_logger.level\n        root_logger.setLevel(min(orig_level, level))\n    try:\n        yield handler\n    finally:\n        if level is not None:\n            root_logger.setLevel(orig_level)\n        if add_new_handler:\n            root_logger.removeHandler(handler)\n\n\nclass LogCaptureHandler(logging.StreamHandler):\n    \"\"\"A logging handler that stores log records and the log text.\"\"\"\n\n    def __init__(self):\n        \"\"\"Creates a new log handler.\"\"\"\n        logging.StreamHandler.__init__(self, py.io.TextIO())\n        self.records = []\n\n    def emit(self, record):\n        \"\"\"Keep the log records in a list in addition to the log text.\"\"\"\n        self.records.append(record)\n        logging.StreamHandler.emit(self, record)\n\n    def reset(self):\n        self.records = []\n        self.stream = py.io.TextIO()\n\n\nclass LogCaptureFixture(object):\n    \"\"\"Provides access and control of log capturing.\"\"\"\n\n    def __init__(self, item):\n        \"\"\"Creates a new funcarg.\"\"\"\n        self._item = item\n        # dict of log name -> log level\n        self._initial_log_levels = {}  # Dict[str, int]\n\n    def _finalize(self):\n        \"\"\"Finalizes the fixture.\n\n        This restores the log levels changed by :meth:`set_level`.\n        \"\"\"\n        # restore log levels\n        for logger_name, level in self._initial_log_levels.items():\n            logger = logging.getLogger(logger_name)\n            logger.setLevel(level)\n\n    @property\n    def handler(self):\n        \"\"\"\n        :rtype: LogCaptureHandler\n        \"\"\"\n        return self._item.catch_log_handler\n\n    def get_records(self, when):\n        \"\"\"\n        Get the logging records for one of the possible test phases.\n\n        :param str when:\n            Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :rtype: List[logging.LogRecord]\n        :return: the list of captured records at the given stage\n\n        .. versionadded:: 3.4\n        \"\"\"\n        handler = self._item.catch_log_handlers.get(when)\n        if handler:\n            return handler.records\n        else:\n            return []\n\n    @property\n    def text(self):\n        \"\"\"Returns the log text.\"\"\"\n        return self.handler.stream.getvalue()\n\n    @property\n    def records(self):\n        \"\"\"Returns the list of log records.\"\"\"\n        return self.handler.records\n\n    @property\n    def record_tuples(self):\n        \"\"\"Returns a list of a stripped down version of log records intended\n        for use in assertion comparison.\n\n        The format of the tuple is:\n\n            (logger_name, log_level, message)\n        \"\"\"\n        return [(r.name, r.levelno, r.getMessage()) for r in self.records]\n\n    @property\n    def messages(self):\n        \"\"\"Returns a list of format-interpolated log messages.\n\n        Unlike 'records', which contains the format string and parameters for interpolation, log messages in this list\n        are all interpolated.\n        Unlike 'text', which contains the output from the handler, log messages in this list are unadorned with\n        levels, timestamps, etc, making exact comparisons more reliable.\n\n        Note that traceback or stack info (from :func:`logging.exception` or the `exc_info` or `stack_info` arguments\n        to the logging functions) is not included, as this is added by the formatter in the handler.\n\n        .. versionadded:: 3.7\n        \"\"\"\n        return [r.getMessage() for r in self.records]\n\n    def clear(self):\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.reset()\n\n    def set_level(self, level, logger=None):\n        \"\"\"Sets the level for capturing of logs. The level will be restored to its previous value at the end of\n        the test.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n\n        .. versionchanged:: 3.4\n            The levels of the loggers changed by this function will be restored to their initial values at the\n            end of the test.\n        \"\"\"\n        logger_name = logger\n        logger = logging.getLogger(logger_name)\n        # save the original log-level to restore it during teardown\n        self._initial_log_levels.setdefault(logger_name, logger.level)\n        logger.setLevel(level)\n\n    @contextmanager\n    def at_level(self, level, logger=None):\n        \"\"\"Context manager that sets the level for capturing of logs. After the end of the 'with' statement the\n        level is restored to its original value.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n        \"\"\"\n        logger = logging.getLogger(logger)\n        orig_level = logger.level\n        logger.setLevel(level)\n        try:\n            yield\n        finally:\n            logger.setLevel(orig_level)\n\n\n@pytest.fixture\ndef caplog(request):\n    \"\"\"Access and control log capturing.\n\n    Captured logs are available through the following properties/methods::\n\n    * caplog.text            -> string containing formatted log output\n    * caplog.records         -> list of logging.LogRecord instances\n    * caplog.record_tuples   -> list of (logger_name, level, message) tuples\n    * caplog.clear()         -> clear captured records and formatted log output string\n    \"\"\"\n    result = LogCaptureFixture(request.node)\n    yield result\n    result._finalize()\n\n\ndef get_actual_log_level(config, *setting_names):\n    \"\"\"Return the actual logging level.\"\"\"\n\n    for setting_name in setting_names:\n        log_level = config.getoption(setting_name)\n        if log_level is None:\n            log_level = config.getini(setting_name)\n        if log_level:\n            break\n    else:\n        return\n\n    if isinstance(log_level, six.string_types):\n        log_level = log_level.upper()\n    try:\n        return int(getattr(logging, log_level, log_level))\n    except ValueError:\n        # Python logging does not recognise this as a logging level\n        raise pytest.UsageError(\n            \"'{}' is not recognized as a logging level name for \"\n            \"'{}'. Please consider passing the \"\n            \"logging level num instead.\".format(log_level, setting_name)\n        )\n\n\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n\n        if not fname.is_absolute():\n            fname = Path(self._config.rootdir, fname)\n\n        if not fname.parent.exists():\n            fname.parent.mkdir(exist_ok=True, parents=True)\n\n        self.log_file_handler = logging.FileHandler(\n            str(fname), mode=\"w\", encoding=\"UTF-8\"\n        )\n        self.log_file_handler.setFormatter(self.log_file_formatter)\n\n    def _log_cli_enabled(self):\n        \"\"\"Return True if log_cli should be considered enabled, either explicitly\n        or because --log-cli-level was given in the command-line.\n        \"\"\"\n        return self._config.getoption(\n            \"--log-cli-level\"\n        ) is not None or self._config.getini(\"log_cli\")\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_collection(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"collection\")\n\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for(self, item, when):\n        with self._runtest_for_main(item, when):\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for_main(self, item, when):\n        \"\"\"Implements the internals of pytest_runtest_xxx() hook.\"\"\"\n        with catching_logs(\n            LogCaptureHandler(), formatter=self.formatter, level=self.log_level\n        ) as log_handler:\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(when)\n\n            if item is None:\n                yield  # run the test\n                return\n\n            if not hasattr(item, \"catch_log_handlers\"):\n                item.catch_log_handlers = {}\n            item.catch_log_handlers[when] = log_handler\n            item.catch_log_handler = log_handler\n            try:\n                yield  # run test\n            finally:\n                if when == \"teardown\":\n                    del item.catch_log_handler\n                    del item.catch_log_handlers\n\n            if self.print_logs:\n                # Add a captured log section to the report.\n                log = log_handler.stream.getvalue().strip()\n                item.add_report_section(when, \"log\", log)\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        with self._runtest_for(item, \"setup\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_call(self, item):\n        with self._runtest_for(item, \"call\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        with self._runtest_for(item, \"teardown\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logstart(self):\n        if self.log_cli_handler:\n            self.log_cli_handler.reset()\n        with self._runtest_for(None, \"start\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logfinish(self):\n        with self._runtest_for(None, \"finish\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logreport(self):\n        with self._runtest_for(None, \"logreport\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionfinish(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionfinish\")\n            if self.log_file_handler is not None:\n                try:\n                    with catching_logs(\n                        self.log_file_handler, level=self.log_file_level\n                    ):\n                        yield\n                finally:\n                    # Close the FileHandler explicitly.\n                    # (logging.shutdown might have lost the weakref?!)\n                    self.log_file_handler.close()\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionstart(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionstart\")\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtestloop(self, session):\n        \"\"\"Runs all collected test items.\"\"\"\n        with self.live_logs_context():\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield  # run all the tests\n            else:\n                yield  # run all the tests\n\n\nclass _LiveLoggingStreamHandler(logging.StreamHandler):\n    \"\"\"\n    Custom StreamHandler used by the live logging feature: it will write a newline before the first log message\n    in each test.\n\n    During live logging we must also explicitly disable stdout/stderr capturing otherwise it will get captured\n    and won't appear in the terminal.\n    \"\"\"\n\n    def __init__(self, terminal_reporter, capture_manager):\n        \"\"\"\n        :param _pytest.terminal.TerminalReporter terminal_reporter:\n        :param _pytest.capture.CaptureManager capture_manager:\n        \"\"\"\n        logging.StreamHandler.__init__(self, stream=terminal_reporter)\n        self.capture_manager = capture_manager\n        self.reset()\n        self.set_when(None)\n        self._test_outcome_written = False\n\n    def reset(self):\n        \"\"\"Reset the handler; should be called before the start of each test\"\"\"\n        self._first_record_emitted = False\n\n    def set_when(self, when):\n        \"\"\"Prepares for the given test phase (setup/call/teardown)\"\"\"\n        self._when = when\n        self._section_name_shown = False\n        if when == \"start\":\n            self._test_outcome_written = False\n\n    def emit(self, record):\n        ctx_manager = (\n            self.capture_manager.global_and_fixture_disabled()\n            if self.capture_manager\n            else dummy_context_manager()\n        )\n        with ctx_manager:\n            if not self._first_record_emitted:\n                self.stream.write(\"\\n\")\n                self._first_record_emitted = True\n            elif self._when in (\"teardown\", \"finish\"):\n                if not self._test_outcome_written:\n                    self._test_outcome_written = True\n                    self.stream.write(\"\\n\")\n            if not self._section_name_shown and self._when:\n                self.stream.section(\"live log \" + self._when, sep=\"-\", bold=True)\n                self._section_name_shown = True\n            logging.StreamHandler.emit(self, record)", "\"\"\" Access and control log capturing. \"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-cli-date-format\",\n        dest=\"log_cli_date_format\",\n        default=None,\n        help=\"log date format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file\",\n        dest=\"log_file\",\n        default=None,\n        help=\"path to a file when logging will be written to.\",\n    )\n    add_option_ini(\n        \"--log-file-level\",\n        dest=\"log_file_level\",\n        default=None,\n        help=\"log file logging level.\",\n    )\n    add_option_ini(\n        \"--log-file-format\",\n        dest=\"log_file_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file-date-format\",\n        dest=\"log_file_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n\n\n@contextmanager\ndef catching_logs(handler, formatter=None, level=None):\n    \"\"\"Context manager that prepares the whole logging machinery properly.\"\"\"\n    root_logger = logging.getLogger()\n\n    if formatter is not None:\n        handler.setFormatter(formatter)\n    if level is not None:\n        handler.setLevel(level)\n\n    # Adding the same handler twice would confuse logging system.\n    # Just don't do that.\n    add_new_handler = handler not in root_logger.handlers\n\n    if add_new_handler:\n        root_logger.addHandler(handler)\n    if level is not None:\n        orig_level = root_logger.level\n        root_logger.setLevel(min(orig_level, level))\n    try:\n        yield handler\n    finally:\n        if level is not None:\n            root_logger.setLevel(orig_level)\n        if add_new_handler:\n            root_logger.removeHandler(handler)\n\n\nclass LogCaptureHandler(logging.StreamHandler):\n    \"\"\"A logging handler that stores log records and the log text.\"\"\"\n\n    def __init__(self):\n        \"\"\"Creates a new log handler.\"\"\"\n        logging.StreamHandler.__init__(self, py.io.TextIO())\n        self.records = []\n\n    def emit(self, record):\n        \"\"\"Keep the log records in a list in addition to the log text.\"\"\"\n        self.records.append(record)\n        logging.StreamHandler.emit(self, record)\n\n    def reset(self):\n        self.records = []\n        self.stream = py.io.TextIO()\n\n\nclass LogCaptureFixture(object):\n    \"\"\"Provides access and control of log capturing.\"\"\"\n\n    def __init__(self, item):\n        \"\"\"Creates a new funcarg.\"\"\"\n        self._item = item\n        # dict of log name -> log level\n        self._initial_log_levels = {}  # Dict[str, int]\n\n    def _finalize(self):\n        \"\"\"Finalizes the fixture.\n\n        This restores the log levels changed by :meth:`set_level`.\n        \"\"\"\n        # restore log levels\n        for logger_name, level in self._initial_log_levels.items():\n            logger = logging.getLogger(logger_name)\n            logger.setLevel(level)\n\n    @property\n    def handler(self):\n        \"\"\"\n        :rtype: LogCaptureHandler\n        \"\"\"\n        return self._item.catch_log_handler\n\n    def get_records(self, when):\n        \"\"\"\n        Get the logging records for one of the possible test phases.\n\n        :param str when:\n            Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :rtype: List[logging.LogRecord]\n        :return: the list of captured records at the given stage\n\n        .. versionadded:: 3.4\n        \"\"\"\n        handler = self._item.catch_log_handlers.get(when)\n        if handler:\n            return handler.records\n        else:\n            return []\n\n    @property\n    def text(self):\n        \"\"\"Returns the log text.\"\"\"\n        return self.handler.stream.getvalue()\n\n    @property\n    def records(self):\n        \"\"\"Returns the list of log records.\"\"\"\n        return self.handler.records\n\n    @property\n    def record_tuples(self):\n        \"\"\"Returns a list of a stripped down version of log records intended\n        for use in assertion comparison.\n\n        The format of the tuple is:\n\n            (logger_name, log_level, message)\n        \"\"\"\n        return [(r.name, r.levelno, r.getMessage()) for r in self.records]\n\n    @property\n    def messages(self):\n        \"\"\"Returns a list of format-interpolated log messages.\n\n        Unlike 'records', which contains the format string and parameters for interpolation, log messages in this list\n        are all interpolated.\n        Unlike 'text', which contains the output from the handler, log messages in this list are unadorned with\n        levels, timestamps, etc, making exact comparisons more reliable.\n\n        Note that traceback or stack info (from :func:`logging.exception` or the `exc_info` or `stack_info` arguments\n        to the logging functions) is not included, as this is added by the formatter in the handler.\n\n        .. versionadded:: 3.7\n        \"\"\"\n        return [r.getMessage() for r in self.records]\n\n    def clear(self):\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.reset()\n\n    def set_level(self, level, logger=None):\n        \"\"\"Sets the level for capturing of logs. The level will be restored to its previous value at the end of\n        the test.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n\n        .. versionchanged:: 3.4\n            The levels of the loggers changed by this function will be restored to their initial values at the\n            end of the test.\n        \"\"\"\n        logger_name = logger\n        logger = logging.getLogger(logger_name)\n        # save the original log-level to restore it during teardown\n        self._initial_log_levels.setdefault(logger_name, logger.level)\n        logger.setLevel(level)\n\n    @contextmanager\n    def at_level(self, level, logger=None):\n        \"\"\"Context manager that sets the level for capturing of logs. After the end of the 'with' statement the\n        level is restored to its original value.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n        \"\"\"\n        logger = logging.getLogger(logger)\n        orig_level = logger.level\n        logger.setLevel(level)\n        try:\n            yield\n        finally:\n            logger.setLevel(orig_level)\n\n\n@pytest.fixture\ndef caplog(request):\n    \"\"\"Access and control log capturing.\n\n    Captured logs are available through the following properties/methods::\n\n    * caplog.text            -> string containing formatted log output\n    * caplog.records         -> list of logging.LogRecord instances\n    * caplog.record_tuples   -> list of (logger_name, level, message) tuples\n    * caplog.clear()         -> clear captured records and formatted log output string\n    \"\"\"\n    result = LogCaptureFixture(request.node)\n    yield result\n    result._finalize()\n\n\ndef get_actual_log_level(config, *setting_names):\n    \"\"\"Return the actual logging level.\"\"\"\n\n    for setting_name in setting_names:\n        log_level = config.getoption(setting_name)\n        if log_level is None:\n            log_level = config.getini(setting_name)\n        if log_level:\n            break\n    else:\n        return\n\n    if isinstance(log_level, six.string_types):\n        log_level = log_level.upper()\n    try:\n        return int(getattr(logging, log_level, log_level))\n    except ValueError:\n        # Python logging does not recognise this as a logging level\n        raise pytest.UsageError(\n            \"'{}' is not recognized as a logging level name for \"\n            \"'{}'. Please consider passing the \"\n            \"logging level num instead.\".format(log_level, setting_name)\n        )\n\n\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n\n        if not fname.is_absolute():\n            fname = Path(self._config.rootdir, fname)\n\n        if not fname.parent.exists():\n            fname.parent.mkdir(exist_ok=True, parents=True)\n\n        self.log_file_handler = logging.FileHandler(\n            str(fname), mode=\"w\", encoding=\"UTF-8\"\n        )\n        self.log_file_handler.setFormatter(self.log_file_formatter)\n\n    def _log_cli_enabled(self):\n        \"\"\"Return True if log_cli should be considered enabled, either explicitly\n        or because --log-cli-level was given in the command-line.\n        \"\"\"\n        return self._config.getoption(\n            \"--log-cli-level\"\n        ) is not None or self._config.getini(\"log_cli\")\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_collection(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"collection\")\n\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for(self, item, when):\n        with self._runtest_for_main(item, when):\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for_main(self, item, when):\n        \"\"\"Implements the internals of pytest_runtest_xxx() hook.\"\"\"\n        with catching_logs(\n            LogCaptureHandler(), formatter=self.formatter, level=self.log_level\n        ) as log_handler:\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(when)\n\n            if item is None:\n                yield  # run the test\n                return\n\n            if not hasattr(item, \"catch_log_handlers\"):\n                item.catch_log_handlers = {}\n            item.catch_log_handlers[when] = log_handler\n            item.catch_log_handler = log_handler\n            try:\n                yield  # run test\n            finally:\n                if when == \"teardown\":\n                    del item.catch_log_handler\n                    del item.catch_log_handlers\n\n            if self.print_logs:\n                # Add a captured log section to the report.\n                log = log_handler.stream.getvalue().strip()\n                item.add_report_section(when, \"log\", log)\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        with self._runtest_for(item, \"setup\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_call(self, item):\n        with self._runtest_for(item, \"call\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        with self._runtest_for(item, \"teardown\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logstart(self):\n        if self.log_cli_handler:\n            self.log_cli_handler.reset()\n        with self._runtest_for(None, \"start\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logfinish(self):\n        with self._runtest_for(None, \"finish\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logreport(self):\n        with self._runtest_for(None, \"logreport\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionfinish(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionfinish\")\n            if self.log_file_handler is not None:\n                try:\n                    with catching_logs(\n                        self.log_file_handler, level=self.log_file_level\n                    ):\n                        yield\n                finally:\n                    # Close the FileHandler explicitly.\n                    # (logging.shutdown might have lost the weakref?!)\n                    self.log_file_handler.close()\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionstart(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionstart\")\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtestloop(self, session):\n        \"\"\"Runs all collected test items.\"\"\"\n        with self.live_logs_context():\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield  # run all the tests\n            else:\n                yield  # run all the tests\n\n\nclass _LiveLoggingStreamHandler(logging.StreamHandler):\n    \"\"\"\n    Custom StreamHandler used by the live logging feature: it will write a newline before the first log message\n    in each test.\n\n    During live logging we must also explicitly disable stdout/stderr capturing otherwise it will get captured\n    and won't appear in the terminal.\n    \"\"\"\n\n    def __init__(self, terminal_reporter, capture_manager):\n        \"\"\"\n        :param _pytest.terminal.TerminalReporter terminal_reporter:\n        :param _pytest.capture.CaptureManager capture_manager:\n        \"\"\"\n        logging.StreamHandler.__init__(self, stream=terminal_reporter)\n        self.capture_manager = capture_manager\n        self.reset()\n        self.set_when(None)\n        self._test_outcome_written = False\n\n    def reset(self):\n        \"\"\"Reset the handler; should be called before the start of each test\"\"\"\n        self._first_record_emitted = False\n\n    def set_when(self, when):\n        \"\"\"Prepares for the given test phase (setup/call/teardown)\"\"\"\n        self._when = when\n        self._section_name_shown = False\n        if when == \"start\":\n            self._test_outcome_written = False\n\n    def emit(self, record):\n        ctx_manager = (\n            self.capture_manager.global_and_fixture_disabled()\n            if self.capture_manager\n            else dummy_context_manager()\n        )\n        with ctx_manager:\n            if not self._first_record_emitted:\n                self.stream.write(\"\\n\")\n                self._first_record_emitted = True\n            elif self._when in (\"teardown\", \"finish\"):\n                if not self._test_outcome_written:\n                    self._test_outcome_written = True\n                    self.stream.write(\"\\n\")\n            if not self._section_name_shown and self._when:\n                self.stream.section(\"live log \" + self._when, sep=\"-\", bold=True)\n                self._section_name_shown = True\n            logging.StreamHandler.emit(self, record)", "\"\"\" Access and control log capturing. \"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-cli-date-format\",\n        dest=\"log_cli_date_format\",\n        default=None,\n        help=\"log date format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file\",\n        dest=\"log_file\",\n        default=None,\n        help=\"path to a file when logging will be written to.\",\n    )\n    add_option_ini(\n        \"--log-file-level\",\n        dest=\"log_file_level\",\n        default=None,\n        help=\"log file logging level.\",\n    )\n    add_option_ini(\n        \"--log-file-format\",\n        dest=\"log_file_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file-date-format\",\n        dest=\"log_file_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n\n\n@contextmanager\ndef catching_logs(handler, formatter=None, level=None):\n    \"\"\"Context manager that prepares the whole logging machinery properly.\"\"\"\n    root_logger = logging.getLogger()\n\n    if formatter is not None:\n        handler.setFormatter(formatter)\n    if level is not None:\n        handler.setLevel(level)\n\n    # Adding the same handler twice would confuse logging system.\n    # Just don't do that.\n    add_new_handler = handler not in root_logger.handlers\n\n    if add_new_handler:\n        root_logger.addHandler(handler)\n    if level is not None:\n        orig_level = root_logger.level\n        root_logger.setLevel(min(orig_level, level))\n    try:\n        yield handler\n    finally:\n        if level is not None:\n            root_logger.setLevel(orig_level)\n        if add_new_handler:\n            root_logger.removeHandler(handler)\n\n\nclass LogCaptureHandler(logging.StreamHandler):\n    \"\"\"A logging handler that stores log records and the log text.\"\"\"\n\n    def __init__(self):\n        \"\"\"Creates a new log handler.\"\"\"\n        logging.StreamHandler.__init__(self, py.io.TextIO())\n        self.records = []\n\n    def emit(self, record):\n        \"\"\"Keep the log records in a list in addition to the log text.\"\"\"\n        self.records.append(record)\n        logging.StreamHandler.emit(self, record)\n\n    def reset(self):\n        self.records = []\n        self.stream = py.io.TextIO()\n\n\nclass LogCaptureFixture(object):\n    \"\"\"Provides access and control of log capturing.\"\"\"\n\n    def __init__(self, item):\n        \"\"\"Creates a new funcarg.\"\"\"\n        self._item = item\n        # dict of log name -> log level\n        self._initial_log_levels = {}  # Dict[str, int]\n\n    def _finalize(self):\n        \"\"\"Finalizes the fixture.\n\n        This restores the log levels changed by :meth:`set_level`.\n        \"\"\"\n        # restore log levels\n        for logger_name, level in self._initial_log_levels.items():\n            logger = logging.getLogger(logger_name)\n            logger.setLevel(level)\n\n    @property\n    def handler(self):\n        \"\"\"\n        :rtype: LogCaptureHandler\n        \"\"\"\n        return self._item.catch_log_handler\n\n    def get_records(self, when):\n        \"\"\"\n        Get the logging records for one of the possible test phases.\n\n        :param str when:\n            Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :rtype: List[logging.LogRecord]\n        :return: the list of captured records at the given stage\n\n        .. versionadded:: 3.4\n        \"\"\"\n        handler = self._item.catch_log_handlers.get(when)\n        if handler:\n            return handler.records\n        else:\n            return []\n\n    @property\n    def text(self):\n        \"\"\"Returns the log text.\"\"\"\n        return self.handler.stream.getvalue()\n\n    @property\n    def records(self):\n        \"\"\"Returns the list of log records.\"\"\"\n        return self.handler.records\n\n    @property\n    def record_tuples(self):\n        \"\"\"Returns a list of a stripped down version of log records intended\n        for use in assertion comparison.\n\n        The format of the tuple is:\n\n            (logger_name, log_level, message)\n        \"\"\"\n        return [(r.name, r.levelno, r.getMessage()) for r in self.records]\n\n    @property\n    def messages(self):\n        \"\"\"Returns a list of format-interpolated log messages.\n\n        Unlike 'records', which contains the format string and parameters for interpolation, log messages in this list\n        are all interpolated.\n        Unlike 'text', which contains the output from the handler, log messages in this list are unadorned with\n        levels, timestamps, etc, making exact comparisons more reliable.\n\n        Note that traceback or stack info (from :func:`logging.exception` or the `exc_info` or `stack_info` arguments\n        to the logging functions) is not included, as this is added by the formatter in the handler.\n\n        .. versionadded:: 3.7\n        \"\"\"\n        return [r.getMessage() for r in self.records]\n\n    def clear(self):\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.reset()\n\n    def set_level(self, level, logger=None):\n        \"\"\"Sets the level for capturing of logs. The level will be restored to its previous value at the end of\n        the test.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n\n        .. versionchanged:: 3.4\n            The levels of the loggers changed by this function will be restored to their initial values at the\n            end of the test.\n        \"\"\"\n        logger_name = logger\n        logger = logging.getLogger(logger_name)\n        # save the original log-level to restore it during teardown\n        self._initial_log_levels.setdefault(logger_name, logger.level)\n        logger.setLevel(level)\n\n    @contextmanager\n    def at_level(self, level, logger=None):\n        \"\"\"Context manager that sets the level for capturing of logs. After the end of the 'with' statement the\n        level is restored to its original value.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n        \"\"\"\n        logger = logging.getLogger(logger)\n        orig_level = logger.level\n        logger.setLevel(level)\n        try:\n            yield\n        finally:\n            logger.setLevel(orig_level)\n\n\n@pytest.fixture\ndef caplog(request):\n    \"\"\"Access and control log capturing.\n\n    Captured logs are available through the following properties/methods::\n\n    * caplog.text            -> string containing formatted log output\n    * caplog.records         -> list of logging.LogRecord instances\n    * caplog.record_tuples   -> list of (logger_name, level, message) tuples\n    * caplog.clear()         -> clear captured records and formatted log output string\n    \"\"\"\n    result = LogCaptureFixture(request.node)\n    yield result\n    result._finalize()\n\n\ndef get_actual_log_level(config, *setting_names):\n    \"\"\"Return the actual logging level.\"\"\"\n\n    for setting_name in setting_names:\n        log_level = config.getoption(setting_name)\n        if log_level is None:\n            log_level = config.getini(setting_name)\n        if log_level:\n            break\n    else:\n        return\n\n    if isinstance(log_level, six.string_types):\n        log_level = log_level.upper()\n    try:\n        return int(getattr(logging, log_level, log_level))\n    except ValueError:\n        # Python logging does not recognise this as a logging level\n        raise pytest.UsageError(\n            \"'{}' is not recognized as a logging level name for \"\n            \"'{}'. Please consider passing the \"\n            \"logging level num instead.\".format(log_level, setting_name)\n        )\n\n\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n\n        if not fname.is_absolute():\n            fname = Path(self._config.rootdir, fname)\n\n        if not fname.parent.exists():\n            fname.parent.mkdir(exist_ok=True, parents=True)\n\n        self.log_file_handler = logging.FileHandler(\n            str(fname), mode=\"w\", encoding=\"UTF-8\"\n        )\n        self.log_file_handler.setFormatter(self.log_file_formatter)\n\n    def _log_cli_enabled(self):\n        \"\"\"Return True if log_cli should be considered enabled, either explicitly\n        or because --log-cli-level was given in the command-line.\n        \"\"\"\n        return self._config.getoption(\n            \"--log-cli-level\"\n        ) is not None or self._config.getini(\"log_cli\")\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_collection(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"collection\")\n\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for(self, item, when):\n        with self._runtest_for_main(item, when):\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for_main(self, item, when):\n        \"\"\"Implements the internals of pytest_runtest_xxx() hook.\"\"\"\n        with catching_logs(\n            LogCaptureHandler(), formatter=self.formatter, level=self.log_level\n        ) as log_handler:\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(when)\n\n            if item is None:\n                yield  # run the test\n                return\n\n            if not hasattr(item, \"catch_log_handlers\"):\n                item.catch_log_handlers = {}\n            item.catch_log_handlers[when] = log_handler\n            item.catch_log_handler = log_handler\n            try:\n                yield  # run test\n            finally:\n                if when == \"teardown\":\n                    del item.catch_log_handler\n                    del item.catch_log_handlers\n\n            if self.print_logs:\n                # Add a captured log section to the report.\n                log = log_handler.stream.getvalue().strip()\n                item.add_report_section(when, \"log\", log)\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        with self._runtest_for(item, \"setup\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_call(self, item):\n        with self._runtest_for(item, \"call\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        with self._runtest_for(item, \"teardown\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logstart(self):\n        if self.log_cli_handler:\n            self.log_cli_handler.reset()\n        with self._runtest_for(None, \"start\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logfinish(self):\n        with self._runtest_for(None, \"finish\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logreport(self):\n        with self._runtest_for(None, \"logreport\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionfinish(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionfinish\")\n            if self.log_file_handler is not None:\n                try:\n                    with catching_logs(\n                        self.log_file_handler, level=self.log_file_level\n                    ):\n                        yield\n                finally:\n                    # Close the FileHandler explicitly.\n                    # (logging.shutdown might have lost the weakref?!)\n                    self.log_file_handler.close()\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionstart(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionstart\")\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtestloop(self, session):\n        \"\"\"Runs all collected test items.\"\"\"\n        with self.live_logs_context():\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield  # run all the tests\n            else:\n                yield  # run all the tests\n\n\nclass _LiveLoggingStreamHandler(logging.StreamHandler):\n    \"\"\"\n    Custom StreamHandler used by the live logging feature: it will write a newline before the first log message\n    in each test.\n\n    During live logging we must also explicitly disable stdout/stderr capturing otherwise it will get captured\n    and won't appear in the terminal.\n    \"\"\"\n\n    def __init__(self, terminal_reporter, capture_manager):\n        \"\"\"\n        :param _pytest.terminal.TerminalReporter terminal_reporter:\n        :param _pytest.capture.CaptureManager capture_manager:\n        \"\"\"\n        logging.StreamHandler.__init__(self, stream=terminal_reporter)\n        self.capture_manager = capture_manager\n        self.reset()\n        self.set_when(None)\n        self._test_outcome_written = False\n\n    def reset(self):\n        \"\"\"Reset the handler; should be called before the start of each test\"\"\"\n        self._first_record_emitted = False\n\n    def set_when(self, when):\n        \"\"\"Prepares for the given test phase (setup/call/teardown)\"\"\"\n        self._when = when\n        self._section_name_shown = False\n        if when == \"start\":\n            self._test_outcome_written = False\n\n    def emit(self, record):\n        ctx_manager = (\n            self.capture_manager.global_and_fixture_disabled()\n            if self.capture_manager\n            else dummy_context_manager()\n        )\n        with ctx_manager:\n            if not self._first_record_emitted:\n                self.stream.write(\"\\n\")\n                self._first_record_emitted = True\n            elif self._when in (\"teardown\", \"finish\"):\n                if not self._test_outcome_written:\n                    self._test_outcome_written = True\n                    self.stream.write(\"\\n\")\n            if not self._section_name_shown and self._when:\n                self.stream.section(\"live log \" + self._when, sep=\"-\", bold=True)\n                self._section_name_shown = True\n            logging.StreamHandler.emit(self, record)", "\"\"\" Access and control log capturing. \"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-cli-date-format\",\n        dest=\"log_cli_date_format\",\n        default=None,\n        help=\"log date format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file\",\n        dest=\"log_file\",\n        default=None,\n        help=\"path to a file when logging will be written to.\",\n    )\n    add_option_ini(\n        \"--log-file-level\",\n        dest=\"log_file_level\",\n        default=None,\n        help=\"log file logging level.\",\n    )\n    add_option_ini(\n        \"--log-file-format\",\n        dest=\"log_file_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file-date-format\",\n        dest=\"log_file_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n\n\n@contextmanager\ndef catching_logs(handler, formatter=None, level=None):\n    \"\"\"Context manager that prepares the whole logging machinery properly.\"\"\"\n    root_logger = logging.getLogger()\n\n    if formatter is not None:\n        handler.setFormatter(formatter)\n    if level is not None:\n        handler.setLevel(level)\n\n    # Adding the same handler twice would confuse logging system.\n    # Just don't do that.\n    add_new_handler = handler not in root_logger.handlers\n\n    if add_new_handler:\n        root_logger.addHandler(handler)\n    if level is not None:\n        orig_level = root_logger.level\n        root_logger.setLevel(min(orig_level, level))\n    try:\n        yield handler\n    finally:\n        if level is not None:\n            root_logger.setLevel(orig_level)\n        if add_new_handler:\n            root_logger.removeHandler(handler)\n\n\nclass LogCaptureHandler(logging.StreamHandler):\n    \"\"\"A logging handler that stores log records and the log text.\"\"\"\n\n    def __init__(self):\n        \"\"\"Creates a new log handler.\"\"\"\n        logging.StreamHandler.__init__(self, py.io.TextIO())\n        self.records = []\n\n    def emit(self, record):\n        \"\"\"Keep the log records in a list in addition to the log text.\"\"\"\n        self.records.append(record)\n        logging.StreamHandler.emit(self, record)\n\n    def reset(self):\n        self.records = []\n        self.stream = py.io.TextIO()\n\n\nclass LogCaptureFixture(object):\n    \"\"\"Provides access and control of log capturing.\"\"\"\n\n    def __init__(self, item):\n        \"\"\"Creates a new funcarg.\"\"\"\n        self._item = item\n        # dict of log name -> log level\n        self._initial_log_levels = {}  # Dict[str, int]\n\n    def _finalize(self):\n        \"\"\"Finalizes the fixture.\n\n        This restores the log levels changed by :meth:`set_level`.\n        \"\"\"\n        # restore log levels\n        for logger_name, level in self._initial_log_levels.items():\n            logger = logging.getLogger(logger_name)\n            logger.setLevel(level)\n\n    @property\n    def handler(self):\n        \"\"\"\n        :rtype: LogCaptureHandler\n        \"\"\"\n        return self._item.catch_log_handler\n\n    def get_records(self, when):\n        \"\"\"\n        Get the logging records for one of the possible test phases.\n\n        :param str when:\n            Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :rtype: List[logging.LogRecord]\n        :return: the list of captured records at the given stage\n\n        .. versionadded:: 3.4\n        \"\"\"\n        handler = self._item.catch_log_handlers.get(when)\n        if handler:\n            return handler.records\n        else:\n            return []\n\n    @property\n    def text(self):\n        \"\"\"Returns the log text.\"\"\"\n        return self.handler.stream.getvalue()\n\n    @property\n    def records(self):\n        \"\"\"Returns the list of log records.\"\"\"\n        return self.handler.records\n\n    @property\n    def record_tuples(self):\n        \"\"\"Returns a list of a stripped down version of log records intended\n        for use in assertion comparison.\n\n        The format of the tuple is:\n\n            (logger_name, log_level, message)\n        \"\"\"\n        return [(r.name, r.levelno, r.getMessage()) for r in self.records]\n\n    @property\n    def messages(self):\n        \"\"\"Returns a list of format-interpolated log messages.\n\n        Unlike 'records', which contains the format string and parameters for interpolation, log messages in this list\n        are all interpolated.\n        Unlike 'text', which contains the output from the handler, log messages in this list are unadorned with\n        levels, timestamps, etc, making exact comparisons more reliable.\n\n        Note that traceback or stack info (from :func:`logging.exception` or the `exc_info` or `stack_info` arguments\n        to the logging functions) is not included, as this is added by the formatter in the handler.\n\n        .. versionadded:: 3.7\n        \"\"\"\n        return [r.getMessage() for r in self.records]\n\n    def clear(self):\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.reset()\n\n    def set_level(self, level, logger=None):\n        \"\"\"Sets the level for capturing of logs. The level will be restored to its previous value at the end of\n        the test.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n\n        .. versionchanged:: 3.4\n            The levels of the loggers changed by this function will be restored to their initial values at the\n            end of the test.\n        \"\"\"\n        logger_name = logger\n        logger = logging.getLogger(logger_name)\n        # save the original log-level to restore it during teardown\n        self._initial_log_levels.setdefault(logger_name, logger.level)\n        logger.setLevel(level)\n\n    @contextmanager\n    def at_level(self, level, logger=None):\n        \"\"\"Context manager that sets the level for capturing of logs. After the end of the 'with' statement the\n        level is restored to its original value.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n        \"\"\"\n        logger = logging.getLogger(logger)\n        orig_level = logger.level\n        logger.setLevel(level)\n        try:\n            yield\n        finally:\n            logger.setLevel(orig_level)\n\n\n@pytest.fixture\ndef caplog(request):\n    \"\"\"Access and control log capturing.\n\n    Captured logs are available through the following properties/methods::\n\n    * caplog.text            -> string containing formatted log output\n    * caplog.records         -> list of logging.LogRecord instances\n    * caplog.record_tuples   -> list of (logger_name, level, message) tuples\n    * caplog.clear()         -> clear captured records and formatted log output string\n    \"\"\"\n    result = LogCaptureFixture(request.node)\n    yield result\n    result._finalize()\n\n\ndef get_actual_log_level(config, *setting_names):\n    \"\"\"Return the actual logging level.\"\"\"\n\n    for setting_name in setting_names:\n        log_level = config.getoption(setting_name)\n        if log_level is None:\n            log_level = config.getini(setting_name)\n        if log_level:\n            break\n    else:\n        return\n\n    if isinstance(log_level, six.string_types):\n        log_level = log_level.upper()\n    try:\n        return int(getattr(logging, log_level, log_level))\n    except ValueError:\n        # Python logging does not recognise this as a logging level\n        raise pytest.UsageError(\n            \"'{}' is not recognized as a logging level name for \"\n            \"'{}'. Please consider passing the \"\n            \"logging level num instead.\".format(log_level, setting_name)\n        )\n\n\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n\n        if not fname.is_absolute():\n            fname = Path(self._config.rootdir, fname)\n\n        if not fname.parent.exists():\n            fname.parent.mkdir(exist_ok=True, parents=True)\n\n        self.log_file_handler = logging.FileHandler(\n            str(fname), mode=\"w\", encoding=\"UTF-8\"\n        )\n        self.log_file_handler.setFormatter(self.log_file_formatter)\n\n    def _log_cli_enabled(self):\n        \"\"\"Return True if log_cli should be considered enabled, either explicitly\n        or because --log-cli-level was given in the command-line.\n        \"\"\"\n        return self._config.getoption(\n            \"--log-cli-level\"\n        ) is not None or self._config.getini(\"log_cli\")\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_collection(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"collection\")\n\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for(self, item, when):\n        with self._runtest_for_main(item, when):\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for_main(self, item, when):\n        \"\"\"Implements the internals of pytest_runtest_xxx() hook.\"\"\"\n        with catching_logs(\n            LogCaptureHandler(), formatter=self.formatter, level=self.log_level\n        ) as log_handler:\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(when)\n\n            if item is None:\n                yield  # run the test\n                return\n\n            if not hasattr(item, \"catch_log_handlers\"):\n                item.catch_log_handlers = {}\n            item.catch_log_handlers[when] = log_handler\n            item.catch_log_handler = log_handler\n            try:\n                yield  # run test\n            finally:\n                if when == \"teardown\":\n                    del item.catch_log_handler\n                    del item.catch_log_handlers\n\n            if self.print_logs:\n                # Add a captured log section to the report.\n                log = log_handler.stream.getvalue().strip()\n                item.add_report_section(when, \"log\", log)\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        with self._runtest_for(item, \"setup\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_call(self, item):\n        with self._runtest_for(item, \"call\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        with self._runtest_for(item, \"teardown\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logstart(self):\n        if self.log_cli_handler:\n            self.log_cli_handler.reset()\n        with self._runtest_for(None, \"start\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logfinish(self):\n        with self._runtest_for(None, \"finish\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logreport(self):\n        with self._runtest_for(None, \"logreport\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionfinish(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionfinish\")\n            if self.log_file_handler is not None:\n                try:\n                    with catching_logs(\n                        self.log_file_handler, level=self.log_file_level\n                    ):\n                        yield\n                finally:\n                    # Close the FileHandler explicitly.\n                    # (logging.shutdown might have lost the weakref?!)\n                    self.log_file_handler.close()\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionstart(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionstart\")\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtestloop(self, session):\n        \"\"\"Runs all collected test items.\"\"\"\n        with self.live_logs_context():\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield  # run all the tests\n            else:\n                yield  # run all the tests\n\n\nclass _LiveLoggingStreamHandler(logging.StreamHandler):\n    \"\"\"\n    Custom StreamHandler used by the live logging feature: it will write a newline before the first log message\n    in each test.\n\n    During live logging we must also explicitly disable stdout/stderr capturing otherwise it will get captured\n    and won't appear in the terminal.\n    \"\"\"\n\n    def __init__(self, terminal_reporter, capture_manager):\n        \"\"\"\n        :param _pytest.terminal.TerminalReporter terminal_reporter:\n        :param _pytest.capture.CaptureManager capture_manager:\n        \"\"\"\n        logging.StreamHandler.__init__(self, stream=terminal_reporter)\n        self.capture_manager = capture_manager\n        self.reset()\n        self.set_when(None)\n        self._test_outcome_written = False\n\n    def reset(self):\n        \"\"\"Reset the handler; should be called before the start of each test\"\"\"\n        self._first_record_emitted = False\n\n    def set_when(self, when):\n        \"\"\"Prepares for the given test phase (setup/call/teardown)\"\"\"\n        self._when = when\n        self._section_name_shown = False\n        if when == \"start\":\n            self._test_outcome_written = False\n\n    def emit(self, record):\n        ctx_manager = (\n            self.capture_manager.global_and_fixture_disabled()\n            if self.capture_manager\n            else dummy_context_manager()\n        )\n        with ctx_manager:\n            if not self._first_record_emitted:\n                self.stream.write(\"\\n\")\n                self._first_record_emitted = True\n            elif self._when in (\"teardown\", \"finish\"):\n                if not self._test_outcome_written:\n                    self._test_outcome_written = True\n                    self.stream.write(\"\\n\")\n            if not self._section_name_shown and self._when:\n                self.stream.section(\"live log \" + self._when, sep=\"-\", bold=True)\n                self._section_name_shown = True\n            logging.StreamHandler.emit(self, record)", "\"\"\" Access and control log capturing. \"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-cli-date-format\",\n        dest=\"log_cli_date_format\",\n        default=None,\n        help=\"log date format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file\",\n        dest=\"log_file\",\n        default=None,\n        help=\"path to a file when logging will be written to.\",\n    )\n    add_option_ini(\n        \"--log-file-level\",\n        dest=\"log_file_level\",\n        default=None,\n        help=\"log file logging level.\",\n    )\n    add_option_ini(\n        \"--log-file-format\",\n        dest=\"log_file_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file-date-format\",\n        dest=\"log_file_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n\n\n@contextmanager\ndef catching_logs(handler, formatter=None, level=None):\n    \"\"\"Context manager that prepares the whole logging machinery properly.\"\"\"\n    root_logger = logging.getLogger()\n\n    if formatter is not None:\n        handler.setFormatter(formatter)\n    if level is not None:\n        handler.setLevel(level)\n\n    # Adding the same handler twice would confuse logging system.\n    # Just don't do that.\n    add_new_handler = handler not in root_logger.handlers\n\n    if add_new_handler:\n        root_logger.addHandler(handler)\n    if level is not None:\n        orig_level = root_logger.level\n        root_logger.setLevel(min(orig_level, level))\n    try:\n        yield handler\n    finally:\n        if level is not None:\n            root_logger.setLevel(orig_level)\n        if add_new_handler:\n            root_logger.removeHandler(handler)\n\n\nclass LogCaptureHandler(logging.StreamHandler):\n    \"\"\"A logging handler that stores log records and the log text.\"\"\"\n\n    def __init__(self):\n        \"\"\"Creates a new log handler.\"\"\"\n        logging.StreamHandler.__init__(self, py.io.TextIO())\n        self.records = []\n\n    def emit(self, record):\n        \"\"\"Keep the log records in a list in addition to the log text.\"\"\"\n        self.records.append(record)\n        logging.StreamHandler.emit(self, record)\n\n    def reset(self):\n        self.records = []\n        self.stream = py.io.TextIO()\n\n\nclass LogCaptureFixture(object):\n    \"\"\"Provides access and control of log capturing.\"\"\"\n\n    def __init__(self, item):\n        \"\"\"Creates a new funcarg.\"\"\"\n        self._item = item\n        # dict of log name -> log level\n        self._initial_log_levels = {}  # Dict[str, int]\n\n    def _finalize(self):\n        \"\"\"Finalizes the fixture.\n\n        This restores the log levels changed by :meth:`set_level`.\n        \"\"\"\n        # restore log levels\n        for logger_name, level in self._initial_log_levels.items():\n            logger = logging.getLogger(logger_name)\n            logger.setLevel(level)\n\n    @property\n    def handler(self):\n        \"\"\"\n        :rtype: LogCaptureHandler\n        \"\"\"\n        return self._item.catch_log_handler\n\n    def get_records(self, when):\n        \"\"\"\n        Get the logging records for one of the possible test phases.\n\n        :param str when:\n            Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :rtype: List[logging.LogRecord]\n        :return: the list of captured records at the given stage\n\n        .. versionadded:: 3.4\n        \"\"\"\n        handler = self._item.catch_log_handlers.get(when)\n        if handler:\n            return handler.records\n        else:\n            return []\n\n    @property\n    def text(self):\n        \"\"\"Returns the log text.\"\"\"\n        return self.handler.stream.getvalue()\n\n    @property\n    def records(self):\n        \"\"\"Returns the list of log records.\"\"\"\n        return self.handler.records\n\n    @property\n    def record_tuples(self):\n        \"\"\"Returns a list of a stripped down version of log records intended\n        for use in assertion comparison.\n\n        The format of the tuple is:\n\n            (logger_name, log_level, message)\n        \"\"\"\n        return [(r.name, r.levelno, r.getMessage()) for r in self.records]\n\n    @property\n    def messages(self):\n        \"\"\"Returns a list of format-interpolated log messages.\n\n        Unlike 'records', which contains the format string and parameters for interpolation, log messages in this list\n        are all interpolated.\n        Unlike 'text', which contains the output from the handler, log messages in this list are unadorned with\n        levels, timestamps, etc, making exact comparisons more reliable.\n\n        Note that traceback or stack info (from :func:`logging.exception` or the `exc_info` or `stack_info` arguments\n        to the logging functions) is not included, as this is added by the formatter in the handler.\n\n        .. versionadded:: 3.7\n        \"\"\"\n        return [r.getMessage() for r in self.records]\n\n    def clear(self):\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.reset()\n\n    def set_level(self, level, logger=None):\n        \"\"\"Sets the level for capturing of logs. The level will be restored to its previous value at the end of\n        the test.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n\n        .. versionchanged:: 3.4\n            The levels of the loggers changed by this function will be restored to their initial values at the\n            end of the test.\n        \"\"\"\n        logger_name = logger\n        logger = logging.getLogger(logger_name)\n        # save the original log-level to restore it during teardown\n        self._initial_log_levels.setdefault(logger_name, logger.level)\n        logger.setLevel(level)\n\n    @contextmanager\n    def at_level(self, level, logger=None):\n        \"\"\"Context manager that sets the level for capturing of logs. After the end of the 'with' statement the\n        level is restored to its original value.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n        \"\"\"\n        logger = logging.getLogger(logger)\n        orig_level = logger.level\n        logger.setLevel(level)\n        try:\n            yield\n        finally:\n            logger.setLevel(orig_level)\n\n\n@pytest.fixture\ndef caplog(request):\n    \"\"\"Access and control log capturing.\n\n    Captured logs are available through the following properties/methods::\n\n    * caplog.text            -> string containing formatted log output\n    * caplog.records         -> list of logging.LogRecord instances\n    * caplog.record_tuples   -> list of (logger_name, level, message) tuples\n    * caplog.clear()         -> clear captured records and formatted log output string\n    \"\"\"\n    result = LogCaptureFixture(request.node)\n    yield result\n    result._finalize()\n\n\ndef get_actual_log_level(config, *setting_names):\n    \"\"\"Return the actual logging level.\"\"\"\n\n    for setting_name in setting_names:\n        log_level = config.getoption(setting_name)\n        if log_level is None:\n            log_level = config.getini(setting_name)\n        if log_level:\n            break\n    else:\n        return\n\n    if isinstance(log_level, six.string_types):\n        log_level = log_level.upper()\n    try:\n        return int(getattr(logging, log_level, log_level))\n    except ValueError:\n        # Python logging does not recognise this as a logging level\n        raise pytest.UsageError(\n            \"'{}' is not recognized as a logging level name for \"\n            \"'{}'. Please consider passing the \"\n            \"logging level num instead.\".format(log_level, setting_name)\n        )\n\n\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n\n        if not fname.is_absolute():\n            fname = Path(self._config.rootdir, fname)\n\n        if not fname.parent.exists():\n            fname.parent.mkdir(exist_ok=True, parents=True)\n\n        self.log_file_handler = logging.FileHandler(\n            str(fname), mode=\"w\", encoding=\"UTF-8\"\n        )\n        self.log_file_handler.setFormatter(self.log_file_formatter)\n\n    def _log_cli_enabled(self):\n        \"\"\"Return True if log_cli should be considered enabled, either explicitly\n        or because --log-cli-level was given in the command-line.\n        \"\"\"\n        return self._config.getoption(\n            \"--log-cli-level\"\n        ) is not None or self._config.getini(\"log_cli\")\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_collection(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"collection\")\n\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for(self, item, when):\n        with self._runtest_for_main(item, when):\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for_main(self, item, when):\n        \"\"\"Implements the internals of pytest_runtest_xxx() hook.\"\"\"\n        with catching_logs(\n            LogCaptureHandler(), formatter=self.formatter, level=self.log_level\n        ) as log_handler:\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(when)\n\n            if item is None:\n                yield  # run the test\n                return\n\n            if not hasattr(item, \"catch_log_handlers\"):\n                item.catch_log_handlers = {}\n            item.catch_log_handlers[when] = log_handler\n            item.catch_log_handler = log_handler\n            try:\n                yield  # run test\n            finally:\n                if when == \"teardown\":\n                    del item.catch_log_handler\n                    del item.catch_log_handlers\n\n            if self.print_logs:\n                # Add a captured log section to the report.\n                log = log_handler.stream.getvalue().strip()\n                item.add_report_section(when, \"log\", log)\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        with self._runtest_for(item, \"setup\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_call(self, item):\n        with self._runtest_for(item, \"call\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        with self._runtest_for(item, \"teardown\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logstart(self):\n        if self.log_cli_handler:\n            self.log_cli_handler.reset()\n        with self._runtest_for(None, \"start\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logfinish(self):\n        with self._runtest_for(None, \"finish\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logreport(self):\n        with self._runtest_for(None, \"logreport\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionfinish(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionfinish\")\n            if self.log_file_handler is not None:\n                try:\n                    with catching_logs(\n                        self.log_file_handler, level=self.log_file_level\n                    ):\n                        yield\n                finally:\n                    # Close the FileHandler explicitly.\n                    # (logging.shutdown might have lost the weakref?!)\n                    self.log_file_handler.close()\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionstart(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionstart\")\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtestloop(self, session):\n        \"\"\"Runs all collected test items.\"\"\"\n        with self.live_logs_context():\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield  # run all the tests\n            else:\n                yield  # run all the tests\n\n\nclass _LiveLoggingStreamHandler(logging.StreamHandler):\n    \"\"\"\n    Custom StreamHandler used by the live logging feature: it will write a newline before the first log message\n    in each test.\n\n    During live logging we must also explicitly disable stdout/stderr capturing otherwise it will get captured\n    and won't appear in the terminal.\n    \"\"\"\n\n    def __init__(self, terminal_reporter, capture_manager):\n        \"\"\"\n        :param _pytest.terminal.TerminalReporter terminal_reporter:\n        :param _pytest.capture.CaptureManager capture_manager:\n        \"\"\"\n        logging.StreamHandler.__init__(self, stream=terminal_reporter)\n        self.capture_manager = capture_manager\n        self.reset()\n        self.set_when(None)\n        self._test_outcome_written = False\n\n    def reset(self):\n        \"\"\"Reset the handler; should be called before the start of each test\"\"\"\n        self._first_record_emitted = False\n\n    def set_when(self, when):\n        \"\"\"Prepares for the given test phase (setup/call/teardown)\"\"\"\n        self._when = when\n        self._section_name_shown = False\n        if when == \"start\":\n            self._test_outcome_written = False\n\n    def emit(self, record):\n        ctx_manager = (\n            self.capture_manager.global_and_fixture_disabled()\n            if self.capture_manager\n            else dummy_context_manager()\n        )\n        with ctx_manager:\n            if not self._first_record_emitted:\n                self.stream.write(\"\\n\")\n                self._first_record_emitted = True\n            elif self._when in (\"teardown\", \"finish\"):\n                if not self._test_outcome_written:\n                    self._test_outcome_written = True\n                    self.stream.write(\"\\n\")\n            if not self._section_name_shown and self._when:\n                self.stream.section(\"live log \" + self._when, sep=\"-\", bold=True)\n                self._section_name_shown = True\n            logging.StreamHandler.emit(self, record)", "\"\"\" Access and control log capturing. \"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-cli-date-format\",\n        dest=\"log_cli_date_format\",\n        default=None,\n        help=\"log date format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file\",\n        dest=\"log_file\",\n        default=None,\n        help=\"path to a file when logging will be written to.\",\n    )\n    add_option_ini(\n        \"--log-file-level\",\n        dest=\"log_file_level\",\n        default=None,\n        help=\"log file logging level.\",\n    )\n    add_option_ini(\n        \"--log-file-format\",\n        dest=\"log_file_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file-date-format\",\n        dest=\"log_file_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n\n\n@contextmanager\ndef catching_logs(handler, formatter=None, level=None):\n    \"\"\"Context manager that prepares the whole logging machinery properly.\"\"\"\n    root_logger = logging.getLogger()\n\n    if formatter is not None:\n        handler.setFormatter(formatter)\n    if level is not None:\n        handler.setLevel(level)\n\n    # Adding the same handler twice would confuse logging system.\n    # Just don't do that.\n    add_new_handler = handler not in root_logger.handlers\n\n    if add_new_handler:\n        root_logger.addHandler(handler)\n    if level is not None:\n        orig_level = root_logger.level\n        root_logger.setLevel(min(orig_level, level))\n    try:\n        yield handler\n    finally:\n        if level is not None:\n            root_logger.setLevel(orig_level)\n        if add_new_handler:\n            root_logger.removeHandler(handler)\n\n\nclass LogCaptureHandler(logging.StreamHandler):\n    \"\"\"A logging handler that stores log records and the log text.\"\"\"\n\n    def __init__(self):\n        \"\"\"Creates a new log handler.\"\"\"\n        logging.StreamHandler.__init__(self, py.io.TextIO())\n        self.records = []\n\n    def emit(self, record):\n        \"\"\"Keep the log records in a list in addition to the log text.\"\"\"\n        self.records.append(record)\n        logging.StreamHandler.emit(self, record)\n\n    def reset(self):\n        self.records = []\n        self.stream = py.io.TextIO()\n\n\nclass LogCaptureFixture(object):\n    \"\"\"Provides access and control of log capturing.\"\"\"\n\n    def __init__(self, item):\n        \"\"\"Creates a new funcarg.\"\"\"\n        self._item = item\n        # dict of log name -> log level\n        self._initial_log_levels = {}  # Dict[str, int]\n\n    def _finalize(self):\n        \"\"\"Finalizes the fixture.\n\n        This restores the log levels changed by :meth:`set_level`.\n        \"\"\"\n        # restore log levels\n        for logger_name, level in self._initial_log_levels.items():\n            logger = logging.getLogger(logger_name)\n            logger.setLevel(level)\n\n    @property\n    def handler(self):\n        \"\"\"\n        :rtype: LogCaptureHandler\n        \"\"\"\n        return self._item.catch_log_handler\n\n    def get_records(self, when):\n        \"\"\"\n        Get the logging records for one of the possible test phases.\n\n        :param str when:\n            Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :rtype: List[logging.LogRecord]\n        :return: the list of captured records at the given stage\n\n        .. versionadded:: 3.4\n        \"\"\"\n        handler = self._item.catch_log_handlers.get(when)\n        if handler:\n            return handler.records\n        else:\n            return []\n\n    @property\n    def text(self):\n        \"\"\"Returns the log text.\"\"\"\n        return self.handler.stream.getvalue()\n\n    @property\n    def records(self):\n        \"\"\"Returns the list of log records.\"\"\"\n        return self.handler.records\n\n    @property\n    def record_tuples(self):\n        \"\"\"Returns a list of a stripped down version of log records intended\n        for use in assertion comparison.\n\n        The format of the tuple is:\n\n            (logger_name, log_level, message)\n        \"\"\"\n        return [(r.name, r.levelno, r.getMessage()) for r in self.records]\n\n    @property\n    def messages(self):\n        \"\"\"Returns a list of format-interpolated log messages.\n\n        Unlike 'records', which contains the format string and parameters for interpolation, log messages in this list\n        are all interpolated.\n        Unlike 'text', which contains the output from the handler, log messages in this list are unadorned with\n        levels, timestamps, etc, making exact comparisons more reliable.\n\n        Note that traceback or stack info (from :func:`logging.exception` or the `exc_info` or `stack_info` arguments\n        to the logging functions) is not included, as this is added by the formatter in the handler.\n\n        .. versionadded:: 3.7\n        \"\"\"\n        return [r.getMessage() for r in self.records]\n\n    def clear(self):\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.reset()\n\n    def set_level(self, level, logger=None):\n        \"\"\"Sets the level for capturing of logs. The level will be restored to its previous value at the end of\n        the test.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n\n        .. versionchanged:: 3.4\n            The levels of the loggers changed by this function will be restored to their initial values at the\n            end of the test.\n        \"\"\"\n        logger_name = logger\n        logger = logging.getLogger(logger_name)\n        # save the original log-level to restore it during teardown\n        self._initial_log_levels.setdefault(logger_name, logger.level)\n        logger.setLevel(level)\n\n    @contextmanager\n    def at_level(self, level, logger=None):\n        \"\"\"Context manager that sets the level for capturing of logs. After the end of the 'with' statement the\n        level is restored to its original value.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n        \"\"\"\n        logger = logging.getLogger(logger)\n        orig_level = logger.level\n        logger.setLevel(level)\n        try:\n            yield\n        finally:\n            logger.setLevel(orig_level)\n\n\n@pytest.fixture\ndef caplog(request):\n    \"\"\"Access and control log capturing.\n\n    Captured logs are available through the following properties/methods::\n\n    * caplog.text            -> string containing formatted log output\n    * caplog.records         -> list of logging.LogRecord instances\n    * caplog.record_tuples   -> list of (logger_name, level, message) tuples\n    * caplog.clear()         -> clear captured records and formatted log output string\n    \"\"\"\n    result = LogCaptureFixture(request.node)\n    yield result\n    result._finalize()\n\n\ndef get_actual_log_level(config, *setting_names):\n    \"\"\"Return the actual logging level.\"\"\"\n\n    for setting_name in setting_names:\n        log_level = config.getoption(setting_name)\n        if log_level is None:\n            log_level = config.getini(setting_name)\n        if log_level:\n            break\n    else:\n        return\n\n    if isinstance(log_level, six.string_types):\n        log_level = log_level.upper()\n    try:\n        return int(getattr(logging, log_level, log_level))\n    except ValueError:\n        # Python logging does not recognise this as a logging level\n        raise pytest.UsageError(\n            \"'{}' is not recognized as a logging level name for \"\n            \"'{}'. Please consider passing the \"\n            \"logging level num instead.\".format(log_level, setting_name)\n        )\n\n\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n\n        if not fname.is_absolute():\n            fname = Path(self._config.rootdir, fname)\n\n        if not fname.parent.exists():\n            fname.parent.mkdir(exist_ok=True, parents=True)\n\n        self.log_file_handler = logging.FileHandler(\n            str(fname), mode=\"w\", encoding=\"UTF-8\"\n        )\n        self.log_file_handler.setFormatter(self.log_file_formatter)\n\n    def _log_cli_enabled(self):\n        \"\"\"Return True if log_cli should be considered enabled, either explicitly\n        or because --log-cli-level was given in the command-line.\n        \"\"\"\n        return self._config.getoption(\n            \"--log-cli-level\"\n        ) is not None or self._config.getini(\"log_cli\")\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_collection(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"collection\")\n\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for(self, item, when):\n        with self._runtest_for_main(item, when):\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for_main(self, item, when):\n        \"\"\"Implements the internals of pytest_runtest_xxx() hook.\"\"\"\n        with catching_logs(\n            LogCaptureHandler(), formatter=self.formatter, level=self.log_level\n        ) as log_handler:\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(when)\n\n            if item is None:\n                yield  # run the test\n                return\n\n            if not hasattr(item, \"catch_log_handlers\"):\n                item.catch_log_handlers = {}\n            item.catch_log_handlers[when] = log_handler\n            item.catch_log_handler = log_handler\n            try:\n                yield  # run test\n            finally:\n                if when == \"teardown\":\n                    del item.catch_log_handler\n                    del item.catch_log_handlers\n\n            if self.print_logs:\n                # Add a captured log section to the report.\n                log = log_handler.stream.getvalue().strip()\n                item.add_report_section(when, \"log\", log)\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        with self._runtest_for(item, \"setup\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_call(self, item):\n        with self._runtest_for(item, \"call\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        with self._runtest_for(item, \"teardown\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logstart(self):\n        if self.log_cli_handler:\n            self.log_cli_handler.reset()\n        with self._runtest_for(None, \"start\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logfinish(self):\n        with self._runtest_for(None, \"finish\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logreport(self):\n        with self._runtest_for(None, \"logreport\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionfinish(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionfinish\")\n            if self.log_file_handler is not None:\n                try:\n                    with catching_logs(\n                        self.log_file_handler, level=self.log_file_level\n                    ):\n                        yield\n                finally:\n                    # Close the FileHandler explicitly.\n                    # (logging.shutdown might have lost the weakref?!)\n                    self.log_file_handler.close()\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionstart(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionstart\")\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtestloop(self, session):\n        \"\"\"Runs all collected test items.\"\"\"\n        with self.live_logs_context():\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield  # run all the tests\n            else:\n                yield  # run all the tests\n\n\nclass _LiveLoggingStreamHandler(logging.StreamHandler):\n    \"\"\"\n    Custom StreamHandler used by the live logging feature: it will write a newline before the first log message\n    in each test.\n\n    During live logging we must also explicitly disable stdout/stderr capturing otherwise it will get captured\n    and won't appear in the terminal.\n    \"\"\"\n\n    def __init__(self, terminal_reporter, capture_manager):\n        \"\"\"\n        :param _pytest.terminal.TerminalReporter terminal_reporter:\n        :param _pytest.capture.CaptureManager capture_manager:\n        \"\"\"\n        logging.StreamHandler.__init__(self, stream=terminal_reporter)\n        self.capture_manager = capture_manager\n        self.reset()\n        self.set_when(None)\n        self._test_outcome_written = False\n\n    def reset(self):\n        \"\"\"Reset the handler; should be called before the start of each test\"\"\"\n        self._first_record_emitted = False\n\n    def set_when(self, when):\n        \"\"\"Prepares for the given test phase (setup/call/teardown)\"\"\"\n        self._when = when\n        self._section_name_shown = False\n        if when == \"start\":\n            self._test_outcome_written = False\n\n    def emit(self, record):\n        ctx_manager = (\n            self.capture_manager.global_and_fixture_disabled()\n            if self.capture_manager\n            else dummy_context_manager()\n        )\n        with ctx_manager:\n            if not self._first_record_emitted:\n                self.stream.write(\"\\n\")\n                self._first_record_emitted = True\n            elif self._when in (\"teardown\", \"finish\"):\n                if not self._test_outcome_written:\n                    self._test_outcome_written = True\n                    self.stream.write(\"\\n\")\n            if not self._section_name_shown and self._when:\n                self.stream.section(\"live log \" + self._when, sep=\"-\", bold=True)\n                self._section_name_shown = True\n            logging.StreamHandler.emit(self, record)", "\"\"\" Access and control log capturing. \"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-cli-date-format\",\n        dest=\"log_cli_date_format\",\n        default=None,\n        help=\"log date format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file\",\n        dest=\"log_file\",\n        default=None,\n        help=\"path to a file when logging will be written to.\",\n    )\n    add_option_ini(\n        \"--log-file-level\",\n        dest=\"log_file_level\",\n        default=None,\n        help=\"log file logging level.\",\n    )\n    add_option_ini(\n        \"--log-file-format\",\n        dest=\"log_file_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file-date-format\",\n        dest=\"log_file_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n\n\n@contextmanager\ndef catching_logs(handler, formatter=None, level=None):\n    \"\"\"Context manager that prepares the whole logging machinery properly.\"\"\"\n    root_logger = logging.getLogger()\n\n    if formatter is not None:\n        handler.setFormatter(formatter)\n    if level is not None:\n        handler.setLevel(level)\n\n    # Adding the same handler twice would confuse logging system.\n    # Just don't do that.\n    add_new_handler = handler not in root_logger.handlers\n\n    if add_new_handler:\n        root_logger.addHandler(handler)\n    if level is not None:\n        orig_level = root_logger.level\n        root_logger.setLevel(min(orig_level, level))\n    try:\n        yield handler\n    finally:\n        if level is not None:\n            root_logger.setLevel(orig_level)\n        if add_new_handler:\n            root_logger.removeHandler(handler)\n\n\nclass LogCaptureHandler(logging.StreamHandler):\n    \"\"\"A logging handler that stores log records and the log text.\"\"\"\n\n    def __init__(self):\n        \"\"\"Creates a new log handler.\"\"\"\n        logging.StreamHandler.__init__(self, py.io.TextIO())\n        self.records = []\n\n    def emit(self, record):\n        \"\"\"Keep the log records in a list in addition to the log text.\"\"\"\n        self.records.append(record)\n        logging.StreamHandler.emit(self, record)\n\n    def reset(self):\n        self.records = []\n        self.stream = py.io.TextIO()\n\n\nclass LogCaptureFixture(object):\n    \"\"\"Provides access and control of log capturing.\"\"\"\n\n    def __init__(self, item):\n        \"\"\"Creates a new funcarg.\"\"\"\n        self._item = item\n        # dict of log name -> log level\n        self._initial_log_levels = {}  # Dict[str, int]\n\n    def _finalize(self):\n        \"\"\"Finalizes the fixture.\n\n        This restores the log levels changed by :meth:`set_level`.\n        \"\"\"\n        # restore log levels\n        for logger_name, level in self._initial_log_levels.items():\n            logger = logging.getLogger(logger_name)\n            logger.setLevel(level)\n\n    @property\n    def handler(self):\n        \"\"\"\n        :rtype: LogCaptureHandler\n        \"\"\"\n        return self._item.catch_log_handler\n\n    def get_records(self, when):\n        \"\"\"\n        Get the logging records for one of the possible test phases.\n\n        :param str when:\n            Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :rtype: List[logging.LogRecord]\n        :return: the list of captured records at the given stage\n\n        .. versionadded:: 3.4\n        \"\"\"\n        handler = self._item.catch_log_handlers.get(when)\n        if handler:\n            return handler.records\n        else:\n            return []\n\n    @property\n    def text(self):\n        \"\"\"Returns the log text.\"\"\"\n        return self.handler.stream.getvalue()\n\n    @property\n    def records(self):\n        \"\"\"Returns the list of log records.\"\"\"\n        return self.handler.records\n\n    @property\n    def record_tuples(self):\n        \"\"\"Returns a list of a stripped down version of log records intended\n        for use in assertion comparison.\n\n        The format of the tuple is:\n\n            (logger_name, log_level, message)\n        \"\"\"\n        return [(r.name, r.levelno, r.getMessage()) for r in self.records]\n\n    @property\n    def messages(self):\n        \"\"\"Returns a list of format-interpolated log messages.\n\n        Unlike 'records', which contains the format string and parameters for interpolation, log messages in this list\n        are all interpolated.\n        Unlike 'text', which contains the output from the handler, log messages in this list are unadorned with\n        levels, timestamps, etc, making exact comparisons more reliable.\n\n        Note that traceback or stack info (from :func:`logging.exception` or the `exc_info` or `stack_info` arguments\n        to the logging functions) is not included, as this is added by the formatter in the handler.\n\n        .. versionadded:: 3.7\n        \"\"\"\n        return [r.getMessage() for r in self.records]\n\n    def clear(self):\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.reset()\n\n    def set_level(self, level, logger=None):\n        \"\"\"Sets the level for capturing of logs. The level will be restored to its previous value at the end of\n        the test.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n\n        .. versionchanged:: 3.4\n            The levels of the loggers changed by this function will be restored to their initial values at the\n            end of the test.\n        \"\"\"\n        logger_name = logger\n        logger = logging.getLogger(logger_name)\n        # save the original log-level to restore it during teardown\n        self._initial_log_levels.setdefault(logger_name, logger.level)\n        logger.setLevel(level)\n\n    @contextmanager\n    def at_level(self, level, logger=None):\n        \"\"\"Context manager that sets the level for capturing of logs. After the end of the 'with' statement the\n        level is restored to its original value.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n        \"\"\"\n        logger = logging.getLogger(logger)\n        orig_level = logger.level\n        logger.setLevel(level)\n        try:\n            yield\n        finally:\n            logger.setLevel(orig_level)\n\n\n@pytest.fixture\ndef caplog(request):\n    \"\"\"Access and control log capturing.\n\n    Captured logs are available through the following properties/methods::\n\n    * caplog.text            -> string containing formatted log output\n    * caplog.records         -> list of logging.LogRecord instances\n    * caplog.record_tuples   -> list of (logger_name, level, message) tuples\n    * caplog.clear()         -> clear captured records and formatted log output string\n    \"\"\"\n    result = LogCaptureFixture(request.node)\n    yield result\n    result._finalize()\n\n\ndef get_actual_log_level(config, *setting_names):\n    \"\"\"Return the actual logging level.\"\"\"\n\n    for setting_name in setting_names:\n        log_level = config.getoption(setting_name)\n        if log_level is None:\n            log_level = config.getini(setting_name)\n        if log_level:\n            break\n    else:\n        return\n\n    if isinstance(log_level, six.string_types):\n        log_level = log_level.upper()\n    try:\n        return int(getattr(logging, log_level, log_level))\n    except ValueError:\n        # Python logging does not recognise this as a logging level\n        raise pytest.UsageError(\n            \"'{}' is not recognized as a logging level name for \"\n            \"'{}'. Please consider passing the \"\n            \"logging level num instead.\".format(log_level, setting_name)\n        )\n\n\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n\n        if not fname.is_absolute():\n            fname = Path(self._config.rootdir, fname)\n\n        if not fname.parent.exists():\n            fname.parent.mkdir(exist_ok=True, parents=True)\n\n        self.log_file_handler = logging.FileHandler(\n            str(fname), mode=\"w\", encoding=\"UTF-8\"\n        )\n        self.log_file_handler.setFormatter(self.log_file_formatter)\n\n    def _log_cli_enabled(self):\n        \"\"\"Return True if log_cli should be considered enabled, either explicitly\n        or because --log-cli-level was given in the command-line.\n        \"\"\"\n        return self._config.getoption(\n            \"--log-cli-level\"\n        ) is not None or self._config.getini(\"log_cli\")\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_collection(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"collection\")\n\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for(self, item, when):\n        with self._runtest_for_main(item, when):\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for_main(self, item, when):\n        \"\"\"Implements the internals of pytest_runtest_xxx() hook.\"\"\"\n        with catching_logs(\n            LogCaptureHandler(), formatter=self.formatter, level=self.log_level\n        ) as log_handler:\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(when)\n\n            if item is None:\n                yield  # run the test\n                return\n\n            if not hasattr(item, \"catch_log_handlers\"):\n                item.catch_log_handlers = {}\n            item.catch_log_handlers[when] = log_handler\n            item.catch_log_handler = log_handler\n            try:\n                yield  # run test\n            finally:\n                if when == \"teardown\":\n                    del item.catch_log_handler\n                    del item.catch_log_handlers\n\n            if self.print_logs:\n                # Add a captured log section to the report.\n                log = log_handler.stream.getvalue().strip()\n                item.add_report_section(when, \"log\", log)\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        with self._runtest_for(item, \"setup\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_call(self, item):\n        with self._runtest_for(item, \"call\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        with self._runtest_for(item, \"teardown\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logstart(self):\n        if self.log_cli_handler:\n            self.log_cli_handler.reset()\n        with self._runtest_for(None, \"start\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logfinish(self):\n        with self._runtest_for(None, \"finish\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logreport(self):\n        with self._runtest_for(None, \"logreport\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionfinish(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionfinish\")\n            if self.log_file_handler is not None:\n                try:\n                    with catching_logs(\n                        self.log_file_handler, level=self.log_file_level\n                    ):\n                        yield\n                finally:\n                    # Close the FileHandler explicitly.\n                    # (logging.shutdown might have lost the weakref?!)\n                    self.log_file_handler.close()\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionstart(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionstart\")\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtestloop(self, session):\n        \"\"\"Runs all collected test items.\"\"\"\n        with self.live_logs_context():\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield  # run all the tests\n            else:\n                yield  # run all the tests\n\n\nclass _LiveLoggingStreamHandler(logging.StreamHandler):\n    \"\"\"\n    Custom StreamHandler used by the live logging feature: it will write a newline before the first log message\n    in each test.\n\n    During live logging we must also explicitly disable stdout/stderr capturing otherwise it will get captured\n    and won't appear in the terminal.\n    \"\"\"\n\n    def __init__(self, terminal_reporter, capture_manager):\n        \"\"\"\n        :param _pytest.terminal.TerminalReporter terminal_reporter:\n        :param _pytest.capture.CaptureManager capture_manager:\n        \"\"\"\n        logging.StreamHandler.__init__(self, stream=terminal_reporter)\n        self.capture_manager = capture_manager\n        self.reset()\n        self.set_when(None)\n        self._test_outcome_written = False\n\n    def reset(self):\n        \"\"\"Reset the handler; should be called before the start of each test\"\"\"\n        self._first_record_emitted = False\n\n    def set_when(self, when):\n        \"\"\"Prepares for the given test phase (setup/call/teardown)\"\"\"\n        self._when = when\n        self._section_name_shown = False\n        if when == \"start\":\n            self._test_outcome_written = False\n\n    def emit(self, record):\n        ctx_manager = (\n            self.capture_manager.global_and_fixture_disabled()\n            if self.capture_manager\n            else dummy_context_manager()\n        )\n        with ctx_manager:\n            if not self._first_record_emitted:\n                self.stream.write(\"\\n\")\n                self._first_record_emitted = True\n            elif self._when in (\"teardown\", \"finish\"):\n                if not self._test_outcome_written:\n                    self._test_outcome_written = True\n                    self.stream.write(\"\\n\")\n            if not self._section_name_shown and self._when:\n                self.stream.section(\"live log \" + self._when, sep=\"-\", bold=True)\n                self._section_name_shown = True\n            logging.StreamHandler.emit(self, record)", "\"\"\" Access and control log capturing. \"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-cli-date-format\",\n        dest=\"log_cli_date_format\",\n        default=None,\n        help=\"log date format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file\",\n        dest=\"log_file\",\n        default=None,\n        help=\"path to a file when logging will be written to.\",\n    )\n    add_option_ini(\n        \"--log-file-level\",\n        dest=\"log_file_level\",\n        default=None,\n        help=\"log file logging level.\",\n    )\n    add_option_ini(\n        \"--log-file-format\",\n        dest=\"log_file_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file-date-format\",\n        dest=\"log_file_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n\n\n@contextmanager\ndef catching_logs(handler, formatter=None, level=None):\n    \"\"\"Context manager that prepares the whole logging machinery properly.\"\"\"\n    root_logger = logging.getLogger()\n\n    if formatter is not None:\n        handler.setFormatter(formatter)\n    if level is not None:\n        handler.setLevel(level)\n\n    # Adding the same handler twice would confuse logging system.\n    # Just don't do that.\n    add_new_handler = handler not in root_logger.handlers\n\n    if add_new_handler:\n        root_logger.addHandler(handler)\n    if level is not None:\n        orig_level = root_logger.level\n        root_logger.setLevel(min(orig_level, level))\n    try:\n        yield handler\n    finally:\n        if level is not None:\n            root_logger.setLevel(orig_level)\n        if add_new_handler:\n            root_logger.removeHandler(handler)\n\n\nclass LogCaptureHandler(logging.StreamHandler):\n    \"\"\"A logging handler that stores log records and the log text.\"\"\"\n\n    def __init__(self):\n        \"\"\"Creates a new log handler.\"\"\"\n        logging.StreamHandler.__init__(self, py.io.TextIO())\n        self.records = []\n\n    def emit(self, record):\n        \"\"\"Keep the log records in a list in addition to the log text.\"\"\"\n        self.records.append(record)\n        logging.StreamHandler.emit(self, record)\n\n    def reset(self):\n        self.records = []\n        self.stream = py.io.TextIO()\n\n\nclass LogCaptureFixture(object):\n    \"\"\"Provides access and control of log capturing.\"\"\"\n\n    def __init__(self, item):\n        \"\"\"Creates a new funcarg.\"\"\"\n        self._item = item\n        # dict of log name -> log level\n        self._initial_log_levels = {}  # Dict[str, int]\n\n    def _finalize(self):\n        \"\"\"Finalizes the fixture.\n\n        This restores the log levels changed by :meth:`set_level`.\n        \"\"\"\n        # restore log levels\n        for logger_name, level in self._initial_log_levels.items():\n            logger = logging.getLogger(logger_name)\n            logger.setLevel(level)\n\n    @property\n    def handler(self):\n        \"\"\"\n        :rtype: LogCaptureHandler\n        \"\"\"\n        return self._item.catch_log_handler\n\n    def get_records(self, when):\n        \"\"\"\n        Get the logging records for one of the possible test phases.\n\n        :param str when:\n            Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :rtype: List[logging.LogRecord]\n        :return: the list of captured records at the given stage\n\n        .. versionadded:: 3.4\n        \"\"\"\n        handler = self._item.catch_log_handlers.get(when)\n        if handler:\n            return handler.records\n        else:\n            return []\n\n    @property\n    def text(self):\n        \"\"\"Returns the log text.\"\"\"\n        return self.handler.stream.getvalue()\n\n    @property\n    def records(self):\n        \"\"\"Returns the list of log records.\"\"\"\n        return self.handler.records\n\n    @property\n    def record_tuples(self):\n        \"\"\"Returns a list of a stripped down version of log records intended\n        for use in assertion comparison.\n\n        The format of the tuple is:\n\n            (logger_name, log_level, message)\n        \"\"\"\n        return [(r.name, r.levelno, r.getMessage()) for r in self.records]\n\n    @property\n    def messages(self):\n        \"\"\"Returns a list of format-interpolated log messages.\n\n        Unlike 'records', which contains the format string and parameters for interpolation, log messages in this list\n        are all interpolated.\n        Unlike 'text', which contains the output from the handler, log messages in this list are unadorned with\n        levels, timestamps, etc, making exact comparisons more reliable.\n\n        Note that traceback or stack info (from :func:`logging.exception` or the `exc_info` or `stack_info` arguments\n        to the logging functions) is not included, as this is added by the formatter in the handler.\n\n        .. versionadded:: 3.7\n        \"\"\"\n        return [r.getMessage() for r in self.records]\n\n    def clear(self):\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.reset()\n\n    def set_level(self, level, logger=None):\n        \"\"\"Sets the level for capturing of logs. The level will be restored to its previous value at the end of\n        the test.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n\n        .. versionchanged:: 3.4\n            The levels of the loggers changed by this function will be restored to their initial values at the\n            end of the test.\n        \"\"\"\n        logger_name = logger\n        logger = logging.getLogger(logger_name)\n        # save the original log-level to restore it during teardown\n        self._initial_log_levels.setdefault(logger_name, logger.level)\n        logger.setLevel(level)\n\n    @contextmanager\n    def at_level(self, level, logger=None):\n        \"\"\"Context manager that sets the level for capturing of logs. After the end of the 'with' statement the\n        level is restored to its original value.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n        \"\"\"\n        logger = logging.getLogger(logger)\n        orig_level = logger.level\n        logger.setLevel(level)\n        try:\n            yield\n        finally:\n            logger.setLevel(orig_level)\n\n\n@pytest.fixture\ndef caplog(request):\n    \"\"\"Access and control log capturing.\n\n    Captured logs are available through the following properties/methods::\n\n    * caplog.text            -> string containing formatted log output\n    * caplog.records         -> list of logging.LogRecord instances\n    * caplog.record_tuples   -> list of (logger_name, level, message) tuples\n    * caplog.clear()         -> clear captured records and formatted log output string\n    \"\"\"\n    result = LogCaptureFixture(request.node)\n    yield result\n    result._finalize()\n\n\ndef get_actual_log_level(config, *setting_names):\n    \"\"\"Return the actual logging level.\"\"\"\n\n    for setting_name in setting_names:\n        log_level = config.getoption(setting_name)\n        if log_level is None:\n            log_level = config.getini(setting_name)\n        if log_level:\n            break\n    else:\n        return\n\n    if isinstance(log_level, six.string_types):\n        log_level = log_level.upper()\n    try:\n        return int(getattr(logging, log_level, log_level))\n    except ValueError:\n        # Python logging does not recognise this as a logging level\n        raise pytest.UsageError(\n            \"'{}' is not recognized as a logging level name for \"\n            \"'{}'. Please consider passing the \"\n            \"logging level num instead.\".format(log_level, setting_name)\n        )\n\n\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n\n        if not fname.is_absolute():\n            fname = Path(self._config.rootdir, fname)\n\n        if not fname.parent.exists():\n            fname.parent.mkdir(exist_ok=True, parents=True)\n\n        self.log_file_handler = logging.FileHandler(\n            str(fname), mode=\"w\", encoding=\"UTF-8\"\n        )\n        self.log_file_handler.setFormatter(self.log_file_formatter)\n\n    def _log_cli_enabled(self):\n        \"\"\"Return True if log_cli should be considered enabled, either explicitly\n        or because --log-cli-level was given in the command-line.\n        \"\"\"\n        return self._config.getoption(\n            \"--log-cli-level\"\n        ) is not None or self._config.getini(\"log_cli\")\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_collection(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"collection\")\n\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for(self, item, when):\n        with self._runtest_for_main(item, when):\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for_main(self, item, when):\n        \"\"\"Implements the internals of pytest_runtest_xxx() hook.\"\"\"\n        with catching_logs(\n            LogCaptureHandler(), formatter=self.formatter, level=self.log_level\n        ) as log_handler:\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(when)\n\n            if item is None:\n                yield  # run the test\n                return\n\n            if not hasattr(item, \"catch_log_handlers\"):\n                item.catch_log_handlers = {}\n            item.catch_log_handlers[when] = log_handler\n            item.catch_log_handler = log_handler\n            try:\n                yield  # run test\n            finally:\n                if when == \"teardown\":\n                    del item.catch_log_handler\n                    del item.catch_log_handlers\n\n            if self.print_logs:\n                # Add a captured log section to the report.\n                log = log_handler.stream.getvalue().strip()\n                item.add_report_section(when, \"log\", log)\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        with self._runtest_for(item, \"setup\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_call(self, item):\n        with self._runtest_for(item, \"call\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        with self._runtest_for(item, \"teardown\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logstart(self):\n        if self.log_cli_handler:\n            self.log_cli_handler.reset()\n        with self._runtest_for(None, \"start\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logfinish(self):\n        with self._runtest_for(None, \"finish\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logreport(self):\n        with self._runtest_for(None, \"logreport\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionfinish(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionfinish\")\n            if self.log_file_handler is not None:\n                try:\n                    with catching_logs(\n                        self.log_file_handler, level=self.log_file_level\n                    ):\n                        yield\n                finally:\n                    # Close the FileHandler explicitly.\n                    # (logging.shutdown might have lost the weakref?!)\n                    self.log_file_handler.close()\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionstart(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionstart\")\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtestloop(self, session):\n        \"\"\"Runs all collected test items.\"\"\"\n        with self.live_logs_context():\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield  # run all the tests\n            else:\n                yield  # run all the tests\n\n\nclass _LiveLoggingStreamHandler(logging.StreamHandler):\n    \"\"\"\n    Custom StreamHandler used by the live logging feature: it will write a newline before the first log message\n    in each test.\n\n    During live logging we must also explicitly disable stdout/stderr capturing otherwise it will get captured\n    and won't appear in the terminal.\n    \"\"\"\n\n    def __init__(self, terminal_reporter, capture_manager):\n        \"\"\"\n        :param _pytest.terminal.TerminalReporter terminal_reporter:\n        :param _pytest.capture.CaptureManager capture_manager:\n        \"\"\"\n        logging.StreamHandler.__init__(self, stream=terminal_reporter)\n        self.capture_manager = capture_manager\n        self.reset()\n        self.set_when(None)\n        self._test_outcome_written = False\n\n    def reset(self):\n        \"\"\"Reset the handler; should be called before the start of each test\"\"\"\n        self._first_record_emitted = False\n\n    def set_when(self, when):\n        \"\"\"Prepares for the given test phase (setup/call/teardown)\"\"\"\n        self._when = when\n        self._section_name_shown = False\n        if when == \"start\":\n            self._test_outcome_written = False\n\n    def emit(self, record):\n        ctx_manager = (\n            self.capture_manager.global_and_fixture_disabled()\n            if self.capture_manager\n            else dummy_context_manager()\n        )\n        with ctx_manager:\n            if not self._first_record_emitted:\n                self.stream.write(\"\\n\")\n                self._first_record_emitted = True\n            elif self._when in (\"teardown\", \"finish\"):\n                if not self._test_outcome_written:\n                    self._test_outcome_written = True\n                    self.stream.write(\"\\n\")\n            if not self._section_name_shown and self._when:\n                self.stream.section(\"live log \" + self._when, sep=\"-\", bold=True)\n                self._section_name_shown = True\n            logging.StreamHandler.emit(self, record)", "\"\"\" Access and control log capturing. \"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-cli-date-format\",\n        dest=\"log_cli_date_format\",\n        default=None,\n        help=\"log date format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file\",\n        dest=\"log_file\",\n        default=None,\n        help=\"path to a file when logging will be written to.\",\n    )\n    add_option_ini(\n        \"--log-file-level\",\n        dest=\"log_file_level\",\n        default=None,\n        help=\"log file logging level.\",\n    )\n    add_option_ini(\n        \"--log-file-format\",\n        dest=\"log_file_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file-date-format\",\n        dest=\"log_file_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n\n\n@contextmanager\ndef catching_logs(handler, formatter=None, level=None):\n    \"\"\"Context manager that prepares the whole logging machinery properly.\"\"\"\n    root_logger = logging.getLogger()\n\n    if formatter is not None:\n        handler.setFormatter(formatter)\n    if level is not None:\n        handler.setLevel(level)\n\n    # Adding the same handler twice would confuse logging system.\n    # Just don't do that.\n    add_new_handler = handler not in root_logger.handlers\n\n    if add_new_handler:\n        root_logger.addHandler(handler)\n    if level is not None:\n        orig_level = root_logger.level\n        root_logger.setLevel(min(orig_level, level))\n    try:\n        yield handler\n    finally:\n        if level is not None:\n            root_logger.setLevel(orig_level)\n        if add_new_handler:\n            root_logger.removeHandler(handler)\n\n\nclass LogCaptureHandler(logging.StreamHandler):\n    \"\"\"A logging handler that stores log records and the log text.\"\"\"\n\n    def __init__(self):\n        \"\"\"Creates a new log handler.\"\"\"\n        logging.StreamHandler.__init__(self, py.io.TextIO())\n        self.records = []\n\n    def emit(self, record):\n        \"\"\"Keep the log records in a list in addition to the log text.\"\"\"\n        self.records.append(record)\n        logging.StreamHandler.emit(self, record)\n\n    def reset(self):\n        self.records = []\n        self.stream = py.io.TextIO()\n\n\nclass LogCaptureFixture(object):\n    \"\"\"Provides access and control of log capturing.\"\"\"\n\n    def __init__(self, item):\n        \"\"\"Creates a new funcarg.\"\"\"\n        self._item = item\n        # dict of log name -> log level\n        self._initial_log_levels = {}  # Dict[str, int]\n\n    def _finalize(self):\n        \"\"\"Finalizes the fixture.\n\n        This restores the log levels changed by :meth:`set_level`.\n        \"\"\"\n        # restore log levels\n        for logger_name, level in self._initial_log_levels.items():\n            logger = logging.getLogger(logger_name)\n            logger.setLevel(level)\n\n    @property\n    def handler(self):\n        \"\"\"\n        :rtype: LogCaptureHandler\n        \"\"\"\n        return self._item.catch_log_handler\n\n    def get_records(self, when):\n        \"\"\"\n        Get the logging records for one of the possible test phases.\n\n        :param str when:\n            Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :rtype: List[logging.LogRecord]\n        :return: the list of captured records at the given stage\n\n        .. versionadded:: 3.4\n        \"\"\"\n        handler = self._item.catch_log_handlers.get(when)\n        if handler:\n            return handler.records\n        else:\n            return []\n\n    @property\n    def text(self):\n        \"\"\"Returns the log text.\"\"\"\n        return self.handler.stream.getvalue()\n\n    @property\n    def records(self):\n        \"\"\"Returns the list of log records.\"\"\"\n        return self.handler.records\n\n    @property\n    def record_tuples(self):\n        \"\"\"Returns a list of a stripped down version of log records intended\n        for use in assertion comparison.\n\n        The format of the tuple is:\n\n            (logger_name, log_level, message)\n        \"\"\"\n        return [(r.name, r.levelno, r.getMessage()) for r in self.records]\n\n    @property\n    def messages(self):\n        \"\"\"Returns a list of format-interpolated log messages.\n\n        Unlike 'records', which contains the format string and parameters for interpolation, log messages in this list\n        are all interpolated.\n        Unlike 'text', which contains the output from the handler, log messages in this list are unadorned with\n        levels, timestamps, etc, making exact comparisons more reliable.\n\n        Note that traceback or stack info (from :func:`logging.exception` or the `exc_info` or `stack_info` arguments\n        to the logging functions) is not included, as this is added by the formatter in the handler.\n\n        .. versionadded:: 3.7\n        \"\"\"\n        return [r.getMessage() for r in self.records]\n\n    def clear(self):\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.reset()\n\n    def set_level(self, level, logger=None):\n        \"\"\"Sets the level for capturing of logs. The level will be restored to its previous value at the end of\n        the test.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n\n        .. versionchanged:: 3.4\n            The levels of the loggers changed by this function will be restored to their initial values at the\n            end of the test.\n        \"\"\"\n        logger_name = logger\n        logger = logging.getLogger(logger_name)\n        # save the original log-level to restore it during teardown\n        self._initial_log_levels.setdefault(logger_name, logger.level)\n        logger.setLevel(level)\n\n    @contextmanager\n    def at_level(self, level, logger=None):\n        \"\"\"Context manager that sets the level for capturing of logs. After the end of the 'with' statement the\n        level is restored to its original value.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n        \"\"\"\n        logger = logging.getLogger(logger)\n        orig_level = logger.level\n        logger.setLevel(level)\n        try:\n            yield\n        finally:\n            logger.setLevel(orig_level)\n\n\n@pytest.fixture\ndef caplog(request):\n    \"\"\"Access and control log capturing.\n\n    Captured logs are available through the following properties/methods::\n\n    * caplog.text            -> string containing formatted log output\n    * caplog.records         -> list of logging.LogRecord instances\n    * caplog.record_tuples   -> list of (logger_name, level, message) tuples\n    * caplog.clear()         -> clear captured records and formatted log output string\n    \"\"\"\n    result = LogCaptureFixture(request.node)\n    yield result\n    result._finalize()\n\n\ndef get_actual_log_level(config, *setting_names):\n    \"\"\"Return the actual logging level.\"\"\"\n\n    for setting_name in setting_names:\n        log_level = config.getoption(setting_name)\n        if log_level is None:\n            log_level = config.getini(setting_name)\n        if log_level:\n            break\n    else:\n        return\n\n    if isinstance(log_level, six.string_types):\n        log_level = log_level.upper()\n    try:\n        return int(getattr(logging, log_level, log_level))\n    except ValueError:\n        # Python logging does not recognise this as a logging level\n        raise pytest.UsageError(\n            \"'{}' is not recognized as a logging level name for \"\n            \"'{}'. Please consider passing the \"\n            \"logging level num instead.\".format(log_level, setting_name)\n        )\n\n\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n\n        if not fname.is_absolute():\n            fname = Path(self._config.rootdir, fname)\n\n        if not fname.parent.exists():\n            fname.parent.mkdir(exist_ok=True, parents=True)\n\n        self.log_file_handler = logging.FileHandler(\n            str(fname), mode=\"w\", encoding=\"UTF-8\"\n        )\n        self.log_file_handler.setFormatter(self.log_file_formatter)\n\n    def _log_cli_enabled(self):\n        \"\"\"Return True if log_cli should be considered enabled, either explicitly\n        or because --log-cli-level was given in the command-line.\n        \"\"\"\n        return self._config.getoption(\n            \"--log-cli-level\"\n        ) is not None or self._config.getini(\"log_cli\")\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_collection(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"collection\")\n\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for(self, item, when):\n        with self._runtest_for_main(item, when):\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for_main(self, item, when):\n        \"\"\"Implements the internals of pytest_runtest_xxx() hook.\"\"\"\n        with catching_logs(\n            LogCaptureHandler(), formatter=self.formatter, level=self.log_level\n        ) as log_handler:\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(when)\n\n            if item is None:\n                yield  # run the test\n                return\n\n            if not hasattr(item, \"catch_log_handlers\"):\n                item.catch_log_handlers = {}\n            item.catch_log_handlers[when] = log_handler\n            item.catch_log_handler = log_handler\n            try:\n                yield  # run test\n            finally:\n                if when == \"teardown\":\n                    del item.catch_log_handler\n                    del item.catch_log_handlers\n\n            if self.print_logs:\n                # Add a captured log section to the report.\n                log = log_handler.stream.getvalue().strip()\n                item.add_report_section(when, \"log\", log)\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        with self._runtest_for(item, \"setup\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_call(self, item):\n        with self._runtest_for(item, \"call\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        with self._runtest_for(item, \"teardown\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logstart(self):\n        if self.log_cli_handler:\n            self.log_cli_handler.reset()\n        with self._runtest_for(None, \"start\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logfinish(self):\n        with self._runtest_for(None, \"finish\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logreport(self):\n        with self._runtest_for(None, \"logreport\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionfinish(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionfinish\")\n            if self.log_file_handler is not None:\n                try:\n                    with catching_logs(\n                        self.log_file_handler, level=self.log_file_level\n                    ):\n                        yield\n                finally:\n                    # Close the FileHandler explicitly.\n                    # (logging.shutdown might have lost the weakref?!)\n                    self.log_file_handler.close()\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionstart(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionstart\")\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtestloop(self, session):\n        \"\"\"Runs all collected test items.\"\"\"\n        with self.live_logs_context():\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield  # run all the tests\n            else:\n                yield  # run all the tests\n\n\nclass _LiveLoggingStreamHandler(logging.StreamHandler):\n    \"\"\"\n    Custom StreamHandler used by the live logging feature: it will write a newline before the first log message\n    in each test.\n\n    During live logging we must also explicitly disable stdout/stderr capturing otherwise it will get captured\n    and won't appear in the terminal.\n    \"\"\"\n\n    def __init__(self, terminal_reporter, capture_manager):\n        \"\"\"\n        :param _pytest.terminal.TerminalReporter terminal_reporter:\n        :param _pytest.capture.CaptureManager capture_manager:\n        \"\"\"\n        logging.StreamHandler.__init__(self, stream=terminal_reporter)\n        self.capture_manager = capture_manager\n        self.reset()\n        self.set_when(None)\n        self._test_outcome_written = False\n\n    def reset(self):\n        \"\"\"Reset the handler; should be called before the start of each test\"\"\"\n        self._first_record_emitted = False\n\n    def set_when(self, when):\n        \"\"\"Prepares for the given test phase (setup/call/teardown)\"\"\"\n        self._when = when\n        self._section_name_shown = False\n        if when == \"start\":\n            self._test_outcome_written = False\n\n    def emit(self, record):\n        ctx_manager = (\n            self.capture_manager.global_and_fixture_disabled()\n            if self.capture_manager\n            else dummy_context_manager()\n        )\n        with ctx_manager:\n            if not self._first_record_emitted:\n                self.stream.write(\"\\n\")\n                self._first_record_emitted = True\n            elif self._when in (\"teardown\", \"finish\"):\n                if not self._test_outcome_written:\n                    self._test_outcome_written = True\n                    self.stream.write(\"\\n\")\n            if not self._section_name_shown and self._when:\n                self.stream.section(\"live log \" + self._when, sep=\"-\", bold=True)\n                self._section_name_shown = True\n            logging.StreamHandler.emit(self, record)", "\"\"\" Access and control log capturing. \"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-cli-date-format\",\n        dest=\"log_cli_date_format\",\n        default=None,\n        help=\"log date format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file\",\n        dest=\"log_file\",\n        default=None,\n        help=\"path to a file when logging will be written to.\",\n    )\n    add_option_ini(\n        \"--log-file-level\",\n        dest=\"log_file_level\",\n        default=None,\n        help=\"log file logging level.\",\n    )\n    add_option_ini(\n        \"--log-file-format\",\n        dest=\"log_file_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file-date-format\",\n        dest=\"log_file_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n\n\n@contextmanager\ndef catching_logs(handler, formatter=None, level=None):\n    \"\"\"Context manager that prepares the whole logging machinery properly.\"\"\"\n    root_logger = logging.getLogger()\n\n    if formatter is not None:\n        handler.setFormatter(formatter)\n    if level is not None:\n        handler.setLevel(level)\n\n    # Adding the same handler twice would confuse logging system.\n    # Just don't do that.\n    add_new_handler = handler not in root_logger.handlers\n\n    if add_new_handler:\n        root_logger.addHandler(handler)\n    if level is not None:\n        orig_level = root_logger.level\n        root_logger.setLevel(min(orig_level, level))\n    try:\n        yield handler\n    finally:\n        if level is not None:\n            root_logger.setLevel(orig_level)\n        if add_new_handler:\n            root_logger.removeHandler(handler)\n\n\nclass LogCaptureHandler(logging.StreamHandler):\n    \"\"\"A logging handler that stores log records and the log text.\"\"\"\n\n    def __init__(self):\n        \"\"\"Creates a new log handler.\"\"\"\n        logging.StreamHandler.__init__(self, py.io.TextIO())\n        self.records = []\n\n    def emit(self, record):\n        \"\"\"Keep the log records in a list in addition to the log text.\"\"\"\n        self.records.append(record)\n        logging.StreamHandler.emit(self, record)\n\n    def reset(self):\n        self.records = []\n        self.stream = py.io.TextIO()\n\n\nclass LogCaptureFixture(object):\n    \"\"\"Provides access and control of log capturing.\"\"\"\n\n    def __init__(self, item):\n        \"\"\"Creates a new funcarg.\"\"\"\n        self._item = item\n        # dict of log name -> log level\n        self._initial_log_levels = {}  # Dict[str, int]\n\n    def _finalize(self):\n        \"\"\"Finalizes the fixture.\n\n        This restores the log levels changed by :meth:`set_level`.\n        \"\"\"\n        # restore log levels\n        for logger_name, level in self._initial_log_levels.items():\n            logger = logging.getLogger(logger_name)\n            logger.setLevel(level)\n\n    @property\n    def handler(self):\n        \"\"\"\n        :rtype: LogCaptureHandler\n        \"\"\"\n        return self._item.catch_log_handler\n\n    def get_records(self, when):\n        \"\"\"\n        Get the logging records for one of the possible test phases.\n\n        :param str when:\n            Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\".\n\n        :rtype: List[logging.LogRecord]\n        :return: the list of captured records at the given stage\n\n        .. versionadded:: 3.4\n        \"\"\"\n        handler = self._item.catch_log_handlers.get(when)\n        if handler:\n            return handler.records\n        else:\n            return []\n\n    @property\n    def text(self):\n        \"\"\"Returns the log text.\"\"\"\n        return self.handler.stream.getvalue()\n\n    @property\n    def records(self):\n        \"\"\"Returns the list of log records.\"\"\"\n        return self.handler.records\n\n    @property\n    def record_tuples(self):\n        \"\"\"Returns a list of a stripped down version of log records intended\n        for use in assertion comparison.\n\n        The format of the tuple is:\n\n            (logger_name, log_level, message)\n        \"\"\"\n        return [(r.name, r.levelno, r.getMessage()) for r in self.records]\n\n    @property\n    def messages(self):\n        \"\"\"Returns a list of format-interpolated log messages.\n\n        Unlike 'records', which contains the format string and parameters for interpolation, log messages in this list\n        are all interpolated.\n        Unlike 'text', which contains the output from the handler, log messages in this list are unadorned with\n        levels, timestamps, etc, making exact comparisons more reliable.\n\n        Note that traceback or stack info (from :func:`logging.exception` or the `exc_info` or `stack_info` arguments\n        to the logging functions) is not included, as this is added by the formatter in the handler.\n\n        .. versionadded:: 3.7\n        \"\"\"\n        return [r.getMessage() for r in self.records]\n\n    def clear(self):\n        \"\"\"Reset the list of log records and the captured log text.\"\"\"\n        self.handler.reset()\n\n    def set_level(self, level, logger=None):\n        \"\"\"Sets the level for capturing of logs. The level will be restored to its previous value at the end of\n        the test.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n\n        .. versionchanged:: 3.4\n            The levels of the loggers changed by this function will be restored to their initial values at the\n            end of the test.\n        \"\"\"\n        logger_name = logger\n        logger = logging.getLogger(logger_name)\n        # save the original log-level to restore it during teardown\n        self._initial_log_levels.setdefault(logger_name, logger.level)\n        logger.setLevel(level)\n\n    @contextmanager\n    def at_level(self, level, logger=None):\n        \"\"\"Context manager that sets the level for capturing of logs. After the end of the 'with' statement the\n        level is restored to its original value.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n        \"\"\"\n        logger = logging.getLogger(logger)\n        orig_level = logger.level\n        logger.setLevel(level)\n        try:\n            yield\n        finally:\n            logger.setLevel(orig_level)\n\n\n@pytest.fixture\ndef caplog(request):\n    \"\"\"Access and control log capturing.\n\n    Captured logs are available through the following properties/methods::\n\n    * caplog.text            -> string containing formatted log output\n    * caplog.records         -> list of logging.LogRecord instances\n    * caplog.record_tuples   -> list of (logger_name, level, message) tuples\n    * caplog.clear()         -> clear captured records and formatted log output string\n    \"\"\"\n    result = LogCaptureFixture(request.node)\n    yield result\n    result._finalize()\n\n\ndef get_actual_log_level(config, *setting_names):\n    \"\"\"Return the actual logging level.\"\"\"\n\n    for setting_name in setting_names:\n        log_level = config.getoption(setting_name)\n        if log_level is None:\n            log_level = config.getini(setting_name)\n        if log_level:\n            break\n    else:\n        return\n\n    if isinstance(log_level, six.string_types):\n        log_level = log_level.upper()\n    try:\n        return int(getattr(logging, log_level, log_level))\n    except ValueError:\n        # Python logging does not recognise this as a logging level\n        raise pytest.UsageError(\n            \"'{}' is not recognized as a logging level name for \"\n            \"'{}'. Please consider passing the \"\n            \"logging level num instead.\".format(log_level, setting_name)\n        )\n\n\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n\n        if not fname.is_absolute():\n            fname = Path(self._config.rootdir, fname)\n\n        if not fname.parent.exists():\n            fname.parent.mkdir(exist_ok=True, parents=True)\n\n        self.log_file_handler = logging.FileHandler(\n            str(fname), mode=\"w\", encoding=\"UTF-8\"\n        )\n        self.log_file_handler.setFormatter(self.log_file_formatter)\n\n    def _log_cli_enabled(self):\n        \"\"\"Return True if log_cli should be considered enabled, either explicitly\n        or because --log-cli-level was given in the command-line.\n        \"\"\"\n        return self._config.getoption(\n            \"--log-cli-level\"\n        ) is not None or self._config.getini(\"log_cli\")\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_collection(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"collection\")\n\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for(self, item, when):\n        with self._runtest_for_main(item, when):\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for_main(self, item, when):\n        \"\"\"Implements the internals of pytest_runtest_xxx() hook.\"\"\"\n        with catching_logs(\n            LogCaptureHandler(), formatter=self.formatter, level=self.log_level\n        ) as log_handler:\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(when)\n\n            if item is None:\n                yield  # run the test\n                return\n\n            if not hasattr(item, \"catch_log_handlers\"):\n                item.catch_log_handlers = {}\n            item.catch_log_handlers[when] = log_handler\n            item.catch_log_handler = log_handler\n            try:\n                yield  # run test\n            finally:\n                if when == \"teardown\":\n                    del item.catch_log_handler\n                    del item.catch_log_handlers\n\n            if self.print_logs:\n                # Add a captured log section to the report.\n                log = log_handler.stream.getvalue().strip()\n                item.add_report_section(when, \"log\", log)\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        with self._runtest_for(item, \"setup\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_call(self, item):\n        with self._runtest_for(item, \"call\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        with self._runtest_for(item, \"teardown\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logstart(self):\n        if self.log_cli_handler:\n            self.log_cli_handler.reset()\n        with self._runtest_for(None, \"start\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logfinish(self):\n        with self._runtest_for(None, \"finish\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logreport(self):\n        with self._runtest_for(None, \"logreport\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionfinish(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionfinish\")\n            if self.log_file_handler is not None:\n                try:\n                    with catching_logs(\n                        self.log_file_handler, level=self.log_file_level\n                    ):\n                        yield\n                finally:\n                    # Close the FileHandler explicitly.\n                    # (logging.shutdown might have lost the weakref?!)\n                    self.log_file_handler.close()\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionstart(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionstart\")\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtestloop(self, session):\n        \"\"\"Runs all collected test items.\"\"\"\n        with self.live_logs_context():\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield  # run all the tests\n            else:\n                yield  # run all the tests\n\n\nclass _LiveLoggingStreamHandler(logging.StreamHandler):\n    \"\"\"\n    Custom StreamHandler used by the live logging feature: it will write a newline before the first log message\n    in each test.\n\n    During live logging we must also explicitly disable stdout/stderr capturing otherwise it will get captured\n    and won't appear in the terminal.\n    \"\"\"\n\n    def __init__(self, terminal_reporter, capture_manager):\n        \"\"\"\n        :param _pytest.terminal.TerminalReporter terminal_reporter:\n        :param _pytest.capture.CaptureManager capture_manager:\n        \"\"\"\n        logging.StreamHandler.__init__(self, stream=terminal_reporter)\n        self.capture_manager = capture_manager\n        self.reset()\n        self.set_when(None)\n        self._test_outcome_written = False\n\n    def reset(self):\n        \"\"\"Reset the handler; should be called before the start of each test\"\"\"\n        self._first_record_emitted = False\n\n    def set_when(self, when):\n        \"\"\"Prepares for the given test phase (setup/call/teardown)\"\"\"\n        self._when = when\n        self._section_name_shown = False\n        if when == \"start\":\n            self._test_outcome_written = False\n\n    def emit(self, record):\n        ctx_manager = (\n            self.capture_manager.global_and_fixture_disabled()\n            if self.capture_manager\n            else dummy_context_manager()\n        )\n        with ctx_manager:\n            if not self._first_record_emitted:\n                self.stream.write(\"\\n\")\n                self._first_record_emitted = True\n            elif self._when in (\"teardown\", \"finish\"):\n                if not self._test_outcome_written:\n                    self._test_outcome_written = True\n                    self.stream.write(\"\\n\")\n            if not self._section_name_shown and self._when:\n                self.stream.section(\"live log \" + self._when, sep=\"-\", bold=True)\n                self._section_name_shown = True\n            logging.StreamHandler.emit(self, record)"]], "file_names": [["src/_pytest/logging.py", "src/_pytest/logging.py", "src/_pytest/logging.py", "src/_pytest/logging.py", "src/_pytest/logging.py", "src/_pytest/logging.py", "src/_pytest/logging.py", "src/_pytest/logging.py", "src/_pytest/logging.py", "src/_pytest/logging.py"]]}
