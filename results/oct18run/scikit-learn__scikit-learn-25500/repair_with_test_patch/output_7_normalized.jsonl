{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25500", "model_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex c8818cd..42d4b69 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -760,7 +760,8 @@ class _CalibratedClassifier:\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+            this_pred_np = np.asarray(this_pred)  # Ensure this_pred is a numpy array\n+            proba[:, class_idx] = calibrator.predict(this_pred_np)\n \n         # Normalize the probabilities\n         if n_classes == 2:\n", "raw_model_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex c8818cd..42d4b69 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -760,7 +760,8 @@ class _CalibratedClassifier:\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+            this_pred_np = np.asarray(this_pred)  # Ensure this_pred is a numpy array\n+            proba[:, class_idx] = calibrator.predict(this_pred_np)\n \n         # Normalize the probabilities\n         if n_classes == 2:\n", "original_file_content": "\"\"\"Calibration of predicted probabilities.\"\"\"\n\n# Author: Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>\n#         Balazs Kegl <balazs.kegl@gmail.com>\n#         Jan Hendrik Metzen <jhm@informatik.uni-bremen.de>\n#         Mathieu Blondel <mathieu@mblondel.org>\n#\n# License: BSD 3 clause\n\nfrom numbers import Integral\nimport warnings\nfrom inspect import signature\nfrom functools import partial\n\nfrom math import log\nimport numpy as np\n\nfrom scipy.special import expit\nfrom scipy.special import xlogy\nfrom scipy.optimize import fmin_bfgs\n\nfrom .base import (\n    BaseEstimator,\n    ClassifierMixin,\n    RegressorMixin,\n    clone,\n    MetaEstimatorMixin,\n    is_classifier,\n)\nfrom .preprocessing import label_binarize, LabelEncoder\nfrom .utils import (\n    column_or_1d,\n    indexable,\n    check_matplotlib_support,\n)\n\nfrom .utils.multiclass import check_classification_targets\nfrom .utils.parallel import delayed, Parallel\nfrom .utils._param_validation import StrOptions, HasMethods, Hidden\nfrom .utils.validation import (\n    _check_fit_params,\n    _check_sample_weight,\n    _num_samples,\n    check_consistent_length,\n    check_is_fitted,\n)\nfrom .utils import _safe_indexing\nfrom .isotonic import IsotonicRegression\nfrom .svm import LinearSVC\nfrom .model_selection import check_cv, cross_val_predict\nfrom .metrics._base import _check_pos_label_consistency\nfrom .metrics._plot.base import _get_response\n\n\nclass CalibratedClassifierCV(ClassifierMixin, MetaEstimatorMixin, BaseEstimator):\n    \"\"\"Probability calibration with isotonic regression or logistic regression.\n\n    This class uses cross-validation to both estimate the parameters of a\n    classifier and subsequently calibrate a classifier. With default\n    `ensemble=True`, for each cv split it\n    fits a copy of the base estimator to the training subset, and calibrates it\n    using the testing subset. For prediction, predicted probabilities are\n    averaged across these individual calibrated classifiers. When\n    `ensemble=False`, cross-validation is used to obtain unbiased predictions,\n    via :func:`~sklearn.model_selection.cross_val_predict`, which are then\n    used for calibration. For prediction, the base estimator, trained using all\n    the data, is used. This is the method implemented when `probabilities=True`\n    for :mod:`sklearn.svm` estimators.\n\n    Already fitted classifiers can be calibrated via the parameter\n    `cv=\"prefit\"`. In this case, no cross-validation is used and all provided\n    data is used for calibration. The user has to take care manually that data\n    for model fitting and calibration are disjoint.\n\n    The calibration is based on the :term:`decision_function` method of the\n    `estimator` if it exists, else on :term:`predict_proba`.\n\n    Read more in the :ref:`User Guide <calibration>`.\n\n    Parameters\n    ----------\n    estimator : estimator instance, default=None\n        The classifier whose output need to be calibrated to provide more\n        accurate `predict_proba` outputs. The default classifier is\n        a :class:`~sklearn.svm.LinearSVC`.\n\n        .. versionadded:: 1.2\n\n    method : {'sigmoid', 'isotonic'}, default='sigmoid'\n        The method to use for calibration. Can be 'sigmoid' which\n        corresponds to Platt's method (i.e. a logistic regression model) or\n        'isotonic' which is a non-parametric approach. It is not advised to\n        use isotonic calibration with too few calibration samples\n        ``(<<1000)`` since it tends to overfit.\n\n    cv : int, cross-validation generator, iterable or \"prefit\", \\\n            default=None\n        Determines the cross-validation splitting strategy.\n        Possible inputs for cv are:\n\n        - None, to use the default 5-fold cross-validation,\n        - integer, to specify the number of folds.\n        - :term:`CV splitter`,\n        - An iterable yielding (train, test) splits as arrays of indices.\n\n        For integer/None inputs, if ``y`` is binary or multiclass,\n        :class:`~sklearn.model_selection.StratifiedKFold` is used. If ``y`` is\n        neither binary nor multiclass, :class:`~sklearn.model_selection.KFold`\n        is used.\n\n        Refer to the :ref:`User Guide <cross_validation>` for the various\n        cross-validation strategies that can be used here.\n\n        If \"prefit\" is passed, it is assumed that `estimator` has been\n        fitted already and all data is used for calibration.\n\n        .. versionchanged:: 0.22\n            ``cv`` default value if None changed from 3-fold to 5-fold.\n\n    n_jobs : int, default=None\n        Number of jobs to run in parallel.\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n        ``-1`` means using all processors.\n\n        Base estimator clones are fitted in parallel across cross-validation\n        iterations. Therefore parallelism happens only when `cv != \"prefit\"`.\n\n        See :term:`Glossary <n_jobs>` for more details.\n\n        .. versionadded:: 0.24\n\n    ensemble : bool, default=True\n        Determines how the calibrator is fitted when `cv` is not `'prefit'`.\n        Ignored if `cv='prefit'`.\n\n        If `True`, the `estimator` is fitted using training data, and\n        calibrated using testing data, for each `cv` fold. The final estimator\n        is an ensemble of `n_cv` fitted classifier and calibrator pairs, where\n        `n_cv` is the number of cross-validation folds. The output is the\n        average predicted probabilities of all pairs.\n\n        If `False`, `cv` is used to compute unbiased predictions, via\n        :func:`~sklearn.model_selection.cross_val_predict`, which are then\n        used for calibration. At prediction time, the classifier used is the\n        `estimator` trained on all the data.\n        Note that this method is also internally implemented  in\n        :mod:`sklearn.svm` estimators with the `probabilities=True` parameter.\n\n        .. versionadded:: 0.24\n\n    base_estimator : estimator instance\n        This parameter is deprecated. Use `estimator` instead.\n\n        .. deprecated:: 1.2\n           The parameter `base_estimator` is deprecated in 1.2 and will be\n           removed in 1.4. Use `estimator` instead.\n\n    Attributes\n    ----------\n    classes_ : ndarray of shape (n_classes,)\n        The class labels.\n\n    n_features_in_ : int\n        Number of features seen during :term:`fit`. Only defined if the\n        underlying estimator exposes such an attribute when fit.\n\n        .. versionadded:: 0.24\n\n    feature_names_in_ : ndarray of shape (`n_features_in_`,)\n        Names of features seen during :term:`fit`. Only defined if the\n        underlying estimator exposes such an attribute when fit.\n\n        .. versionadded:: 1.0\n\n    calibrated_classifiers_ : list (len() equal to cv or 1 if `cv=\"prefit\"` \\\n            or `ensemble=False`)\n        The list of classifier and calibrator pairs.\n\n        - When `cv=\"prefit\"`, the fitted `estimator` and fitted\n          calibrator.\n        - When `cv` is not \"prefit\" and `ensemble=True`, `n_cv` fitted\n          `estimator` and calibrator pairs. `n_cv` is the number of\n          cross-validation folds.\n        - When `cv` is not \"prefit\" and `ensemble=False`, the `estimator`,\n          fitted on all the data, and fitted calibrator.\n\n        .. versionchanged:: 0.24\n            Single calibrated classifier case when `ensemble=False`.\n\n    See Also\n    --------\n    calibration_curve : Compute true and predicted probabilities\n        for a calibration curve.\n\n    References\n    ----------\n    .. [1] Obtaining calibrated probability estimates from decision trees\n           and naive Bayesian classifiers, B. Zadrozny & C. Elkan, ICML 2001\n\n    .. [2] Transforming Classifier Scores into Accurate Multiclass\n           Probability Estimates, B. Zadrozny & C. Elkan, (KDD 2002)\n\n    .. [3] Probabilistic Outputs for Support Vector Machines and Comparisons to\n           Regularized Likelihood Methods, J. Platt, (1999)\n\n    .. [4] Predicting Good Probabilities with Supervised Learning,\n           A. Niculescu-Mizil & R. Caruana, ICML 2005\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_classification\n    >>> from sklearn.naive_bayes import GaussianNB\n    >>> from sklearn.calibration import CalibratedClassifierCV\n    >>> X, y = make_classification(n_samples=100, n_features=2,\n    ...                            n_redundant=0, random_state=42)\n    >>> base_clf = GaussianNB()\n    >>> calibrated_clf = CalibratedClassifierCV(base_clf, cv=3)\n    >>> calibrated_clf.fit(X, y)\n    CalibratedClassifierCV(...)\n    >>> len(calibrated_clf.calibrated_classifiers_)\n    3\n    >>> calibrated_clf.predict_proba(X)[:5, :]\n    array([[0.110..., 0.889...],\n           [0.072..., 0.927...],\n           [0.928..., 0.071...],\n           [0.928..., 0.071...],\n           [0.071..., 0.928...]])\n    >>> from sklearn.model_selection import train_test_split\n    >>> X, y = make_classification(n_samples=100, n_features=2,\n    ...                            n_redundant=0, random_state=42)\n    >>> X_train, X_calib, y_train, y_calib = train_test_split(\n    ...        X, y, random_state=42\n    ... )\n    >>> base_clf = GaussianNB()\n    >>> base_clf.fit(X_train, y_train)\n    GaussianNB()\n    >>> calibrated_clf = CalibratedClassifierCV(base_clf, cv=\"prefit\")\n    >>> calibrated_clf.fit(X_calib, y_calib)\n    CalibratedClassifierCV(...)\n    >>> len(calibrated_clf.calibrated_classifiers_)\n    1\n    >>> calibrated_clf.predict_proba([[-0.5, 0.5]])\n    array([[0.936..., 0.063...]])\n    \"\"\"\n\n    _parameter_constraints: dict = {\n        \"estimator\": [\n            HasMethods([\"fit\", \"predict_proba\"]),\n            HasMethods([\"fit\", \"decision_function\"]),\n            None,\n        ],\n        \"method\": [StrOptions({\"isotonic\", \"sigmoid\"})],\n        \"cv\": [\"cv_object\", StrOptions({\"prefit\"})],\n        \"n_jobs\": [Integral, None],\n        \"ensemble\": [\"boolean\"],\n        \"base_estimator\": [\n            HasMethods([\"fit\", \"predict_proba\"]),\n            HasMethods([\"fit\", \"decision_function\"]),\n            None,\n            Hidden(StrOptions({\"deprecated\"})),\n        ],\n    }\n\n    def __init__(\n        self,\n        estimator=None,\n        *,\n        method=\"sigmoid\",\n        cv=None,\n        n_jobs=None,\n        ensemble=True,\n        base_estimator=\"deprecated\",\n    ):\n        self.estimator = estimator\n        self.method = method\n        self.cv = cv\n        self.n_jobs = n_jobs\n        self.ensemble = ensemble\n        self.base_estimator = base_estimator\n\n    def fit(self, X, y, sample_weight=None, **fit_params):\n        \"\"\"Fit the calibrated model.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data.\n\n        y : array-like of shape (n_samples,)\n            Target values.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted.\n\n        **fit_params : dict\n            Parameters to pass to the `fit` method of the underlying\n            classifier.\n\n        Returns\n        -------\n        self : object\n            Returns an instance of self.\n        \"\"\"\n        self._validate_params()\n\n        check_classification_targets(y)\n        X, y = indexable(X, y)\n        if sample_weight is not None:\n            sample_weight = _check_sample_weight(sample_weight, X)\n\n        for sample_aligned_params in fit_params.values():\n            check_consistent_length(y, sample_aligned_params)\n\n        # TODO(1.4): Remove when base_estimator is removed\n        if self.base_estimator != \"deprecated\":\n            if self.estimator is not None:\n                raise ValueError(\n                    \"Both `base_estimator` and `estimator` are set. Only set \"\n                    \"`estimator` since `base_estimator` is deprecated.\"\n                )\n            warnings.warn(\n                \"`base_estimator` was renamed to `estimator` in version 1.2 and \"\n                \"will be removed in 1.4.\",\n                FutureWarning,\n            )\n            estimator = self.base_estimator\n        else:\n            estimator = self.estimator\n\n        if estimator is None:\n            # we want all classifiers that don't expose a random_state\n            # to be deterministic (and we don't want to expose this one).\n            estimator = LinearSVC(random_state=0)\n\n        self.calibrated_classifiers_ = []\n        if self.cv == \"prefit\":\n            # `classes_` should be consistent with that of estimator\n            check_is_fitted(self.estimator, attributes=[\"classes_\"])\n            self.classes_ = self.estimator.classes_\n\n            pred_method, method_name = _get_prediction_method(estimator)\n            n_classes = len(self.classes_)\n            predictions = _compute_predictions(pred_method, method_name, X, n_classes)\n\n            calibrated_classifier = _fit_calibrator(\n                estimator,\n                predictions,\n                y,\n                self.classes_,\n                self.method,\n                sample_weight,\n            )\n            self.calibrated_classifiers_.append(calibrated_classifier)\n        else:\n            # Set `classes_` using all `y`\n            label_encoder_ = LabelEncoder().fit(y)\n            self.classes_ = label_encoder_.classes_\n            n_classes = len(self.classes_)\n\n            # sample_weight checks\n            fit_parameters = signature(estimator.fit).parameters\n            supports_sw = \"sample_weight\" in fit_parameters\n            if sample_weight is not None and not supports_sw:\n                estimator_name = type(estimator).__name__\n                warnings.warn(\n                    f\"Since {estimator_name} does not appear to accept sample_weight, \"\n                    \"sample weights will only be used for the calibration itself. This \"\n                    \"can be caused by a limitation of the current scikit-learn API. \"\n                    \"See the following issue for more details: \"\n                    \"https://github.com/scikit-learn/scikit-learn/issues/21134. Be \"\n                    \"warned that the result of the calibration is likely to be \"\n                    \"incorrect.\"\n                )\n\n            # Check that each cross-validation fold can have at least one\n            # example per class\n            if isinstance(self.cv, int):\n                n_folds = self.cv\n            elif hasattr(self.cv, \"n_splits\"):\n                n_folds = self.cv.n_splits\n            else:\n                n_folds = None\n            if n_folds and np.any(\n                [np.sum(y == class_) < n_folds for class_ in self.classes_]\n            ):\n                raise ValueError(\n                    f\"Requesting {n_folds}-fold \"\n                    \"cross-validation but provided less than \"\n                    f\"{n_folds} examples for at least one class.\"\n                )\n            cv = check_cv(self.cv, y, classifier=True)\n\n            if self.ensemble:\n                parallel = Parallel(n_jobs=self.n_jobs)\n                self.calibrated_classifiers_ = parallel(\n                    delayed(_fit_classifier_calibrator_pair)(\n                        clone(estimator),\n                        X,\n                        y,\n                        train=train,\n                        test=test,\n                        method=self.method,\n                        classes=self.classes_,\n                        supports_sw=supports_sw,\n                        sample_weight=sample_weight,\n                        **fit_params,\n                    )\n                    for train, test in cv.split(X, y)\n                )\n            else:\n                this_estimator = clone(estimator)\n                _, method_name = _get_prediction_method(this_estimator)\n                fit_params = (\n                    {\"sample_weight\": sample_weight}\n                    if sample_weight is not None and supports_sw\n                    else None\n                )\n                pred_method = partial(\n                    cross_val_predict,\n                    estimator=this_estimator,\n                    X=X,\n                    y=y,\n                    cv=cv,\n                    method=method_name,\n                    n_jobs=self.n_jobs,\n                    fit_params=fit_params,\n                )\n                predictions = _compute_predictions(\n                    pred_method, method_name, X, n_classes\n                )\n\n                if sample_weight is not None and supports_sw:\n                    this_estimator.fit(X, y, sample_weight=sample_weight)\n                else:\n                    this_estimator.fit(X, y)\n                # Note: Here we don't pass on fit_params because the supported\n                # calibrators don't support fit_params anyway\n                calibrated_classifier = _fit_calibrator(\n                    this_estimator,\n                    predictions,\n                    y,\n                    self.classes_,\n                    self.method,\n                    sample_weight,\n                )\n                self.calibrated_classifiers_.append(calibrated_classifier)\n\n        first_clf = self.calibrated_classifiers_[0].estimator\n        if hasattr(first_clf, \"n_features_in_\"):\n            self.n_features_in_ = first_clf.n_features_in_\n        if hasattr(first_clf, \"feature_names_in_\"):\n            self.feature_names_in_ = first_clf.feature_names_in_\n        return self\n\n    def predict_proba(self, X):\n        \"\"\"Calibrated probabilities of classification.\n\n        This function returns calibrated probabilities of classification\n        according to each class on an array of test vectors X.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            The samples, as accepted by `estimator.predict_proba`.\n\n        Returns\n        -------\n        C : ndarray of shape (n_samples, n_classes)\n            The predicted probas.\n        \"\"\"\n        check_is_fitted(self)\n        # Compute the arithmetic mean of the predictions of the calibrated\n        # classifiers\n        mean_proba = np.zeros((_num_samples(X), len(self.classes_)))\n        for calibrated_classifier in self.calibrated_classifiers_:\n            proba = calibrated_classifier.predict_proba(X)\n            mean_proba += proba\n\n        mean_proba /= len(self.calibrated_classifiers_)\n\n        return mean_proba\n\n    def predict(self, X):\n        \"\"\"Predict the target of new samples.\n\n        The predicted class is the class that has the highest probability,\n        and can thus be different from the prediction of the uncalibrated classifier.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            The samples, as accepted by `estimator.predict`.\n\n        Returns\n        -------\n        C : ndarray of shape (n_samples,)\n            The predicted class.\n        \"\"\"\n        check_is_fitted(self)\n        return self.classes_[np.argmax(self.predict_proba(X), axis=1)]\n\n    def _more_tags(self):\n        return {\n            \"_xfail_checks\": {\n                \"check_sample_weights_invariance\": (\n                    \"Due to the cross-validation and sample ordering, removing a sample\"\n                    \" is not strictly equal to putting is weight to zero. Specific unit\"\n                    \" tests are added for CalibratedClassifierCV specifically.\"\n                ),\n            }\n        }\n\n\ndef _fit_classifier_calibrator_pair(\n    estimator,\n    X,\n    y,\n    train,\n    test,\n    supports_sw,\n    method,\n    classes,\n    sample_weight=None,\n    **fit_params,\n):\n    \"\"\"Fit a classifier/calibration pair on a given train/test split.\n\n    Fit the classifier on the train set, compute its predictions on the test\n    set and use the predictions as input to fit the calibrator along with the\n    test labels.\n\n    Parameters\n    ----------\n    estimator : estimator instance\n        Cloned base estimator.\n\n    X : array-like, shape (n_samples, n_features)\n        Sample data.\n\n    y : array-like, shape (n_samples,)\n        Targets.\n\n    train : ndarray, shape (n_train_indices,)\n        Indices of the training subset.\n\n    test : ndarray, shape (n_test_indices,)\n        Indices of the testing subset.\n\n    supports_sw : bool\n        Whether or not the `estimator` supports sample weights.\n\n    method : {'sigmoid', 'isotonic'}\n        Method to use for calibration.\n\n    classes : ndarray, shape (n_classes,)\n        The target classes.\n\n    sample_weight : array-like, default=None\n        Sample weights for `X`.\n\n    **fit_params : dict\n        Parameters to pass to the `fit` method of the underlying\n        classifier.\n\n    Returns\n    -------\n    calibrated_classifier : _CalibratedClassifier instance\n    \"\"\"\n    fit_params_train = _check_fit_params(X, fit_params, train)\n    X_train, y_train = _safe_indexing(X, train), _safe_indexing(y, train)\n    X_test, y_test = _safe_indexing(X, test), _safe_indexing(y, test)\n\n    if sample_weight is not None and supports_sw:\n        sw_train = _safe_indexing(sample_weight, train)\n        estimator.fit(X_train, y_train, sample_weight=sw_train, **fit_params_train)\n    else:\n        estimator.fit(X_train, y_train, **fit_params_train)\n\n    n_classes = len(classes)\n    pred_method, method_name = _get_prediction_method(estimator)\n    predictions = _compute_predictions(pred_method, method_name, X_test, n_classes)\n\n    sw_test = None if sample_weight is None else _safe_indexing(sample_weight, test)\n    calibrated_classifier = _fit_calibrator(\n        estimator, predictions, y_test, classes, method, sample_weight=sw_test\n    )\n    return calibrated_classifier\n\n\ndef _get_prediction_method(clf):\n    \"\"\"Return prediction method.\n\n    `decision_function` method of `clf` returned, if it\n    exists, otherwise `predict_proba` method returned.\n\n    Parameters\n    ----------\n    clf : Estimator instance\n        Fitted classifier to obtain the prediction method from.\n\n    Returns\n    -------\n    prediction_method : callable\n        The prediction method.\n    method_name : str\n        The name of the prediction method.\n    \"\"\"\n    if hasattr(clf, \"decision_function\"):\n        method = getattr(clf, \"decision_function\")\n        return method, \"decision_function\"\n\n    if hasattr(clf, \"predict_proba\"):\n        method = getattr(clf, \"predict_proba\")\n        return method, \"predict_proba\"\n\n\ndef _compute_predictions(pred_method, method_name, X, n_classes):\n    \"\"\"Return predictions for `X` and reshape binary outputs to shape\n    (n_samples, 1).\n\n    Parameters\n    ----------\n    pred_method : callable\n        Prediction method.\n\n    method_name: str\n        Name of the prediction method\n\n    X : array-like or None\n        Data used to obtain predictions.\n\n    n_classes : int\n        Number of classes present.\n\n    Returns\n    -------\n    predictions : array-like, shape (X.shape[0], len(clf.classes_))\n        The predictions. Note if there are 2 classes, array is of shape\n        (X.shape[0], 1).\n    \"\"\"\n    predictions = pred_method(X=X)\n\n    if method_name == \"decision_function\":\n        if predictions.ndim == 1:\n            predictions = predictions[:, np.newaxis]\n    elif method_name == \"predict_proba\":\n        if n_classes == 2:\n            predictions = predictions[:, 1:]\n    else:  # pragma: no cover\n        # this branch should be unreachable.\n        raise ValueError(f\"Invalid prediction method: {method_name}\")\n    return predictions\n\n\ndef _fit_calibrator(clf, predictions, y, classes, method, sample_weight=None):\n    \"\"\"Fit calibrator(s) and return a `_CalibratedClassifier`\n    instance.\n\n    `n_classes` (i.e. `len(clf.classes_)`) calibrators are fitted.\n    However, if `n_classes` equals 2, one calibrator is fitted.\n\n    Parameters\n    ----------\n    clf : estimator instance\n        Fitted classifier.\n\n    predictions : array-like, shape (n_samples, n_classes) or (n_samples, 1) \\\n                    when binary.\n        Raw predictions returned by the un-calibrated base classifier.\n\n    y : array-like, shape (n_samples,)\n        The targets.\n\n    classes : ndarray, shape (n_classes,)\n        All the prediction classes.\n\n    method : {'sigmoid', 'isotonic'}\n        The method to use for calibration.\n\n    sample_weight : ndarray, shape (n_samples,), default=None\n        Sample weights. If None, then samples are equally weighted.\n\n    Returns\n    -------\n    pipeline : _CalibratedClassifier instance\n    \"\"\"\n    Y = label_binarize(y, classes=classes)\n    label_encoder = LabelEncoder().fit(classes)\n    pos_class_indices = label_encoder.transform(clf.classes_)\n    calibrators = []\n    for class_idx, this_pred in zip(pos_class_indices, predictions.T):\n        if method == \"isotonic\":\n            calibrator = IsotonicRegression(out_of_bounds=\"clip\")\n        else:  # \"sigmoid\"\n            calibrator = _SigmoidCalibration()\n        calibrator.fit(this_pred, Y[:, class_idx], sample_weight)\n        calibrators.append(calibrator)\n\n    pipeline = _CalibratedClassifier(clf, calibrators, method=method, classes=classes)\n    return pipeline\n\n\nclass _CalibratedClassifier:\n    \"\"\"Pipeline-like chaining a fitted classifier and its fitted calibrators.\n\n    Parameters\n    ----------\n    estimator : estimator instance\n        Fitted classifier.\n\n    calibrators : list of fitted estimator instances\n        List of fitted calibrators (either 'IsotonicRegression' or\n        '_SigmoidCalibration'). The number of calibrators equals the number of\n        classes. However, if there are 2 classes, the list contains only one\n        fitted calibrator.\n\n    classes : array-like of shape (n_classes,)\n        All the prediction classes.\n\n    method : {'sigmoid', 'isotonic'}, default='sigmoid'\n        The method to use for calibration. Can be 'sigmoid' which\n        corresponds to Platt's method or 'isotonic' which is a\n        non-parametric approach based on isotonic regression.\n    \"\"\"\n\n    def __init__(self, estimator, calibrators, *, classes, method=\"sigmoid\"):\n        self.estimator = estimator\n        self.calibrators = calibrators\n        self.classes = classes\n        self.method = method\n\n    def predict_proba(self, X):\n        \"\"\"Calculate calibrated probabilities.\n\n        Calculates classification calibrated probabilities\n        for each class, in a one-vs-all manner, for `X`.\n\n        Parameters\n        ----------\n        X : ndarray of shape (n_samples, n_features)\n            The sample data.\n\n        Returns\n        -------\n        proba : array, shape (n_samples, n_classes)\n            The predicted probabilities. Can be exact zeros.\n        \"\"\"\n        n_classes = len(self.classes)\n        pred_method, method_name = _get_prediction_method(self.estimator)\n        predictions = _compute_predictions(pred_method, method_name, X, n_classes)\n\n        label_encoder = LabelEncoder().fit(self.classes)\n        pos_class_indices = label_encoder.transform(self.estimator.classes_)\n\n        proba = np.zeros((_num_samples(X), n_classes))\n        for class_idx, this_pred, calibrator in zip(\n            pos_class_indices, predictions.T, self.calibrators\n        ):\n            if n_classes == 2:\n                # When binary, `predictions` consists only of predictions for\n                # clf.classes_[1] but `pos_class_indices` = 0\n                class_idx += 1\n            proba[:, class_idx] = calibrator.predict(this_pred)\n\n        # Normalize the probabilities\n        if n_classes == 2:\n            proba[:, 0] = 1.0 - proba[:, 1]\n        else:\n            denominator = np.sum(proba, axis=1)[:, np.newaxis]\n            # In the edge case where for each class calibrator returns a null\n            # probability for a given sample, use the uniform distribution\n            # instead.\n            uniform_proba = np.full_like(proba, 1 / n_classes)\n            proba = np.divide(\n                proba, denominator, out=uniform_proba, where=denominator != 0\n            )\n\n        # Deal with cases where the predicted probability minimally exceeds 1.0\n        proba[(1.0 < proba) & (proba <= 1.0 + 1e-5)] = 1.0\n\n        return proba\n\n\ndef _sigmoid_calibration(predictions, y, sample_weight=None):\n    \"\"\"Probability Calibration with sigmoid method (Platt 2000)\n\n    Parameters\n    ----------\n    predictions : ndarray of shape (n_samples,)\n        The decision function or predict proba for the samples.\n\n    y : ndarray of shape (n_samples,)\n        The targets.\n\n    sample_weight : array-like of shape (n_samples,), default=None\n        Sample weights. If None, then samples are equally weighted.\n\n    Returns\n    -------\n    a : float\n        The slope.\n\n    b : float\n        The intercept.\n\n    References\n    ----------\n    Platt, \"Probabilistic Outputs for Support Vector Machines\"\n    \"\"\"\n    predictions = column_or_1d(predictions)\n    y = column_or_1d(y)\n\n    F = predictions  # F follows Platt's notations\n\n    # Bayesian priors (see Platt end of section 2.2):\n    # It corresponds to the number of samples, taking into account the\n    # `sample_weight`.\n    mask_negative_samples = y <= 0\n    if sample_weight is not None:\n        prior0 = (sample_weight[mask_negative_samples]).sum()\n        prior1 = (sample_weight[~mask_negative_samples]).sum()\n    else:\n        prior0 = float(np.sum(mask_negative_samples))\n        prior1 = y.shape[0] - prior0\n    T = np.zeros_like(y, dtype=np.float64)\n    T[y > 0] = (prior1 + 1.0) / (prior1 + 2.0)\n    T[y <= 0] = 1.0 / (prior0 + 2.0)\n    T1 = 1.0 - T\n\n    def objective(AB):\n        # From Platt (beginning of Section 2.2)\n        P = expit(-(AB[0] * F + AB[1]))\n        loss = -(xlogy(T, P) + xlogy(T1, 1.0 - P))\n        if sample_weight is not None:\n            return (sample_weight * loss).sum()\n        else:\n            return loss.sum()\n\n    def grad(AB):\n        # gradient of the objective function\n        P = expit(-(AB[0] * F + AB[1]))\n        TEP_minus_T1P = T - P\n        if sample_weight is not None:\n            TEP_minus_T1P *= sample_weight\n        dA = np.dot(TEP_minus_T1P, F)\n        dB = np.sum(TEP_minus_T1P)\n        return np.array([dA, dB])\n\n    AB0 = np.array([0.0, log((prior0 + 1.0) / (prior1 + 1.0))])\n    AB_ = fmin_bfgs(objective, AB0, fprime=grad, disp=False)\n    return AB_[0], AB_[1]\n\n\nclass _SigmoidCalibration(RegressorMixin, BaseEstimator):\n    \"\"\"Sigmoid regression model.\n\n    Attributes\n    ----------\n    a_ : float\n        The slope.\n\n    b_ : float\n        The intercept.\n    \"\"\"\n\n    def fit(self, X, y, sample_weight=None):\n        \"\"\"Fit the model using X, y as training data.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples,)\n            Training data.\n\n        y : array-like of shape (n_samples,)\n            Training target.\n\n        sample_weight : array-like of shape (n_samples,), default=None\n            Sample weights. If None, then samples are equally weighted.\n\n        Returns\n        -------\n        self : object\n            Returns an instance of self.\n        \"\"\"\n        X = column_or_1d(X)\n        y = column_or_1d(y)\n        X, y = indexable(X, y)\n\n        self.a_, self.b_ = _sigmoid_calibration(X, y, sample_weight)\n        return self\n\n    def predict(self, T):\n        \"\"\"Predict new data by linear interpolation.\n\n        Parameters\n        ----------\n        T : array-like of shape (n_samples,)\n            Data to predict from.\n\n        Returns\n        -------\n        T_ : ndarray of shape (n_samples,)\n            The predicted data.\n        \"\"\"\n        T = column_or_1d(T)\n        return expit(-(self.a_ * T + self.b_))\n\n\ndef calibration_curve(\n    y_true,\n    y_prob,\n    *,\n    pos_label=None,\n    normalize=\"deprecated\",\n    n_bins=5,\n    strategy=\"uniform\",\n):\n    \"\"\"Compute true and predicted probabilities for a calibration curve.\n\n    The method assumes the inputs come from a binary classifier, and\n    discretize the [0, 1] interval into bins.\n\n    Calibration curves may also be referred to as reliability diagrams.\n\n    Read more in the :ref:`User Guide <calibration>`.\n\n    Parameters\n    ----------\n    y_true : array-like of shape (n_samples,)\n        True targets.\n\n    y_prob : array-like of shape (n_samples,)\n        Probabilities of the positive class.\n\n    pos_label : int or str, default=None\n        The label of the positive class.\n\n        .. versionadded:: 1.1\n\n    normalize : bool, default=\"deprecated\"\n        Whether y_prob needs to be normalized into the [0, 1] interval, i.e.\n        is not a proper probability. If True, the smallest value in y_prob\n        is linearly mapped onto 0 and the largest one onto 1.\n\n        .. deprecated:: 1.1\n            The normalize argument is deprecated in v1.1 and will be removed in v1.3.\n            Explicitly normalizing `y_prob` will reproduce this behavior, but it is\n            recommended that a proper probability is used (i.e. a classifier's\n            `predict_proba` positive class).\n\n    n_bins : int, default=5\n        Number of bins to discretize the [0, 1] interval. A bigger number\n        requires more data. Bins with no samples (i.e. without\n        corresponding values in `y_prob`) will not be returned, thus the\n        returned arrays may have less than `n_bins` values.\n\n    strategy : {'uniform', 'quantile'}, default='uniform'\n        Strategy used to define the widths of the bins.\n\n        uniform\n            The bins have identical widths.\n        quantile\n            The bins have the same number of samples and depend on `y_prob`.\n\n    Returns\n    -------\n    prob_true : ndarray of shape (n_bins,) or smaller\n        The proportion of samples whose class is the positive class, in each\n        bin (fraction of positives).\n\n    prob_pred : ndarray of shape (n_bins,) or smaller\n        The mean predicted probability in each bin.\n\n    References\n    ----------\n    Alexandru Niculescu-Mizil and Rich Caruana (2005) Predicting Good\n    Probabilities With Supervised Learning, in Proceedings of the 22nd\n    International Conference on Machine Learning (ICML).\n    See section 4 (Qualitative Analysis of Predictions).\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.calibration import calibration_curve\n    >>> y_true = np.array([0, 0, 0, 0, 1, 1, 1, 1, 1])\n    >>> y_pred = np.array([0.1, 0.2, 0.3, 0.4, 0.65, 0.7, 0.8, 0.9,  1.])\n    >>> prob_true, prob_pred = calibration_curve(y_true, y_pred, n_bins=3)\n    >>> prob_true\n    array([0. , 0.5, 1. ])\n    >>> prob_pred\n    array([0.2  , 0.525, 0.85 ])\n    \"\"\"\n    y_true = column_or_1d(y_true)\n    y_prob = column_or_1d(y_prob)\n    check_consistent_length(y_true, y_prob)\n    pos_label = _check_pos_label_consistency(pos_label, y_true)\n\n    # TODO(1.3): Remove normalize conditional block.\n    if normalize != \"deprecated\":\n        warnings.warn(\n            \"The normalize argument is deprecated in v1.1 and will be removed in v1.3.\"\n            \" Explicitly normalizing y_prob will reproduce this behavior, but it is\"\n            \" recommended that a proper probability is used (i.e. a classifier's\"\n            \" `predict_proba` positive class or `decision_function` output calibrated\"\n            \" with `CalibratedClassifierCV`).\",\n            FutureWarning,\n        )\n        if normalize:  # Normalize predicted values into interval [0, 1]\n            y_prob = (y_prob - y_prob.min()) / (y_prob.max() - y_prob.min())\n\n    if y_prob.min() < 0 or y_prob.max() > 1:\n        raise ValueError(\"y_prob has values outside [0, 1].\")\n\n    labels = np.unique(y_true)\n    if len(labels) > 2:\n        raise ValueError(\n            f\"Only binary classification is supported. Provided labels {labels}.\"\n        )\n    y_true = y_true == pos_label\n\n    if strategy == \"quantile\":  # Determine bin edges by distribution of data\n        quantiles = np.linspace(0, 1, n_bins + 1)\n        bins = np.percentile(y_prob, quantiles * 100)\n    elif strategy == \"uniform\":\n        bins = np.linspace(0.0, 1.0, n_bins + 1)\n    else:\n        raise ValueError(\n            \"Invalid entry to 'strategy' input. Strategy \"\n            \"must be either 'quantile' or 'uniform'.\"\n        )\n\n    binids = np.searchsorted(bins[1:-1], y_prob)\n\n    bin_sums = np.bincount(binids, weights=y_prob, minlength=len(bins))\n    bin_true = np.bincount(binids, weights=y_true, minlength=len(bins))\n    bin_total = np.bincount(binids, minlength=len(bins))\n\n    nonzero = bin_total != 0\n    prob_true = bin_true[nonzero] / bin_total[nonzero]\n    prob_pred = bin_sums[nonzero] / bin_total[nonzero]\n\n    return prob_true, prob_pred\n\n\nclass CalibrationDisplay:\n    \"\"\"Calibration curve (also known as reliability diagram) visualization.\n\n    It is recommended to use\n    :func:`~sklearn.calibration.CalibrationDisplay.from_estimator` or\n    :func:`~sklearn.calibration.CalibrationDisplay.from_predictions`\n    to create a `CalibrationDisplay`. All parameters are stored as attributes.\n\n    Read more about calibration in the :ref:`User Guide <calibration>` and\n    more about the scikit-learn visualization API in :ref:`visualizations`.\n\n    .. versionadded:: 1.0\n\n    Parameters\n    ----------\n    prob_true : ndarray of shape (n_bins,)\n        The proportion of samples whose class is the positive class (fraction\n        of positives), in each bin.\n\n    prob_pred : ndarray of shape (n_bins,)\n        The mean predicted probability in each bin.\n\n    y_prob : ndarray of shape (n_samples,)\n        Probability estimates for the positive class, for each sample.\n\n    estimator_name : str, default=None\n        Name of estimator. If None, the estimator name is not shown.\n\n    pos_label : str or int, default=None\n        The positive class when computing the calibration curve.\n        By default, `estimators.classes_[1]` is considered as the\n        positive class.\n\n        .. versionadded:: 1.1\n\n    Attributes\n    ----------\n    line_ : matplotlib Artist\n        Calibration curve.\n\n    ax_ : matplotlib Axes\n        Axes with calibration curve.\n\n    figure_ : matplotlib Figure\n        Figure containing the curve.\n\n    See Also\n    --------\n    calibration_curve : Compute true and predicted probabilities for a\n        calibration curve.\n    CalibrationDisplay.from_predictions : Plot calibration curve using true\n        and predicted labels.\n    CalibrationDisplay.from_estimator : Plot calibration curve using an\n        estimator and data.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import make_classification\n    >>> from sklearn.model_selection import train_test_split\n    >>> from sklearn.linear_model import LogisticRegression\n    >>> from sklearn.calibration import calibration_curve, CalibrationDisplay\n    >>> X, y = make_classification(random_state=0)\n    >>> X_train, X_test, y_train, y_test = train_test_split(\n    ...     X, y, random_state=0)\n    >>> clf = LogisticRegression(random_state=0)\n    >>> clf.fit(X_train, y_train)\n    LogisticRegression(random_state=0)\n    >>> y_prob = clf.predict_proba(X_test)[:, 1]\n    >>> prob_true, prob_pred = calibration_curve(y_test, y_prob, n_bins=10)\n    >>> disp = CalibrationDisplay(prob_true, prob_pred, y_prob)\n    >>> disp.plot()\n    <...>\n    \"\"\"\n\n    def __init__(\n        self, prob_true, prob_pred, y_prob, *, estimator_name=None, pos_label=None\n    ):\n        self.prob_true = prob_true\n        self.prob_pred = prob_pred\n        self.y_prob = y_prob\n        self.estimator_name = estimator_name\n        self.pos_label = pos_label\n\n    def plot(self, *, ax=None, name=None, ref_line=True, **kwargs):\n        \"\"\"Plot visualization.\n\n        Extra keyword arguments will be passed to\n        :func:`matplotlib.pyplot.plot`.\n\n        Parameters\n        ----------\n        ax : Matplotlib Axes, default=None\n            Axes object to plot on. If `None`, a new figure and axes is\n            created.\n\n        name : str, default=None\n            Name for labeling curve. If `None`, use `estimator_name` if\n            not `None`, otherwise no labeling is shown.\n\n        ref_line : bool, default=True\n            If `True`, plots a reference line representing a perfectly\n            calibrated classifier.\n\n        **kwargs : dict\n            Keyword arguments to be passed to :func:`matplotlib.pyplot.plot`.\n\n        Returns\n        -------\n        display : :class:`~sklearn.calibration.CalibrationDisplay`\n            Object that stores computed values.\n        \"\"\"\n        check_matplotlib_support(\"CalibrationDisplay.plot\")\n        import matplotlib.pyplot as plt\n\n        if ax is None:\n            fig, ax = plt.subplots()\n\n        name = self.estimator_name if name is None else name\n        info_pos_label = (\n            f\"(Positive class: {self.pos_label})\" if self.pos_label is not None else \"\"\n        )\n\n        line_kwargs = {}\n        if name is not None:\n            line_kwargs[\"label\"] = name\n        line_kwargs.update(**kwargs)\n\n        ref_line_label = \"Perfectly calibrated\"\n        existing_ref_line = ref_line_label in ax.get_legend_handles_labels()[1]\n        if ref_line and not existing_ref_line:\n            ax.plot([0, 1], [0, 1], \"k:\", label=ref_line_label)\n        self.line_ = ax.plot(self.prob_pred, self.prob_true, \"s-\", **line_kwargs)[0]\n\n        # We always have to show the legend for at least the reference line\n        ax.legend(loc=\"lower right\")\n\n        xlabel = f\"Mean predicted probability {info_pos_label}\"\n        ylabel = f\"Fraction of positives {info_pos_label}\"\n        ax.set(xlabel=xlabel, ylabel=ylabel)\n\n        self.ax_ = ax\n        self.figure_ = ax.figure\n        return self\n\n    @classmethod\n    def from_estimator(\n        cls,\n        estimator,\n        X,\n        y,\n        *,\n        n_bins=5,\n        strategy=\"uniform\",\n        pos_label=None,\n        name=None,\n        ref_line=True,\n        ax=None,\n        **kwargs,\n    ):\n        \"\"\"Plot calibration curve using a binary classifier and data.\n\n        A calibration curve, also known as a reliability diagram, uses inputs\n        from a binary classifier and plots the average predicted probability\n        for each bin against the fraction of positive classes, on the\n        y-axis.\n\n        Extra keyword arguments will be passed to\n        :func:`matplotlib.pyplot.plot`.\n\n        Read more about calibration in the :ref:`User Guide <calibration>` and\n        more about the scikit-learn visualization API in :ref:`visualizations`.\n\n        .. versionadded:: 1.0\n\n        Parameters\n        ----------\n        estimator : estimator instance\n            Fitted classifier or a fitted :class:`~sklearn.pipeline.Pipeline`\n            in which the last estimator is a classifier. The classifier must\n            have a :term:`predict_proba` method.\n\n        X : {array-like, sparse matrix} of shape (n_samples, n_features)\n            Input values.\n\n        y : array-like of shape (n_samples,)\n            Binary target values.\n\n        n_bins : int, default=5\n            Number of bins to discretize the [0, 1] interval into when\n            calculating the calibration curve. A bigger number requires more\n            data.\n\n        strategy : {'uniform', 'quantile'}, default='uniform'\n            Strategy used to define the widths of the bins.\n\n            - `'uniform'`: The bins have identical widths.\n            - `'quantile'`: The bins have the same number of samples and depend\n              on predicted probabilities.\n\n        pos_label : str or int, default=None\n            The positive class when computing the calibration curve.\n            By default, `estimators.classes_[1]` is considered as the\n            positive class.\n\n            .. versionadded:: 1.1\n\n        name : str, default=None\n            Name for labeling curve. If `None`, the name of the estimator is\n            used.\n\n        ref_line : bool, default=True\n            If `True`, plots a reference line representing a perfectly\n            calibrated classifier.\n\n        ax : matplotlib axes, default=None\n            Axes object to plot on. If `None`, a new figure and axes is\n            created.\n\n        **kwargs : dict\n            Keyword arguments to be passed to :func:`matplotlib.pyplot.plot`.\n\n        Returns\n        -------\n        display : :class:`~sklearn.calibration.CalibrationDisplay`.\n            Object that stores computed values.\n\n        See Also\n        --------\n        CalibrationDisplay.from_predictions : Plot calibration curve using true\n            and predicted labels.\n\n        Examples\n        --------\n        >>> import matplotlib.pyplot as plt\n        >>> from sklearn.datasets import make_classification\n        >>> from sklearn.model_selection import train_test_split\n        >>> from sklearn.linear_model import LogisticRegression\n        >>> from sklearn.calibration import CalibrationDisplay\n        >>> X, y = make_classification(random_state=0)\n        >>> X_train, X_test, y_train, y_test = train_test_split(\n        ...     X, y, random_state=0)\n        >>> clf = LogisticRegression(random_state=0)\n        >>> clf.fit(X_train, y_train)\n        LogisticRegression(random_state=0)\n        >>> disp = CalibrationDisplay.from_estimator(clf, X_test, y_test)\n        >>> plt.show()\n        \"\"\"\n        method_name = f\"{cls.__name__}.from_estimator\"\n        check_matplotlib_support(method_name)\n\n        if not is_classifier(estimator):\n            raise ValueError(\"'estimator' should be a fitted classifier.\")\n\n        y_prob, pos_label = _get_response(\n            X, estimator, response_method=\"predict_proba\", pos_label=pos_label\n        )\n\n        name = name if name is not None else estimator.__class__.__name__\n        return cls.from_predictions(\n            y,\n            y_prob,\n            n_bins=n_bins,\n            strategy=strategy,\n            pos_label=pos_label,\n            name=name,\n            ref_line=ref_line,\n            ax=ax,\n            **kwargs,\n        )\n\n    @classmethod\n    def from_predictions(\n        cls,\n        y_true,\n        y_prob,\n        *,\n        n_bins=5,\n        strategy=\"uniform\",\n        pos_label=None,\n        name=None,\n        ref_line=True,\n        ax=None,\n        **kwargs,\n    ):\n        \"\"\"Plot calibration curve using true labels and predicted probabilities.\n\n        Calibration curve, also known as reliability diagram, uses inputs\n        from a binary classifier and plots the average predicted probability\n        for each bin against the fraction of positive classes, on the\n        y-axis.\n\n        Extra keyword arguments will be passed to\n        :func:`matplotlib.pyplot.plot`.\n\n        Read more about calibration in the :ref:`User Guide <calibration>` and\n        more about the scikit-learn visualization API in :ref:`visualizations`.\n\n        .. versionadded:: 1.0\n\n        Parameters\n        ----------\n        y_true : array-like of shape (n_samples,)\n            True labels.\n\n        y_prob : array-like of shape (n_samples,)\n            The predicted probabilities of the positive class.\n\n        n_bins : int, default=5\n            Number of bins to discretize the [0, 1] interval into when\n            calculating the calibration curve. A bigger number requires more\n            data.\n\n        strategy : {'uniform', 'quantile'}, default='uniform'\n            Strategy used to define the widths of the bins.\n\n            - `'uniform'`: The bins have identical widths.\n            - `'quantile'`: The bins have the same number of samples and depend\n              on predicted probabilities.\n\n        pos_label : str or int, default=None\n            The positive class when computing the calibration curve.\n            By default, `estimators.classes_[1]` is considered as the\n            positive class.\n\n            .. versionadded:: 1.1\n\n        name : str, default=None\n            Name for labeling curve.\n\n        ref_line : bool, default=True\n            If `True`, plots a reference line representing a perfectly\n            calibrated classifier.\n\n        ax : matplotlib axes, default=None\n            Axes object to plot on. If `None`, a new figure and axes is\n            created.\n\n        **kwargs : dict\n            Keyword arguments to be passed to :func:`matplotlib.pyplot.plot`.\n\n        Returns\n        -------\n        display : :class:`~sklearn.calibration.CalibrationDisplay`.\n            Object that stores computed values.\n\n        See Also\n        --------\n        CalibrationDisplay.from_estimator : Plot calibration curve using an\n            estimator and data.\n\n        Examples\n        --------\n        >>> import matplotlib.pyplot as plt\n        >>> from sklearn.datasets import make_classification\n        >>> from sklearn.model_selection import train_test_split\n        >>> from sklearn.linear_model import LogisticRegression\n        >>> from sklearn.calibration import CalibrationDisplay\n        >>> X, y = make_classification(random_state=0)\n        >>> X_train, X_test, y_train, y_test = train_test_split(\n        ...     X, y, random_state=0)\n        >>> clf = LogisticRegression(random_state=0)\n        >>> clf.fit(X_train, y_train)\n        LogisticRegression(random_state=0)\n        >>> y_prob = clf.predict_proba(X_test)[:, 1]\n        >>> disp = CalibrationDisplay.from_predictions(y_test, y_prob)\n        >>> plt.show()\n        \"\"\"\n        method_name = f\"{cls.__name__}.from_estimator\"\n        check_matplotlib_support(method_name)\n\n        prob_true, prob_pred = calibration_curve(\n            y_true, y_prob, n_bins=n_bins, strategy=strategy, pos_label=pos_label\n        )\n        name = \"Classifier\" if name is None else name\n        pos_label = _check_pos_label_consistency(pos_label, y_true)\n\n        disp = cls(\n            prob_true=prob_true,\n            prob_pred=prob_pred,\n            y_prob=y_prob,\n            estimator_name=name,\n            pos_label=pos_label,\n        )\n        return disp.plot(ax=ax, ref_line=ref_line, **kwargs)", "normalized_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex cd60489..7f536dc 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -170,7 +170,8 @@ class _CalibratedClassifier:\n         for (class_idx, this_pred, calibrator) in zip(pos_class_indices, predictions.T, self.calibrators):\n             if n_classes == 2:\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+            this_pred_np = np.asarray(this_pred)\n+            proba[:, class_idx] = calibrator.predict(this_pred_np)\n         if n_classes == 2:\n             proba[:, 0] = 1.0 - proba[:, 1]\n         else:\n"}
