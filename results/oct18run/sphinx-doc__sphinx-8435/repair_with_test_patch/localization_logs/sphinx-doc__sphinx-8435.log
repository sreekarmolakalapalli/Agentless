2024-10-18 13:35:56,098 - INFO - ================ repairing sphinx-doc__sphinx-8435 ================
2024-10-18 13:36:15,594 - INFO - prompting with message:
We are currently solving the following issue within our repository. Here is the issue text:
--- BEGIN ISSUE ---
autodoc_type_aliases does not effect to variables and attributes
**Describe the bug**
autodoc_type_aliases does not effect to variables and attributes

**To Reproduce**

```
# example.py
from __future__ import annotations


#: blah blah blah
var: String


class MyString:
    "mystring"

    #: blah blah blah
    var: String
```
```
# index.rst
.. automodule:: example
   :members:
   :undoc-members:
```
```
# conf.py
autodoc_type_aliases = {
    'String': 'example.MyString'
}
```

**Expected behavior**
`autodoc_type_aliases` should be applied to `example.var` and `example.MyString.var`.

**Your project**
N/A

**Screenshots**
N/A

**Environment info**
- OS: Mac
- Python version: 3.9.0
- Sphinx version: HEAD of 3.x branch
- Sphinx extensions: sphinx.ext.autodoc
- Extra tools: Nothing

**Additional context**
N/A

--- END ISSUE ---


We also have a fail to pass unit test for the given issue. We can use this to help identify and fix the issue. Here is the patch text:
--- BEGIN PATCH ---
diff --git a/tests/roots/test-ext-autodoc/target/annotations.py b/tests/roots/test-ext-autodoc/target/annotations.py
--- a/tests/roots/test-ext-autodoc/target/annotations.py
+++ b/tests/roots/test-ext-autodoc/target/annotations.py
@@ -4,6 +4,9 @@
 
 myint = int
 
+#: docstring
+variable: myint
+
 
 def sum(x: myint, y: myint) -> myint:
     """docstring"""
@@ -23,3 +26,10 @@ def mult(x: float, y: float) -> float:
 def mult(x, y):
     """docstring"""
     return x, y
+
+
+class Foo:
+    """docstring"""
+
+    #: docstring
+    attr: myint
diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py
--- a/tests/test_ext_autodoc_configs.py
+++ b/tests/test_ext_autodoc_configs.py
@@ -700,6 +700,19 @@ def test_autodoc_type_aliases(app):
         '.. py:module:: target.annotations',
         '',
         '',
+        '.. py:class:: Foo()',
+        '   :module: target.annotations',
+        '',
+        '   docstring',
+        '',
+        '',
+        '   .. py:attribute:: Foo.attr',
+        '      :module: target.annotations',
+        '      :type: int',
+        '',
+        '      docstring',
+        '',
+        '',
         '.. py:function:: mult(x: int, y: int) -> int',
         '                 mult(x: float, y: float) -> float',
         '   :module: target.annotations',
@@ -712,6 +725,13 @@ def test_autodoc_type_aliases(app):
         '',
         '   docstring',
         '',
+        '',
+        '.. py:data:: variable',
+        '   :module: target.annotations',
+        '   :type: int',
+        '',
+        '   docstring',
+        '',
     ]
 
     # define aliases
@@ -722,6 +742,19 @@ def test_autodoc_type_aliases(app):
         '.. py:module:: target.annotations',
         '',
         '',
+        '.. py:class:: Foo()',
+        '   :module: target.annotations',
+        '',
+        '   docstring',
+        '',
+        '',
+        '   .. py:attribute:: Foo.attr',
+        '      :module: target.annotations',
+        '      :type: myint',
+        '',
+        '      docstring',
+        '',
+        '',
         '.. py:function:: mult(x: myint, y: myint) -> myint',
         '                 mult(x: float, y: float) -> float',
         '   :module: target.annotations',
@@ -734,6 +767,13 @@ def test_autodoc_type_aliases(app):
         '',
         '   docstring',
         '',
+        '',
+        '.. py:data:: variable',
+        '   :module: target.annotations',
+        '   :type: myint',
+        '',
+        '   docstring',
+        '',
     ]
 
 

--- END PATCH ---



Below are some code segments, each from a relevant file. One or more of these files may contain bugs.

--- BEGIN FILE ---
```
### sphinx/ext/autodoc/typehints.py
...
from typing import Any, Dict, Iterable, cast

from docutils import nodes
from docutils.nodes import Element

from sphinx import addnodes
from sphinx.application import Sphinx
from sphinx.util import inspect, typing


def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
                     options: Dict, args: str, retann: str) -> None:
    """Record type hints to env object."""
    try:
        if callable(obj):
            annotations = app.env.temp_data.setdefault('annotations', {})
            annotation = annotations.setdefault(name, OrderedDict())
            sig = inspect.signature(obj)
            for param in sig.parameters.values():
                if param.annotation is not param.empty:
                    annotation[param.name] = typing.stringify(param.annotation)
            if sig.return_annotation is not sig.empty:
                annotation['return'] = typing.stringify(sig.return_annotation)
    except (TypeError, ValueError):
        pass


def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:
    if domain != 'py':
        return
    if app.config.autodoc_typehints != 'description':
        return
    if objtype == 'class' and app.config.autoclass_content not in ('init', 'both'):
        return

    try:
        signature = cast(addnodes.desc_signature, contentnode.parent[0])
        if signature['module']:
            fullname = '.'.join([signature['module'], signature['fullname']])
        else:
            fullname = signature['fullname']
    except KeyError:
        # signature node does not have valid context info for the target object
        return

    annotations = app.env.temp_data.get('annotations', {})
    if annotations.get(fullname, {}):
        field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]
        if field_lists == []:
            field_list = insert_field_list(contentnode)
            field_lists.append(field_list)

        for field_list in field_lists:
            modify_field_list(field_list, annotations[fullname])


def insert_field_list(node: Element) -> nodes.field_list:
    field_list = nodes.field_list()
    desc = [n for n in node if isinstance(n, addnodes.desc)]
    if desc:
        # insert just before sub object descriptions (ex. methods, nested classes, etc.)
        index = node.index(desc[0])
        node.insert(index - 1, [field_list])
    else:
        node += field_list

    return field_list


def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:
    arguments = {}  # type: Dict[str, Dict[str, bool]]
    fields = cast(Iterable[nodes.field], node)
    for field in fields:
        field_name = field[0].astext()
        parts = re.split(' +', field_name)
        if parts[0] == 'param':
            if len(parts) == 2:
                # :param xxx:
                arg = arguments.setdefault(parts[1], {})
                arg['param'] = True
            elif len(parts) > 2:
                # :param xxx yyy:
                name = ' '.join(parts[2:])
                arg = arguments.setdefault(name, {})
                arg['param'] = True
                arg['type'] = True
        elif parts[0] == 'type':
            name = ' '.join(parts[1:])
            arg = arguments.setdefault(name, {})
            arg['type'] = True
        elif parts[0] == 'rtype':
            arguments['return'] = {'type': True}

    for name, annotation in annotations.items():
        if name == 'return':
            continue

        arg = arguments.get(name, {})
        if not arg.get('type'):
            field = nodes.field()
            field += nodes.field_name('', 'type ' + name)
            field += nodes.field_body('', nodes.paragraph('', annotation))
            node += field
        if not arg.get('param'):
            field = nodes.field()
            field += nodes.field_name('', 'param ' + name)
            field += nodes.field_body('', nodes.paragraph('', ''))
            node += field

    if 'return' in annotations and 'return' not in arguments:
        field = nodes.field()
        field += nodes.field_name('', 'rtype')
        field += nodes.field_body('', nodes.paragraph('', annotation))
        node += field


def setup(app: Sphinx) -> Dict[str, Any]:
    app.connect('autodoc-process-signature', record_typehints)
    app.connect('object-description-transform', merge_typehints)

    return {
        'version': 'builtin',
        'parallel_read_safe': True,
        'parallel_write_safe': True,
...


### sphinx/ext/autodoc/directive.py
...
            warnings.warn('DocumenterBridge requires a state object on instantiation.',
                          RemovedInSphinx40Warning, stacklevel=2)
            settings = Struct(tab_width=8)
            document = Struct(settings=settings)
            self.state = Struct(document=document)

    def warn(self, msg: str) -> None:
        logger.warning(msg, location=(self.env.docname, self.lineno))


def process_documenter_options(documenter: "Type[Documenter]", config: Config, options: Dict
                               ) -> Options:
    """Recognize options of Documenter from user input."""
    for name in AUTODOC_DEFAULT_OPTIONS:
        if name not in documenter.option_spec:
            continue
        else:
            negated = options.pop('no-' + name, True) is None
            if name in config.autodoc_default_options and not negated:
                options[name] = config.autodoc_default_options[name]

    return Options(assemble_option_dict(options.items(), documenter.option_spec))


def parse_generated_content(state: RSTState, content: StringList, documenter: Documenter
                            ) -> List[Node]:
    """Parse a generated content by Documenter."""
    with switch_source_input(state, content):
        if documenter.titles_allowed:
            node = nodes.section()  # type: Element
            # necessary so that the child nodes get the right source/line set
            node.document = state.document
...

    It invokes a Documenter on running. After the processing, it parses and returns
    the generated content by Documenter.
    """
    option_spec = DummyOptionSpec()
    has_content = True
    required_arguments = 1
    optional_arguments = 0
    final_argument_whitespace = True

    def run(self) -> List[Node]:
        reporter = self.state.document.reporter

        try:
            source, lineno = reporter.get_source_and_line(self.lineno)  # type: ignore
        except AttributeError:
            source, lineno = (None, None)
        logger.debug('[autodoc] %s:%s: input:\n%s', source, lineno, self.block_text)

        # look up target Documenter
        objtype = self.name[4:]  # strip prefix (auto-).
        doccls = self.env.app.registry.documenters[objtype]

        # process the options with the selected documenter's option_spec
        try:
            documenter_options = process_documenter_options(doccls, self.config, self.options)
        except (KeyError, ValueError, TypeError) as exc:
            # an option is either unknown or has a wrong type
            logger.error('An option to %s is either unknown or has an invalid value: %s' %
                         (self.name, exc), location=(self.env.docname, lineno))
            return []

        # generate the output
        params = DocumenterBridge(self.env, reporter, documenter_options, lineno, self.state)
        documenter = doccls(params, self.arguments[0])
        documenter.generate(more_content=self.content)
        if not params.result:
            return []

        logger.debug('[autodoc] output:\n%s', '\n'.join(params.result))

        # record all filenames as dependencies -- this will at least
        # partially make automatic invalidation possible
        for fn in params.filename_set:
            self.state.document.settings.record_dependencies.add(fn)

        result = parse_generated_content(self.state, params.result, documenter)
        return result


### sphinx/ext/autodoc/__init__.py
...

    # needs a higher priority than ClassDocumenter
    priority = 10

    @classmethod
    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
                            ) -> bool:
        return isinstance(member, type) and issubclass(member, BaseException)


class DataDocumenter(ModuleLevelDocumenter):
    """
    Specialized Documenter subclass for data items.
    """
    objtype = 'data'
    member_order = 40
    priority = -10
    option_spec = dict(ModuleLevelDocumenter.option_spec)
    option_spec["annotation"] = annotation_option

    @classmethod
    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
                            ) -> bool:
        return isinstance(parent, ModuleDocumenter) and isattr

    def add_directive_header(self, sig: str) -> None:
        super().add_directive_header(sig)
        sourcename = self.get_sourcename()
        if not self.options.annotation:
            # obtain annotation for this data
            try:
                annotations = get_type_hints(self.parent)
            except NameError:
                # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)
                annotations = safe_getattr(self.parent, '__annotations__', {})
            except TypeError:
                annotations = {}
            except KeyError:
                # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)
                annotations = {}
            except AttributeError:
                # AttributeError is raised on 3.5.2 (fixed by 3.5.3)
                annotations = {}

            if self.objpath[-1] in annotations:
                objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
                self.add_line('   :type: ' + objrepr, sourcename)
            else:
                key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                if self.analyzer and key in self.analyzer.annotations:
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)

            try:
                if self.object is UNINITIALIZED_ATTR:
                    pass
                else:
                    objrepr = object_description(self.object)
                    self.add_line('   :value: ' + objrepr, sourcename)
            except ValueError:
                pass
        elif self.options.annotation is SUPPRESS:
            pass
        else:
            self.add_line('   :annotation: %s' % self.options.annotation,
                          sourcename)

    def document_members(self, all_members: bool = False) -> None:
        pass

    def get_real_modname(self) -> str:
        return self.get_attr(self.parent or self.object, '__module__', None) \
            or self.modname


class DataDeclarationDocumenter(DataDocumenter):
    """
    Specialized Documenter subclass for data that cannot be imported
    because they are declared without initial value (refs: PEP-526).
    """
    objtype = 'datadecl'
    directivetype = 'data'
    member_order = 60
...

    Retained for backwards compatibility, now does the same as the MethodDocumenter
    """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        warnings.warn("%s is deprecated." % self.__class__.__name__,
                      RemovedInSphinx50Warning, stacklevel=2)
        super().__init__(*args, **kwargs)


class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  # type: ignore
    """
    Specialized Documenter subclass for attributes.
    """
    objtype = 'attribute'
    member_order = 60
    option_spec = dict(ModuleLevelDocumenter.option_spec)
    option_spec["annotation"] = annotation_option

    # must be higher than the MethodDocumenter, else it will recognize
    # some non-data descriptors as methods
    priority = 10

    @staticmethod
    def is_function_or_method(obj: Any) -> bool:
        return inspect.isfunction(obj) or inspect.isbuiltin(obj) or inspect.ismethod(obj)

    @classmethod
    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
                            ) -> bool:
        if inspect.isattributedescriptor(member):
            return True
        elif (not isinstance(parent, ModuleDocumenter) and
              not inspect.isroutine(member) and
              not isinstance(member, type)):
            return True
        else:
            return False

    def document_members(self, all_members: bool = False) -> None:
        pass

    def isinstanceattribute(self) -> bool:
        """Check the subject is an instance attribute."""
        try:
            analyzer = ModuleAnalyzer.for_module(self.modname)
            attr_docs = analyzer.find_attr_docs()
            if self.objpath:
                key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                if key in attr_docs:
                    return True

            return False
        except PycodeError:
            return False

    def import_object(self, raiseerror: bool = False) -> bool:
        try:
            ret = super().import_object(raiseerror=True)
            if inspect.isenumattribute(self.object):
                self.object = self.object.value
            if inspect.isattributedescriptor(self.object):
                self._datadescriptor = True
            else:
                # if it's not a data descriptor
                self._datadescriptor = False
        except ImportError as exc:
            if self.isinstanceattribute():
                self.object = INSTANCEATTR
                self._datadescriptor = False
                ret = True
            elif raiseerror:
                raise
            else:
                logger.warning(exc.args[0], type='autodoc', subtype='import_object')
                self.env.note_reread()
                ret = False

        return ret

    def get_real_modname(self) -> str:
        return self.get_attr(self.parent or self.object, '__module__', None) \
            or self.modname

    def add_directive_header(self, sig: str) -> None:
        super().add_directive_header(sig)
        sourcename = self.get_sourcename()
        if not self.options.annotation:
            # obtain type annotation for this attribute
            try:
                annotations = get_type_hints(self.parent)
            except NameError:
                # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)
                annotations = safe_getattr(self.parent, '__annotations__', {})
            except TypeError:
                annotations = {}
            except KeyError:
                # a broken class found (refs: https://github.com/sphinx-doc/sphinx/issues/8084)
                annotations = {}
            except AttributeError:
                # AttributeError is raised on 3.5.2 (fixed by 3.5.3)
                annotations = {}

            if self.objpath[-1] in annotations:
                objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
                self.add_line('   :type: ' + objrepr, sourcename)
            else:
                key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                if self.analyzer and key in self.analyzer.annotations:
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)

            # data descriptors do not have useful values
            if not self._datadescriptor:
                try:
                    if self.object is INSTANCEATTR:
                        pass
                    else:
                        objrepr = object_description(self.object)
                        self.add_line('   :value: ' + objrepr, sourcename)
                except ValueError:
                    pass
        elif self.options.annotation is SUPPRESS:
            pass
        else:
            self.add_line('   :annotation: %s' % self.options.annotation, sourcename)

    def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:
        try:
            # Disable `autodoc_inherit_docstring` temporarily to avoid to obtain
            # a docstring from the value which descriptor returns unexpectedly.
            # ref: https://github.com/sphinx-doc/sphinx/issues/7805
            orig = self.config.autodoc_inherit_docstrings
            self.config.autodoc_inherit_docstrings = False  # type: ignore
            return super().get_doc(encoding, ignore)
        finally:
            self.config.autodoc_inherit_docstrings = orig  # type: ignore

    def add_content(self, more_content: Any, no_docstring: bool = False) -> None:
        if not self._datadescriptor:
            # if it's not a data descriptor, its docstring is very probably the
            # wrong thing to display
            no_docstring = True
        super().add_content(more_content, no_docstring)


class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  # type: ignore
    """
    Specialized Documenter subclass for properties.
    """
    objtype = 'property'
    directivetype = 'method'
    member_order = 60

...
```
--- END FILE ---

Please first localize the bug based on the issue statement, and then generate *SEARCH/REPLACE* edits to fix the issue.

Every *SEARCH/REPLACE* edit must use this format:
1. The file path
2. The start of search block: <<<<<<< SEARCH
3. A contiguous chunk of lines to search for in the existing source code
4. The dividing line: =======
5. The lines to replace into the source code
6. The end of the replace block: >>>>>>> REPLACE

Here is an example:

```python
### mathweb/flask/app.py
<<<<<<< SEARCH
from flask import Flask
=======
import math
from flask import Flask
>>>>>>> REPLACE
```

Please note that the *SEARCH/REPLACE* edit REQUIRES PROPER INDENTATION. If you would like to add the line '        print(x)', you must fully write that out, with all those spaces before the code!
Wrap the *SEARCH/REPLACE* edit in blocks ```python...```.
2024-10-18 13:36:15,658 - INFO - Creating API request
2024-10-18 13:36:21,153 - INFO - API response ChatCompletion(id='chatcmpl-AJnzjH2QB71HaljWTPwGj5z4p7wcx', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content="To address the issue where `autodoc_type_aliases` does not affect variables and attributes, we need to ensure that the type aliases are applied correctly in the `DataDocumenter` and `AttributeDocumenter` classes. The changes will involve modifying the `add_directive_header` method in both classes to respect the `autodoc_type_aliases` configuration.\n\nHere are the necessary *SEARCH/REPLACE* edits:\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\nThese changes ensure that the type annotations for variables and attributes respect the `autodoc_type_aliases` configuration.", refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1729283775, model='gpt-4o-2024-05-13', object='chat.completion', service_tier=None, system_fingerprint='fp_568f3bfff7', usage=CompletionUsage(completion_tokens=450, prompt_tokens=4947, total_tokens=5397, completion_tokens_details=CompletionTokensDetails(audio_tokens=None, reasoning_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=None, cached_tokens=0)))
2024-10-18 13:36:21,237 - INFO - Creating API request
2024-10-18 13:36:31,123 - INFO - API response ChatCompletion(id='chatcmpl-AJnzphmu354AbZ8fkjYgRakeQXaBg', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content="Based on the issue description and the provided patch, it seems that the `autodoc_type_aliases` configuration option is not being applied to variables and attributes as expected. The root cause of the issue likely lies in the handling of type annotations in the `DataDocumenter` and `AttributeDocumenter` classes.\n\nHere are the necessary *SEARCH/REPLACE* edits to fix the issue:\n\n1. **File Path:** `sphinx/ext/autodoc/__init__.py`\n2. **Modifying the `DataDocumenter` class to use `autodoc_type_aliases`**\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + alias, sourcename)\n>>>>>>> REPLACE\n```\n\n3. **Modifying the `AttributeDocumenter` class to use `autodoc_type_aliases`**\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + alias, sourcename)\n>>>>>>> REPLACE\n```\n\nBy applying these changes, the `DataDocumenter` and `AttributeDocumenter` will correctly use `autodoc_type_aliases` to map type annotations to their specified aliases, which should resolve the issue described.", refusal=None, role='assistant', function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=1, logprobs=None, message=ChatCompletionMessage(content="Based on the issue statement and the provided code snippets, it appears that the `autodoc_type_aliases` setting does not affect type annotations for module-level variables or class attributes. The solution involves updating the `DataDocumenter` and `AttributeDocumenter` classes to respect these type aliases when generating documentation.\n\nHere are the `SEARCH/REPLACE` edits to fix the issue:\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n>>>>>>> REPLACE\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\nThese changes ensure that the type annotations for module-level variables and class attributes are appropriately replaced using the `autodoc_type_aliases` configuration.", refusal=None, role='assistant', function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=2, logprobs=None, message=ChatCompletionMessage(content="To address the issue where `autodoc_type_aliases` does not affect variables and attributes, we need to make changes to ensure that `autodoc_type_aliases` is considered when generating the type annotations for variables and attributes. \n\nHere are the required changes:\n\n### File: sphinx/ext/autodoc/__init__.py\nWe need to modify the `DataDocumenter` and `AttributeDocumenter` classes to use `autodoc_type_aliases` when applying type annotations.\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + alias, sourcename)\n>>>>>>> REPLACE\n```\n\n### File: sphinx/ext/autodoc/directive.py\nWe should ensure that the `autodoc_type_aliases` configuration is properly passed and used within the documenter.\n\n```python\n### sphinx/ext/autodoc/directive.py\n<<<<<<< SEARCH\n        documenter = doccls(params, self.arguments[0])\n=======\n        documenter = doccls(params, self.arguments[0], config=self.config)\n>>>>>>> REPLACE\n```\n\n### File: sphinx/ext/autodoc/typehints.py\nWe need to modify the `merge_typehints` function to consider `autodoc_type_aliases`.\n\n```python\n### sphinx/ext/autodoc/typehints.py\n<<<<<<< SEARCH\n            node += nodes.field_body('', nodes.paragraph('', annotation))\n=======\n            alias = app.config.autodoc_type_aliases.get(annotation, annotation)\n            node += nodes.field_body('', nodes.paragraph('', alias))\n>>>>>>> REPLACE\n```\n\n### Apply Changes\n\n- First, localize the lines in the `DataDocumenter` and `AttributeDocumenter` classes where type annotations are added.\n- Then, update `parse_generated_content` and `merge_typehints` to consider `autodoc_type_aliases`.\n\nApplying these changes will ensure that `autodoc_type_aliases` is effective for variables and attributes, thus fixing the reported issue. Make sure to re-run the tests to validate that the issue is resolved.", refusal=None, role='assistant', function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=3, logprobs=None, message=ChatCompletionMessage(content="The bug seems to be that `autodoc_type_aliases` is not being applied to variables and attributes. To fix this, we need to ensure that the type aliases defined in `conf.py` are being considered when generating the type annotations for variables and attributes.\n\nLet's start by localizing the issue. Based on the provided information, the issue likely lies in the `DataDocumenter` and `AttributeDocumenter` classes in `sphinx/ext/autodoc/__init__.py`. We'll need to ensure that these documenters apply the type aliases when adding the type annotations.\n\nHere are the necessary SEARCH/REPLACE edits to fix the issue:\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\nThese edits ensure that the type aliases defined in `conf.py` are applied to both module-level variables and class attributes. With these changes, `autodoc_type_aliases` should now correctly apply to the type annotations of variables and attributes.", refusal=None, role='assistant', function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=4, logprobs=None, message=ChatCompletionMessage(content="The issue seems to stem from the fact that `autodoc_type_aliases` is not being applied correctly to variables and attributes. This likely means that the current implementation does not consider aliases when generating the type annotation for these elements.\n\nGiven the provided files, we need to make changes in the `sphinx/ext/autodoc/typehints.py` file where type hints are processed and in the `sphinx/ext/autodoc/__init__.py` file where the type annotations for data and attributes are generated. We will update the logic to apply the `autodoc_type_aliases` configuration.\n\nHere are the necessary *SEARCH/REPLACE* edits:\n\n```python\n### sphinx/ext/autodoc/typehints.py\n<<<<<<< SEARCH\nfrom typing import Any, Dict, Iterable, cast\n=======\nfrom typing import Any, Dict, Iterable, cast, get_type_hints\n>>>>>>> REPLACE\n```\n\n```python\n### sphinx/ext/autodoc/typehints.py\n<<<<<<< SEARCH\n    annotations = app.env.temp_data.get('annotations', {})\n=======\n    annotations = app.env.temp_data.get('annotations', {})\n    type_aliases = app.config.autodoc_type_aliases\n    if type_aliases:\n        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}\n>>>>>>> REPLACE\n```\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                if self.env.config.autodoc_type_aliases:\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    if self.env.config.autodoc_type_aliases:\n                        objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\nThese changes introduce the logic needed to consider type aliases when processing type hints and generating type annotations for variables and attributes. This should resolve the issue described in the problem statement.", refusal=None, role='assistant', function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=5, logprobs=None, message=ChatCompletionMessage(content="The issue described indicates that the `autodoc_type_aliases` configuration does not apply to variables and attributes. A potential solution involves ensuring that the type aliases are applied correctly in the `DataDocumenter` and `AttributeDocumenter` classes.\n\nTo fix this, we should modify the `add_directive_header` methods in both the `DataDocumenter` and `AttributeDocumenter` classes to check for `autodoc_type_aliases` and apply them appropriately.\n\nHere are the needed changes:\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                # Apply autodoc_type_aliases if present in config\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    # Apply autodoc_type_aliases if present in config\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                # Apply autodoc_type_aliases if present in config\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    # Apply autodoc_type_aliases if present in config\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\nThese changes ensure that the `autodoc_type_aliases` configuration is applied to both variables (handled by `DataDocumenter`) and attributes (handled by `AttributeDocumenter`).", refusal=None, role='assistant', function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=6, logprobs=None, message=ChatCompletionMessage(content="To fix the reported issue where `autodoc_type_aliases` does not affect variables and attributes, we should modify the `DataDocumenter` and `AttributeDocumenter` classes, ensuring they account for type aliases. Here are the necessary *SEARCH/REPLACE* edits:\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr,\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr,\n>>>>>>> REPLACE\n```\n\nThese changes will ensure that the type aliases defined in `autodoc_type_aliases` are correctly applied to both variables and attributes within the Sphinx documentation. By retrieving the type annotation and checking against the `autodoc_type_aliases` dictionary, we can replace the type hint with the appropriate alias.", refusal=None, role='assistant', function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=7, logprobs=None, message=ChatCompletionMessage(content="The issue appears to be caused by the fact that the `autodoc_type_aliases` configuration is not affecting variable and attribute type annotations as expected. This is likely due to the `DataDocumenter` and `AttributeDocumenter` classes not considering `autodoc_type_aliases` when handling type annotations.\n\nWe can fix this by modifying the `DataDocumenter` and `AttributeDocumenter` classes to use `autodoc_type_aliases` when adding type annotations.\n\nHere are the necessary *SEARCH/REPLACE* edits to fix the issue:\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\nThese changes ensure that the type annotations for both module-level variables and class attributes are correctly replaced using the `autodoc_type_aliases` configuration.", refusal=None, role='assistant', function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=8, logprobs=None, message=ChatCompletionMessage(content="The issue described is that `autodoc_type_aliases` does not affect variables and attributes. We need to ensure that the `autodoc_type_aliases` configuration is applied to the annotations in both DataDocumenter and AttributeDocumenter.\n\nTo do this, we need to modify the code where annotations are retrieved and processed, ensuring they are replaced with the aliases defined in `autodoc_type_aliases`.\n\nHere are the necessary changes:\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\n```python\n### sphinx/ext/autodoc/__init__.py\n<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE\n```\n\n```python\n### sphinx/ext/autodoc/directive.py\n<<<<<<< SEARCH\n    def run(self) -> List[Node]:\n=======\ndef run(self) -> List[Node]:\n        app = self.env.app\n>>>>>>> REPLACE\n```\n\nWith these changes, `autodoc_type_aliases` should now be correctly applied to both variables and attributes in the documentation. The `objrepr` variable holding the type annotation is now replaced with its alias if it is defined in `autodoc_type_aliases`. This ensures that the aliases are honored in the generated documentation.\n\n1. The first change ensures that the type annotation for data items uses the alias if it exists.\n2. The second change ensures that type annotations from the analyzer also use the alias.\n3. The third change ensures that the `app` variable is accessible in the relevant context to retrieve the `autodoc_type_aliases` configuration.", refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1729283781, model='gpt-4o-2024-05-13', object='chat.completion', service_tier=None, system_fingerprint='fp_568f3bfff7', usage=CompletionUsage(completion_tokens=4154, prompt_tokens=4947, total_tokens=9101, completion_tokens_details=CompletionTokensDetails(audio_tokens=None, reasoning_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=None, cached_tokens=0)))
2024-10-18 13:36:31,124 - INFO - raw output:
To address the issue where `autodoc_type_aliases` does not affect variables and attributes, we need to ensure that the type aliases are applied correctly in the `DataDocumenter` and `AttributeDocumenter` classes. The changes will involve modifying the `add_directive_header` method in both classes to respect the `autodoc_type_aliases` configuration.

Here are the necessary *SEARCH/REPLACE* edits:

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

These changes ensure that the type annotations for variables and attributes respect the `autodoc_type_aliases` configuration.
2024-10-18 13:36:31,124 - INFO - === file_to_commands: ===
2024-10-18 13:36:31,124 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:31,124 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:31,125 - INFO - === edit_commands: ===
2024-10-18 13:36:31,125 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:31,125 - INFO - 
----------------------------------------
2024-10-18 13:36:31,125 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:31,125 - INFO - 
----------------------------------------
2024-10-18 13:36:31,141 - INFO - extracted patch:
2024-10-18 13:36:31,141 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:31,141 - INFO - raw output:
Based on the issue description and the provided patch, it seems that the `autodoc_type_aliases` configuration option is not being applied to variables and attributes as expected. The root cause of the issue likely lies in the handling of type annotations in the `DataDocumenter` and `AttributeDocumenter` classes.

Here are the necessary *SEARCH/REPLACE* edits to fix the issue:

1. **File Path:** `sphinx/ext/autodoc/__init__.py`
2. **Modifying the `DataDocumenter` class to use `autodoc_type_aliases`**

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + alias, sourcename)
>>>>>>> REPLACE
```

3. **Modifying the `AttributeDocumenter` class to use `autodoc_type_aliases`**

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + alias, sourcename)
>>>>>>> REPLACE
```

By applying these changes, the `DataDocumenter` and `AttributeDocumenter` will correctly use `autodoc_type_aliases` to map type annotations to their specified aliases, which should resolve the issue described.
2024-10-18 13:36:31,141 - INFO - === file_to_commands: ===
2024-10-18 13:36:31,142 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + alias, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:31,142 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:31,142 - INFO - === edit_commands: ===
2024-10-18 13:36:31,142 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + alias, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:31,142 - INFO - 
----------------------------------------
2024-10-18 13:36:31,148 - INFO - extracted patch:
2024-10-18 13:36:31,148 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,7 +1717,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
@@ -2108,7 +2109,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
2024-10-18 13:36:31,148 - INFO - raw output:
Based on the issue statement and the provided code snippets, it appears that the `autodoc_type_aliases` setting does not affect type annotations for module-level variables or class attributes. The solution involves updating the `DataDocumenter` and `AttributeDocumenter` classes to respect these type aliases when generating documentation.

Here are the `SEARCH/REPLACE` edits to fix the issue:

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
>>>>>>> REPLACE
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

These changes ensure that the type annotations for module-level variables and class attributes are appropriately replaced using the `autodoc_type_aliases` configuration.
2024-10-18 13:36:31,148 - INFO - === file_to_commands: ===
2024-10-18 13:36:31,148 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:31,149 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:31,149 - INFO - === edit_commands: ===
2024-10-18 13:36:31,149 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:31,149 - INFO - 
----------------------------------------
2024-10-18 13:36:31,149 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
>>>>>>> REPLACE
2024-10-18 13:36:31,149 - INFO - 
----------------------------------------
2024-10-18 13:36:31,149 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:31,149 - INFO - 
----------------------------------------
2024-10-18 13:36:31,158 - INFO - extracted patch:
2024-10-18 13:36:31,158 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,11 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
                                   sourcename)
 
             try:
@@ -2108,11 +2110,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
                                   sourcename)
 
             # data descriptors do not have useful values
2024-10-18 13:36:31,158 - INFO - raw output:
To address the issue where `autodoc_type_aliases` does not affect variables and attributes, we need to make changes to ensure that `autodoc_type_aliases` is considered when generating the type annotations for variables and attributes. 

Here are the required changes:

### File: sphinx/ext/autodoc/__init__.py
We need to modify the `DataDocumenter` and `AttributeDocumenter` classes to use `autodoc_type_aliases` when applying type annotations.

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + alias, sourcename)
>>>>>>> REPLACE
```

### File: sphinx/ext/autodoc/directive.py
We should ensure that the `autodoc_type_aliases` configuration is properly passed and used within the documenter.

```python
### sphinx/ext/autodoc/directive.py
<<<<<<< SEARCH
        documenter = doccls(params, self.arguments[0])
=======
        documenter = doccls(params, self.arguments[0], config=self.config)
>>>>>>> REPLACE
```

### File: sphinx/ext/autodoc/typehints.py
We need to modify the `merge_typehints` function to consider `autodoc_type_aliases`.

```python
### sphinx/ext/autodoc/typehints.py
<<<<<<< SEARCH
            node += nodes.field_body('', nodes.paragraph('', annotation))
=======
            alias = app.config.autodoc_type_aliases.get(annotation, annotation)
            node += nodes.field_body('', nodes.paragraph('', alias))
>>>>>>> REPLACE
```

### Apply Changes

- First, localize the lines in the `DataDocumenter` and `AttributeDocumenter` classes where type annotations are added.
- Then, update `parse_generated_content` and `merge_typehints` to consider `autodoc_type_aliases`.

Applying these changes will ensure that `autodoc_type_aliases` is effective for variables and attributes, thus fixing the reported issue. Make sure to re-run the tests to validate that the issue is resolved.
2024-10-18 13:36:31,158 - INFO - === file_to_commands: ===
2024-10-18 13:36:31,158 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + alias, sourcename)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/directive.py'": [
    "<<<<<<< SEARCH\n        documenter = doccls(params, self.arguments[0])\n=======\n        documenter = doccls(params, self.arguments[0], config=self.config)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/typehints.py'": [
    "<<<<<<< SEARCH\n            node += nodes.field_body('', nodes.paragraph('', annotation))\n=======\n            alias = app.config.autodoc_type_aliases.get(annotation, annotation)\n            node += nodes.field_body('', nodes.paragraph('', alias))\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:31,158 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:31,158 - INFO - === edit_commands: ===
2024-10-18 13:36:31,158 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + alias, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:31,158 - INFO - 
----------------------------------------
2024-10-18 13:36:31,169 - INFO - extracted patch:
2024-10-18 13:36:31,169 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,7 +1717,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
@@ -2108,7 +2109,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
2024-10-18 13:36:31,169 - INFO - raw output:
The bug seems to be that `autodoc_type_aliases` is not being applied to variables and attributes. To fix this, we need to ensure that the type aliases defined in `conf.py` are being considered when generating the type annotations for variables and attributes.

Let's start by localizing the issue. Based on the provided information, the issue likely lies in the `DataDocumenter` and `AttributeDocumenter` classes in `sphinx/ext/autodoc/__init__.py`. We'll need to ensure that these documenters apply the type aliases when adding the type annotations.

Here are the necessary SEARCH/REPLACE edits to fix the issue:

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

These edits ensure that the type aliases defined in `conf.py` are applied to both module-level variables and class attributes. With these changes, `autodoc_type_aliases` should now correctly apply to the type annotations of variables and attributes.
2024-10-18 13:36:31,169 - INFO - === file_to_commands: ===
2024-10-18 13:36:31,169 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:31,170 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:31,170 - INFO - === edit_commands: ===
2024-10-18 13:36:31,170 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:31,170 - INFO - 
----------------------------------------
2024-10-18 13:36:31,170 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:31,170 - INFO - 
----------------------------------------
2024-10-18 13:36:31,178 - INFO - extracted patch:
2024-10-18 13:36:31,178 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:31,178 - INFO - raw output:
The issue seems to stem from the fact that `autodoc_type_aliases` is not being applied correctly to variables and attributes. This likely means that the current implementation does not consider aliases when generating the type annotation for these elements.

Given the provided files, we need to make changes in the `sphinx/ext/autodoc/typehints.py` file where type hints are processed and in the `sphinx/ext/autodoc/__init__.py` file where the type annotations for data and attributes are generated. We will update the logic to apply the `autodoc_type_aliases` configuration.

Here are the necessary *SEARCH/REPLACE* edits:

```python
### sphinx/ext/autodoc/typehints.py
<<<<<<< SEARCH
from typing import Any, Dict, Iterable, cast
=======
from typing import Any, Dict, Iterable, cast, get_type_hints
>>>>>>> REPLACE
```

```python
### sphinx/ext/autodoc/typehints.py
<<<<<<< SEARCH
    annotations = app.env.temp_data.get('annotations', {})
=======
    annotations = app.env.temp_data.get('annotations', {})
    type_aliases = app.config.autodoc_type_aliases
    if type_aliases:
        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}
>>>>>>> REPLACE
```

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                if self.env.config.autodoc_type_aliases:
                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.analyzer.annotations[key]
                    if self.env.config.autodoc_type_aliases:
                        objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

These changes introduce the logic needed to consider type aliases when processing type hints and generating type annotations for variables and attributes. This should resolve the issue described in the problem statement.
2024-10-18 13:36:31,178 - INFO - === file_to_commands: ===
2024-10-18 13:36:31,178 - INFO - {
  "'sphinx/ext/autodoc/typehints.py'": [
    "<<<<<<< SEARCH\nfrom typing import Any, Dict, Iterable, cast\n=======\nfrom typing import Any, Dict, Iterable, cast, get_type_hints\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n    annotations = app.env.temp_data.get('annotations', {})\n=======\n    annotations = app.env.temp_data.get('annotations', {})\n    type_aliases = app.config.autodoc_type_aliases\n    if type_aliases:\n        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                if self.env.config.autodoc_type_aliases:\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    if self.env.config.autodoc_type_aliases:\n                        objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:31,178 - INFO - === edited_file: 'sphinx/ext/autodoc/typehints.py' ===
2024-10-18 13:36:31,178 - INFO - === edit_commands: ===
2024-10-18 13:36:31,178 - INFO - <<<<<<< SEARCH
from typing import Any, Dict, Iterable, cast
=======
from typing import Any, Dict, Iterable, cast, get_type_hints
>>>>>>> REPLACE
2024-10-18 13:36:31,178 - INFO - 
----------------------------------------
2024-10-18 13:36:31,178 - INFO - <<<<<<< SEARCH
    annotations = app.env.temp_data.get('annotations', {})
=======
    annotations = app.env.temp_data.get('annotations', {})
    type_aliases = app.config.autodoc_type_aliases
    if type_aliases:
        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}
>>>>>>> REPLACE
2024-10-18 13:36:31,178 - INFO - 
----------------------------------------
2024-10-18 13:36:31,179 - INFO - extracted patch:
2024-10-18 13:36:31,179 - INFO - --- sphinx/ext/autodoc/typehints.py
+++ sphinx/ext/autodoc/typehints.py
@@ -10,7 +10,7 @@
 
 import re
 from collections import OrderedDict
-from typing import Any, Dict, Iterable, cast
+from typing import Any, Dict, Iterable, cast, get_type_hints
 
 from docutils import nodes
 from docutils.nodes import Element
@@ -56,6 +56,9 @@
         return
 
     annotations = app.env.temp_data.get('annotations', {})
+    type_aliases = app.config.autodoc_type_aliases
+    if type_aliases:
+        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}
     if annotations.get(fullname, {}):
         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]
         if field_lists == []:
2024-10-18 13:36:31,179 - INFO - raw output:
The issue described indicates that the `autodoc_type_aliases` configuration does not apply to variables and attributes. A potential solution involves ensuring that the type aliases are applied correctly in the `DataDocumenter` and `AttributeDocumenter` classes.

To fix this, we should modify the `add_directive_header` methods in both the `DataDocumenter` and `AttributeDocumenter` classes to check for `autodoc_type_aliases` and apply them appropriately.

Here are the needed changes:

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                # Apply autodoc_type_aliases if present in config
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE

### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.analyzer.annotations[key]
                    # Apply autodoc_type_aliases if present in config
                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE

### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                # Apply autodoc_type_aliases if present in config
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE

### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.analyzer.annotations[key]
                    # Apply autodoc_type_aliases if present in config
                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

These changes ensure that the `autodoc_type_aliases` configuration is applied to both variables (handled by `DataDocumenter`) and attributes (handled by `AttributeDocumenter`).
2024-10-18 13:36:31,179 - INFO - === file_to_commands: ===
2024-10-18 13:36:31,179 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                # Apply autodoc_type_aliases if present in config\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    # Apply autodoc_type_aliases if present in config\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:31,179 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:31,179 - INFO - === edit_commands: ===
2024-10-18 13:36:31,179 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                # Apply autodoc_type_aliases if present in config
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:31,180 - INFO - 
----------------------------------------
2024-10-18 13:36:31,180 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.analyzer.annotations[key]
                    # Apply autodoc_type_aliases if present in config
                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:31,180 - INFO - 
----------------------------------------
2024-10-18 13:36:31,188 - INFO - extracted patch:
2024-10-18 13:36:31,188 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,16 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                # Apply autodoc_type_aliases if present in config
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.analyzer.annotations[key]
+                    # Apply autodoc_type_aliases if present in config
+                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2112,16 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                # Apply autodoc_type_aliases if present in config
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.analyzer.annotations[key]
+                    # Apply autodoc_type_aliases if present in config
+                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:31,188 - INFO - raw output:
To fix the reported issue where `autodoc_type_aliases` does not affect variables and attributes, we should modify the `DataDocumenter` and `AttributeDocumenter` classes, ensuring they account for type aliases. Here are the necessary *SEARCH/REPLACE* edits:

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE

<<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
=======
                    objrepr = self.analyzer.annotations[key]
                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr,
>>>>>>> REPLACE

<<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE

<<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
=======
                    objrepr = self.analyzer.annotations[key]
                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr,
>>>>>>> REPLACE
```

These changes will ensure that the type aliases defined in `autodoc_type_aliases` are correctly applied to both variables and attributes within the Sphinx documentation. By retrieving the type annotation and checking against the `autodoc_type_aliases` dictionary, we can replace the type hint with the appropriate alias.
2024-10-18 13:36:31,188 - INFO - === file_to_commands: ===
2024-10-18 13:36:31,188 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr,\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:31,189 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:31,189 - INFO - === edit_commands: ===
2024-10-18 13:36:31,189 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:31,189 - INFO - 
----------------------------------------
2024-10-18 13:36:31,189 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
=======
                    objrepr = self.analyzer.annotations[key]
                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr,
>>>>>>> REPLACE
2024-10-18 13:36:31,189 - INFO - 
----------------------------------------
2024-10-18 13:36:31,197 - INFO - extracted patch:
2024-10-18 13:36:31,197 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,11 +1717,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             try:
@@ -2108,11 +2111,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             # data descriptors do not have useful values
2024-10-18 13:36:31,197 - INFO - raw output:
The issue appears to be caused by the fact that the `autodoc_type_aliases` configuration is not affecting variable and attribute type annotations as expected. This is likely due to the `DataDocumenter` and `AttributeDocumenter` classes not considering `autodoc_type_aliases` when handling type annotations.

We can fix this by modifying the `DataDocumenter` and `AttributeDocumenter` classes to use `autodoc_type_aliases` when adding type annotations.

Here are the necessary *SEARCH/REPLACE* edits to fix the issue:

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

These changes ensure that the type annotations for both module-level variables and class attributes are correctly replaced using the `autodoc_type_aliases` configuration.
2024-10-18 13:36:31,197 - INFO - === file_to_commands: ===
2024-10-18 13:36:31,197 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:31,198 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:31,198 - INFO - === edit_commands: ===
2024-10-18 13:36:31,198 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:31,198 - INFO - 
----------------------------------------
2024-10-18 13:36:31,198 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:31,198 - INFO - 
----------------------------------------
2024-10-18 13:36:31,210 - INFO - extracted patch:
2024-10-18 13:36:31,210 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:31,210 - INFO - raw output:
The issue described is that `autodoc_type_aliases` does not affect variables and attributes. We need to ensure that the `autodoc_type_aliases` configuration is applied to the annotations in both DataDocumenter and AttributeDocumenter.

To do this, we need to modify the code where annotations are retrieved and processed, ensuring they are replaced with the aliases defined in `autodoc_type_aliases`.

Here are the necessary changes:

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

```python
### sphinx/ext/autodoc/__init__.py
<<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
```

```python
### sphinx/ext/autodoc/directive.py
<<<<<<< SEARCH
    def run(self) -> List[Node]:
=======
def run(self) -> List[Node]:
        app = self.env.app
>>>>>>> REPLACE
```

With these changes, `autodoc_type_aliases` should now be correctly applied to both variables and attributes in the documentation. The `objrepr` variable holding the type annotation is now replaced with its alias if it is defined in `autodoc_type_aliases`. This ensures that the aliases are honored in the generated documentation.

1. The first change ensures that the type annotation for data items uses the alias if it exists.
2. The second change ensures that type annotations from the analyzer also use the alias.
3. The third change ensures that the `app` variable is accessible in the relevant context to retrieve the `autodoc_type_aliases` configuration.
2024-10-18 13:36:31,210 - INFO - === file_to_commands: ===
2024-10-18 13:36:31,210 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/directive.py'": [
    "<<<<<<< SEARCH\n    def run(self) -> List[Node]:\n=======\ndef run(self) -> List[Node]:\n        app = self.env.app\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:31,210 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:31,210 - INFO - === edit_commands: ===
2024-10-18 13:36:31,210 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:31,210 - INFO - 
----------------------------------------
2024-10-18 13:36:31,210 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:31,210 - INFO - 
----------------------------------------
2024-10-18 13:36:31,220 - INFO - extracted patch:
2024-10-18 13:36:31,221 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:32,479 - INFO - === file_to_commands: ===
2024-10-18 13:36:32,479 - INFO - === file_to_commands: ===
2024-10-18 13:36:32,479 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:32,479 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:32,480 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:32,480 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:32,480 - INFO - === edit_commands: ===
2024-10-18 13:36:32,480 - INFO - === edit_commands: ===
2024-10-18 13:36:32,480 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:32,480 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:32,480 - INFO - 
----------------------------------------
2024-10-18 13:36:32,480 - INFO - 
----------------------------------------
2024-10-18 13:36:32,480 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:32,480 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:32,480 - INFO - 
----------------------------------------
2024-10-18 13:36:32,480 - INFO - 
----------------------------------------
2024-10-18 13:36:32,487 - INFO - extracted patch:
2024-10-18 13:36:32,487 - INFO - extracted patch:
2024-10-18 13:36:32,487 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:32,487 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:34,032 - INFO - === file_to_commands: ===
2024-10-18 13:36:34,032 - INFO - === file_to_commands: ===
2024-10-18 13:36:34,032 - INFO - === file_to_commands: ===
2024-10-18 13:36:34,032 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + alias, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:34,032 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + alias, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:34,032 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + alias, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:34,033 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:34,033 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:34,033 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:34,033 - INFO - === edit_commands: ===
2024-10-18 13:36:34,033 - INFO - === edit_commands: ===
2024-10-18 13:36:34,033 - INFO - === edit_commands: ===
2024-10-18 13:36:34,033 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + alias, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:34,033 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + alias, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:34,033 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + alias, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:34,033 - INFO - 
----------------------------------------
2024-10-18 13:36:34,033 - INFO - 
----------------------------------------
2024-10-18 13:36:34,033 - INFO - 
----------------------------------------
2024-10-18 13:36:34,038 - INFO - extracted patch:
2024-10-18 13:36:34,038 - INFO - extracted patch:
2024-10-18 13:36:34,038 - INFO - extracted patch:
2024-10-18 13:36:34,038 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,7 +1717,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
@@ -2108,7 +2109,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
2024-10-18 13:36:34,038 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,7 +1717,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
@@ -2108,7 +2109,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
2024-10-18 13:36:34,038 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,7 +1717,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
@@ -2108,7 +2109,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
2024-10-18 13:36:35,562 - INFO - === file_to_commands: ===
2024-10-18 13:36:35,562 - INFO - === file_to_commands: ===
2024-10-18 13:36:35,562 - INFO - === file_to_commands: ===
2024-10-18 13:36:35,562 - INFO - === file_to_commands: ===
2024-10-18 13:36:35,562 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:35,562 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:35,562 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:35,562 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:35,562 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:35,562 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:35,562 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:35,562 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:35,562 - INFO - === edit_commands: ===
2024-10-18 13:36:35,562 - INFO - === edit_commands: ===
2024-10-18 13:36:35,562 - INFO - === edit_commands: ===
2024-10-18 13:36:35,562 - INFO - === edit_commands: ===
2024-10-18 13:36:35,562 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:35,562 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:35,562 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:35,562 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:35,562 - INFO - 
----------------------------------------
2024-10-18 13:36:35,562 - INFO - 
----------------------------------------
2024-10-18 13:36:35,562 - INFO - 
----------------------------------------
2024-10-18 13:36:35,562 - INFO - 
----------------------------------------
2024-10-18 13:36:35,562 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
>>>>>>> REPLACE
2024-10-18 13:36:35,562 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
>>>>>>> REPLACE
2024-10-18 13:36:35,562 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
>>>>>>> REPLACE
2024-10-18 13:36:35,562 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
>>>>>>> REPLACE
2024-10-18 13:36:35,562 - INFO - 
----------------------------------------
2024-10-18 13:36:35,562 - INFO - 
----------------------------------------
2024-10-18 13:36:35,562 - INFO - 
----------------------------------------
2024-10-18 13:36:35,562 - INFO - 
----------------------------------------
2024-10-18 13:36:35,562 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:35,562 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:35,562 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:35,562 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:35,562 - INFO - 
----------------------------------------
2024-10-18 13:36:35,562 - INFO - 
----------------------------------------
2024-10-18 13:36:35,562 - INFO - 
----------------------------------------
2024-10-18 13:36:35,562 - INFO - 
----------------------------------------
2024-10-18 13:36:35,568 - INFO - extracted patch:
2024-10-18 13:36:35,568 - INFO - extracted patch:
2024-10-18 13:36:35,568 - INFO - extracted patch:
2024-10-18 13:36:35,568 - INFO - extracted patch:
2024-10-18 13:36:35,568 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,11 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
                                   sourcename)
 
             try:
@@ -2108,11 +2110,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
                                   sourcename)
 
             # data descriptors do not have useful values
2024-10-18 13:36:35,568 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,11 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
                                   sourcename)
 
             try:
@@ -2108,11 +2110,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
                                   sourcename)
 
             # data descriptors do not have useful values
2024-10-18 13:36:35,568 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,11 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
                                   sourcename)
 
             try:
@@ -2108,11 +2110,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
                                   sourcename)
 
             # data descriptors do not have useful values
2024-10-18 13:36:35,568 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,11 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
                                   sourcename)
 
             try:
@@ -2108,11 +2110,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
                                   sourcename)
 
             # data descriptors do not have useful values
2024-10-18 13:36:36,953 - INFO - === file_to_commands: ===
2024-10-18 13:36:36,953 - INFO - === file_to_commands: ===
2024-10-18 13:36:36,953 - INFO - === file_to_commands: ===
2024-10-18 13:36:36,953 - INFO - === file_to_commands: ===
2024-10-18 13:36:36,953 - INFO - === file_to_commands: ===
2024-10-18 13:36:36,953 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + alias, sourcename)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/directive.py'": [
    "<<<<<<< SEARCH\n        documenter = doccls(params, self.arguments[0])\n=======\n        documenter = doccls(params, self.arguments[0], config=self.config)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/typehints.py'": [
    "<<<<<<< SEARCH\n            node += nodes.field_body('', nodes.paragraph('', annotation))\n=======\n            alias = app.config.autodoc_type_aliases.get(annotation, annotation)\n            node += nodes.field_body('', nodes.paragraph('', alias))\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:36,953 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + alias, sourcename)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/directive.py'": [
    "<<<<<<< SEARCH\n        documenter = doccls(params, self.arguments[0])\n=======\n        documenter = doccls(params, self.arguments[0], config=self.config)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/typehints.py'": [
    "<<<<<<< SEARCH\n            node += nodes.field_body('', nodes.paragraph('', annotation))\n=======\n            alias = app.config.autodoc_type_aliases.get(annotation, annotation)\n            node += nodes.field_body('', nodes.paragraph('', alias))\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:36,953 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + alias, sourcename)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/directive.py'": [
    "<<<<<<< SEARCH\n        documenter = doccls(params, self.arguments[0])\n=======\n        documenter = doccls(params, self.arguments[0], config=self.config)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/typehints.py'": [
    "<<<<<<< SEARCH\n            node += nodes.field_body('', nodes.paragraph('', annotation))\n=======\n            alias = app.config.autodoc_type_aliases.get(annotation, annotation)\n            node += nodes.field_body('', nodes.paragraph('', alias))\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:36,953 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + alias, sourcename)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/directive.py'": [
    "<<<<<<< SEARCH\n        documenter = doccls(params, self.arguments[0])\n=======\n        documenter = doccls(params, self.arguments[0], config=self.config)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/typehints.py'": [
    "<<<<<<< SEARCH\n            node += nodes.field_body('', nodes.paragraph('', annotation))\n=======\n            alias = app.config.autodoc_type_aliases.get(annotation, annotation)\n            node += nodes.field_body('', nodes.paragraph('', alias))\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:36,953 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + alias, sourcename)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/directive.py'": [
    "<<<<<<< SEARCH\n        documenter = doccls(params, self.arguments[0])\n=======\n        documenter = doccls(params, self.arguments[0], config=self.config)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/typehints.py'": [
    "<<<<<<< SEARCH\n            node += nodes.field_body('', nodes.paragraph('', annotation))\n=======\n            alias = app.config.autodoc_type_aliases.get(annotation, annotation)\n            node += nodes.field_body('', nodes.paragraph('', alias))\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:36,953 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:36,953 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:36,953 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:36,953 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:36,953 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:36,953 - INFO - === edit_commands: ===
2024-10-18 13:36:36,953 - INFO - === edit_commands: ===
2024-10-18 13:36:36,953 - INFO - === edit_commands: ===
2024-10-18 13:36:36,953 - INFO - === edit_commands: ===
2024-10-18 13:36:36,953 - INFO - === edit_commands: ===
2024-10-18 13:36:36,953 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + alias, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:36,953 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + alias, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:36,953 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + alias, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:36,953 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + alias, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:36,953 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + alias, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:36,953 - INFO - 
----------------------------------------
2024-10-18 13:36:36,953 - INFO - 
----------------------------------------
2024-10-18 13:36:36,953 - INFO - 
----------------------------------------
2024-10-18 13:36:36,953 - INFO - 
----------------------------------------
2024-10-18 13:36:36,953 - INFO - 
----------------------------------------
2024-10-18 13:36:36,958 - INFO - extracted patch:
2024-10-18 13:36:36,958 - INFO - extracted patch:
2024-10-18 13:36:36,958 - INFO - extracted patch:
2024-10-18 13:36:36,958 - INFO - extracted patch:
2024-10-18 13:36:36,958 - INFO - extracted patch:
2024-10-18 13:36:36,959 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,7 +1717,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
@@ -2108,7 +2109,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
2024-10-18 13:36:36,959 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,7 +1717,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
@@ -2108,7 +2109,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
2024-10-18 13:36:36,959 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,7 +1717,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
@@ -2108,7 +2109,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
2024-10-18 13:36:36,959 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,7 +1717,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
@@ -2108,7 +2109,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
2024-10-18 13:36:36,959 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,7 +1717,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
@@ -2108,7 +2109,8 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
-                self.add_line('   :type: ' + objrepr, sourcename)
+                alias = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                self.add_line('   :type: ' + alias, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
2024-10-18 13:36:38,586 - INFO - === file_to_commands: ===
2024-10-18 13:36:38,586 - INFO - === file_to_commands: ===
2024-10-18 13:36:38,586 - INFO - === file_to_commands: ===
2024-10-18 13:36:38,586 - INFO - === file_to_commands: ===
2024-10-18 13:36:38,586 - INFO - === file_to_commands: ===
2024-10-18 13:36:38,586 - INFO - === file_to_commands: ===
2024-10-18 13:36:38,587 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:38,587 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:38,587 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:38,587 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:38,587 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:38,587 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:38,587 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:38,587 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:38,587 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:38,587 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:38,587 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:38,587 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:38,587 - INFO - === edit_commands: ===
2024-10-18 13:36:38,587 - INFO - === edit_commands: ===
2024-10-18 13:36:38,587 - INFO - === edit_commands: ===
2024-10-18 13:36:38,587 - INFO - === edit_commands: ===
2024-10-18 13:36:38,587 - INFO - === edit_commands: ===
2024-10-18 13:36:38,587 - INFO - === edit_commands: ===
2024-10-18 13:36:38,587 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:38,587 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:38,587 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:38,587 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:38,587 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:38,587 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:38,587 - INFO - 
----------------------------------------
2024-10-18 13:36:38,587 - INFO - 
----------------------------------------
2024-10-18 13:36:38,587 - INFO - 
----------------------------------------
2024-10-18 13:36:38,587 - INFO - 
----------------------------------------
2024-10-18 13:36:38,587 - INFO - 
----------------------------------------
2024-10-18 13:36:38,587 - INFO - 
----------------------------------------
2024-10-18 13:36:38,587 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:38,587 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:38,587 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:38,587 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:38,587 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:38,587 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:38,587 - INFO - 
----------------------------------------
2024-10-18 13:36:38,587 - INFO - 
----------------------------------------
2024-10-18 13:36:38,587 - INFO - 
----------------------------------------
2024-10-18 13:36:38,587 - INFO - 
----------------------------------------
2024-10-18 13:36:38,587 - INFO - 
----------------------------------------
2024-10-18 13:36:38,587 - INFO - 
----------------------------------------
2024-10-18 13:36:38,592 - INFO - extracted patch:
2024-10-18 13:36:38,592 - INFO - extracted patch:
2024-10-18 13:36:38,592 - INFO - extracted patch:
2024-10-18 13:36:38,592 - INFO - extracted patch:
2024-10-18 13:36:38,592 - INFO - extracted patch:
2024-10-18 13:36:38,592 - INFO - extracted patch:
2024-10-18 13:36:38,592 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:38,592 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:38,592 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:38,592 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:38,592 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:38,592 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:38,908 - INFO - === file_to_commands: ===
2024-10-18 13:36:38,908 - INFO - === file_to_commands: ===
2024-10-18 13:36:38,908 - INFO - === file_to_commands: ===
2024-10-18 13:36:38,908 - INFO - === file_to_commands: ===
2024-10-18 13:36:38,908 - INFO - === file_to_commands: ===
2024-10-18 13:36:38,908 - INFO - === file_to_commands: ===
2024-10-18 13:36:38,908 - INFO - === file_to_commands: ===
2024-10-18 13:36:38,908 - INFO - {
  "'sphinx/ext/autodoc/typehints.py'": [
    "<<<<<<< SEARCH\nfrom typing import Any, Dict, Iterable, cast\n=======\nfrom typing import Any, Dict, Iterable, cast, get_type_hints\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n    annotations = app.env.temp_data.get('annotations', {})\n=======\n    annotations = app.env.temp_data.get('annotations', {})\n    type_aliases = app.config.autodoc_type_aliases\n    if type_aliases:\n        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                if self.env.config.autodoc_type_aliases:\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    if self.env.config.autodoc_type_aliases:\n                        objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:38,908 - INFO - {
  "'sphinx/ext/autodoc/typehints.py'": [
    "<<<<<<< SEARCH\nfrom typing import Any, Dict, Iterable, cast\n=======\nfrom typing import Any, Dict, Iterable, cast, get_type_hints\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n    annotations = app.env.temp_data.get('annotations', {})\n=======\n    annotations = app.env.temp_data.get('annotations', {})\n    type_aliases = app.config.autodoc_type_aliases\n    if type_aliases:\n        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                if self.env.config.autodoc_type_aliases:\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    if self.env.config.autodoc_type_aliases:\n                        objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:38,908 - INFO - {
  "'sphinx/ext/autodoc/typehints.py'": [
    "<<<<<<< SEARCH\nfrom typing import Any, Dict, Iterable, cast\n=======\nfrom typing import Any, Dict, Iterable, cast, get_type_hints\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n    annotations = app.env.temp_data.get('annotations', {})\n=======\n    annotations = app.env.temp_data.get('annotations', {})\n    type_aliases = app.config.autodoc_type_aliases\n    if type_aliases:\n        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                if self.env.config.autodoc_type_aliases:\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    if self.env.config.autodoc_type_aliases:\n                        objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:38,908 - INFO - {
  "'sphinx/ext/autodoc/typehints.py'": [
    "<<<<<<< SEARCH\nfrom typing import Any, Dict, Iterable, cast\n=======\nfrom typing import Any, Dict, Iterable, cast, get_type_hints\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n    annotations = app.env.temp_data.get('annotations', {})\n=======\n    annotations = app.env.temp_data.get('annotations', {})\n    type_aliases = app.config.autodoc_type_aliases\n    if type_aliases:\n        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                if self.env.config.autodoc_type_aliases:\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    if self.env.config.autodoc_type_aliases:\n                        objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:38,908 - INFO - {
  "'sphinx/ext/autodoc/typehints.py'": [
    "<<<<<<< SEARCH\nfrom typing import Any, Dict, Iterable, cast\n=======\nfrom typing import Any, Dict, Iterable, cast, get_type_hints\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n    annotations = app.env.temp_data.get('annotations', {})\n=======\n    annotations = app.env.temp_data.get('annotations', {})\n    type_aliases = app.config.autodoc_type_aliases\n    if type_aliases:\n        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                if self.env.config.autodoc_type_aliases:\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    if self.env.config.autodoc_type_aliases:\n                        objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:38,908 - INFO - {
  "'sphinx/ext/autodoc/typehints.py'": [
    "<<<<<<< SEARCH\nfrom typing import Any, Dict, Iterable, cast\n=======\nfrom typing import Any, Dict, Iterable, cast, get_type_hints\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n    annotations = app.env.temp_data.get('annotations', {})\n=======\n    annotations = app.env.temp_data.get('annotations', {})\n    type_aliases = app.config.autodoc_type_aliases\n    if type_aliases:\n        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                if self.env.config.autodoc_type_aliases:\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    if self.env.config.autodoc_type_aliases:\n                        objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:38,908 - INFO - {
  "'sphinx/ext/autodoc/typehints.py'": [
    "<<<<<<< SEARCH\nfrom typing import Any, Dict, Iterable, cast\n=======\nfrom typing import Any, Dict, Iterable, cast, get_type_hints\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n    annotations = app.env.temp_data.get('annotations', {})\n=======\n    annotations = app.env.temp_data.get('annotations', {})\n    type_aliases = app.config.autodoc_type_aliases\n    if type_aliases:\n        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                if self.env.config.autodoc_type_aliases:\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    if self.env.config.autodoc_type_aliases:\n                        objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:38,908 - INFO - === edited_file: 'sphinx/ext/autodoc/typehints.py' ===
2024-10-18 13:36:38,908 - INFO - === edited_file: 'sphinx/ext/autodoc/typehints.py' ===
2024-10-18 13:36:38,908 - INFO - === edited_file: 'sphinx/ext/autodoc/typehints.py' ===
2024-10-18 13:36:38,908 - INFO - === edited_file: 'sphinx/ext/autodoc/typehints.py' ===
2024-10-18 13:36:38,908 - INFO - === edited_file: 'sphinx/ext/autodoc/typehints.py' ===
2024-10-18 13:36:38,908 - INFO - === edited_file: 'sphinx/ext/autodoc/typehints.py' ===
2024-10-18 13:36:38,908 - INFO - === edited_file: 'sphinx/ext/autodoc/typehints.py' ===
2024-10-18 13:36:38,908 - INFO - === edit_commands: ===
2024-10-18 13:36:38,908 - INFO - === edit_commands: ===
2024-10-18 13:36:38,908 - INFO - === edit_commands: ===
2024-10-18 13:36:38,908 - INFO - === edit_commands: ===
2024-10-18 13:36:38,908 - INFO - === edit_commands: ===
2024-10-18 13:36:38,908 - INFO - === edit_commands: ===
2024-10-18 13:36:38,908 - INFO - === edit_commands: ===
2024-10-18 13:36:38,908 - INFO - <<<<<<< SEARCH
from typing import Any, Dict, Iterable, cast
=======
from typing import Any, Dict, Iterable, cast, get_type_hints
>>>>>>> REPLACE
2024-10-18 13:36:38,908 - INFO - <<<<<<< SEARCH
from typing import Any, Dict, Iterable, cast
=======
from typing import Any, Dict, Iterable, cast, get_type_hints
>>>>>>> REPLACE
2024-10-18 13:36:38,908 - INFO - <<<<<<< SEARCH
from typing import Any, Dict, Iterable, cast
=======
from typing import Any, Dict, Iterable, cast, get_type_hints
>>>>>>> REPLACE
2024-10-18 13:36:38,908 - INFO - <<<<<<< SEARCH
from typing import Any, Dict, Iterable, cast
=======
from typing import Any, Dict, Iterable, cast, get_type_hints
>>>>>>> REPLACE
2024-10-18 13:36:38,908 - INFO - <<<<<<< SEARCH
from typing import Any, Dict, Iterable, cast
=======
from typing import Any, Dict, Iterable, cast, get_type_hints
>>>>>>> REPLACE
2024-10-18 13:36:38,908 - INFO - <<<<<<< SEARCH
from typing import Any, Dict, Iterable, cast
=======
from typing import Any, Dict, Iterable, cast, get_type_hints
>>>>>>> REPLACE
2024-10-18 13:36:38,908 - INFO - <<<<<<< SEARCH
from typing import Any, Dict, Iterable, cast
=======
from typing import Any, Dict, Iterable, cast, get_type_hints
>>>>>>> REPLACE
2024-10-18 13:36:38,908 - INFO - 
----------------------------------------
2024-10-18 13:36:38,908 - INFO - 
----------------------------------------
2024-10-18 13:36:38,908 - INFO - 
----------------------------------------
2024-10-18 13:36:38,908 - INFO - 
----------------------------------------
2024-10-18 13:36:38,908 - INFO - 
----------------------------------------
2024-10-18 13:36:38,908 - INFO - 
----------------------------------------
2024-10-18 13:36:38,908 - INFO - 
----------------------------------------
2024-10-18 13:36:38,908 - INFO - <<<<<<< SEARCH
    annotations = app.env.temp_data.get('annotations', {})
=======
    annotations = app.env.temp_data.get('annotations', {})
    type_aliases = app.config.autodoc_type_aliases
    if type_aliases:
        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}
>>>>>>> REPLACE
2024-10-18 13:36:38,908 - INFO - <<<<<<< SEARCH
    annotations = app.env.temp_data.get('annotations', {})
=======
    annotations = app.env.temp_data.get('annotations', {})
    type_aliases = app.config.autodoc_type_aliases
    if type_aliases:
        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}
>>>>>>> REPLACE
2024-10-18 13:36:38,908 - INFO - <<<<<<< SEARCH
    annotations = app.env.temp_data.get('annotations', {})
=======
    annotations = app.env.temp_data.get('annotations', {})
    type_aliases = app.config.autodoc_type_aliases
    if type_aliases:
        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}
>>>>>>> REPLACE
2024-10-18 13:36:38,908 - INFO - <<<<<<< SEARCH
    annotations = app.env.temp_data.get('annotations', {})
=======
    annotations = app.env.temp_data.get('annotations', {})
    type_aliases = app.config.autodoc_type_aliases
    if type_aliases:
        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}
>>>>>>> REPLACE
2024-10-18 13:36:38,908 - INFO - <<<<<<< SEARCH
    annotations = app.env.temp_data.get('annotations', {})
=======
    annotations = app.env.temp_data.get('annotations', {})
    type_aliases = app.config.autodoc_type_aliases
    if type_aliases:
        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}
>>>>>>> REPLACE
2024-10-18 13:36:38,908 - INFO - <<<<<<< SEARCH
    annotations = app.env.temp_data.get('annotations', {})
=======
    annotations = app.env.temp_data.get('annotations', {})
    type_aliases = app.config.autodoc_type_aliases
    if type_aliases:
        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}
>>>>>>> REPLACE
2024-10-18 13:36:38,908 - INFO - <<<<<<< SEARCH
    annotations = app.env.temp_data.get('annotations', {})
=======
    annotations = app.env.temp_data.get('annotations', {})
    type_aliases = app.config.autodoc_type_aliases
    if type_aliases:
        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}
>>>>>>> REPLACE
2024-10-18 13:36:38,908 - INFO - 
----------------------------------------
2024-10-18 13:36:38,908 - INFO - 
----------------------------------------
2024-10-18 13:36:38,908 - INFO - 
----------------------------------------
2024-10-18 13:36:38,908 - INFO - 
----------------------------------------
2024-10-18 13:36:38,908 - INFO - 
----------------------------------------
2024-10-18 13:36:38,908 - INFO - 
----------------------------------------
2024-10-18 13:36:38,908 - INFO - 
----------------------------------------
2024-10-18 13:36:38,909 - INFO - extracted patch:
2024-10-18 13:36:38,909 - INFO - extracted patch:
2024-10-18 13:36:38,909 - INFO - extracted patch:
2024-10-18 13:36:38,909 - INFO - extracted patch:
2024-10-18 13:36:38,909 - INFO - extracted patch:
2024-10-18 13:36:38,909 - INFO - extracted patch:
2024-10-18 13:36:38,909 - INFO - extracted patch:
2024-10-18 13:36:38,909 - INFO - --- sphinx/ext/autodoc/typehints.py
+++ sphinx/ext/autodoc/typehints.py
@@ -10,7 +10,7 @@
 
 import re
 from collections import OrderedDict
-from typing import Any, Dict, Iterable, cast
+from typing import Any, Dict, Iterable, cast, get_type_hints
 
 from docutils import nodes
 from docutils.nodes import Element
@@ -56,6 +56,9 @@
         return
 
     annotations = app.env.temp_data.get('annotations', {})
+    type_aliases = app.config.autodoc_type_aliases
+    if type_aliases:
+        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}
     if annotations.get(fullname, {}):
         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]
         if field_lists == []:
2024-10-18 13:36:38,909 - INFO - --- sphinx/ext/autodoc/typehints.py
+++ sphinx/ext/autodoc/typehints.py
@@ -10,7 +10,7 @@
 
 import re
 from collections import OrderedDict
-from typing import Any, Dict, Iterable, cast
+from typing import Any, Dict, Iterable, cast, get_type_hints
 
 from docutils import nodes
 from docutils.nodes import Element
@@ -56,6 +56,9 @@
         return
 
     annotations = app.env.temp_data.get('annotations', {})
+    type_aliases = app.config.autodoc_type_aliases
+    if type_aliases:
+        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}
     if annotations.get(fullname, {}):
         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]
         if field_lists == []:
2024-10-18 13:36:38,909 - INFO - --- sphinx/ext/autodoc/typehints.py
+++ sphinx/ext/autodoc/typehints.py
@@ -10,7 +10,7 @@
 
 import re
 from collections import OrderedDict
-from typing import Any, Dict, Iterable, cast
+from typing import Any, Dict, Iterable, cast, get_type_hints
 
 from docutils import nodes
 from docutils.nodes import Element
@@ -56,6 +56,9 @@
         return
 
     annotations = app.env.temp_data.get('annotations', {})
+    type_aliases = app.config.autodoc_type_aliases
+    if type_aliases:
+        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}
     if annotations.get(fullname, {}):
         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]
         if field_lists == []:
2024-10-18 13:36:38,909 - INFO - --- sphinx/ext/autodoc/typehints.py
+++ sphinx/ext/autodoc/typehints.py
@@ -10,7 +10,7 @@
 
 import re
 from collections import OrderedDict
-from typing import Any, Dict, Iterable, cast
+from typing import Any, Dict, Iterable, cast, get_type_hints
 
 from docutils import nodes
 from docutils.nodes import Element
@@ -56,6 +56,9 @@
         return
 
     annotations = app.env.temp_data.get('annotations', {})
+    type_aliases = app.config.autodoc_type_aliases
+    if type_aliases:
+        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}
     if annotations.get(fullname, {}):
         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]
         if field_lists == []:
2024-10-18 13:36:38,909 - INFO - --- sphinx/ext/autodoc/typehints.py
+++ sphinx/ext/autodoc/typehints.py
@@ -10,7 +10,7 @@
 
 import re
 from collections import OrderedDict
-from typing import Any, Dict, Iterable, cast
+from typing import Any, Dict, Iterable, cast, get_type_hints
 
 from docutils import nodes
 from docutils.nodes import Element
@@ -56,6 +56,9 @@
         return
 
     annotations = app.env.temp_data.get('annotations', {})
+    type_aliases = app.config.autodoc_type_aliases
+    if type_aliases:
+        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}
     if annotations.get(fullname, {}):
         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]
         if field_lists == []:
2024-10-18 13:36:38,909 - INFO - --- sphinx/ext/autodoc/typehints.py
+++ sphinx/ext/autodoc/typehints.py
@@ -10,7 +10,7 @@
 
 import re
 from collections import OrderedDict
-from typing import Any, Dict, Iterable, cast
+from typing import Any, Dict, Iterable, cast, get_type_hints
 
 from docutils import nodes
 from docutils.nodes import Element
@@ -56,6 +56,9 @@
         return
 
     annotations = app.env.temp_data.get('annotations', {})
+    type_aliases = app.config.autodoc_type_aliases
+    if type_aliases:
+        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}
     if annotations.get(fullname, {}):
         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]
         if field_lists == []:
2024-10-18 13:36:38,909 - INFO - --- sphinx/ext/autodoc/typehints.py
+++ sphinx/ext/autodoc/typehints.py
@@ -10,7 +10,7 @@
 
 import re
 from collections import OrderedDict
-from typing import Any, Dict, Iterable, cast
+from typing import Any, Dict, Iterable, cast, get_type_hints
 
 from docutils import nodes
 from docutils.nodes import Element
@@ -56,6 +56,9 @@
         return
 
     annotations = app.env.temp_data.get('annotations', {})
+    type_aliases = app.config.autodoc_type_aliases
+    if type_aliases:
+        annotations = {k: type_aliases.get(v, v) for k, v in annotations.items()}
     if annotations.get(fullname, {}):
         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]
         if field_lists == []:
2024-10-18 13:36:40,453 - INFO - === file_to_commands: ===
2024-10-18 13:36:40,453 - INFO - === file_to_commands: ===
2024-10-18 13:36:40,453 - INFO - === file_to_commands: ===
2024-10-18 13:36:40,453 - INFO - === file_to_commands: ===
2024-10-18 13:36:40,453 - INFO - === file_to_commands: ===
2024-10-18 13:36:40,453 - INFO - === file_to_commands: ===
2024-10-18 13:36:40,453 - INFO - === file_to_commands: ===
2024-10-18 13:36:40,453 - INFO - === file_to_commands: ===
2024-10-18 13:36:40,453 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                # Apply autodoc_type_aliases if present in config\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    # Apply autodoc_type_aliases if present in config\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:40,453 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                # Apply autodoc_type_aliases if present in config\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    # Apply autodoc_type_aliases if present in config\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:40,453 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                # Apply autodoc_type_aliases if present in config\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    # Apply autodoc_type_aliases if present in config\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:40,453 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                # Apply autodoc_type_aliases if present in config\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    # Apply autodoc_type_aliases if present in config\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:40,453 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                # Apply autodoc_type_aliases if present in config\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    # Apply autodoc_type_aliases if present in config\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:40,453 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                # Apply autodoc_type_aliases if present in config\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    # Apply autodoc_type_aliases if present in config\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:40,453 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                # Apply autodoc_type_aliases if present in config\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    # Apply autodoc_type_aliases if present in config\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:40,453 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                # Apply autodoc_type_aliases if present in config\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    # Apply autodoc_type_aliases if present in config\n                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:40,453 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:40,453 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:40,453 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:40,453 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:40,453 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:40,453 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:40,453 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:40,453 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:40,454 - INFO - === edit_commands: ===
2024-10-18 13:36:40,454 - INFO - === edit_commands: ===
2024-10-18 13:36:40,454 - INFO - === edit_commands: ===
2024-10-18 13:36:40,454 - INFO - === edit_commands: ===
2024-10-18 13:36:40,454 - INFO - === edit_commands: ===
2024-10-18 13:36:40,454 - INFO - === edit_commands: ===
2024-10-18 13:36:40,454 - INFO - === edit_commands: ===
2024-10-18 13:36:40,454 - INFO - === edit_commands: ===
2024-10-18 13:36:40,454 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                # Apply autodoc_type_aliases if present in config
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:40,454 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                # Apply autodoc_type_aliases if present in config
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:40,454 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                # Apply autodoc_type_aliases if present in config
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:40,454 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                # Apply autodoc_type_aliases if present in config
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:40,454 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                # Apply autodoc_type_aliases if present in config
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:40,454 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                # Apply autodoc_type_aliases if present in config
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:40,454 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                # Apply autodoc_type_aliases if present in config
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:40,454 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                # Apply autodoc_type_aliases if present in config
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:40,454 - INFO - 
----------------------------------------
2024-10-18 13:36:40,454 - INFO - 
----------------------------------------
2024-10-18 13:36:40,454 - INFO - 
----------------------------------------
2024-10-18 13:36:40,454 - INFO - 
----------------------------------------
2024-10-18 13:36:40,454 - INFO - 
----------------------------------------
2024-10-18 13:36:40,454 - INFO - 
----------------------------------------
2024-10-18 13:36:40,454 - INFO - 
----------------------------------------
2024-10-18 13:36:40,454 - INFO - 
----------------------------------------
2024-10-18 13:36:40,454 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.analyzer.annotations[key]
                    # Apply autodoc_type_aliases if present in config
                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:40,454 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.analyzer.annotations[key]
                    # Apply autodoc_type_aliases if present in config
                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:40,454 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.analyzer.annotations[key]
                    # Apply autodoc_type_aliases if present in config
                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:40,454 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.analyzer.annotations[key]
                    # Apply autodoc_type_aliases if present in config
                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:40,454 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.analyzer.annotations[key]
                    # Apply autodoc_type_aliases if present in config
                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:40,454 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.analyzer.annotations[key]
                    # Apply autodoc_type_aliases if present in config
                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:40,454 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.analyzer.annotations[key]
                    # Apply autodoc_type_aliases if present in config
                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:40,454 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.analyzer.annotations[key]
                    # Apply autodoc_type_aliases if present in config
                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:40,454 - INFO - 
----------------------------------------
2024-10-18 13:36:40,454 - INFO - 
----------------------------------------
2024-10-18 13:36:40,454 - INFO - 
----------------------------------------
2024-10-18 13:36:40,454 - INFO - 
----------------------------------------
2024-10-18 13:36:40,454 - INFO - 
----------------------------------------
2024-10-18 13:36:40,454 - INFO - 
----------------------------------------
2024-10-18 13:36:40,454 - INFO - 
----------------------------------------
2024-10-18 13:36:40,454 - INFO - 
----------------------------------------
2024-10-18 13:36:40,459 - INFO - extracted patch:
2024-10-18 13:36:40,459 - INFO - extracted patch:
2024-10-18 13:36:40,459 - INFO - extracted patch:
2024-10-18 13:36:40,459 - INFO - extracted patch:
2024-10-18 13:36:40,459 - INFO - extracted patch:
2024-10-18 13:36:40,459 - INFO - extracted patch:
2024-10-18 13:36:40,459 - INFO - extracted patch:
2024-10-18 13:36:40,459 - INFO - extracted patch:
2024-10-18 13:36:40,459 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,16 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                # Apply autodoc_type_aliases if present in config
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.analyzer.annotations[key]
+                    # Apply autodoc_type_aliases if present in config
+                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2112,16 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                # Apply autodoc_type_aliases if present in config
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.analyzer.annotations[key]
+                    # Apply autodoc_type_aliases if present in config
+                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:40,459 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,16 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                # Apply autodoc_type_aliases if present in config
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.analyzer.annotations[key]
+                    # Apply autodoc_type_aliases if present in config
+                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2112,16 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                # Apply autodoc_type_aliases if present in config
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.analyzer.annotations[key]
+                    # Apply autodoc_type_aliases if present in config
+                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:40,459 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,16 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                # Apply autodoc_type_aliases if present in config
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.analyzer.annotations[key]
+                    # Apply autodoc_type_aliases if present in config
+                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2112,16 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                # Apply autodoc_type_aliases if present in config
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.analyzer.annotations[key]
+                    # Apply autodoc_type_aliases if present in config
+                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:40,459 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,16 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                # Apply autodoc_type_aliases if present in config
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.analyzer.annotations[key]
+                    # Apply autodoc_type_aliases if present in config
+                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2112,16 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                # Apply autodoc_type_aliases if present in config
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.analyzer.annotations[key]
+                    # Apply autodoc_type_aliases if present in config
+                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:40,459 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,16 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                # Apply autodoc_type_aliases if present in config
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.analyzer.annotations[key]
+                    # Apply autodoc_type_aliases if present in config
+                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2112,16 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                # Apply autodoc_type_aliases if present in config
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.analyzer.annotations[key]
+                    # Apply autodoc_type_aliases if present in config
+                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:40,459 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,16 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                # Apply autodoc_type_aliases if present in config
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.analyzer.annotations[key]
+                    # Apply autodoc_type_aliases if present in config
+                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2112,16 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                # Apply autodoc_type_aliases if present in config
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.analyzer.annotations[key]
+                    # Apply autodoc_type_aliases if present in config
+                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:40,459 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,16 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                # Apply autodoc_type_aliases if present in config
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.analyzer.annotations[key]
+                    # Apply autodoc_type_aliases if present in config
+                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2112,16 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                # Apply autodoc_type_aliases if present in config
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.analyzer.annotations[key]
+                    # Apply autodoc_type_aliases if present in config
+                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:40,459 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,16 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                # Apply autodoc_type_aliases if present in config
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.analyzer.annotations[key]
+                    # Apply autodoc_type_aliases if present in config
+                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2112,16 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                # Apply autodoc_type_aliases if present in config
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.analyzer.annotations[key]
+                    # Apply autodoc_type_aliases if present in config
+                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:41,962 - INFO - === file_to_commands: ===
2024-10-18 13:36:41,962 - INFO - === file_to_commands: ===
2024-10-18 13:36:41,962 - INFO - === file_to_commands: ===
2024-10-18 13:36:41,962 - INFO - === file_to_commands: ===
2024-10-18 13:36:41,962 - INFO - === file_to_commands: ===
2024-10-18 13:36:41,962 - INFO - === file_to_commands: ===
2024-10-18 13:36:41,962 - INFO - === file_to_commands: ===
2024-10-18 13:36:41,962 - INFO - === file_to_commands: ===
2024-10-18 13:36:41,962 - INFO - === file_to_commands: ===
2024-10-18 13:36:41,962 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr,\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:41,962 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr,\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:41,962 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr,\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:41,962 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr,\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:41,962 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr,\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:41,962 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr,\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:41,962 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr,\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:41,962 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr,\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:41,962 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n=======\n                    objrepr = self.analyzer.annotations[key]\n                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                    self.add_line('   :type: ' + objrepr,\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:41,962 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:41,962 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:41,962 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:41,962 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:41,962 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:41,962 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:41,962 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:41,962 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:41,962 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:41,962 - INFO - === edit_commands: ===
2024-10-18 13:36:41,962 - INFO - === edit_commands: ===
2024-10-18 13:36:41,962 - INFO - === edit_commands: ===
2024-10-18 13:36:41,962 - INFO - === edit_commands: ===
2024-10-18 13:36:41,962 - INFO - === edit_commands: ===
2024-10-18 13:36:41,962 - INFO - === edit_commands: ===
2024-10-18 13:36:41,962 - INFO - === edit_commands: ===
2024-10-18 13:36:41,962 - INFO - === edit_commands: ===
2024-10-18 13:36:41,962 - INFO - === edit_commands: ===
2024-10-18 13:36:41,962 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:41,962 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:41,962 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:41,962 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:41,962 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:41,962 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:41,962 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:41,962 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:41,962 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:41,962 - INFO - 
----------------------------------------
2024-10-18 13:36:41,962 - INFO - 
----------------------------------------
2024-10-18 13:36:41,962 - INFO - 
----------------------------------------
2024-10-18 13:36:41,962 - INFO - 
----------------------------------------
2024-10-18 13:36:41,962 - INFO - 
----------------------------------------
2024-10-18 13:36:41,962 - INFO - 
----------------------------------------
2024-10-18 13:36:41,962 - INFO - 
----------------------------------------
2024-10-18 13:36:41,962 - INFO - 
----------------------------------------
2024-10-18 13:36:41,962 - INFO - 
----------------------------------------
2024-10-18 13:36:41,962 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
=======
                    objrepr = self.analyzer.annotations[key]
                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr,
>>>>>>> REPLACE
2024-10-18 13:36:41,962 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
=======
                    objrepr = self.analyzer.annotations[key]
                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr,
>>>>>>> REPLACE
2024-10-18 13:36:41,962 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
=======
                    objrepr = self.analyzer.annotations[key]
                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr,
>>>>>>> REPLACE
2024-10-18 13:36:41,962 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
=======
                    objrepr = self.analyzer.annotations[key]
                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr,
>>>>>>> REPLACE
2024-10-18 13:36:41,962 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
=======
                    objrepr = self.analyzer.annotations[key]
                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr,
>>>>>>> REPLACE
2024-10-18 13:36:41,962 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
=======
                    objrepr = self.analyzer.annotations[key]
                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr,
>>>>>>> REPLACE
2024-10-18 13:36:41,962 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
=======
                    objrepr = self.analyzer.annotations[key]
                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr,
>>>>>>> REPLACE
2024-10-18 13:36:41,962 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
=======
                    objrepr = self.analyzer.annotations[key]
                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr,
>>>>>>> REPLACE
2024-10-18 13:36:41,962 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
=======
                    objrepr = self.analyzer.annotations[key]
                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                    self.add_line('   :type: ' + objrepr,
>>>>>>> REPLACE
2024-10-18 13:36:41,963 - INFO - 
----------------------------------------
2024-10-18 13:36:41,963 - INFO - 
----------------------------------------
2024-10-18 13:36:41,963 - INFO - 
----------------------------------------
2024-10-18 13:36:41,963 - INFO - 
----------------------------------------
2024-10-18 13:36:41,963 - INFO - 
----------------------------------------
2024-10-18 13:36:41,963 - INFO - 
----------------------------------------
2024-10-18 13:36:41,963 - INFO - 
----------------------------------------
2024-10-18 13:36:41,963 - INFO - 
----------------------------------------
2024-10-18 13:36:41,963 - INFO - 
----------------------------------------
2024-10-18 13:36:41,969 - INFO - extracted patch:
2024-10-18 13:36:41,969 - INFO - extracted patch:
2024-10-18 13:36:41,969 - INFO - extracted patch:
2024-10-18 13:36:41,969 - INFO - extracted patch:
2024-10-18 13:36:41,969 - INFO - extracted patch:
2024-10-18 13:36:41,969 - INFO - extracted patch:
2024-10-18 13:36:41,969 - INFO - extracted patch:
2024-10-18 13:36:41,969 - INFO - extracted patch:
2024-10-18 13:36:41,969 - INFO - extracted patch:
2024-10-18 13:36:41,969 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,11 +1717,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             try:
@@ -2108,11 +2111,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             # data descriptors do not have useful values
2024-10-18 13:36:41,969 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,11 +1717,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             try:
@@ -2108,11 +2111,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             # data descriptors do not have useful values
2024-10-18 13:36:41,969 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,11 +1717,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             try:
@@ -2108,11 +2111,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             # data descriptors do not have useful values
2024-10-18 13:36:41,969 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,11 +1717,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             try:
@@ -2108,11 +2111,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             # data descriptors do not have useful values
2024-10-18 13:36:41,969 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,11 +1717,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             try:
@@ -2108,11 +2111,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             # data descriptors do not have useful values
2024-10-18 13:36:41,969 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,11 +1717,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             try:
@@ -2108,11 +2111,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             # data descriptors do not have useful values
2024-10-18 13:36:41,969 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,11 +1717,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             try:
@@ -2108,11 +2111,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             # data descriptors do not have useful values
2024-10-18 13:36:41,969 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,11 +1717,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             try:
@@ -2108,11 +2111,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             # data descriptors do not have useful values
2024-10-18 13:36:41,969 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,11 +1717,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             try:
@@ -2108,11 +2111,14 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
+                    objrepr = self.analyzer.annotations[key]
+                    objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
+                    self.add_line('   :type: ' + objrepr,
                                   sourcename)
 
             # data descriptors do not have useful values
2024-10-18 13:36:43,452 - INFO - === file_to_commands: ===
2024-10-18 13:36:43,452 - INFO - === file_to_commands: ===
2024-10-18 13:36:43,452 - INFO - === file_to_commands: ===
2024-10-18 13:36:43,452 - INFO - === file_to_commands: ===
2024-10-18 13:36:43,452 - INFO - === file_to_commands: ===
2024-10-18 13:36:43,452 - INFO - === file_to_commands: ===
2024-10-18 13:36:43,452 - INFO - === file_to_commands: ===
2024-10-18 13:36:43,452 - INFO - === file_to_commands: ===
2024-10-18 13:36:43,452 - INFO - === file_to_commands: ===
2024-10-18 13:36:43,452 - INFO - === file_to_commands: ===
2024-10-18 13:36:43,452 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:43,452 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:43,452 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:43,452 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:43,452 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:43,452 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:43,452 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:43,452 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:43,452 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:43,452 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:43,452 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:43,452 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:43,452 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:43,452 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:43,452 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:43,452 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:43,452 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:43,452 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:43,452 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:43,452 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:43,452 - INFO - === edit_commands: ===
2024-10-18 13:36:43,452 - INFO - === edit_commands: ===
2024-10-18 13:36:43,452 - INFO - === edit_commands: ===
2024-10-18 13:36:43,452 - INFO - === edit_commands: ===
2024-10-18 13:36:43,452 - INFO - === edit_commands: ===
2024-10-18 13:36:43,452 - INFO - === edit_commands: ===
2024-10-18 13:36:43,452 - INFO - === edit_commands: ===
2024-10-18 13:36:43,452 - INFO - === edit_commands: ===
2024-10-18 13:36:43,452 - INFO - === edit_commands: ===
2024-10-18 13:36:43,452 - INFO - === edit_commands: ===
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,452 - INFO - 
----------------------------------------
2024-10-18 13:36:43,452 - INFO - 
----------------------------------------
2024-10-18 13:36:43,452 - INFO - 
----------------------------------------
2024-10-18 13:36:43,452 - INFO - 
----------------------------------------
2024-10-18 13:36:43,452 - INFO - 
----------------------------------------
2024-10-18 13:36:43,452 - INFO - 
----------------------------------------
2024-10-18 13:36:43,452 - INFO - 
----------------------------------------
2024-10-18 13:36:43,452 - INFO - 
----------------------------------------
2024-10-18 13:36:43,452 - INFO - 
----------------------------------------
2024-10-18 13:36:43,452 - INFO - 
----------------------------------------
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,452 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:43,453 - INFO - 
----------------------------------------
2024-10-18 13:36:43,453 - INFO - 
----------------------------------------
2024-10-18 13:36:43,453 - INFO - 
----------------------------------------
2024-10-18 13:36:43,453 - INFO - 
----------------------------------------
2024-10-18 13:36:43,453 - INFO - 
----------------------------------------
2024-10-18 13:36:43,453 - INFO - 
----------------------------------------
2024-10-18 13:36:43,453 - INFO - 
----------------------------------------
2024-10-18 13:36:43,453 - INFO - 
----------------------------------------
2024-10-18 13:36:43,453 - INFO - 
----------------------------------------
2024-10-18 13:36:43,453 - INFO - 
----------------------------------------
2024-10-18 13:36:43,458 - INFO - extracted patch:
2024-10-18 13:36:43,458 - INFO - extracted patch:
2024-10-18 13:36:43,458 - INFO - extracted patch:
2024-10-18 13:36:43,458 - INFO - extracted patch:
2024-10-18 13:36:43,458 - INFO - extracted patch:
2024-10-18 13:36:43,458 - INFO - extracted patch:
2024-10-18 13:36:43,458 - INFO - extracted patch:
2024-10-18 13:36:43,458 - INFO - extracted patch:
2024-10-18 13:36:43,458 - INFO - extracted patch:
2024-10-18 13:36:43,458 - INFO - extracted patch:
2024-10-18 13:36:43,458 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:43,458 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:43,458 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:43,458 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:43,458 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:43,458 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:43,458 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:43,458 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:43,458 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:43,458 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = self.env.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:44,967 - INFO - === file_to_commands: ===
2024-10-18 13:36:44,967 - INFO - === file_to_commands: ===
2024-10-18 13:36:44,967 - INFO - === file_to_commands: ===
2024-10-18 13:36:44,967 - INFO - === file_to_commands: ===
2024-10-18 13:36:44,967 - INFO - === file_to_commands: ===
2024-10-18 13:36:44,967 - INFO - === file_to_commands: ===
2024-10-18 13:36:44,967 - INFO - === file_to_commands: ===
2024-10-18 13:36:44,967 - INFO - === file_to_commands: ===
2024-10-18 13:36:44,967 - INFO - === file_to_commands: ===
2024-10-18 13:36:44,967 - INFO - === file_to_commands: ===
2024-10-18 13:36:44,967 - INFO - === file_to_commands: ===
2024-10-18 13:36:44,967 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/directive.py'": [
    "<<<<<<< SEARCH\n    def run(self) -> List[Node]:\n=======\ndef run(self) -> List[Node]:\n        app = self.env.app\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:44,967 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/directive.py'": [
    "<<<<<<< SEARCH\n    def run(self) -> List[Node]:\n=======\ndef run(self) -> List[Node]:\n        app = self.env.app\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:44,967 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/directive.py'": [
    "<<<<<<< SEARCH\n    def run(self) -> List[Node]:\n=======\ndef run(self) -> List[Node]:\n        app = self.env.app\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:44,967 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/directive.py'": [
    "<<<<<<< SEARCH\n    def run(self) -> List[Node]:\n=======\ndef run(self) -> List[Node]:\n        app = self.env.app\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:44,967 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/directive.py'": [
    "<<<<<<< SEARCH\n    def run(self) -> List[Node]:\n=======\ndef run(self) -> List[Node]:\n        app = self.env.app\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:44,967 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/directive.py'": [
    "<<<<<<< SEARCH\n    def run(self) -> List[Node]:\n=======\ndef run(self) -> List[Node]:\n        app = self.env.app\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:44,967 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/directive.py'": [
    "<<<<<<< SEARCH\n    def run(self) -> List[Node]:\n=======\ndef run(self) -> List[Node]:\n        app = self.env.app\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:44,967 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/directive.py'": [
    "<<<<<<< SEARCH\n    def run(self) -> List[Node]:\n=======\ndef run(self) -> List[Node]:\n        app = self.env.app\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:44,967 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/directive.py'": [
    "<<<<<<< SEARCH\n    def run(self) -> List[Node]:\n=======\ndef run(self) -> List[Node]:\n        app = self.env.app\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:44,967 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/directive.py'": [
    "<<<<<<< SEARCH\n    def run(self) -> List[Node]:\n=======\ndef run(self) -> List[Node]:\n        app = self.env.app\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:44,967 - INFO - {
  "'sphinx/ext/autodoc/__init__.py'": [
    "<<<<<<< SEARCH\n                self.add_line('   :type: ' + objrepr, sourcename)\n=======\n                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)\n                self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE",
    "<<<<<<< SEARCH\n                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n                                  sourcename)\n=======\n                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])\n                    self.add_line('   :type: ' + objrepr, sourcename)\n>>>>>>> REPLACE"
  ],
  "'sphinx/ext/autodoc/directive.py'": [
    "<<<<<<< SEARCH\n    def run(self) -> List[Node]:\n=======\ndef run(self) -> List[Node]:\n        app = self.env.app\n>>>>>>> REPLACE"
  ]
}
2024-10-18 13:36:44,967 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:44,967 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:44,967 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:44,967 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:44,967 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:44,967 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:44,967 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:44,967 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:44,967 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:44,967 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:44,967 - INFO - === edited_file: 'sphinx/ext/autodoc/__init__.py' ===
2024-10-18 13:36:44,967 - INFO - === edit_commands: ===
2024-10-18 13:36:44,967 - INFO - === edit_commands: ===
2024-10-18 13:36:44,967 - INFO - === edit_commands: ===
2024-10-18 13:36:44,967 - INFO - === edit_commands: ===
2024-10-18 13:36:44,967 - INFO - === edit_commands: ===
2024-10-18 13:36:44,967 - INFO - === edit_commands: ===
2024-10-18 13:36:44,967 - INFO - === edit_commands: ===
2024-10-18 13:36:44,967 - INFO - === edit_commands: ===
2024-10-18 13:36:44,967 - INFO - === edit_commands: ===
2024-10-18 13:36:44,967 - INFO - === edit_commands: ===
2024-10-18 13:36:44,967 - INFO - === edit_commands: ===
2024-10-18 13:36:44,967 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,967 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,967 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,967 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,967 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,967 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,967 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,967 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,967 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,967 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,967 - INFO - <<<<<<< SEARCH
                self.add_line('   :type: ' + objrepr, sourcename)
=======
                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,968 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,968 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,968 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,968 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,968 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,968 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,968 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,968 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,968 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,968 - INFO - <<<<<<< SEARCH
                    self.add_line('   :type: ' + self.analyzer.annotations[key],
                                  sourcename)
=======
                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
                    self.add_line('   :type: ' + objrepr, sourcename)
>>>>>>> REPLACE
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,968 - INFO - 
----------------------------------------
2024-10-18 13:36:44,973 - INFO - extracted patch:
2024-10-18 13:36:44,973 - INFO - extracted patch:
2024-10-18 13:36:44,973 - INFO - extracted patch:
2024-10-18 13:36:44,973 - INFO - extracted patch:
2024-10-18 13:36:44,973 - INFO - extracted patch:
2024-10-18 13:36:44,973 - INFO - extracted patch:
2024-10-18 13:36:44,973 - INFO - extracted patch:
2024-10-18 13:36:44,973 - INFO - extracted patch:
2024-10-18 13:36:44,973 - INFO - extracted patch:
2024-10-18 13:36:44,973 - INFO - extracted patch:
2024-10-18 13:36:44,973 - INFO - extracted patch:
2024-10-18 13:36:44,973 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:44,973 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:44,973 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:44,973 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:44,973 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:44,973 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:44,973 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:44,973 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:44,973 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:44,973 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
2024-10-18 13:36:44,973 - INFO - --- sphinx/ext/autodoc/__init__.py
+++ sphinx/ext/autodoc/__init__.py
@@ -1717,12 +1717,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             try:
                 if self.object is UNINITIALIZED_ATTR:
@@ -2108,12 +2109,13 @@
 
             if self.objpath[-1] in annotations:
                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))
+                objrepr = app.config.autodoc_type_aliases.get(objrepr, objrepr)
                 self.add_line('   :type: ' + objrepr, sourcename)
             else:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
                 if self.analyzer and key in self.analyzer.annotations:
-                    self.add_line('   :type: ' + self.analyzer.annotations[key],
-                                  sourcename)
+                    objrepr = app.config.autodoc_type_aliases.get(self.analyzer.annotations[key], self.analyzer.annotations[key])
+                    self.add_line('   :type: ' + objrepr, sourcename)
 
             # data descriptors do not have useful values
             if not self._datadescriptor:
