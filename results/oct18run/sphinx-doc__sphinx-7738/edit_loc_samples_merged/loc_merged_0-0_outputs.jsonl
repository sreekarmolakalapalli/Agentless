{"instance_id": "sphinx-doc__sphinx-7738", "found_files": ["sphinx/ext/napoleon/docstring.py", "sphinx/ext/napoleon/__init__.py", "sphinx/ext/autodoc/directive.py", "sphinx/writers/html.py", "sphinx/util/docstrings.py"], "additional_artifact_loc_file": {"raw_output_files": "```\nsphinx/ext/napoleon/docstring.py\nsphinx/ext/napoleon/__init__.py\nsphinx/ext/autodoc/directive.py\nsphinx/writers/html.py\nsphinx/util/docstrings.py\n```"}, "file_traj": {"response": "```\nsphinx/ext/napoleon/docstring.py\nsphinx/ext/napoleon/__init__.py\nsphinx/ext/autodoc/directive.py\nsphinx/writers/html.py\nsphinx/util/docstrings.py\n```", "usage": {"completion_tokens": 48, "prompt_tokens": 1383}, "prompt": "Please look through the following GitHub problem description, and Repository structure and provide a list of files that one would need to edit to fix the problem.\n\n### GitHub Problem Description ###\noverescaped trailing underscore on attribute with napoleon\n**Describe the bug**\r\nAttribute name `hello_` shows up as `hello\\_` in the html (visible backslash) with napoleon.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\nempty `__init__.py`\r\n`a.py` contains\r\n```python\r\nclass A:\r\n    \"\"\"\r\n    Attributes\r\n    ----------\r\n    hello_: int\r\n        hi\r\n    \"\"\"\r\n    pass\r\n```\r\nrun `sphinx-quickstart`\r\nadd `'sphinx.ext.autodoc', 'sphinx.ext.napoleon'` to extensions in conf.py.\r\nadd `.. autoclass:: a.A` to index.rst\r\nPYTHONPATH=. make clean html\r\nopen _build/html/index.html in web browser and see the ugly backslash.\r\n\r\n**Expected behavior**\r\nNo backslash, a similar output to what I get for\r\n```rst\r\n    .. attribute:: hello_\r\n        :type: int\r\n\r\n        hi\r\n```\r\n(the type shows up differently as well, but that's not the point here)\r\nOlder versions like 2.4.3 look ok to me.\r\n\r\n**Environment info**\r\n- OS: Linux debian testing\r\n- Python version: 3.8.3\r\n- Sphinx version: 3.0.4\r\n- Sphinx extensions:  sphinx.ext.autodoc, sphinx.ext.napoleon\r\n- Extra tools:\n\n\n###\n\n\n\n### Repository Structure ###\nsphinx/\n    setup.py\n    events.py\n    addnodes.py\n    parsers.py\n    versioning.py\n    jinja2glue.py\n    project.py\n    extension.py\n    highlighting.py\n    setup_command.py\n    io.py\n    deprecation.py\n    pygments_styles.py\n    roles.py\n    errors.py\n    config.py\n    registry.py\n    theming.py\n    application.py\n    __init__.py\n    __main__.py\n    transforms/\n        i18n.py\n        references.py\n        compact_bullet_list.py\n        __init__.py\n        post_transforms/\n            code.py\n            images.py\n            __init__.py\n    domains/\n        index.py\n        python.py\n        javascript.py\n        changeset.py\n        citation.py\n        std.py\n        cpp.py\n        math.py\n        rst.py\n        c.py\n        __init__.py\n    ext/\n        graphviz.py\n        imgconverter.py\n        imgmath.py\n        githubpages.py\n        intersphinx.py\n        inheritance_diagram.py\n        linkcode.py\n        viewcode.py\n        ifconfig.py\n        todo.py\n        mathjax.py\n        jsmath.py\n        apidoc.py\n        coverage.py\n        autosectionlabel.py\n        extlinks.py\n        __init__.py\n        doctest.py\n        duration.py\n        napoleon/\n            iterators.py\n            docstring.py\n            __init__.py\n        autosummary/\n            generate.py\n            __init__.py\n        autodoc/\n            typehints.py\n            importer.py\n            mock.py\n            directive.py\n            type_comment.py\n            __init__.py\n    writers/\n        html5.py\n        manpage.py\n        latex.py\n        html.py\n        texinfo.py\n        xml.py\n        __init__.py\n        text.py\n    pycode/\n        ast.py\n        parser.py\n        __init__.py\n    cmd/\n        build.py\n        quickstart.py\n        make_mode.py\n        __init__.py\n    directives/\n        code.py\n        other.py\n        patches.py\n        __init__.py\n    util/\n        requests.py\n        smartypants.py\n        typing.py\n        template.py\n        i18n.py\n        matching.py\n        texescape.py\n        jsdump.py\n        images.py\n        compat.py\n        inventory.py\n        fileutil.py\n        console.py\n        inspect.py\n        jsonimpl.py\n        pycompat.py\n        nodes.py\n        cfamily.py\n        math.py\n        docfields.py\n        rst.py\n        logging.py\n        docstrings.py\n        osutil.py\n        build_phase.py\n        docutils.py\n        png.py\n        __init__.py\n        tags.py\n        parallel.py\n        stemmer/\n            porter.py\n            __init__.py\n    environment/\n        __init__.py\n        collectors/\n            asset.py\n            indexentries.py\n            title.py\n            dependencies.py\n            toctree.py\n            metadata.py\n            __init__.py\n        adapters/\n            asset.py\n            indexentries.py\n            toctree.py\n            __init__.py\n    search/\n        es.py\n        hu.py\n        ru.py\n        zh.py\n        sv.py\n        jssplitter.py\n        ja.py\n        ro.py\n        en.py\n        da.py\n        pt.py\n        tr.py\n        fr.py\n        de.py\n        it.py\n        nl.py\n        fi.py\n        __init__.py\n        no.py\n    locale/\n        __init__.py\n    builders/\n        singlehtml.py\n        manpage.py\n        applehelp.py\n        linkcheck.py\n        gettext.py\n        epub3.py\n        changes.py\n        _epub_base.py\n        htmlhelp.py\n        devhelp.py\n        texinfo.py\n        dirhtml.py\n        dummy.py\n        xml.py\n        qthelp.py\n        __init__.py\n        text.py\n        latex/\n            transforms.py\n            constants.py\n            nodes.py\n            theming.py\n            util.py\n            __init__.py\n        html/\n            transforms.py\n            __init__.py\ndoc/\n    conf.py\n    usage/\n        extensions/\n            example_google.py\n            example_numpy.py\n    development/\n        tutorials/\n            examples/\n                recipe.py\n                todo.py\n                helloworld.py\nutils/\n    checks.py\n    bump_version.py\n    doclinter.py\n    __init__.py\n    jssplitter_generator.py\n\n###\n\nPlease only provide the full path and return at most 5 files.\nThe returned files should be separated by new lines ordered by most to least important and wrapped with ```\nFor example:\n```\nfile1.py\nfile2.py\n```"}, "found_related_locs": [["class: GoogleDocstring\nclass: NumpyDocstring"], ["function: _process_docstring"], ["class: AutodocDirective"]], "additional_artifact_loc_related": [{"raw_output_loc": "```\nsphinx/ext/napoleon/docstring.py\nclass: GoogleDocstring\nclass: NumpyDocstring\n\nsphinx/ext/napoleon/__init__.py\nfunction: _process_docstring\n\nsphinx/ext/autodoc/directive.py\nclass: AutodocDirective\n```"}], "related_loc_traj": {"response": "```\nsphinx/ext/napoleon/docstring.py\nclass: GoogleDocstring\nclass: NumpyDocstring\n\nsphinx/ext/napoleon/__init__.py\nfunction: _process_docstring\n\nsphinx/ext/autodoc/directive.py\nclass: AutodocDirective\n```", "usage": {"completion_tokens": 61, "prompt_tokens": 2799}, "prompt": "\nPlease look through the following GitHub Problem Description, and the Skeleton of Relevant Files.\nIdentify all locations that need inspection or editing to fix the problem, including directly related areas as well as any potentially related global variables, functions, and classes.\nFor each location you provide, either give the name of the class, the name of a method in a class, the name of a function, or the name of a global variable.\n\n### GitHub Problem Description ###\noverescaped trailing underscore on attribute with napoleon\n**Describe the bug**\r\nAttribute name `hello_` shows up as `hello\\_` in the html (visible backslash) with napoleon.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\nempty `__init__.py`\r\n`a.py` contains\r\n```python\r\nclass A:\r\n    \"\"\"\r\n    Attributes\r\n    ----------\r\n    hello_: int\r\n        hi\r\n    \"\"\"\r\n    pass\r\n```\r\nrun `sphinx-quickstart`\r\nadd `'sphinx.ext.autodoc', 'sphinx.ext.napoleon'` to extensions in conf.py.\r\nadd `.. autoclass:: a.A` to index.rst\r\nPYTHONPATH=. make clean html\r\nopen _build/html/index.html in web browser and see the ugly backslash.\r\n\r\n**Expected behavior**\r\nNo backslash, a similar output to what I get for\r\n```rst\r\n    .. attribute:: hello_\r\n        :type: int\r\n\r\n        hi\r\n```\r\n(the type shows up differently as well, but that's not the point here)\r\nOlder versions like 2.4.3 look ok to me.\r\n\r\n**Environment info**\r\n- OS: Linux debian testing\r\n- Python version: 3.8.3\r\n- Sphinx version: 3.0.4\r\n- Sphinx extensions:  sphinx.ext.autodoc, sphinx.ext.napoleon\r\n- Extra tools:\n\n\n###\n\n\n\n### Skeleton of Relevant Files ###\n\n### File: sphinx/ext/napoleon/docstring.py ###\n```python\n\n\n_directive_regex = re.compile(r'\\.\\. \\S+::')\n_google_section_regex = re.compile(r'^(\\s|\\w)+:\\s*$')\n_google_typed_arg_regex = re.compile(r'\\s*(.+?)\\s*\\(\\s*(.*[^\\s]+)\\s*\\)')\n_numpy_section_regex = re.compile(r'^[=\\-`:\\'\"~^_*+#<>]{2,}\\s*$')\n_single_colon_regex = re.compile(r'(?<!:):(?!:)')\n_xref_or_code_regex = re.compile(\n    r'((?::(?:[a-zA-Z0-9]+[\\-_+:.])*[a-zA-Z0-9]+:`.+?`)|'\n    r'(?:``.+``))')\n_bullet_list_regex = re.compile(r'^(\\*|\\+|\\-)(\\s+\\S|\\s*$)')\n_enumerated_list_regex = re.compile(\n    r'^(?P<paren>\\()?'\n    r'(\\d+|#|[ivxlcdm]+|[IVXLCDM]+|[a-zA-Z])'\n    r'(?(paren)\\)|\\.)(\\s+\\S|\\s*$)')\n\n\nclass GoogleDocstring:\n\n    _name_rgx = re.compile(r\"^\\s*((?::(?P<role>\\S+):)?`(?P<name>~?[a-zA-Z0-9_.-]+)`|\"\n                           r\" (?P<name2>~?[a-zA-Z0-9_.-]+))\\s*\", re.X)\n\n    def __init__(self, docstring: Union[str, List[str]], config: SphinxConfig = None,\n                 app: Sphinx = None, what: str = '', name: str = '',\n                 obj: Any = None, options: Any = None) -> None:\n...\n    def __str__(self) -> str:\n...\n    def lines(self) -> List[str]:\n...\n    def _consume_indented_block(self, indent: int = 1) -> List[str]:\n...\n    def _consume_contiguous(self) -> List[str]:\n...\n    def _consume_empty(self) -> List[str]:\n...\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                       ) -> Tuple[str, str, List[str]]:\n...\n    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> List[Tuple[str, str, List[str]]]:\n...\n    def _consume_inline_attribute(self) -> Tuple[str, List[str]]:\n...\n    def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n...\n    def _consume_usage_section(self) -> List[str]:\n...\n    def _consume_section_header(self) -> str:\n...\n    def _consume_to_end(self) -> List[str]:\n...\n    def _consume_to_next_section(self) -> List[str]:\n...\n    def _dedent(self, lines: List[str], full: bool = False) -> List[str]:\n...\n    def _escape_args_and_kwargs(self, name: str) -> str:\n...\n    def _fix_field_desc(self, desc: List[str]) -> List[str]:\n...\n    def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n...\n    def _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n...\n    def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n                                field_role: str = 'param', type_role: str = 'type'\n                                ) -> List[str]:\n...\n    def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n...\n    def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n                       ) -> List[str]:\n...\n    def _get_current_indent(self, peek_ahead: int = 0) -> int:\n...\n    def _get_indent(self, line: str) -> int:\n...\n    def _get_initial_indent(self, lines: List[str]) -> int:\n...\n    def _get_min_indent(self, lines: List[str]) -> int:\n...\n    def _indent(self, lines: List[str], n: int = 4) -> List[str]:\n...\n    def _is_indented(self, line: str, indent: int = 1) -> bool:\n...\n    def _is_list(self, lines: List[str]) -> bool:\n...\n    def _is_section_header(self) -> bool:\n...\n    def _is_section_break(self) -> bool:\n...\n    def _load_custom_sections(self) -> None:\n...\n    def _parse(self) -> None:\n...\n    def _parse_admonition(self, admonition: str, section: str) -> List[str]:\n...\n    def _parse_attribute_docstring(self) -> List[str]:\n...\n    def _parse_attributes_section(self, section: str) -> List[str]:\n...\n    def _parse_examples_section(self, section: str) -> List[str]:\n...\n    def _parse_custom_generic_section(self, section: str) -> List[str]:\n...\n    def _parse_usage_section(self, section: str) -> List[str]:\n...\n    def _parse_generic_section(self, section: str, use_admonition: bool) -> List[str]:\n...\n    def _parse_keyword_arguments_section(self, section: str) -> List[str]:\n...\n    def _parse_methods_section(self, section: str) -> List[str]:\n...\n    def _parse_notes_section(self, section: str) -> List[str]:\n...\n    def _parse_other_parameters_section(self, section: str) -> List[str]:\n...\n    def _parse_parameters_section(self, section: str) -> List[str]:\n...\n    def _parse_raises_section(self, section: str) -> List[str]:\n...\n    def _parse_references_section(self, section: str) -> List[str]:\n...\n    def _parse_returns_section(self, section: str) -> List[str]:\n...\n    def _parse_see_also_section(self, section: str) -> List[str]:\n...\n    def _parse_warns_section(self, section: str) -> List[str]:\n...\n    def _parse_yields_section(self, section: str) -> List[str]:\n...\n    def _partition_field_on_colon(self, line: str) -> Tuple[str, str, str]:\n...\n    def _qualify_name(self, attr_name: str, klass: \"Type\") -> str:\n...\n    def _strip_empty(self, lines: List[str]) -> List[str]:\n...\n\nclass NumpyDocstring(GoogleDocstring):\n    def __init__(self, docstring: Union[str, List[str]], config: SphinxConfig = None,\n                 app: Sphinx = None, what: str = '', name: str = '',\n                 obj: Any = None, options: Any = None) -> None:\n...\n    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                       ) -> Tuple[str, str, List[str]]:\n...\n    def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n...\n    def _consume_section_header(self) -> str:\n...\n    def _is_section_break(self) -> bool:\n...\n    def _is_section_header(self) -> bool:\n...\n    def _parse_see_also_section(self, section: str) -> List[str]:\n...\n    def _parse_numpydoc_see_also_section(self, content: List[str]) -> List[str]:\n\n```\n\n### File: sphinx/ext/napoleon/__init__.py ###\n```python\n\n\nclass Config:\n    _config_values = {\n        'napoleon_google_docstring': (True, 'env'),\n        'napoleon_numpy_docstring': (True, 'env'),\n        'napoleon_include_init_with_doc': (False, 'env'),\n        'napoleon_include_private_with_doc': (False, 'env'),\n        'napoleon_include_special_with_doc': (False, 'env'),\n        'napoleon_use_admonition_for_examples': (False, 'env'),\n        'napoleon_use_admonition_for_notes': (False, 'env'),\n        'napoleon_use_admonition_for_references': (False, 'env'),\n        'napoleon_use_ivar': (False, 'env'),\n        'napoleon_use_param': (True, 'env'),\n        'napoleon_use_rtype': (True, 'env'),\n        'napoleon_use_keyword': (True, 'env'),\n        'napoleon_custom_sections': (None, 'env')\n    }\n\n    def __init__(self, **settings: Any) -> None:\n...\n\ndef setup(app: Sphinx) -> Dict[str, Any]:\n...\n\ndef _patch_python_domain() -> None:\n...\n\ndef _process_docstring(app: Sphinx, what: str, name: str, obj: Any,\n                       options: Any, lines: List[str]) -> None:\n...\n\ndef _skip_member(app: Sphinx, what: str, name: str, obj: Any,\n                 skip: bool, options: Any) -> bool:\n\n```\n\n### File: sphinx/ext/autodoc/directive.py ###\n```python\n\n\nlogger = logging.getLogger(__name__)\n\n\n# common option names for autodoc directives\nAUTODOC_DEFAULT_OPTIONS = ['members', 'undoc-members', 'inherited-members',\n                           'show-inheritance', 'private-members', 'special-members',\n                           'ignore-module-all', 'exclude-members', 'member-order',\n                           'imported-members']\n\n\nclass DummyOptionSpec(dict):\n\n    def __bool__(self) -> bool:\n...\n    def __getitem__(self, key: str) -> Callable[[str], str]:\n...\n\nclass DocumenterBridge:\n\n    def __init__(self, env: BuildEnvironment, reporter: Reporter, options: Options,\n                 lineno: int, state: Any = None) -> None:\n...\n    def warn(self, msg: str) -> None:\n...\n\ndef process_documenter_options(documenter: \"Type[Documenter]\", config: Config, options: Dict\n                               ) -> Options:\n...\n\ndef parse_generated_content(state: RSTState, content: StringList, documenter: Documenter\n                            ) -> List[Node]:\n...\n\nclass AutodocDirective(SphinxDirective):\n    option_spec = DummyOptionSpec()\n    has_content = True\n    required_arguments = 1\n    optional_arguments = 0\n    final_argument_whitespace = True\n\n    def run(self) -> List[Node]:\n\n```\n\n\n###\n\nPlease provide the complete set of locations as either a class name, a function name, or a variable name.\nNote that if you include a class, you do not need to list its specific methods.\nYou can include either the entire class or don't include the class name and instead include specific methods in the class.\n### Examples:\n```\nfull_path1/file1.py\nfunction: my_function_1\nclass: MyClass1\nfunction: MyClass2.my_method\n\nfull_path2/file2.py\nvariable: my_var\nfunction: MyClass3.my_method\n\nfull_path3/file3.py\nfunction: my_function_2\nfunction: my_function_3\nfunction: MyClass4.my_method_1\nclass: MyClass5\n```\n\nReturn just the locations.\n"}, "found_edit_locs": ["function: GoogleDocstring._escape_args_and_kwargs", "", ""], "additional_artifact_loc_edit_location": [{"raw_output_loc": ["```\nsphinx/ext/napoleon/docstring.py\nfunction: GoogleDocstring._escape_args_and_kwargs\nlines: 320-323\n```", "```\nsphinx/ext/napoleon/docstring.py\nline: 320\nfunction: GoogleDocstring._escape_args_and_kwargs\n```", "```\nsphinx/ext/napoleon/docstring.py\nfunction: GoogleDocstring._escape_args_and_kwargs\nline: 321\nline: 322\nline: 323\n```", "```\nsphinx/ext/napoleon/docstring.py\nfunction: GoogleDocstring._escape_args_and_kwargs\nline: 322\n\nsphinx/ext/napoleon/docstring.py\nfunction: NumpyDocstring._escape_args_and_kwargs\nline: 887\n```"]}], "edit_loc_traj": {"prompt": "\nPlease review the following GitHub problem description, and relevant files, and provide a set of locations that need to be edited to fix the issue.\nThe locations can be specified as class names, function or method names, or exact line numbers that require modification.\n\n### GitHub Problem Description ###\noverescaped trailing underscore on attribute with napoleon\n**Describe the bug**\r\nAttribute name `hello_` shows up as `hello\\_` in the html (visible backslash) with napoleon.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\nempty `__init__.py`\r\n`a.py` contains\r\n```python\r\nclass A:\r\n    \"\"\"\r\n    Attributes\r\n    ----------\r\n    hello_: int\r\n        hi\r\n    \"\"\"\r\n    pass\r\n```\r\nrun `sphinx-quickstart`\r\nadd `'sphinx.ext.autodoc', 'sphinx.ext.napoleon'` to extensions in conf.py.\r\nadd `.. autoclass:: a.A` to index.rst\r\nPYTHONPATH=. make clean html\r\nopen _build/html/index.html in web browser and see the ugly backslash.\r\n\r\n**Expected behavior**\r\nNo backslash, a similar output to what I get for\r\n```rst\r\n    .. attribute:: hello_\r\n        :type: int\r\n\r\n        hi\r\n```\r\n(the type shows up differently as well, but that's not the point here)\r\nOlder versions like 2.4.3 look ok to me.\r\n\r\n**Environment info**\r\n- OS: Linux debian testing\r\n- Python version: 3.8.3\r\n- Sphinx version: 3.0.4\r\n- Sphinx extensions:  sphinx.ext.autodoc, sphinx.ext.napoleon\r\n- Extra tools:\n\n\n###\n\n\n\n### sphinx/ext/napoleon/docstring.py\n...\n33|_xref_or_code_regex = re.compile(\n34|    r'((?::(?:[a-zA-Z0-9]+[\\-_+:.])*[a-zA-Z0-9]+:`.+?`)|'\n35|    r'(?:``.+``))')\n36|_bullet_list_regex = re.compile(r'^(\\*|\\+|\\-)(\\s+\\S|\\s*$)')\n37|_enumerated_list_regex = re.compile(\n38|    r'^(?P<paren>\\()?'\n39|    r'(\\d+|#|[ivxlcdm]+|[IVXLCDM]+|[a-zA-Z])'\n40|    r'(?(paren)\\)|\\.)(\\s+\\S|\\s*$)')\n41|\n42|\n43|class GoogleDocstring:\n44|    \"\"\"Convert Google style docstrings to reStructuredText.\n45|\n46|    Parameters\n47|    ----------\n48|    docstring : :obj:`str` or :obj:`list` of :obj:`str`\n49|        The docstring to parse, given either as a string or split into\n50|        individual lines.\n51|    config: :obj:`sphinx.ext.napoleon.Config` or :obj:`sphinx.config.Config`\n52|        The configuration settings to use. If not given, defaults to the\n53|        config object on `app`; or if `app` is not given defaults to the\n54|        a new :class:`sphinx.ext.napoleon.Config` object.\n55|\n56|\n57|    Other Parameters\n58|    ----------------\n59|    app : :class:`sphinx.application.Sphinx`, optional\n60|        Application object representing the Sphinx process.\n61|    what : :obj:`str`, optional\n62|        A string specifying the type of the object to which the docstring\n63|        belongs. Valid values: \"module\", \"class\", \"exception\", \"function\",\n64|        \"method\", \"attribute\".\n65|    name : :obj:`str`, optional\n66|        The fully qualified name of the object.\n67|    obj : module, class, exception, function, method, or attribute\n68|        The object to which the docstring belongs.\n69|    options : :class:`sphinx.ext.autodoc.Options`, optional\n70|        The options given to the directive: an object with attributes\n71|        inherited_members, undoc_members, show_inheritance and noindex that\n72|        are True if the flag option of same name was given to the auto\n73|        directive.\n74|\n75|\n76|    Example\n77|    -------\n78|    >>> from sphinx.ext.napoleon import Config\n79|    >>> config = Config(napoleon_use_param=True, napoleon_use_rtype=True)\n80|    >>> docstring = '''One line summary.\n81|    ...\n82|    ... Extended description.\n83|    ...\n84|    ... Args:\n85|    ...   arg1(int): Description of `arg1`\n86|    ...   arg2(str): Description of `arg2`\n87|    ... Returns:\n88|    ...   str: Description of return value.\n89|    ... '''\n90|    >>> print(GoogleDocstring(docstring, config))\n91|    One line summary.\n92|    <BLANKLINE>\n93|    Extended description.\n94|    <BLANKLINE>\n95|    :param arg1: Description of `arg1`\n96|    :type arg1: int\n97|    :param arg2: Description of `arg2`\n98|    :type arg2: str\n99|    <BLANKLINE>\n100|    :returns: Description of return value.\n101|    :rtype: str\n102|    <BLANKLINE>\n103|\n104|    \"\"\"\n105|\n106|    _name_rgx = re.compile(r\"^\\s*((?::(?P<role>\\S+):)?`(?P<name>~?[a-zA-Z0-9_.-]+)`|\"\n107|                           r\" (?P<name2>~?[a-zA-Z0-9_.-]+))\\s*\", re.X)\n108|\n109|    def __init__(self, docstring: Union[str, List[str]], config: SphinxConfig = None,\n110|                 app: Sphinx = None, what: str = '', name: str = '',\n111|                 obj: Any = None, options: Any = None) -> None:\n112|        self._config = config\n113|        self._app = app\n114|\n115|        if not self._config:\n116|            from sphinx.ext.napoleon import Config\n117|            self._config = self._app.config if self._app else Config()  # type: ignore\n118|\n119|        if not what:\n120|            if inspect.isclass(obj):\n121|                what = 'class'\n122|            elif inspect.ismodule(obj):\n123|                what = 'module'\n124|            elif callable(obj):\n125|                what = 'function'\n126|            else:\n127|                what = 'object'\n128|\n129|        self._what = what\n130|        self._name = name\n131|        self._obj = obj\n132|        self._opt = options\n133|        if isinstance(docstring, str):\n134|            lines = docstring.splitlines()\n135|        else:\n136|            lines = docstring\n137|        self._line_iter = modify_iter(lines, modifier=lambda s: s.rstrip())\n138|        self._parsed_lines = []  # type: List[str]\n139|        self._is_in_section = False\n140|        self._section_indent = 0\n141|        if not hasattr(self, '_directive_sections'):\n142|            self._directive_sections = []  # type: List[str]\n143|        if not hasattr(self, '_sections'):\n144|            self._sections = {\n145|                'args': self._parse_parameters_section,\n146|                'arguments': self._parse_parameters_section,\n147|                'attention': partial(self._parse_admonition, 'attention'),\n148|                'attributes': self._parse_attributes_section,\n149|                'caution': partial(self._parse_admonition, 'caution'),\n150|                'danger': partial(self._parse_admonition, 'danger'),\n151|                'error': partial(self._parse_admonition, 'error'),\n152|                'example': self._parse_examples_section,\n153|                'examples': self._parse_examples_section,\n154|                'hint': partial(self._parse_admonition, 'hint'),\n155|                'important': partial(self._parse_admonition, 'important'),\n156|                'keyword args': self._parse_keyword_arguments_section,\n157|                'keyword arguments': self._parse_keyword_arguments_section,\n158|                'methods': self._parse_methods_section,\n159|                'note': partial(self._parse_admonition, 'note'),\n160|                'notes': self._parse_notes_section,\n161|                'other parameters': self._parse_other_parameters_section,\n162|                'parameters': self._parse_parameters_section,\n163|                'return': self._parse_returns_section,\n164|                'returns': self._parse_returns_section,\n165|                'raises': self._parse_raises_section,\n166|                'references': self._parse_references_section,\n167|                'see also': self._parse_see_also_section,\n168|                'tip': partial(self._parse_admonition, 'tip'),\n169|                'todo': partial(self._parse_admonition, 'todo'),\n170|                'warning': partial(self._parse_admonition, 'warning'),\n171|                'warnings': partial(self._parse_admonition, 'warning'),\n172|                'warns': self._parse_warns_section,\n173|                'yield': self._parse_yields_section,\n174|                'yields': self._parse_yields_section,\n175|            }  # type: Dict[str, Callable]\n176|\n177|        self._load_custom_sections()\n178|\n179|        self._parse()\n180|\n181|    def __str__(self) -> str:\n182|        \"\"\"Return the parsed docstring in reStructuredText format.\n183|\n184|        Returns\n185|        -------\n186|        unicode\n187|            Unicode version of the docstring.\n188|\n189|        \"\"\"\n190|        return '\\n'.join(self.lines())\n191|\n192|    def lines(self) -> List[str]:\n193|        \"\"\"Return the parsed lines of the docstring in reStructuredText format.\n194|\n195|        Returns\n196|        -------\n197|        list(str)\n198|            The lines of the docstring in a list.\n199|\n200|        \"\"\"\n201|        return self._parsed_lines\n202|\n203|    def _consume_indented_block(self, indent: int = 1) -> List[str]:\n204|        lines = []\n205|        line = self._line_iter.peek()\n206|        while(not self._is_section_break() and\n207|              (not line or self._is_indented(line, indent))):\n208|            lines.append(next(self._line_iter))\n209|            line = self._line_iter.peek()\n210|        return lines\n211|\n212|    def _consume_contiguous(self) -> List[str]:\n213|        lines = []\n214|        while (self._line_iter.has_next() and\n215|               self._line_iter.peek() and\n216|               not self._is_section_header()):\n217|            lines.append(next(self._line_iter))\n218|        return lines\n219|\n220|    def _consume_empty(self) -> List[str]:\n221|        lines = []\n222|        line = self._line_iter.peek()\n223|        while self._line_iter.has_next() and not line:\n224|            lines.append(next(self._line_iter))\n225|            line = self._line_iter.peek()\n226|        return lines\n227|\n228|    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n229|                       ) -> Tuple[str, str, List[str]]:\n230|        line = next(self._line_iter)\n231|\n232|        before, colon, after = self._partition_field_on_colon(line)\n233|        _name, _type, _desc = before, '', after\n234|\n235|        if parse_type:\n236|            match = _google_typed_arg_regex.match(before)\n237|            if match:\n238|                _name = match.group(1)\n239|                _type = match.group(2)\n240|\n241|        _name = self._escape_args_and_kwargs(_name)\n242|\n243|        if prefer_type and not _type:\n244|            _type, _name = _name, _type\n245|        indent = self._get_indent(line) + 1\n246|        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))\n247|        _descs = self.__class__(_descs, self._config).lines()\n248|        return _name, _type, _descs\n249|\n250|    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False\n251|                        ) -> List[Tuple[str, str, List[str]]]:\n252|        self._consume_empty()\n253|        fields = []\n254|        while not self._is_section_break():\n255|            _name, _type, _desc = self._consume_field(parse_type, prefer_type)\n256|            if _name or _type or _desc:\n257|                fields.append((_name, _type, _desc,))\n258|        return fields\n259|\n260|    def _consume_inline_attribute(self) -> Tuple[str, List[str]]:\n261|        line = next(self._line_iter)\n262|        _type, colon, _desc = self._partition_field_on_colon(line)\n263|        if not colon or not _desc:\n264|            _type, _desc = _desc, _type\n265|            _desc += colon\n266|        _descs = [_desc] + self._dedent(self._consume_to_end())\n267|        _descs = self.__class__(_descs, self._config).lines()\n268|        return _type, _descs\n269|\n270|    def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n271|        lines = self._dedent(self._consume_to_next_section())\n272|        if lines:\n273|            before, colon, after = self._partition_field_on_colon(lines[0])\n274|            _name, _type, _desc = '', '', lines\n275|\n276|            if colon:\n277|                if after:\n278|                    _desc = [after] + lines[1:]\n279|                else:\n280|                    _desc = lines[1:]\n281|\n282|                _type = before\n283|\n284|            _desc = self.__class__(_desc, self._config).lines()\n285|            return [(_name, _type, _desc,)]\n286|        else:\n287|            return []\n288|\n289|    def _consume_usage_section(self) -> List[str]:\n290|        lines = self._dedent(self._consume_to_next_section())\n291|        return lines\n292|\n293|    def _consume_section_header(self) -> str:\n294|        section = next(self._line_iter)\n295|        stripped_section = section.strip(':')\n296|        if stripped_section.lower() in self._sections:\n297|            section = stripped_section\n298|        return section\n299|\n300|    def _consume_to_end(self) -> List[str]:\n301|        lines = []\n302|        while self._line_iter.has_next():\n303|            lines.append(next(self._line_iter))\n304|        return lines\n305|\n306|    def _consume_to_next_section(self) -> List[str]:\n307|        self._consume_empty()\n308|        lines = []\n309|        while not self._is_section_break():\n310|            lines.append(next(self._line_iter))\n311|        return lines + self._consume_empty()\n312|\n313|    def _dedent(self, lines: List[str], full: bool = False) -> List[str]:\n314|        if full:\n315|            return [line.lstrip() for line in lines]\n316|        else:\n317|            min_indent = self._get_min_indent(lines)\n318|            return [line[min_indent:] for line in lines]\n319|\n320|    def _escape_args_and_kwargs(self, name: str) -> str:\n321|        if name.endswith('_'):\n322|            name = name[:-1] + r'\\_'\n323|\n324|        if name[:2] == '**':\n325|            return r'\\*\\*' + name[2:]\n326|        elif name[:1] == '*':\n327|            return r'\\*' + name[1:]\n328|        else:\n329|            return name\n330|\n331|    def _fix_field_desc(self, desc: List[str]) -> List[str]:\n332|        if self._is_list(desc):\n333|            desc = [''] + desc\n334|        elif desc[0].endswith('::'):\n335|            desc_block = desc[1:]\n336|            indent = self._get_indent(desc[0])\n337|            block_indent = self._get_initial_indent(desc_block)\n338|            if block_indent > indent:\n339|                desc = [''] + desc\n340|            else:\n341|                desc = ['', desc[0]] + self._indent(desc_block, 4)\n342|        return desc\n343|\n344|    def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:\n345|        lines = self._strip_empty(lines)\n346|        if len(lines) == 1:\n347|            return ['.. %s:: %s' % (admonition, lines[0].strip()), '']\n348|        elif lines:\n349|            lines = self._indent(self._dedent(lines), 3)\n350|            return ['.. %s::' % admonition, ''] + lines + ['']\n351|        else:\n352|            return ['.. %s::' % admonition, '']\n353|\n354|    def _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:\n355|        if lines:\n356|            if padding is None:\n357|                padding = ' ' * len(prefix)\n358|            result_lines = []\n359|            for i, line in enumerate(lines):\n360|                if i == 0:\n361|                    result_lines.append((prefix + line).rstrip())\n362|                elif line:\n363|                    result_lines.append(padding + line)\n364|                else:\n365|                    result_lines.append('')\n366|            return result_lines\n367|        else:\n368|            return [prefix]\n369|\n370|    def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],\n371|                                field_role: str = 'param', type_role: str = 'type'\n372|                                ) -> List[str]:\n373|        lines = []\n374|        for _name, _type, _desc in fields:\n375|            _desc = self._strip_empty(_desc)\n376|            if any(_desc):\n377|                _desc = self._fix_field_desc(_desc)\n378|                field = ':%s %s: ' % (field_role, _name)\n379|                lines.extend(self._format_block(field, _desc))\n380|            else:\n381|                lines.append(':%s %s:' % (field_role, _name))\n382|\n383|            if _type:\n384|                lines.append(':%s %s: %s' % (type_role, _name, _type))\n385|        return lines + ['']\n386|\n387|    def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n388|        _desc = self._strip_empty(_desc)\n389|        has_desc = any(_desc)\n390|        separator = ' -- ' if has_desc else ''\n391|        if _name:\n392|            if _type:\n393|                if '`' in _type:\n394|                    field = '**%s** (%s)%s' % (_name, _type, separator)\n395|                else:\n396|                    field = '**%s** (*%s*)%s' % (_name, _type, separator)\n397|            else:\n398|                field = '**%s**%s' % (_name, separator)\n399|        elif _type:\n400|            if '`' in _type:\n401|                field = '%s%s' % (_type, separator)\n402|            else:\n403|                field = '*%s*%s' % (_type, separator)\n404|        else:\n405|            field = ''\n406|\n407|        if has_desc:\n408|            _desc = self._fix_field_desc(_desc)\n409|            if _desc[0]:\n410|                return [field + _desc[0]] + _desc[1:]\n411|            else:\n412|                return [field] + _desc\n413|        else:\n414|            return [field]\n415|\n416|    def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]\n417|                       ) -> List[str]:\n418|        field_type = ':%s:' % field_type.strip()\n419|        padding = ' ' * len(field_type)\n420|        multi = len(fields) > 1\n421|        lines = []  # type: List[str]\n422|        for _name, _type, _desc in fields:\n423|            field = self._format_field(_name, _type, _desc)\n424|            if multi:\n425|                if lines:\n426|                    lines.extend(self._format_block(padding + ' * ', field))\n427|                else:\n428|                    lines.extend(self._format_block(field_type + ' * ', field))\n429|            else:\n430|                lines.extend(self._format_block(field_type + ' ', field))\n431|        if lines and lines[-1]:\n432|            lines.append('')\n433|        return lines\n434|\n435|    def _get_current_indent(self, peek_ahead: int = 0) -> int:\n436|        line = self._line_iter.peek(peek_ahead + 1)[peek_ahead]\n437|        while line != self._line_iter.sentinel:\n438|            if line:\n439|                return self._get_indent(line)\n440|            peek_ahead += 1\n441|            line = self._line_iter.peek(peek_ahead + 1)[peek_ahead]\n442|        return 0\n443|\n444|    def _get_indent(self, line: str) -> int:\n445|        for i, s in enumerate(line):\n446|            if not s.isspace():\n447|                return i\n448|        return len(line)\n449|\n450|    def _get_initial_indent(self, lines: List[str]) -> int:\n451|        for line in lines:\n452|            if line:\n453|                return self._get_indent(line)\n454|        return 0\n455|\n456|    def _get_min_indent(self, lines: List[str]) -> int:\n457|        min_indent = None\n458|        for line in lines:\n459|            if line:\n460|                indent = self._get_indent(line)\n461|                if min_indent is None:\n462|                    min_indent = indent\n463|                elif indent < min_indent:\n464|                    min_indent = indent\n465|        return min_indent or 0\n466|\n467|    def _indent(self, lines: List[str], n: int = 4) -> List[str]:\n468|        return [(' ' * n) + line for line in lines]\n469|\n470|    def _is_indented(self, line: str, indent: int = 1) -> bool:\n471|        for i, s in enumerate(line):\n472|            if i >= indent:\n473|                return True\n474|            elif not s.isspace():\n475|                return False\n476|        return False\n477|\n478|    def _is_list(self, lines: List[str]) -> bool:\n479|        if not lines:\n480|            return False\n481|        if _bullet_list_regex.match(lines[0]):\n482|            return True\n483|        if _enumerated_list_regex.match(lines[0]):\n484|            return True\n485|        if len(lines) < 2 or lines[0].endswith('::'):\n486|            return False\n487|        indent = self._get_indent(lines[0])\n488|        next_indent = indent\n489|        for line in lines[1:]:\n490|            if line:\n491|                next_indent = self._get_indent(line)\n492|                break\n493|        return next_indent > indent\n494|\n495|    def _is_section_header(self) -> bool:\n496|        section = self._line_iter.peek().lower()\n497|        match = _google_section_regex.match(section)\n498|        if match and section.strip(':') in self._sections:\n499|            header_indent = self._get_indent(section)\n500|            section_indent = self._get_current_indent(peek_ahead=1)\n501|            return section_indent > header_indent\n502|        elif self._directive_sections:\n503|            if _directive_regex.match(section):\n504|                for directive_section in self._directive_sections:\n505|                    if section.startswith(directive_section):\n506|                        return True\n507|        return False\n508|\n509|    def _is_section_break(self) -> bool:\n510|        line = self._line_iter.peek()\n511|        return (not self._line_iter.has_next() or\n512|                self._is_section_header() or\n513|                (self._is_in_section and\n514|                    line and\n515|                    not self._is_indented(line, self._section_indent)))\n516|\n517|    def _load_custom_sections(self) -> None:\n518|        if self._config.napoleon_custom_sections is not None:\n519|            for entry in self._config.napoleon_custom_sections:\n520|                if isinstance(entry, str):\n521|                    # if entry is just a label, add to sections list,\n522|                    # using generic section logic.\n523|                    self._sections[entry.lower()] = self._parse_custom_generic_section\n524|                else:\n525|                    # otherwise, assume entry is container;\n526|                    # [0] is new section, [1] is the section to alias.\n527|                    # in the case of key mismatch, just handle as generic section.\n528|                    self._sections[entry[0].lower()] = \\\n529|                        self._sections.get(entry[1].lower(),\n530|                                           self._parse_custom_generic_section)\n531|\n532|    def _parse(self) -> None:\n533|        self._parsed_lines = self._consume_empty()\n534|\n535|        if self._name and self._what in ('attribute', 'data', 'property'):\n536|            # Implicit stop using StopIteration no longer allowed in\n537|            # Python 3.7; see PEP 479\n538|            res = []  # type: List[str]\n539|            try:\n540|                res = self._parse_attribute_docstring()\n541|            except StopIteration:\n542|                pass\n543|            self._parsed_lines.extend(res)\n544|            return\n545|\n546|        while self._line_iter.has_next():\n547|            if self._is_section_header():\n548|                try:\n549|                    section = self._consume_section_header()\n550|                    self._is_in_section = True\n551|                    self._section_indent = self._get_current_indent()\n552|                    if _directive_regex.match(section):\n553|                        lines = [section] + self._consume_to_next_section()\n554|                    else:\n555|                        lines = self._sections[section.lower()](section)\n556|                finally:\n557|                    self._is_in_section = False\n558|                    self._section_indent = 0\n559|            else:\n560|                if not self._parsed_lines:\n561|                    lines = self._consume_contiguous() + self._consume_empty()\n562|                else:\n563|                    lines = self._consume_to_next_section()\n564|            self._parsed_lines.extend(lines)\n565|\n566|    def _parse_admonition(self, admonition: str, section: str) -> List[str]:\n567|        # type (str, str) -> List[str]\n568|        lines = self._consume_to_next_section()\n569|        return self._format_admonition(admonition, lines)\n570|\n571|    def _parse_attribute_docstring(self) -> List[str]:\n572|        _type, _desc = self._consume_inline_attribute()\n573|        lines = self._format_field('', '', _desc)\n574|        if _type:\n575|            lines.extend(['', ':type: %s' % _type])\n576|        return lines\n577|\n578|    def _parse_attributes_section(self, section: str) -> List[str]:\n579|        lines = []\n580|        for _name, _type, _desc in self._consume_fields():\n581|            if self._config.napoleon_use_ivar:\n582|                _name = self._qualify_name(_name, self._obj)\n583|                field = ':ivar %s: ' % _name\n584|                lines.extend(self._format_block(field, _desc))\n585|                if _type:\n586|                    lines.append(':vartype %s: %s' % (_name, _type))\n587|            else:\n588|                lines.append('.. attribute:: ' + _name)\n589|                if self._opt and 'noindex' in self._opt:\n590|                    lines.append('   :noindex:')\n591|                if _type:\n592|                    lines.extend(self._indent([':type: %s' % _type], 3))\n593|                lines.append('')\n594|\n595|                fields = self._format_field('', '', _desc)\n596|                lines.extend(self._indent(fields, 3))\n597|                lines.append('')\n598|        if self._config.napoleon_use_ivar:\n599|            lines.append('')\n600|        return lines\n601|\n602|    def _parse_examples_section(self, section: str) -> List[str]:\n603|        labels = {\n604|            'example': _('Example'),\n605|            'examples': _('Examples'),\n606|        }\n607|        use_admonition = self._config.napoleon_use_admonition_for_examples\n608|        label = labels.get(section.lower(), section)\n609|        return self._parse_generic_section(label, use_admonition)\n610|\n611|    def _parse_custom_generic_section(self, section: str) -> List[str]:\n612|        # for now, no admonition for simple custom sections\n613|        return self._parse_generic_section(section, False)\n614|\n615|    def _parse_usage_section(self, section: str) -> List[str]:\n616|        header = ['.. rubric:: Usage:', '']\n617|        block = ['.. code-block:: python', '']\n618|        lines = self._consume_usage_section()\n619|        lines = self._indent(lines, 3)\n620|        return header + block + lines + ['']\n621|\n622|    def _parse_generic_section(self, section: str, use_admonition: bool) -> List[str]:\n623|        lines = self._strip_empty(self._consume_to_next_section())\n624|        lines = self._dedent(lines)\n625|        if use_admonition:\n626|            header = '.. admonition:: %s' % section\n627|            lines = self._indent(lines, 3)\n628|        else:\n629|            header = '.. rubric:: %s' % section\n630|        if lines:\n631|            return [header, ''] + lines + ['']\n632|        else:\n633|            return [header, '']\n634|\n635|    def _parse_keyword_arguments_section(self, section: str) -> List[str]:\n636|        fields = self._consume_fields()\n637|        if self._config.napoleon_use_keyword:\n638|            return self._format_docutils_params(\n639|                fields,\n640|                field_role=\"keyword\",\n641|                type_role=\"kwtype\")\n642|        else:\n643|            return self._format_fields(_('Keyword Arguments'), fields)\n644|\n645|    def _parse_methods_section(self, section: str) -> List[str]:\n646|        lines = []  # type: List[str]\n647|        for _name, _type, _desc in self._consume_fields(parse_type=False):\n648|            lines.append('.. method:: %s' % _name)\n649|            if self._opt and 'noindex' in self._opt:\n650|                lines.append('   :noindex:')\n651|            if _desc:\n652|                lines.extend([''] + self._indent(_desc, 3))\n653|            lines.append('')\n654|        return lines\n655|\n656|    def _parse_notes_section(self, section: str) -> List[str]:\n657|        use_admonition = self._config.napoleon_use_admonition_for_notes\n658|        return self._parse_generic_section(_('Notes'), use_admonition)\n659|\n660|    def _parse_other_parameters_section(self, section: str) -> List[str]:\n661|        return self._format_fields(_('Other Parameters'), self._consume_fields())\n662|\n663|    def _parse_parameters_section(self, section: str) -> List[str]:\n664|        fields = self._consume_fields()\n665|        if self._config.napoleon_use_param:\n666|            return self._format_docutils_params(fields)\n667|        else:\n668|            return self._format_fields(_('Parameters'), fields)\n669|\n670|    def _parse_raises_section(self, section: str) -> List[str]:\n671|        fields = self._consume_fields(parse_type=False, prefer_type=True)\n672|        lines = []  # type: List[str]\n673|        for _name, _type, _desc in fields:\n674|            m = self._name_rgx.match(_type)\n675|            if m and m.group('name'):\n676|                _type = m.group('name')\n677|            _type = ' ' + _type if _type else ''\n678|            _desc = self._strip_empty(_desc)\n679|            _descs = ' ' + '\\n    '.join(_desc) if any(_desc) else ''\n680|            lines.append(':raises%s:%s' % (_type, _descs))\n681|        if lines:\n682|            lines.append('')\n683|        return lines\n684|\n685|    def _parse_references_section(self, section: str) -> List[str]:\n686|        use_admonition = self._config.napoleon_use_admonition_for_references\n687|        return self._parse_generic_section(_('References'), use_admonition)\n688|\n689|    def _parse_returns_section(self, section: str) -> List[str]:\n690|        fields = self._consume_returns_section()\n691|        multi = len(fields) > 1\n692|        if multi:\n693|            use_rtype = False\n694|        else:\n695|            use_rtype = self._config.napoleon_use_rtype\n696|\n697|        lines = []  # type: List[str]\n698|        for _name, _type, _desc in fields:\n699|            if use_rtype:\n700|                field = self._format_field(_name, '', _desc)\n701|            else:\n702|                field = self._format_field(_name, _type, _desc)\n703|\n704|            if multi:\n705|                if lines:\n706|                    lines.extend(self._format_block('          * ', field))\n707|                else:\n708|                    lines.extend(self._format_block(':returns: * ', field))\n709|            else:\n710|                lines.extend(self._format_block(':returns: ', field))\n711|                if _type and use_rtype:\n712|                    lines.extend([':rtype: %s' % _type, ''])\n713|        if lines and lines[-1]:\n714|            lines.append('')\n715|        return lines\n716|\n717|    def _parse_see_also_section(self, section: str) -> List[str]:\n718|        return self._parse_admonition('seealso', section)\n719|\n720|    def _parse_warns_section(self, section: str) -> List[str]:\n721|        return self._format_fields(_('Warns'), self._consume_fields())\n722|\n723|    def _parse_yields_section(self, section: str) -> List[str]:\n724|        fields = self._consume_returns_section()\n725|        return self._format_fields(_('Yields'), fields)\n726|\n727|    def _partition_field_on_colon(self, line: str) -> Tuple[str, str, str]:\n728|        before_colon = []\n729|        after_colon = []\n730|        colon = ''\n731|        found_colon = False\n732|        for i, source in enumerate(_xref_or_code_regex.split(line)):\n733|            if found_colon:\n734|                after_colon.append(source)\n735|            else:\n736|                m = _single_colon_regex.search(source)\n737|                if (i % 2) == 0 and m:\n738|                    found_colon = True\n739|                    colon = source[m.start(): m.end()]\n740|                    before_colon.append(source[:m.start()])\n741|                    after_colon.append(source[m.end():])\n742|                else:\n743|                    before_colon.append(source)\n744|\n745|        return (\"\".join(before_colon).strip(),\n746|                colon,\n747|                \"\".join(after_colon).strip())\n748|\n749|    def _qualify_name(self, attr_name: str, klass: \"Type\") -> str:\n750|        if klass and '.' not in attr_name:\n751|            if attr_name.startswith('~'):\n752|                attr_name = attr_name[1:]\n753|            try:\n754|                q = klass.__qualname__\n755|            except AttributeError:\n756|                q = klass.__name__\n757|            return '~%s.%s' % (q, attr_name)\n758|        return attr_name\n759|\n760|    def _strip_empty(self, lines: List[str]) -> List[str]:\n761|        if lines:\n762|            start = -1\n763|            for i, line in enumerate(lines):\n764|                if line:\n765|                    start = i\n766|                    break\n767|            if start == -1:\n768|                lines = []\n769|            end = -1\n770|            for i in reversed(range(len(lines))):\n771|                line = lines[i]\n772|                if line:\n773|                    end = i\n774|                    break\n775|            if start > 0 or end + 1 < len(lines):\n776|                lines = lines[start:end + 1]\n777|        return lines\n778|\n779|\n780|class NumpyDocstring(GoogleDocstring):\n781|    \"\"\"Convert NumPy style docstrings to reStructuredText.\n782|\n783|    Parameters\n784|    ----------\n785|    docstring : :obj:`str` or :obj:`list` of :obj:`str`\n786|        The docstring to parse, given either as a string or split into\n787|        individual lines.\n788|    config: :obj:`sphinx.ext.napoleon.Config` or :obj:`sphinx.config.Config`\n789|        The configuration settings to use. If not given, defaults to the\n790|        config object on `app`; or if `app` is not given defaults to the\n791|        a new :class:`sphinx.ext.napoleon.Config` object.\n792|\n793|\n794|    Other Parameters\n795|    ----------------\n796|    app : :class:`sphinx.application.Sphinx`, optional\n797|        Application object representing the Sphinx process.\n798|    what : :obj:`str`, optional\n799|        A string specifying the type of the object to which the docstring\n800|        belongs. Valid values: \"module\", \"class\", \"exception\", \"function\",\n801|        \"method\", \"attribute\".\n802|    name : :obj:`str`, optional\n803|        The fully qualified name of the object.\n804|    obj : module, class, exception, function, method, or attribute\n805|        The object to which the docstring belongs.\n806|    options : :class:`sphinx.ext.autodoc.Options`, optional\n807|        The options given to the directive: an object with attributes\n808|        inherited_members, undoc_members, show_inheritance and noindex that\n809|        are True if the flag option of same name was given to the auto\n810|        directive.\n811|\n812|\n813|    Example\n814|    -------\n815|    >>> from sphinx.ext.napoleon import Config\n816|    >>> config = Config(napoleon_use_param=True, napoleon_use_rtype=True)\n817|    >>> docstring = '''One line summary.\n818|    ...\n819|    ... Extended description.\n820|    ...\n821|    ... Parameters\n822|    ... ----------\n823|    ... arg1 : int\n824|    ...     Description of `arg1`\n825|    ... arg2 : str\n826|    ...     Description of `arg2`\n827|    ... Returns\n828|    ... -------\n829|    ... str\n830|    ...     Description of return value.\n831|    ... '''\n832|    >>> print(NumpyDocstring(docstring, config))\n833|    One line summary.\n834|    <BLANKLINE>\n835|    Extended description.\n836|    <BLANKLINE>\n837|    :param arg1: Description of `arg1`\n838|    :type arg1: int\n839|    :param arg2: Description of `arg2`\n840|    :type arg2: str\n841|    <BLANKLINE>\n842|    :returns: Description of return value.\n843|    :rtype: str\n844|    <BLANKLINE>\n845|\n846|    Methods\n847|    -------\n848|    __str__()\n849|        Return the parsed docstring in reStructuredText format.\n850|\n851|        Returns\n852|        -------\n853|        str\n854|            UTF-8 encoded version of the docstring.\n855|\n856|    __unicode__()\n857|        Return the parsed docstring in reStructuredText format.\n858|\n859|        Returns\n860|        -------\n861|        unicode\n862|            Unicode version of the docstring.\n863|\n864|    lines()\n865|        Return the parsed lines of the docstring in reStructuredText format.\n866|\n867|        Returns\n868|        -------\n869|        list(str)\n870|            The lines of the docstring in a list.\n871|\n872|    \"\"\"\n873|    def __init__(self, docstring: Union[str, List[str]], config: SphinxConfig = None,\n874|                 app: Sphinx = None, what: str = '', name: str = '',\n875|                 obj: Any = None, options: Any = None) -> None:\n876|        self._directive_sections = ['.. index::']\n877|        super().__init__(docstring, config, app, what, name, obj, options)\n878|\n879|    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n880|                       ) -> Tuple[str, str, List[str]]:\n881|        line = next(self._line_iter)\n882|        if parse_type:\n883|            _name, _, _type = self._partition_field_on_colon(line)\n884|        else:\n885|            _name, _type = line, ''\n886|        _name, _type = _name.strip(), _type.strip()\n887|        _name = self._escape_args_and_kwargs(_name)\n888|\n889|        if prefer_type and not _type:\n890|            _type, _name = _name, _type\n891|        indent = self._get_indent(line) + 1\n892|        _desc = self._dedent(self._consume_indented_block(indent))\n893|        _desc = self.__class__(_desc, self._config).lines()\n894|        return _name, _type, _desc\n895|\n896|    def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n897|        return self._consume_fields(prefer_type=True)\n898|\n899|    def _consume_section_header(self) -> str:\n900|        section = next(self._line_iter)\n901|        if not _directive_regex.match(section):\n902|            # Consume the header underline\n903|            next(self._line_iter)\n904|        return section\n905|\n906|    def _is_section_break(self) -> bool:\n907|        line1, line2 = self._line_iter.peek(2)\n908|        return (not self._line_iter.has_next() or\n909|                self._is_section_header() or\n910|                ['', ''] == [line1, line2] or\n911|                (self._is_in_section and\n912|                    line1 and\n913|                    not self._is_indented(line1, self._section_indent)))\n914|\n915|    def _is_section_header(self) -> bool:\n916|        section, underline = self._line_iter.peek(2)\n917|        section = section.lower()\n918|        if section in self._sections and isinstance(underline, str):\n919|            return bool(_numpy_section_regex.match(underline))\n920|        elif self._directive_sections:\n921|            if _directive_regex.match(section):\n922|                for directive_section in self._directive_sections:\n923|                    if section.startswith(directive_section):\n924|                        return True\n925|        return False\n926|\n927|    def _parse_see_also_section(self, section: str) -> List[str]:\n928|        lines = self._consume_to_next_section()\n929|        try:\n930|            return self._parse_numpydoc_see_also_section(lines)\n931|        except ValueError:\n932|            return self._format_admonition('seealso', lines)\n933|\n934|    def _parse_numpydoc_see_also_section(self, content: List[str]) -> List[str]:\n935|        \"\"\"\n936|        Derived from the NumpyDoc implementation of _parse_see_also.\n937|\n938|        See Also\n939|        --------\n940|        func_name : Descriptive text\n941|            continued text\n942|        another_func_name : Descriptive text\n943|        func_name1, func_name2, :meth:`func_name`, func_name3\n944|\n945|        \"\"\"\n946|        items = []\n947|\n948|        def parse_item_name(text: str) -> Tuple[str, str]:\n949|            \"\"\"Match ':role:`name`' or 'name'\"\"\"\n950|            m = self._name_rgx.match(text)\n951|            if m:\n952|                g = m.groups()\n953|                if g[1] is None:\n954|                    return g[3], None\n955|                else:\n956|                    return g[2], g[1]\n957|            raise ValueError(\"%s is not a item name\" % text)\n958|\n959|        def push_item(name: str, rest: List[str]) -> None:\n960|            if not name:\n961|                return\n962|            name, role = parse_item_name(name)\n963|            items.append((name, list(rest), role))\n964|            del rest[:]\n965|\n966|        current_func = None\n967|        rest = []  # type: List[str]\n968|\n969|        for line in content:\n970|            if not line.strip():\n971|                continue\n972|\n973|            m = self._name_rgx.match(line)\n974|            if m and line[m.end():].strip().startswith(':'):\n975|                push_item(current_func, rest)\n976|                current_func, line = line[:m.end()], line[m.end():]\n977|                rest = [line.split(':', 1)[1].strip()]\n978|                if not rest[0]:\n979|                    rest = []\n980|            elif not line.startswith(' '):\n981|                push_item(current_func, rest)\n982|                current_func = None\n983|                if ',' in line:\n984|                    for func in line.split(','):\n985|                        if func.strip():\n986|                            push_item(func, [])\n987|                elif line.strip():\n988|                    current_func = line\n989|            elif current_func is not None:\n990|                rest.append(line.strip())\n991|        push_item(current_func, rest)\n992|\n993|        if not items:\n994|            return []\n995|\n996|        roles = {\n997|            'method': 'meth',\n998|            'meth': 'meth',\n999|            'function': 'func',\n1000|            'func': 'func',\n1001|            'class': 'class',\n1002|            'exception': 'exc',\n1003|            'exc': 'exc',\n1004|            'object': 'obj',\n1005|            'obj': 'obj',\n1006|            'module': 'mod',\n1007|            'mod': 'mod',\n1008|            'data': 'data',\n1009|            'constant': 'const',\n1010|            'const': 'const',\n1011|            'attribute': 'attr',\n1012|            'attr': 'attr'\n1013|        }\n1014|        if self._what is None:\n1015|            func_role = 'obj'\n1016|        else:\n1017|            func_role = roles.get(self._what, '')\n1018|        lines = []  # type: List[str]\n1019|        last_had_desc = True\n1020|        for func, desc, role in items:\n1021|            if role:\n1022|                link = ':%s:`%s`' % (role, func)\n1023|            elif func_role:\n1024|                link = ':%s:`%s`' % (func_role, func)\n1025|            else:\n1026|                link = \"`%s`_\" % func\n1027|            if desc or last_had_desc:\n1028|                lines += ['']\n1029|                lines += [link]\n1030|            else:\n1031|                lines[-1] += \", %s\" % link\n1032|            if desc:\n1033|                lines += self._indent([' '.join(desc)])\n1034|                last_had_desc = True\n1035|            else:\n1036|                last_had_desc = False\n1037|        lines += ['']\n1038|\n1039|        return self._format_admonition('seealso', lines)\n\n\n### sphinx/ext/napoleon/__init__.py\n...\n320|            if doc_field.name == 'parameter':\n321|                doc_field.names = ('param', 'parameter', 'arg', 'argument')\n322|                break\n323|        sphinx.domains.python.PyObject.doc_field_types.append(\n324|            PyTypedField('keyword', label=_('Keyword Arguments'),\n325|                         names=('keyword', 'kwarg', 'kwparam'),\n326|                         typerolename='obj', typenames=('paramtype', 'kwtype'),\n327|                         can_collapse=True))\n328|\n329|\n330|def _process_docstring(app: Sphinx, what: str, name: str, obj: Any,\n331|                       options: Any, lines: List[str]) -> None:\n332|    \"\"\"Process the docstring for a given python object.\n333|\n334|    Called when autodoc has read and processed a docstring. `lines` is a list\n335|    of docstring lines that `_process_docstring` modifies in place to change\n336|    what Sphinx outputs.\n337|\n338|    The following settings in conf.py control what styles of docstrings will\n339|    be parsed:\n340|\n341|    * ``napoleon_google_docstring`` -- parse Google style docstrings\n342|    * ``napoleon_numpy_docstring`` -- parse NumPy style docstrings\n343|\n344|    Parameters\n345|    ----------\n346|    app : sphinx.application.Sphinx\n347|        Application object representing the Sphinx process.\n348|    what : str\n349|        A string specifying the type of the object to which the docstring\n350|        belongs. Valid values: \"module\", \"class\", \"exception\", \"function\",\n351|        \"method\", \"attribute\".\n352|    name : str\n353|        The fully qualified name of the object.\n354|    obj : module, class, exception, function, method, or attribute\n355|        The object to which the docstring belongs.\n356|    options : sphinx.ext.autodoc.Options\n357|        The options given to the directive: an object with attributes\n358|        inherited_members, undoc_members, show_inheritance and noindex that\n359|        are True if the flag option of same name was given to the auto\n360|        directive.\n361|    lines : list of str\n362|        The lines of the docstring, see above.\n363|\n364|        .. note:: `lines` is modified *in place*\n365|\n366|    \"\"\"\n367|    result_lines = lines\n368|    docstring = None  # type: GoogleDocstring\n369|    if app.config.napoleon_numpy_docstring:\n370|        docstring = NumpyDocstring(result_lines, app.config, app, what, name,\n371|                                   obj, options)\n372|        result_lines = docstring.lines()\n373|    if app.config.napoleon_google_docstring:\n374|        docstring = GoogleDocstring(result_lines, app.config, app, what, name,\n375|                                    obj, options)\n376|        result_lines = docstring.lines()\n377|    lines[:] = result_lines[:]\n378|\n379|\n380|def _skip_member(app: Sphinx, what: str, name: str, obj: Any,\n381|                 skip: bool, options: Any) -> bool:\n382|    \"\"\"Determine if private and special class members are included in docs.\n383|\n384|    The following settings in conf.py determine if private and special class\n385|    members or init methods are included in the generated documentation:\n386|\n387|    * ``napoleon_include_init_with_doc`` --\n...\n\n\n### sphinx/ext/autodoc/directive.py\n...\n99|            node.document = state.document\n100|            nested_parse_with_titles(state, content, node)\n101|        else:\n102|            node = nodes.paragraph()\n103|            node.document = state.document\n104|            state.nested_parse(content, 0, node)\n105|\n106|        return node.children\n107|\n108|\n109|class AutodocDirective(SphinxDirective):\n110|    \"\"\"A directive class for all autodoc directives. It works as a dispatcher of Documenters.\n111|\n112|    It invokes a Documenter on running. After the processing, it parses and returns\n113|    the generated content by Documenter.\n114|    \"\"\"\n115|    option_spec = DummyOptionSpec()\n116|    has_content = True\n117|    required_arguments = 1\n118|    optional_arguments = 0\n119|    final_argument_whitespace = True\n120|\n121|    def run(self) -> List[Node]:\n122|        reporter = self.state.document.reporter\n123|\n124|        try:\n125|            source, lineno = reporter.get_source_and_line(self.lineno)  # type: ignore\n126|        except AttributeError:\n127|            source, lineno = (None, None)\n128|        logger.debug('[autodoc] %s:%s: input:\\n%s', source, lineno, self.block_text)\n129|\n130|        # look up target Documenter\n131|        objtype = self.name[4:]  # strip prefix (auto-).\n132|        doccls = self.env.app.registry.documenters[objtype]\n133|\n134|        # process the options with the selected documenter's option_spec\n135|        try:\n136|            documenter_options = process_documenter_options(doccls, self.config, self.options)\n137|        except (KeyError, ValueError, TypeError) as exc:\n138|            # an option is either unknown or has a wrong type\n139|            logger.error('An option to %s is either unknown or has an invalid value: %s' %\n140|                         (self.name, exc), location=(self.env.docname, lineno))\n141|            return []\n142|\n143|        # generate the output\n144|        params = DocumenterBridge(self.env, reporter, documenter_options, lineno, self.state)\n145|        documenter = doccls(params, self.arguments[0])\n146|        documenter.generate(more_content=self.content)\n147|        if not params.result:\n148|            return []\n149|\n150|        logger.debug('[autodoc] output:\\n%s', '\\n'.join(params.result))\n151|\n152|        # record all filenames as dependencies -- this will at least\n153|        # partially make automatic invalidation possible\n154|        for fn in params.filename_set:\n155|            self.state.document.settings.record_dependencies.add(fn)\n156|\n157|        result = parse_generated_content(self.state, params.result, documenter)\n158|        return result\n\n\n\n\n###\n\nPlease provide the class name, function or method name, or the exact line numbers that need to be edited.\n### Examples:\n```\nfull_path1/file1.py\nline: 10\nclass: MyClass1\nline: 51\n\nfull_path2/file2.py\nfunction: MyClass2.my_method\nline: 12\n\nfull_path3/file3.py\nfunction: my_function\nline: 24\nline: 156\n```\n\nReturn just the location(s)\n", "response": ["```\nsphinx/ext/napoleon/docstring.py\nfunction: GoogleDocstring._escape_args_and_kwargs\nlines: 320-323\n```", "```\nsphinx/ext/napoleon/docstring.py\nline: 320\nfunction: GoogleDocstring._escape_args_and_kwargs\n```", "```\nsphinx/ext/napoleon/docstring.py\nfunction: GoogleDocstring._escape_args_and_kwargs\nline: 321\nline: 322\nline: 323\n```", "```\nsphinx/ext/napoleon/docstring.py\nfunction: GoogleDocstring._escape_args_and_kwargs\nline: 322\n\nsphinx/ext/napoleon/docstring.py\nfunction: NumpyDocstring._escape_args_and_kwargs\nline: 887\n```"], "usage": {"completion_tokens": 155, "prompt_tokens": 12552}}}
