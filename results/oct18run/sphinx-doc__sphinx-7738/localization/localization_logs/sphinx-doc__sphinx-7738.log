2024-10-18 13:50:51,354 - INFO - Processing bug sphinx-doc__sphinx-7738
2024-10-18 13:51:02,478 - INFO - ================ localize sphinx-doc__sphinx-7738 ================
2024-10-18 13:51:02,512 - INFO - prompting with message:
Please look through the following GitHub problem description, and Repository structure and provide a list of files that one would need to edit to fix the problem.

### GitHub Problem Description ###
overescaped trailing underscore on attribute with napoleon
**Describe the bug**
Attribute name `hello_` shows up as `hello\_` in the html (visible backslash) with napoleon.

**To Reproduce**
Steps to reproduce the behavior:

empty `__init__.py`
`a.py` contains
```python
class A:
    """
    Attributes
    ----------
    hello_: int
        hi
    """
    pass
```
run `sphinx-quickstart`
add `'sphinx.ext.autodoc', 'sphinx.ext.napoleon'` to extensions in conf.py.
add `.. autoclass:: a.A` to index.rst
PYTHONPATH=. make clean html
open _build/html/index.html in web browser and see the ugly backslash.

**Expected behavior**
No backslash, a similar output to what I get for
```rst
    .. attribute:: hello_
        :type: int

        hi
```
(the type shows up differently as well, but that's not the point here)
Older versions like 2.4.3 look ok to me.

**Environment info**
- OS: Linux debian testing
- Python version: 3.8.3
- Sphinx version: 3.0.4
- Sphinx extensions:  sphinx.ext.autodoc, sphinx.ext.napoleon
- Extra tools:


###



### Repository Structure ###
sphinx/
    setup.py
    events.py
    addnodes.py
    parsers.py
    versioning.py
    jinja2glue.py
    project.py
    extension.py
    highlighting.py
    setup_command.py
    io.py
    deprecation.py
    pygments_styles.py
    roles.py
    errors.py
    config.py
    registry.py
    theming.py
    application.py
    __init__.py
    __main__.py
    transforms/
        i18n.py
        references.py
        compact_bullet_list.py
        __init__.py
        post_transforms/
            code.py
            images.py
            __init__.py
    domains/
        index.py
        python.py
        javascript.py
        changeset.py
        citation.py
        std.py
        cpp.py
        math.py
        rst.py
        c.py
        __init__.py
    ext/
        graphviz.py
        imgconverter.py
        imgmath.py
        githubpages.py
        intersphinx.py
        inheritance_diagram.py
        linkcode.py
        viewcode.py
        ifconfig.py
        todo.py
        mathjax.py
        jsmath.py
        apidoc.py
        coverage.py
        autosectionlabel.py
        extlinks.py
        __init__.py
        doctest.py
        duration.py
        napoleon/
            iterators.py
            docstring.py
            __init__.py
        autosummary/
            generate.py
            __init__.py
        autodoc/
            typehints.py
            importer.py
            mock.py
            directive.py
            type_comment.py
            __init__.py
    writers/
        html5.py
        manpage.py
        latex.py
        html.py
        texinfo.py
        xml.py
        __init__.py
        text.py
    pycode/
        ast.py
        parser.py
        __init__.py
    cmd/
        build.py
        quickstart.py
        make_mode.py
        __init__.py
    directives/
        code.py
        other.py
        patches.py
        __init__.py
    util/
        requests.py
        smartypants.py
        typing.py
        template.py
        i18n.py
        matching.py
        texescape.py
        jsdump.py
        images.py
        compat.py
        inventory.py
        fileutil.py
        console.py
        inspect.py
        jsonimpl.py
        pycompat.py
        nodes.py
        cfamily.py
        math.py
        docfields.py
        rst.py
        logging.py
        docstrings.py
        osutil.py
        build_phase.py
        docutils.py
        png.py
        __init__.py
        tags.py
        parallel.py
        stemmer/
            porter.py
            __init__.py
    environment/
        __init__.py
        collectors/
            asset.py
            indexentries.py
            title.py
            dependencies.py
            toctree.py
            metadata.py
            __init__.py
        adapters/
            asset.py
            indexentries.py
            toctree.py
            __init__.py
    search/
        es.py
        hu.py
        ru.py
        zh.py
        sv.py
        jssplitter.py
        ja.py
        ro.py
        en.py
        da.py
        pt.py
        tr.py
        fr.py
        de.py
        it.py
        nl.py
        fi.py
        __init__.py
        no.py
    locale/
        __init__.py
    builders/
        singlehtml.py
        manpage.py
        applehelp.py
        linkcheck.py
        gettext.py
        epub3.py
        changes.py
        _epub_base.py
        htmlhelp.py
        devhelp.py
        texinfo.py
        dirhtml.py
        dummy.py
        xml.py
        qthelp.py
        __init__.py
        text.py
        latex/
            transforms.py
            constants.py
            nodes.py
            theming.py
            util.py
            __init__.py
        html/
            transforms.py
            __init__.py
doc/
    conf.py
    usage/
        extensions/
            example_google.py
            example_numpy.py
    development/
        tutorials/
            examples/
                recipe.py
                todo.py
                helloworld.py
utils/
    checks.py
    bump_version.py
    doclinter.py
    __init__.py
    jssplitter_generator.py

###

Please only provide the full path and return at most 5 files.
The returned files should be separated by new lines ordered by most to least important and wrapped with ```
For example:
```
file1.py
file2.py
```
2024-10-18 13:51:02,512 - INFO - ================================================================================
2024-10-18 13:51:02,575 - INFO - Creating API request
2024-10-18 13:51:03,651 - INFO - API response ChatCompletion(id='chatcmpl-AJoE2l9AdMMKEqYBPR7bMMf2WZwzg', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```\nsphinx/ext/napoleon/docstring.py\nsphinx/ext/napoleon/__init__.py\nsphinx/ext/autodoc/directive.py\nsphinx/writers/html.py\nsphinx/util/docstrings.py\n```', refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1729284662, model='gpt-4o-2024-05-13', object='chat.completion', service_tier=None, system_fingerprint='fp_568f3bfff7', usage=CompletionUsage(completion_tokens=48, prompt_tokens=1383, total_tokens=1431, completion_tokens_details=CompletionTokensDetails(audio_tokens=None, reasoning_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=None, cached_tokens=0)))
2024-10-18 13:51:03,654 - INFO - ```
sphinx/ext/napoleon/docstring.py
sphinx/ext/napoleon/__init__.py
sphinx/ext/autodoc/directive.py
sphinx/writers/html.py
sphinx/util/docstrings.py
```
2024-10-18 13:51:04,281 - INFO - prompting with message:

Please look through the following GitHub Problem Description, and the Skeleton of Relevant Files.
Identify all locations that need inspection or editing to fix the problem, including directly related areas as well as any potentially related global variables, functions, and classes.
For each location you provide, either give the name of the class, the name of a method in a class, the name of a function, or the name of a global variable.

### GitHub Problem Description ###
overescaped trailing underscore on attribute with napoleon
**Describe the bug**
Attribute name `hello_` shows up as `hello\_` in the html (visible backslash) with napoleon.

**To Reproduce**
Steps to reproduce the behavior:

empty `__init__.py`
`a.py` contains
```python
class A:
    """
    Attributes
    ----------
    hello_: int
        hi
    """
    pass
```
run `sphinx-quickstart`
add `'sphinx.ext.autodoc', 'sphinx.ext.napoleon'` to extensions in conf.py.
add `.. autoclass:: a.A` to index.rst
PYTHONPATH=. make clean html
open _build/html/index.html in web browser and see the ugly backslash.

**Expected behavior**
No backslash, a similar output to what I get for
```rst
    .. attribute:: hello_
        :type: int

        hi
```
(the type shows up differently as well, but that's not the point here)
Older versions like 2.4.3 look ok to me.

**Environment info**
- OS: Linux debian testing
- Python version: 3.8.3
- Sphinx version: 3.0.4
- Sphinx extensions:  sphinx.ext.autodoc, sphinx.ext.napoleon
- Extra tools:


###



### Skeleton of Relevant Files ###

### File: sphinx/ext/napoleon/docstring.py ###
```python


_directive_regex = re.compile(r'\.\. \S+::')
_google_section_regex = re.compile(r'^(\s|\w)+:\s*$')
_google_typed_arg_regex = re.compile(r'\s*(.+?)\s*\(\s*(.*[^\s]+)\s*\)')
_numpy_section_regex = re.compile(r'^[=\-`:\'"~^_*+#<>]{2,}\s*$')
_single_colon_regex = re.compile(r'(?<!:):(?!:)')
_xref_or_code_regex = re.compile(
    r'((?::(?:[a-zA-Z0-9]+[\-_+:.])*[a-zA-Z0-9]+:`.+?`)|'
    r'(?:``.+``))')
_bullet_list_regex = re.compile(r'^(\*|\+|\-)(\s+\S|\s*$)')
_enumerated_list_regex = re.compile(
    r'^(?P<paren>\()?'
    r'(\d+|#|[ivxlcdm]+|[IVXLCDM]+|[a-zA-Z])'
    r'(?(paren)\)|\.)(\s+\S|\s*$)')


class GoogleDocstring:

    _name_rgx = re.compile(r"^\s*((?::(?P<role>\S+):)?`(?P<name>~?[a-zA-Z0-9_.-]+)`|"
                           r" (?P<name2>~?[a-zA-Z0-9_.-]+))\s*", re.X)

    def __init__(self, docstring: Union[str, List[str]], config: SphinxConfig = None,
                 app: Sphinx = None, what: str = '', name: str = '',
                 obj: Any = None, options: Any = None) -> None:
...
    def __str__(self) -> str:
...
    def lines(self) -> List[str]:
...
    def _consume_indented_block(self, indent: int = 1) -> List[str]:
...
    def _consume_contiguous(self) -> List[str]:
...
    def _consume_empty(self) -> List[str]:
...
    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False
                       ) -> Tuple[str, str, List[str]]:
...
    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False
                        ) -> List[Tuple[str, str, List[str]]]:
...
    def _consume_inline_attribute(self) -> Tuple[str, List[str]]:
...
    def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:
...
    def _consume_usage_section(self) -> List[str]:
...
    def _consume_section_header(self) -> str:
...
    def _consume_to_end(self) -> List[str]:
...
    def _consume_to_next_section(self) -> List[str]:
...
    def _dedent(self, lines: List[str], full: bool = False) -> List[str]:
...
    def _escape_args_and_kwargs(self, name: str) -> str:
...
    def _fix_field_desc(self, desc: List[str]) -> List[str]:
...
    def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:
...
    def _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:
...
    def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],
                                field_role: str = 'param', type_role: str = 'type'
                                ) -> List[str]:
...
    def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:
...
    def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]
                       ) -> List[str]:
...
    def _get_current_indent(self, peek_ahead: int = 0) -> int:
...
    def _get_indent(self, line: str) -> int:
...
    def _get_initial_indent(self, lines: List[str]) -> int:
...
    def _get_min_indent(self, lines: List[str]) -> int:
...
    def _indent(self, lines: List[str], n: int = 4) -> List[str]:
...
    def _is_indented(self, line: str, indent: int = 1) -> bool:
...
    def _is_list(self, lines: List[str]) -> bool:
...
    def _is_section_header(self) -> bool:
...
    def _is_section_break(self) -> bool:
...
    def _load_custom_sections(self) -> None:
...
    def _parse(self) -> None:
...
    def _parse_admonition(self, admonition: str, section: str) -> List[str]:
...
    def _parse_attribute_docstring(self) -> List[str]:
...
    def _parse_attributes_section(self, section: str) -> List[str]:
...
    def _parse_examples_section(self, section: str) -> List[str]:
...
    def _parse_custom_generic_section(self, section: str) -> List[str]:
...
    def _parse_usage_section(self, section: str) -> List[str]:
...
    def _parse_generic_section(self, section: str, use_admonition: bool) -> List[str]:
...
    def _parse_keyword_arguments_section(self, section: str) -> List[str]:
...
    def _parse_methods_section(self, section: str) -> List[str]:
...
    def _parse_notes_section(self, section: str) -> List[str]:
...
    def _parse_other_parameters_section(self, section: str) -> List[str]:
...
    def _parse_parameters_section(self, section: str) -> List[str]:
...
    def _parse_raises_section(self, section: str) -> List[str]:
...
    def _parse_references_section(self, section: str) -> List[str]:
...
    def _parse_returns_section(self, section: str) -> List[str]:
...
    def _parse_see_also_section(self, section: str) -> List[str]:
...
    def _parse_warns_section(self, section: str) -> List[str]:
...
    def _parse_yields_section(self, section: str) -> List[str]:
...
    def _partition_field_on_colon(self, line: str) -> Tuple[str, str, str]:
...
    def _qualify_name(self, attr_name: str, klass: "Type") -> str:
...
    def _strip_empty(self, lines: List[str]) -> List[str]:
...

class NumpyDocstring(GoogleDocstring):
    def __init__(self, docstring: Union[str, List[str]], config: SphinxConfig = None,
                 app: Sphinx = None, what: str = '', name: str = '',
                 obj: Any = None, options: Any = None) -> None:
...
    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False
                       ) -> Tuple[str, str, List[str]]:
...
    def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:
...
    def _consume_section_header(self) -> str:
...
    def _is_section_break(self) -> bool:
...
    def _is_section_header(self) -> bool:
...
    def _parse_see_also_section(self, section: str) -> List[str]:
...
    def _parse_numpydoc_see_also_section(self, content: List[str]) -> List[str]:

```

### File: sphinx/ext/napoleon/__init__.py ###
```python


class Config:
    _config_values = {
        'napoleon_google_docstring': (True, 'env'),
        'napoleon_numpy_docstring': (True, 'env'),
        'napoleon_include_init_with_doc': (False, 'env'),
        'napoleon_include_private_with_doc': (False, 'env'),
        'napoleon_include_special_with_doc': (False, 'env'),
        'napoleon_use_admonition_for_examples': (False, 'env'),
        'napoleon_use_admonition_for_notes': (False, 'env'),
        'napoleon_use_admonition_for_references': (False, 'env'),
        'napoleon_use_ivar': (False, 'env'),
        'napoleon_use_param': (True, 'env'),
        'napoleon_use_rtype': (True, 'env'),
        'napoleon_use_keyword': (True, 'env'),
        'napoleon_custom_sections': (None, 'env')
    }

    def __init__(self, **settings: Any) -> None:
...

def setup(app: Sphinx) -> Dict[str, Any]:
...

def _patch_python_domain() -> None:
...

def _process_docstring(app: Sphinx, what: str, name: str, obj: Any,
                       options: Any, lines: List[str]) -> None:
...

def _skip_member(app: Sphinx, what: str, name: str, obj: Any,
                 skip: bool, options: Any) -> bool:

```

### File: sphinx/ext/autodoc/directive.py ###
```python


logger = logging.getLogger(__name__)


# common option names for autodoc directives
AUTODOC_DEFAULT_OPTIONS = ['members', 'undoc-members', 'inherited-members',
                           'show-inheritance', 'private-members', 'special-members',
                           'ignore-module-all', 'exclude-members', 'member-order',
                           'imported-members']


class DummyOptionSpec(dict):

    def __bool__(self) -> bool:
...
    def __getitem__(self, key: str) -> Callable[[str], str]:
...

class DocumenterBridge:

    def __init__(self, env: BuildEnvironment, reporter: Reporter, options: Options,
                 lineno: int, state: Any = None) -> None:
...
    def warn(self, msg: str) -> None:
...

def process_documenter_options(documenter: "Type[Documenter]", config: Config, options: Dict
                               ) -> Options:
...

def parse_generated_content(state: RSTState, content: StringList, documenter: Documenter
                            ) -> List[Node]:
...

class AutodocDirective(SphinxDirective):
    option_spec = DummyOptionSpec()
    has_content = True
    required_arguments = 1
    optional_arguments = 0
    final_argument_whitespace = True

    def run(self) -> List[Node]:

```


###

Please provide the complete set of locations as either a class name, a function name, or a variable name.
Note that if you include a class, you do not need to list its specific methods.
You can include either the entire class or don't include the class name and instead include specific methods in the class.
### Examples:
```
full_path1/file1.py
function: my_function_1
class: MyClass1
function: MyClass2.my_method

full_path2/file2.py
variable: my_var
function: MyClass3.my_method

full_path3/file3.py
function: my_function_2
function: my_function_3
function: MyClass4.my_method_1
class: MyClass5
```

Return just the locations.

2024-10-18 13:51:04,281 - INFO - ================================================================================
2024-10-18 13:51:04,333 - INFO - Creating API request
2024-10-18 13:51:05,597 - INFO - API response ChatCompletion(id='chatcmpl-AJoE4dZQ5ZlTv0VDve9D6I8Y16Dvj', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```\nsphinx/ext/napoleon/docstring.py\nclass: GoogleDocstring\nclass: NumpyDocstring\n\nsphinx/ext/napoleon/__init__.py\nfunction: _process_docstring\n\nsphinx/ext/autodoc/directive.py\nclass: AutodocDirective\n```', refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1729284664, model='gpt-4o-2024-05-13', object='chat.completion', service_tier=None, system_fingerprint='fp_568f3bfff7', usage=CompletionUsage(completion_tokens=61, prompt_tokens=2799, total_tokens=2860, completion_tokens_details=CompletionTokensDetails(audio_tokens=None, reasoning_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=None, cached_tokens=0)))
2024-10-18 13:51:05,597 - INFO - ==== raw output ====
2024-10-18 13:51:05,597 - INFO - ```
sphinx/ext/napoleon/docstring.py
class: GoogleDocstring
class: NumpyDocstring

sphinx/ext/napoleon/__init__.py
function: _process_docstring

sphinx/ext/autodoc/directive.py
class: AutodocDirective
```
2024-10-18 13:51:05,597 - INFO - ================================================================================
2024-10-18 13:51:05,597 - INFO - ==== extracted locs ====
2024-10-18 13:51:05,597 - INFO - ['class: GoogleDocstring\nclass: NumpyDocstring']
2024-10-18 13:51:05,597 - INFO - ['function: _process_docstring']
2024-10-18 13:51:05,597 - INFO - ['class: AutodocDirective']
2024-10-18 13:51:05,597 - INFO - ================================================================================
2024-10-18 13:51:06,408 - INFO - prompting with message:

Please review the following GitHub problem description, and relevant files, and provide a set of locations that need to be edited to fix the issue.
The locations can be specified as class names, function or method names, or exact line numbers that require modification.

### GitHub Problem Description ###
overescaped trailing underscore on attribute with napoleon
**Describe the bug**
Attribute name `hello_` shows up as `hello\_` in the html (visible backslash) with napoleon.

**To Reproduce**
Steps to reproduce the behavior:

empty `__init__.py`
`a.py` contains
```python
class A:
    """
    Attributes
    ----------
    hello_: int
        hi
    """
    pass
```
run `sphinx-quickstart`
add `'sphinx.ext.autodoc', 'sphinx.ext.napoleon'` to extensions in conf.py.
add `.. autoclass:: a.A` to index.rst
PYTHONPATH=. make clean html
open _build/html/index.html in web browser and see the ugly backslash.

**Expected behavior**
No backslash, a similar output to what I get for
```rst
    .. attribute:: hello_
        :type: int

        hi
```
(the type shows up differently as well, but that's not the point here)
Older versions like 2.4.3 look ok to me.

**Environment info**
- OS: Linux debian testing
- Python version: 3.8.3
- Sphinx version: 3.0.4
- Sphinx extensions:  sphinx.ext.autodoc, sphinx.ext.napoleon
- Extra tools:


###



### sphinx/ext/napoleon/docstring.py
...
33|_xref_or_code_regex = re.compile(
34|    r'((?::(?:[a-zA-Z0-9]+[\-_+:.])*[a-zA-Z0-9]+:`.+?`)|'
35|    r'(?:``.+``))')
36|_bullet_list_regex = re.compile(r'^(\*|\+|\-)(\s+\S|\s*$)')
37|_enumerated_list_regex = re.compile(
38|    r'^(?P<paren>\()?'
39|    r'(\d+|#|[ivxlcdm]+|[IVXLCDM]+|[a-zA-Z])'
40|    r'(?(paren)\)|\.)(\s+\S|\s*$)')
41|
42|
43|class GoogleDocstring:
44|    """Convert Google style docstrings to reStructuredText.
45|
46|    Parameters
47|    ----------
48|    docstring : :obj:`str` or :obj:`list` of :obj:`str`
49|        The docstring to parse, given either as a string or split into
50|        individual lines.
51|    config: :obj:`sphinx.ext.napoleon.Config` or :obj:`sphinx.config.Config`
52|        The configuration settings to use. If not given, defaults to the
53|        config object on `app`; or if `app` is not given defaults to the
54|        a new :class:`sphinx.ext.napoleon.Config` object.
55|
56|
57|    Other Parameters
58|    ----------------
59|    app : :class:`sphinx.application.Sphinx`, optional
60|        Application object representing the Sphinx process.
61|    what : :obj:`str`, optional
62|        A string specifying the type of the object to which the docstring
63|        belongs. Valid values: "module", "class", "exception", "function",
64|        "method", "attribute".
65|    name : :obj:`str`, optional
66|        The fully qualified name of the object.
67|    obj : module, class, exception, function, method, or attribute
68|        The object to which the docstring belongs.
69|    options : :class:`sphinx.ext.autodoc.Options`, optional
70|        The options given to the directive: an object with attributes
71|        inherited_members, undoc_members, show_inheritance and noindex that
72|        are True if the flag option of same name was given to the auto
73|        directive.
74|
75|
76|    Example
77|    -------
78|    >>> from sphinx.ext.napoleon import Config
79|    >>> config = Config(napoleon_use_param=True, napoleon_use_rtype=True)
80|    >>> docstring = '''One line summary.
81|    ...
82|    ... Extended description.
83|    ...
84|    ... Args:
85|    ...   arg1(int): Description of `arg1`
86|    ...   arg2(str): Description of `arg2`
87|    ... Returns:
88|    ...   str: Description of return value.
89|    ... '''
90|    >>> print(GoogleDocstring(docstring, config))
91|    One line summary.
92|    <BLANKLINE>
93|    Extended description.
94|    <BLANKLINE>
95|    :param arg1: Description of `arg1`
96|    :type arg1: int
97|    :param arg2: Description of `arg2`
98|    :type arg2: str
99|    <BLANKLINE>
100|    :returns: Description of return value.
101|    :rtype: str
102|    <BLANKLINE>
103|
104|    """
105|
106|    _name_rgx = re.compile(r"^\s*((?::(?P<role>\S+):)?`(?P<name>~?[a-zA-Z0-9_.-]+)`|"
107|                           r" (?P<name2>~?[a-zA-Z0-9_.-]+))\s*", re.X)
108|
109|    def __init__(self, docstring: Union[str, List[str]], config: SphinxConfig = None,
110|                 app: Sphinx = None, what: str = '', name: str = '',
111|                 obj: Any = None, options: Any = None) -> None:
112|        self._config = config
113|        self._app = app
114|
115|        if not self._config:
116|            from sphinx.ext.napoleon import Config
117|            self._config = self._app.config if self._app else Config()  # type: ignore
118|
119|        if not what:
120|            if inspect.isclass(obj):
121|                what = 'class'
122|            elif inspect.ismodule(obj):
123|                what = 'module'
124|            elif callable(obj):
125|                what = 'function'
126|            else:
127|                what = 'object'
128|
129|        self._what = what
130|        self._name = name
131|        self._obj = obj
132|        self._opt = options
133|        if isinstance(docstring, str):
134|            lines = docstring.splitlines()
135|        else:
136|            lines = docstring
137|        self._line_iter = modify_iter(lines, modifier=lambda s: s.rstrip())
138|        self._parsed_lines = []  # type: List[str]
139|        self._is_in_section = False
140|        self._section_indent = 0
141|        if not hasattr(self, '_directive_sections'):
142|            self._directive_sections = []  # type: List[str]
143|        if not hasattr(self, '_sections'):
144|            self._sections = {
145|                'args': self._parse_parameters_section,
146|                'arguments': self._parse_parameters_section,
147|                'attention': partial(self._parse_admonition, 'attention'),
148|                'attributes': self._parse_attributes_section,
149|                'caution': partial(self._parse_admonition, 'caution'),
150|                'danger': partial(self._parse_admonition, 'danger'),
151|                'error': partial(self._parse_admonition, 'error'),
152|                'example': self._parse_examples_section,
153|                'examples': self._parse_examples_section,
154|                'hint': partial(self._parse_admonition, 'hint'),
155|                'important': partial(self._parse_admonition, 'important'),
156|                'keyword args': self._parse_keyword_arguments_section,
157|                'keyword arguments': self._parse_keyword_arguments_section,
158|                'methods': self._parse_methods_section,
159|                'note': partial(self._parse_admonition, 'note'),
160|                'notes': self._parse_notes_section,
161|                'other parameters': self._parse_other_parameters_section,
162|                'parameters': self._parse_parameters_section,
163|                'return': self._parse_returns_section,
164|                'returns': self._parse_returns_section,
165|                'raises': self._parse_raises_section,
166|                'references': self._parse_references_section,
167|                'see also': self._parse_see_also_section,
168|                'tip': partial(self._parse_admonition, 'tip'),
169|                'todo': partial(self._parse_admonition, 'todo'),
170|                'warning': partial(self._parse_admonition, 'warning'),
171|                'warnings': partial(self._parse_admonition, 'warning'),
172|                'warns': self._parse_warns_section,
173|                'yield': self._parse_yields_section,
174|                'yields': self._parse_yields_section,
175|            }  # type: Dict[str, Callable]
176|
177|        self._load_custom_sections()
178|
179|        self._parse()
180|
181|    def __str__(self) -> str:
182|        """Return the parsed docstring in reStructuredText format.
183|
184|        Returns
185|        -------
186|        unicode
187|            Unicode version of the docstring.
188|
189|        """
190|        return '\n'.join(self.lines())
191|
192|    def lines(self) -> List[str]:
193|        """Return the parsed lines of the docstring in reStructuredText format.
194|
195|        Returns
196|        -------
197|        list(str)
198|            The lines of the docstring in a list.
199|
200|        """
201|        return self._parsed_lines
202|
203|    def _consume_indented_block(self, indent: int = 1) -> List[str]:
204|        lines = []
205|        line = self._line_iter.peek()
206|        while(not self._is_section_break() and
207|              (not line or self._is_indented(line, indent))):
208|            lines.append(next(self._line_iter))
209|            line = self._line_iter.peek()
210|        return lines
211|
212|    def _consume_contiguous(self) -> List[str]:
213|        lines = []
214|        while (self._line_iter.has_next() and
215|               self._line_iter.peek() and
216|               not self._is_section_header()):
217|            lines.append(next(self._line_iter))
218|        return lines
219|
220|    def _consume_empty(self) -> List[str]:
221|        lines = []
222|        line = self._line_iter.peek()
223|        while self._line_iter.has_next() and not line:
224|            lines.append(next(self._line_iter))
225|            line = self._line_iter.peek()
226|        return lines
227|
228|    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False
229|                       ) -> Tuple[str, str, List[str]]:
230|        line = next(self._line_iter)
231|
232|        before, colon, after = self._partition_field_on_colon(line)
233|        _name, _type, _desc = before, '', after
234|
235|        if parse_type:
236|            match = _google_typed_arg_regex.match(before)
237|            if match:
238|                _name = match.group(1)
239|                _type = match.group(2)
240|
241|        _name = self._escape_args_and_kwargs(_name)
242|
243|        if prefer_type and not _type:
244|            _type, _name = _name, _type
245|        indent = self._get_indent(line) + 1
246|        _descs = [_desc] + self._dedent(self._consume_indented_block(indent))
247|        _descs = self.__class__(_descs, self._config).lines()
248|        return _name, _type, _descs
249|
250|    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False
251|                        ) -> List[Tuple[str, str, List[str]]]:
252|        self._consume_empty()
253|        fields = []
254|        while not self._is_section_break():
255|            _name, _type, _desc = self._consume_field(parse_type, prefer_type)
256|            if _name or _type or _desc:
257|                fields.append((_name, _type, _desc,))
258|        return fields
259|
260|    def _consume_inline_attribute(self) -> Tuple[str, List[str]]:
261|        line = next(self._line_iter)
262|        _type, colon, _desc = self._partition_field_on_colon(line)
263|        if not colon or not _desc:
264|            _type, _desc = _desc, _type
265|            _desc += colon
266|        _descs = [_desc] + self._dedent(self._consume_to_end())
267|        _descs = self.__class__(_descs, self._config).lines()
268|        return _type, _descs
269|
270|    def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:
271|        lines = self._dedent(self._consume_to_next_section())
272|        if lines:
273|            before, colon, after = self._partition_field_on_colon(lines[0])
274|            _name, _type, _desc = '', '', lines
275|
276|            if colon:
277|                if after:
278|                    _desc = [after] + lines[1:]
279|                else:
280|                    _desc = lines[1:]
281|
282|                _type = before
283|
284|            _desc = self.__class__(_desc, self._config).lines()
285|            return [(_name, _type, _desc,)]
286|        else:
287|            return []
288|
289|    def _consume_usage_section(self) -> List[str]:
290|        lines = self._dedent(self._consume_to_next_section())
291|        return lines
292|
293|    def _consume_section_header(self) -> str:
294|        section = next(self._line_iter)
295|        stripped_section = section.strip(':')
296|        if stripped_section.lower() in self._sections:
297|            section = stripped_section
298|        return section
299|
300|    def _consume_to_end(self) -> List[str]:
301|        lines = []
302|        while self._line_iter.has_next():
303|            lines.append(next(self._line_iter))
304|        return lines
305|
306|    def _consume_to_next_section(self) -> List[str]:
307|        self._consume_empty()
308|        lines = []
309|        while not self._is_section_break():
310|            lines.append(next(self._line_iter))
311|        return lines + self._consume_empty()
312|
313|    def _dedent(self, lines: List[str], full: bool = False) -> List[str]:
314|        if full:
315|            return [line.lstrip() for line in lines]
316|        else:
317|            min_indent = self._get_min_indent(lines)
318|            return [line[min_indent:] for line in lines]
319|
320|    def _escape_args_and_kwargs(self, name: str) -> str:
321|        if name.endswith('_'):
322|            name = name[:-1] + r'\_'
323|
324|        if name[:2] == '**':
325|            return r'\*\*' + name[2:]
326|        elif name[:1] == '*':
327|            return r'\*' + name[1:]
328|        else:
329|            return name
330|
331|    def _fix_field_desc(self, desc: List[str]) -> List[str]:
332|        if self._is_list(desc):
333|            desc = [''] + desc
334|        elif desc[0].endswith('::'):
335|            desc_block = desc[1:]
336|            indent = self._get_indent(desc[0])
337|            block_indent = self._get_initial_indent(desc_block)
338|            if block_indent > indent:
339|                desc = [''] + desc
340|            else:
341|                desc = ['', desc[0]] + self._indent(desc_block, 4)
342|        return desc
343|
344|    def _format_admonition(self, admonition: str, lines: List[str]) -> List[str]:
345|        lines = self._strip_empty(lines)
346|        if len(lines) == 1:
347|            return ['.. %s:: %s' % (admonition, lines[0].strip()), '']
348|        elif lines:
349|            lines = self._indent(self._dedent(lines), 3)
350|            return ['.. %s::' % admonition, ''] + lines + ['']
351|        else:
352|            return ['.. %s::' % admonition, '']
353|
354|    def _format_block(self, prefix: str, lines: List[str], padding: str = None) -> List[str]:
355|        if lines:
356|            if padding is None:
357|                padding = ' ' * len(prefix)
358|            result_lines = []
359|            for i, line in enumerate(lines):
360|                if i == 0:
361|                    result_lines.append((prefix + line).rstrip())
362|                elif line:
363|                    result_lines.append(padding + line)
364|                else:
365|                    result_lines.append('')
366|            return result_lines
367|        else:
368|            return [prefix]
369|
370|    def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],
371|                                field_role: str = 'param', type_role: str = 'type'
372|                                ) -> List[str]:
373|        lines = []
374|        for _name, _type, _desc in fields:
375|            _desc = self._strip_empty(_desc)
376|            if any(_desc):
377|                _desc = self._fix_field_desc(_desc)
378|                field = ':%s %s: ' % (field_role, _name)
379|                lines.extend(self._format_block(field, _desc))
380|            else:
381|                lines.append(':%s %s:' % (field_role, _name))
382|
383|            if _type:
384|                lines.append(':%s %s: %s' % (type_role, _name, _type))
385|        return lines + ['']
386|
387|    def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:
388|        _desc = self._strip_empty(_desc)
389|        has_desc = any(_desc)
390|        separator = ' -- ' if has_desc else ''
391|        if _name:
392|            if _type:
393|                if '`' in _type:
394|                    field = '**%s** (%s)%s' % (_name, _type, separator)
395|                else:
396|                    field = '**%s** (*%s*)%s' % (_name, _type, separator)
397|            else:
398|                field = '**%s**%s' % (_name, separator)
399|        elif _type:
400|            if '`' in _type:
401|                field = '%s%s' % (_type, separator)
402|            else:
403|                field = '*%s*%s' % (_type, separator)
404|        else:
405|            field = ''
406|
407|        if has_desc:
408|            _desc = self._fix_field_desc(_desc)
409|            if _desc[0]:
410|                return [field + _desc[0]] + _desc[1:]
411|            else:
412|                return [field] + _desc
413|        else:
414|            return [field]
415|
416|    def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]
417|                       ) -> List[str]:
418|        field_type = ':%s:' % field_type.strip()
419|        padding = ' ' * len(field_type)
420|        multi = len(fields) > 1
421|        lines = []  # type: List[str]
422|        for _name, _type, _desc in fields:
423|            field = self._format_field(_name, _type, _desc)
424|            if multi:
425|                if lines:
426|                    lines.extend(self._format_block(padding + ' * ', field))
427|                else:
428|                    lines.extend(self._format_block(field_type + ' * ', field))
429|            else:
430|                lines.extend(self._format_block(field_type + ' ', field))
431|        if lines and lines[-1]:
432|            lines.append('')
433|        return lines
434|
435|    def _get_current_indent(self, peek_ahead: int = 0) -> int:
436|        line = self._line_iter.peek(peek_ahead + 1)[peek_ahead]
437|        while line != self._line_iter.sentinel:
438|            if line:
439|                return self._get_indent(line)
440|            peek_ahead += 1
441|            line = self._line_iter.peek(peek_ahead + 1)[peek_ahead]
442|        return 0
443|
444|    def _get_indent(self, line: str) -> int:
445|        for i, s in enumerate(line):
446|            if not s.isspace():
447|                return i
448|        return len(line)
449|
450|    def _get_initial_indent(self, lines: List[str]) -> int:
451|        for line in lines:
452|            if line:
453|                return self._get_indent(line)
454|        return 0
455|
456|    def _get_min_indent(self, lines: List[str]) -> int:
457|        min_indent = None
458|        for line in lines:
459|            if line:
460|                indent = self._get_indent(line)
461|                if min_indent is None:
462|                    min_indent = indent
463|                elif indent < min_indent:
464|                    min_indent = indent
465|        return min_indent or 0
466|
467|    def _indent(self, lines: List[str], n: int = 4) -> List[str]:
468|        return [(' ' * n) + line for line in lines]
469|
470|    def _is_indented(self, line: str, indent: int = 1) -> bool:
471|        for i, s in enumerate(line):
472|            if i >= indent:
473|                return True
474|            elif not s.isspace():
475|                return False
476|        return False
477|
478|    def _is_list(self, lines: List[str]) -> bool:
479|        if not lines:
480|            return False
481|        if _bullet_list_regex.match(lines[0]):
482|            return True
483|        if _enumerated_list_regex.match(lines[0]):
484|            return True
485|        if len(lines) < 2 or lines[0].endswith('::'):
486|            return False
487|        indent = self._get_indent(lines[0])
488|        next_indent = indent
489|        for line in lines[1:]:
490|            if line:
491|                next_indent = self._get_indent(line)
492|                break
493|        return next_indent > indent
494|
495|    def _is_section_header(self) -> bool:
496|        section = self._line_iter.peek().lower()
497|        match = _google_section_regex.match(section)
498|        if match and section.strip(':') in self._sections:
499|            header_indent = self._get_indent(section)
500|            section_indent = self._get_current_indent(peek_ahead=1)
501|            return section_indent > header_indent
502|        elif self._directive_sections:
503|            if _directive_regex.match(section):
504|                for directive_section in self._directive_sections:
505|                    if section.startswith(directive_section):
506|                        return True
507|        return False
508|
509|    def _is_section_break(self) -> bool:
510|        line = self._line_iter.peek()
511|        return (not self._line_iter.has_next() or
512|                self._is_section_header() or
513|                (self._is_in_section and
514|                    line and
515|                    not self._is_indented(line, self._section_indent)))
516|
517|    def _load_custom_sections(self) -> None:
518|        if self._config.napoleon_custom_sections is not None:
519|            for entry in self._config.napoleon_custom_sections:
520|                if isinstance(entry, str):
521|                    # if entry is just a label, add to sections list,
522|                    # using generic section logic.
523|                    self._sections[entry.lower()] = self._parse_custom_generic_section
524|                else:
525|                    # otherwise, assume entry is container;
526|                    # [0] is new section, [1] is the section to alias.
527|                    # in the case of key mismatch, just handle as generic section.
528|                    self._sections[entry[0].lower()] = \
529|                        self._sections.get(entry[1].lower(),
530|                                           self._parse_custom_generic_section)
531|
532|    def _parse(self) -> None:
533|        self._parsed_lines = self._consume_empty()
534|
535|        if self._name and self._what in ('attribute', 'data', 'property'):
536|            # Implicit stop using StopIteration no longer allowed in
537|            # Python 3.7; see PEP 479
538|            res = []  # type: List[str]
539|            try:
540|                res = self._parse_attribute_docstring()
541|            except StopIteration:
542|                pass
543|            self._parsed_lines.extend(res)
544|            return
545|
546|        while self._line_iter.has_next():
547|            if self._is_section_header():
548|                try:
549|                    section = self._consume_section_header()
550|                    self._is_in_section = True
551|                    self._section_indent = self._get_current_indent()
552|                    if _directive_regex.match(section):
553|                        lines = [section] + self._consume_to_next_section()
554|                    else:
555|                        lines = self._sections[section.lower()](section)
556|                finally:
557|                    self._is_in_section = False
558|                    self._section_indent = 0
559|            else:
560|                if not self._parsed_lines:
561|                    lines = self._consume_contiguous() + self._consume_empty()
562|                else:
563|                    lines = self._consume_to_next_section()
564|            self._parsed_lines.extend(lines)
565|
566|    def _parse_admonition(self, admonition: str, section: str) -> List[str]:
567|        # type (str, str) -> List[str]
568|        lines = self._consume_to_next_section()
569|        return self._format_admonition(admonition, lines)
570|
571|    def _parse_attribute_docstring(self) -> List[str]:
572|        _type, _desc = self._consume_inline_attribute()
573|        lines = self._format_field('', '', _desc)
574|        if _type:
575|            lines.extend(['', ':type: %s' % _type])
576|        return lines
577|
578|    def _parse_attributes_section(self, section: str) -> List[str]:
579|        lines = []
580|        for _name, _type, _desc in self._consume_fields():
581|            if self._config.napoleon_use_ivar:
582|                _name = self._qualify_name(_name, self._obj)
583|                field = ':ivar %s: ' % _name
584|                lines.extend(self._format_block(field, _desc))
585|                if _type:
586|                    lines.append(':vartype %s: %s' % (_name, _type))
587|            else:
588|                lines.append('.. attribute:: ' + _name)
589|                if self._opt and 'noindex' in self._opt:
590|                    lines.append('   :noindex:')
591|                if _type:
592|                    lines.extend(self._indent([':type: %s' % _type], 3))
593|                lines.append('')
594|
595|                fields = self._format_field('', '', _desc)
596|                lines.extend(self._indent(fields, 3))
597|                lines.append('')
598|        if self._config.napoleon_use_ivar:
599|            lines.append('')
600|        return lines
601|
602|    def _parse_examples_section(self, section: str) -> List[str]:
603|        labels = {
604|            'example': _('Example'),
605|            'examples': _('Examples'),
606|        }
607|        use_admonition = self._config.napoleon_use_admonition_for_examples
608|        label = labels.get(section.lower(), section)
609|        return self._parse_generic_section(label, use_admonition)
610|
611|    def _parse_custom_generic_section(self, section: str) -> List[str]:
612|        # for now, no admonition for simple custom sections
613|        return self._parse_generic_section(section, False)
614|
615|    def _parse_usage_section(self, section: str) -> List[str]:
616|        header = ['.. rubric:: Usage:', '']
617|        block = ['.. code-block:: python', '']
618|        lines = self._consume_usage_section()
619|        lines = self._indent(lines, 3)
620|        return header + block + lines + ['']
621|
622|    def _parse_generic_section(self, section: str, use_admonition: bool) -> List[str]:
623|        lines = self._strip_empty(self._consume_to_next_section())
624|        lines = self._dedent(lines)
625|        if use_admonition:
626|            header = '.. admonition:: %s' % section
627|            lines = self._indent(lines, 3)
628|        else:
629|            header = '.. rubric:: %s' % section
630|        if lines:
631|            return [header, ''] + lines + ['']
632|        else:
633|            return [header, '']
634|
635|    def _parse_keyword_arguments_section(self, section: str) -> List[str]:
636|        fields = self._consume_fields()
637|        if self._config.napoleon_use_keyword:
638|            return self._format_docutils_params(
639|                fields,
640|                field_role="keyword",
641|                type_role="kwtype")
642|        else:
643|            return self._format_fields(_('Keyword Arguments'), fields)
644|
645|    def _parse_methods_section(self, section: str) -> List[str]:
646|        lines = []  # type: List[str]
647|        for _name, _type, _desc in self._consume_fields(parse_type=False):
648|            lines.append('.. method:: %s' % _name)
649|            if self._opt and 'noindex' in self._opt:
650|                lines.append('   :noindex:')
651|            if _desc:
652|                lines.extend([''] + self._indent(_desc, 3))
653|            lines.append('')
654|        return lines
655|
656|    def _parse_notes_section(self, section: str) -> List[str]:
657|        use_admonition = self._config.napoleon_use_admonition_for_notes
658|        return self._parse_generic_section(_('Notes'), use_admonition)
659|
660|    def _parse_other_parameters_section(self, section: str) -> List[str]:
661|        return self._format_fields(_('Other Parameters'), self._consume_fields())
662|
663|    def _parse_parameters_section(self, section: str) -> List[str]:
664|        fields = self._consume_fields()
665|        if self._config.napoleon_use_param:
666|            return self._format_docutils_params(fields)
667|        else:
668|            return self._format_fields(_('Parameters'), fields)
669|
670|    def _parse_raises_section(self, section: str) -> List[str]:
671|        fields = self._consume_fields(parse_type=False, prefer_type=True)
672|        lines = []  # type: List[str]
673|        for _name, _type, _desc in fields:
674|            m = self._name_rgx.match(_type)
675|            if m and m.group('name'):
676|                _type = m.group('name')
677|            _type = ' ' + _type if _type else ''
678|            _desc = self._strip_empty(_desc)
679|            _descs = ' ' + '\n    '.join(_desc) if any(_desc) else ''
680|            lines.append(':raises%s:%s' % (_type, _descs))
681|        if lines:
682|            lines.append('')
683|        return lines
684|
685|    def _parse_references_section(self, section: str) -> List[str]:
686|        use_admonition = self._config.napoleon_use_admonition_for_references
687|        return self._parse_generic_section(_('References'), use_admonition)
688|
689|    def _parse_returns_section(self, section: str) -> List[str]:
690|        fields = self._consume_returns_section()
691|        multi = len(fields) > 1
692|        if multi:
693|            use_rtype = False
694|        else:
695|            use_rtype = self._config.napoleon_use_rtype
696|
697|        lines = []  # type: List[str]
698|        for _name, _type, _desc in fields:
699|            if use_rtype:
700|                field = self._format_field(_name, '', _desc)
701|            else:
702|                field = self._format_field(_name, _type, _desc)
703|
704|            if multi:
705|                if lines:
706|                    lines.extend(self._format_block('          * ', field))
707|                else:
708|                    lines.extend(self._format_block(':returns: * ', field))
709|            else:
710|                lines.extend(self._format_block(':returns: ', field))
711|                if _type and use_rtype:
712|                    lines.extend([':rtype: %s' % _type, ''])
713|        if lines and lines[-1]:
714|            lines.append('')
715|        return lines
716|
717|    def _parse_see_also_section(self, section: str) -> List[str]:
718|        return self._parse_admonition('seealso', section)
719|
720|    def _parse_warns_section(self, section: str) -> List[str]:
721|        return self._format_fields(_('Warns'), self._consume_fields())
722|
723|    def _parse_yields_section(self, section: str) -> List[str]:
724|        fields = self._consume_returns_section()
725|        return self._format_fields(_('Yields'), fields)
726|
727|    def _partition_field_on_colon(self, line: str) -> Tuple[str, str, str]:
728|        before_colon = []
729|        after_colon = []
730|        colon = ''
731|        found_colon = False
732|        for i, source in enumerate(_xref_or_code_regex.split(line)):
733|            if found_colon:
734|                after_colon.append(source)
735|            else:
736|                m = _single_colon_regex.search(source)
737|                if (i % 2) == 0 and m:
738|                    found_colon = True
739|                    colon = source[m.start(): m.end()]
740|                    before_colon.append(source[:m.start()])
741|                    after_colon.append(source[m.end():])
742|                else:
743|                    before_colon.append(source)
744|
745|        return ("".join(before_colon).strip(),
746|                colon,
747|                "".join(after_colon).strip())
748|
749|    def _qualify_name(self, attr_name: str, klass: "Type") -> str:
750|        if klass and '.' not in attr_name:
751|            if attr_name.startswith('~'):
752|                attr_name = attr_name[1:]
753|            try:
754|                q = klass.__qualname__
755|            except AttributeError:
756|                q = klass.__name__
757|            return '~%s.%s' % (q, attr_name)
758|        return attr_name
759|
760|    def _strip_empty(self, lines: List[str]) -> List[str]:
761|        if lines:
762|            start = -1
763|            for i, line in enumerate(lines):
764|                if line:
765|                    start = i
766|                    break
767|            if start == -1:
768|                lines = []
769|            end = -1
770|            for i in reversed(range(len(lines))):
771|                line = lines[i]
772|                if line:
773|                    end = i
774|                    break
775|            if start > 0 or end + 1 < len(lines):
776|                lines = lines[start:end + 1]
777|        return lines
778|
779|
780|class NumpyDocstring(GoogleDocstring):
781|    """Convert NumPy style docstrings to reStructuredText.
782|
783|    Parameters
784|    ----------
785|    docstring : :obj:`str` or :obj:`list` of :obj:`str`
786|        The docstring to parse, given either as a string or split into
787|        individual lines.
788|    config: :obj:`sphinx.ext.napoleon.Config` or :obj:`sphinx.config.Config`
789|        The configuration settings to use. If not given, defaults to the
790|        config object on `app`; or if `app` is not given defaults to the
791|        a new :class:`sphinx.ext.napoleon.Config` object.
792|
793|
794|    Other Parameters
795|    ----------------
796|    app : :class:`sphinx.application.Sphinx`, optional
797|        Application object representing the Sphinx process.
798|    what : :obj:`str`, optional
799|        A string specifying the type of the object to which the docstring
800|        belongs. Valid values: "module", "class", "exception", "function",
801|        "method", "attribute".
802|    name : :obj:`str`, optional
803|        The fully qualified name of the object.
804|    obj : module, class, exception, function, method, or attribute
805|        The object to which the docstring belongs.
806|    options : :class:`sphinx.ext.autodoc.Options`, optional
807|        The options given to the directive: an object with attributes
808|        inherited_members, undoc_members, show_inheritance and noindex that
809|        are True if the flag option of same name was given to the auto
810|        directive.
811|
812|
813|    Example
814|    -------
815|    >>> from sphinx.ext.napoleon import Config
816|    >>> config = Config(napoleon_use_param=True, napoleon_use_rtype=True)
817|    >>> docstring = '''One line summary.
818|    ...
819|    ... Extended description.
820|    ...
821|    ... Parameters
822|    ... ----------
823|    ... arg1 : int
824|    ...     Description of `arg1`
825|    ... arg2 : str
826|    ...     Description of `arg2`
827|    ... Returns
828|    ... -------
829|    ... str
830|    ...     Description of return value.
831|    ... '''
832|    >>> print(NumpyDocstring(docstring, config))
833|    One line summary.
834|    <BLANKLINE>
835|    Extended description.
836|    <BLANKLINE>
837|    :param arg1: Description of `arg1`
838|    :type arg1: int
839|    :param arg2: Description of `arg2`
840|    :type arg2: str
841|    <BLANKLINE>
842|    :returns: Description of return value.
843|    :rtype: str
844|    <BLANKLINE>
845|
846|    Methods
847|    -------
848|    __str__()
849|        Return the parsed docstring in reStructuredText format.
850|
851|        Returns
852|        -------
853|        str
854|            UTF-8 encoded version of the docstring.
855|
856|    __unicode__()
857|        Return the parsed docstring in reStructuredText format.
858|
859|        Returns
860|        -------
861|        unicode
862|            Unicode version of the docstring.
863|
864|    lines()
865|        Return the parsed lines of the docstring in reStructuredText format.
866|
867|        Returns
868|        -------
869|        list(str)
870|            The lines of the docstring in a list.
871|
872|    """
873|    def __init__(self, docstring: Union[str, List[str]], config: SphinxConfig = None,
874|                 app: Sphinx = None, what: str = '', name: str = '',
875|                 obj: Any = None, options: Any = None) -> None:
876|        self._directive_sections = ['.. index::']
877|        super().__init__(docstring, config, app, what, name, obj, options)
878|
879|    def _consume_field(self, parse_type: bool = True, prefer_type: bool = False
880|                       ) -> Tuple[str, str, List[str]]:
881|        line = next(self._line_iter)
882|        if parse_type:
883|            _name, _, _type = self._partition_field_on_colon(line)
884|        else:
885|            _name, _type = line, ''
886|        _name, _type = _name.strip(), _type.strip()
887|        _name = self._escape_args_and_kwargs(_name)
888|
889|        if prefer_type and not _type:
890|            _type, _name = _name, _type
891|        indent = self._get_indent(line) + 1
892|        _desc = self._dedent(self._consume_indented_block(indent))
893|        _desc = self.__class__(_desc, self._config).lines()
894|        return _name, _type, _desc
895|
896|    def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:
897|        return self._consume_fields(prefer_type=True)
898|
899|    def _consume_section_header(self) -> str:
900|        section = next(self._line_iter)
901|        if not _directive_regex.match(section):
902|            # Consume the header underline
903|            next(self._line_iter)
904|        return section
905|
906|    def _is_section_break(self) -> bool:
907|        line1, line2 = self._line_iter.peek(2)
908|        return (not self._line_iter.has_next() or
909|                self._is_section_header() or
910|                ['', ''] == [line1, line2] or
911|                (self._is_in_section and
912|                    line1 and
913|                    not self._is_indented(line1, self._section_indent)))
914|
915|    def _is_section_header(self) -> bool:
916|        section, underline = self._line_iter.peek(2)
917|        section = section.lower()
918|        if section in self._sections and isinstance(underline, str):
919|            return bool(_numpy_section_regex.match(underline))
920|        elif self._directive_sections:
921|            if _directive_regex.match(section):
922|                for directive_section in self._directive_sections:
923|                    if section.startswith(directive_section):
924|                        return True
925|        return False
926|
927|    def _parse_see_also_section(self, section: str) -> List[str]:
928|        lines = self._consume_to_next_section()
929|        try:
930|            return self._parse_numpydoc_see_also_section(lines)
931|        except ValueError:
932|            return self._format_admonition('seealso', lines)
933|
934|    def _parse_numpydoc_see_also_section(self, content: List[str]) -> List[str]:
935|        """
936|        Derived from the NumpyDoc implementation of _parse_see_also.
937|
938|        See Also
939|        --------
940|        func_name : Descriptive text
941|            continued text
942|        another_func_name : Descriptive text
943|        func_name1, func_name2, :meth:`func_name`, func_name3
944|
945|        """
946|        items = []
947|
948|        def parse_item_name(text: str) -> Tuple[str, str]:
949|            """Match ':role:`name`' or 'name'"""
950|            m = self._name_rgx.match(text)
951|            if m:
952|                g = m.groups()
953|                if g[1] is None:
954|                    return g[3], None
955|                else:
956|                    return g[2], g[1]
957|            raise ValueError("%s is not a item name" % text)
958|
959|        def push_item(name: str, rest: List[str]) -> None:
960|            if not name:
961|                return
962|            name, role = parse_item_name(name)
963|            items.append((name, list(rest), role))
964|            del rest[:]
965|
966|        current_func = None
967|        rest = []  # type: List[str]
968|
969|        for line in content:
970|            if not line.strip():
971|                continue
972|
973|            m = self._name_rgx.match(line)
974|            if m and line[m.end():].strip().startswith(':'):
975|                push_item(current_func, rest)
976|                current_func, line = line[:m.end()], line[m.end():]
977|                rest = [line.split(':', 1)[1].strip()]
978|                if not rest[0]:
979|                    rest = []
980|            elif not line.startswith(' '):
981|                push_item(current_func, rest)
982|                current_func = None
983|                if ',' in line:
984|                    for func in line.split(','):
985|                        if func.strip():
986|                            push_item(func, [])
987|                elif line.strip():
988|                    current_func = line
989|            elif current_func is not None:
990|                rest.append(line.strip())
991|        push_item(current_func, rest)
992|
993|        if not items:
994|            return []
995|
996|        roles = {
997|            'method': 'meth',
998|            'meth': 'meth',
999|            'function': 'func',
1000|            'func': 'func',
1001|            'class': 'class',
1002|            'exception': 'exc',
1003|            'exc': 'exc',
1004|            'object': 'obj',
1005|            'obj': 'obj',
1006|            'module': 'mod',
1007|            'mod': 'mod',
1008|            'data': 'data',
1009|            'constant': 'const',
1010|            'const': 'const',
1011|            'attribute': 'attr',
1012|            'attr': 'attr'
1013|        }
1014|        if self._what is None:
1015|            func_role = 'obj'
1016|        else:
1017|            func_role = roles.get(self._what, '')
1018|        lines = []  # type: List[str]
1019|        last_had_desc = True
1020|        for func, desc, role in items:
1021|            if role:
1022|                link = ':%s:`%s`' % (role, func)
1023|            elif func_role:
1024|                link = ':%s:`%s`' % (func_role, func)
1025|            else:
1026|                link = "`%s`_" % func
1027|            if desc or last_had_desc:
1028|                lines += ['']
1029|                lines += [link]
1030|            else:
1031|                lines[-1] += ", %s" % link
1032|            if desc:
1033|                lines += self._indent([' '.join(desc)])
1034|                last_had_desc = True
1035|            else:
1036|                last_had_desc = False
1037|        lines += ['']
1038|
1039|        return self._format_admonition('seealso', lines)


### sphinx/ext/napoleon/__init__.py
...
320|            if doc_field.name == 'parameter':
321|                doc_field.names = ('param', 'parameter', 'arg', 'argument')
322|                break
323|        sphinx.domains.python.PyObject.doc_field_types.append(
324|            PyTypedField('keyword', label=_('Keyword Arguments'),
325|                         names=('keyword', 'kwarg', 'kwparam'),
326|                         typerolename='obj', typenames=('paramtype', 'kwtype'),
327|                         can_collapse=True))
328|
329|
330|def _process_docstring(app: Sphinx, what: str, name: str, obj: Any,
331|                       options: Any, lines: List[str]) -> None:
332|    """Process the docstring for a given python object.
333|
334|    Called when autodoc has read and processed a docstring. `lines` is a list
335|    of docstring lines that `_process_docstring` modifies in place to change
336|    what Sphinx outputs.
337|
338|    The following settings in conf.py control what styles of docstrings will
339|    be parsed:
340|
341|    * ``napoleon_google_docstring`` -- parse Google style docstrings
342|    * ``napoleon_numpy_docstring`` -- parse NumPy style docstrings
343|
344|    Parameters
345|    ----------
346|    app : sphinx.application.Sphinx
347|        Application object representing the Sphinx process.
348|    what : str
349|        A string specifying the type of the object to which the docstring
350|        belongs. Valid values: "module", "class", "exception", "function",
351|        "method", "attribute".
352|    name : str
353|        The fully qualified name of the object.
354|    obj : module, class, exception, function, method, or attribute
355|        The object to which the docstring belongs.
356|    options : sphinx.ext.autodoc.Options
357|        The options given to the directive: an object with attributes
358|        inherited_members, undoc_members, show_inheritance and noindex that
359|        are True if the flag option of same name was given to the auto
360|        directive.
361|    lines : list of str
362|        The lines of the docstring, see above.
363|
364|        .. note:: `lines` is modified *in place*
365|
366|    """
367|    result_lines = lines
368|    docstring = None  # type: GoogleDocstring
369|    if app.config.napoleon_numpy_docstring:
370|        docstring = NumpyDocstring(result_lines, app.config, app, what, name,
371|                                   obj, options)
372|        result_lines = docstring.lines()
373|    if app.config.napoleon_google_docstring:
374|        docstring = GoogleDocstring(result_lines, app.config, app, what, name,
375|                                    obj, options)
376|        result_lines = docstring.lines()
377|    lines[:] = result_lines[:]
378|
379|
380|def _skip_member(app: Sphinx, what: str, name: str, obj: Any,
381|                 skip: bool, options: Any) -> bool:
382|    """Determine if private and special class members are included in docs.
383|
384|    The following settings in conf.py determine if private and special class
385|    members or init methods are included in the generated documentation:
386|
387|    * ``napoleon_include_init_with_doc`` --
...


### sphinx/ext/autodoc/directive.py
...
99|            node.document = state.document
100|            nested_parse_with_titles(state, content, node)
101|        else:
102|            node = nodes.paragraph()
103|            node.document = state.document
104|            state.nested_parse(content, 0, node)
105|
106|        return node.children
107|
108|
109|class AutodocDirective(SphinxDirective):
110|    """A directive class for all autodoc directives. It works as a dispatcher of Documenters.
111|
112|    It invokes a Documenter on running. After the processing, it parses and returns
113|    the generated content by Documenter.
114|    """
115|    option_spec = DummyOptionSpec()
116|    has_content = True
117|    required_arguments = 1
118|    optional_arguments = 0
119|    final_argument_whitespace = True
120|
121|    def run(self) -> List[Node]:
122|        reporter = self.state.document.reporter
123|
124|        try:
125|            source, lineno = reporter.get_source_and_line(self.lineno)  # type: ignore
126|        except AttributeError:
127|            source, lineno = (None, None)
128|        logger.debug('[autodoc] %s:%s: input:\n%s', source, lineno, self.block_text)
129|
130|        # look up target Documenter
131|        objtype = self.name[4:]  # strip prefix (auto-).
132|        doccls = self.env.app.registry.documenters[objtype]
133|
134|        # process the options with the selected documenter's option_spec
135|        try:
136|            documenter_options = process_documenter_options(doccls, self.config, self.options)
137|        except (KeyError, ValueError, TypeError) as exc:
138|            # an option is either unknown or has a wrong type
139|            logger.error('An option to %s is either unknown or has an invalid value: %s' %
140|                         (self.name, exc), location=(self.env.docname, lineno))
141|            return []
142|
143|        # generate the output
144|        params = DocumenterBridge(self.env, reporter, documenter_options, lineno, self.state)
145|        documenter = doccls(params, self.arguments[0])
146|        documenter.generate(more_content=self.content)
147|        if not params.result:
148|            return []
149|
150|        logger.debug('[autodoc] output:\n%s', '\n'.join(params.result))
151|
152|        # record all filenames as dependencies -- this will at least
153|        # partially make automatic invalidation possible
154|        for fn in params.filename_set:
155|            self.state.document.settings.record_dependencies.add(fn)
156|
157|        result = parse_generated_content(self.state, params.result, documenter)
158|        return result




###

Please provide the class name, function or method name, or the exact line numbers that need to be edited.
### Examples:
```
full_path1/file1.py
line: 10
class: MyClass1
line: 51

full_path2/file2.py
function: MyClass2.my_method
line: 12

full_path3/file3.py
function: my_function
line: 24
line: 156
```

Return just the location(s)

2024-10-18 13:51:06,409 - INFO - ================================================================================
2024-10-18 13:51:06,489 - INFO - Creating API request
2024-10-18 13:51:08,385 - INFO - API response ChatCompletion(id='chatcmpl-AJoE7VtWJ9vAtHy6lMiPeRm6B706e', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```\nsphinx/ext/napoleon/docstring.py\nfunction: GoogleDocstring._escape_args_and_kwargs\nlines: 320-323\n```', refusal=None, role='assistant', function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=1, logprobs=None, message=ChatCompletionMessage(content='```\nsphinx/ext/napoleon/docstring.py\nline: 320\nfunction: GoogleDocstring._escape_args_and_kwargs\n```', refusal=None, role='assistant', function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=2, logprobs=None, message=ChatCompletionMessage(content='```\nsphinx/ext/napoleon/docstring.py\nfunction: GoogleDocstring._escape_args_and_kwargs\nline: 321\nline: 322\nline: 323\n```', refusal=None, role='assistant', function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=3, logprobs=None, message=ChatCompletionMessage(content='```\nsphinx/ext/napoleon/docstring.py\nfunction: GoogleDocstring._escape_args_and_kwargs\nline: 322\n\nsphinx/ext/napoleon/docstring.py\nfunction: NumpyDocstring._escape_args_and_kwargs\nline: 887\n```', refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1729284667, model='gpt-4o-2024-05-13', object='chat.completion', service_tier=None, system_fingerprint='fp_939d701e6c', usage=CompletionUsage(completion_tokens=155, prompt_tokens=12552, total_tokens=12707, completion_tokens_details=CompletionTokensDetails(audio_tokens=None, reasoning_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=None, cached_tokens=0)))
2024-10-18 13:51:08,385 - INFO - ==== raw output ====
2024-10-18 13:51:08,385 - INFO - ```
sphinx/ext/napoleon/docstring.py
function: GoogleDocstring._escape_args_and_kwargs
lines: 320-323
```
2024-10-18 13:51:08,385 - INFO - ================================================================================
2024-10-18 13:51:08,385 - INFO - ==== extracted locs ====
2024-10-18 13:51:08,385 - INFO - ['function: GoogleDocstring._escape_args_and_kwargs']
2024-10-18 13:51:08,385 - INFO - ['']
2024-10-18 13:51:08,385 - INFO - ['']
2024-10-18 13:51:08,385 - INFO - ================================================================================
2024-10-18 13:51:08,385 - INFO - ==== raw output ====
2024-10-18 13:51:08,385 - INFO - ```
sphinx/ext/napoleon/docstring.py
line: 320
function: GoogleDocstring._escape_args_and_kwargs
```
2024-10-18 13:51:08,385 - INFO - ================================================================================
2024-10-18 13:51:08,385 - INFO - ==== extracted locs ====
2024-10-18 13:51:08,385 - INFO - ['line: 320\nfunction: GoogleDocstring._escape_args_and_kwargs']
2024-10-18 13:51:08,385 - INFO - ['']
2024-10-18 13:51:08,385 - INFO - ['']
2024-10-18 13:51:08,385 - INFO - ================================================================================
2024-10-18 13:51:08,386 - INFO - ==== raw output ====
2024-10-18 13:51:08,386 - INFO - ```
sphinx/ext/napoleon/docstring.py
function: GoogleDocstring._escape_args_and_kwargs
line: 321
line: 322
line: 323
```
2024-10-18 13:51:08,386 - INFO - ================================================================================
2024-10-18 13:51:08,386 - INFO - ==== extracted locs ====
2024-10-18 13:51:08,386 - INFO - ['function: GoogleDocstring._escape_args_and_kwargs\nline: 321\nline: 322\nline: 323']
2024-10-18 13:51:08,386 - INFO - ['']
2024-10-18 13:51:08,386 - INFO - ['']
2024-10-18 13:51:08,386 - INFO - ================================================================================
2024-10-18 13:51:08,386 - INFO - ==== raw output ====
2024-10-18 13:51:08,386 - INFO - ```
sphinx/ext/napoleon/docstring.py
function: GoogleDocstring._escape_args_and_kwargs
line: 322

sphinx/ext/napoleon/docstring.py
function: NumpyDocstring._escape_args_and_kwargs
line: 887
```
2024-10-18 13:51:08,386 - INFO - ================================================================================
2024-10-18 13:51:08,386 - INFO - ==== extracted locs ====
2024-10-18 13:51:08,386 - INFO - ['function: GoogleDocstring._escape_args_and_kwargs\nline: 322\nfunction: NumpyDocstring._escape_args_and_kwargs\nline: 887']
2024-10-18 13:51:08,386 - INFO - ['']
2024-10-18 13:51:08,386 - INFO - ['']
2024-10-18 13:51:08,386 - INFO - ================================================================================
2024-10-18 13:51:08,386 - INFO - ==== Input coarse_locs
2024-10-18 13:51:08,386 - INFO - 
### sphinx/ext/napoleon/docstring.py
class: GoogleDocstring
class: NumpyDocstring
### sphinx/ext/napoleon/__init__.py
function: _process_docstring
### sphinx/ext/autodoc/directive.py
class: AutodocDirective

