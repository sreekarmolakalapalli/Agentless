{"instance_id": "scikit-learn__scikit-learn-11281", "found_files": ["sklearn/mixture/gaussian_mixture.py", "sklearn/mixture/base.py", "sklearn/mixture/bayesian_mixture.py", "sklearn/mixture/__init__.py", "sklearn/cluster/k_means_.py"], "additional_artifact_loc_file": {"raw_output_files": "```\nsklearn/mixture/gaussian_mixture.py\nsklearn/mixture/base.py\nsklearn/mixture/bayesian_mixture.py\nsklearn/mixture/__init__.py\nsklearn/cluster/k_means_.py\n```"}, "file_traj": {"response": "```\nsklearn/mixture/gaussian_mixture.py\nsklearn/mixture/base.py\nsklearn/mixture/bayesian_mixture.py\nsklearn/mixture/__init__.py\nsklearn/cluster/k_means_.py\n```", "usage": {"completion_tokens": 55, "prompt_tokens": 3879}, "prompt": "Please look through the following GitHub problem description, and Repository structure and provide a list of files that one would need to edit to fix the problem.\n\n### GitHub Problem Description ###\nShould mixture models have a clusterer-compatible interface\nMixture models are currently a bit different. They are basically clusterers, except they are probabilistic, and are applied to inductive problems unlike many clusterers. But they are unlike clusterers in API:\r\n* they have an `n_components` parameter, with identical purpose to `n_clusters`\r\n* they do not store the `labels_` of the training data\r\n* they do not have a `fit_predict` method\r\n\r\nAnd they are almost entirely documented separately.\r\n\r\nShould we make the MMs more like clusterers?\n\n\n###\n\n\n\n### Repository Structure ###\nscikit-learn/\n    conftest.py\n    setup.py\nsklearn/\n    impute.py\n    base.py\n    discriminant_analysis.py\n    naive_bayes.py\n    kernel_approximation.py\n    kernel_ridge.py\n    exceptions.py\n    grid_search.py\n    pipeline.py\n    random_projection.py\n    calibration.py\n    multioutput.py\n    dummy.py\n    learning_curve.py\n    setup.py\n    cross_validation.py\n    isotonic.py\n    __init__.py\n    multiclass.py\n    _config.py\n    feature_selection/\n        base.py\n        univariate_selection.py\n        mutual_info_.py\n        variance_threshold.py\n        from_model.py\n        rfe.py\n        __init__.py\n    datasets/\n        lfw.py\n        svmlight_format.py\n        rcv1.py\n        base.py\n        species_distributions.py\n        mlcomp.py\n        california_housing.py\n        kddcup99.py\n        covtype.py\n        olivetti_faces.py\n        mldata.py\n        samples_generator.py\n        twenty_newsgroups.py\n        setup.py\n        __init__.py\n    mixture/\n        gaussian_mixture.py\n        base.py\n        gmm.py\n        bayesian_mixture.py\n        dpgmm.py\n        __init__.py\n    neural_network/\n        rbm.py\n        _base.py\n        multilayer_perceptron.py\n        _stochastic_optimizers.py\n        __init__.py\n    preprocessing/\n        label.py\n        imputation.py\n        _function_transformer.py\n        __init__.py\n        data.py\n    tree/\n        tree.py\n        export.py\n        setup.py\n        __init__.py\n    _build_utils/\n        __init__.py\n    __check_build/\n        setup.py\n        __init__.py\n    decomposition/\n        dict_learning.py\n        online_lda.py\n        pca.py\n        sparse_pca.py\n        kernel_pca.py\n        base.py\n        factor_analysis.py\n        truncated_svd.py\n        incremental_pca.py\n        nmf.py\n        fastica_.py\n        setup.py\n        __init__.py\n    model_selection/\n        _split.py\n        _validation.py\n        _search.py\n        __init__.py\n    ensemble/\n        iforest.py\n        partial_dependence.py\n        base.py\n        gradient_boosting.py\n        voting_classifier.py\n        bagging.py\n        weight_boosting.py\n        forest.py\n        setup.py\n        __init__.py\n    cluster/\n        k_means_.py\n        spectral.py\n        mean_shift_.py\n        affinity_propagation_.py\n        _feature_agglomeration.py\n        hierarchical.py\n        bicluster.py\n        dbscan_.py\n        setup.py\n        birch.py\n        __init__.py\n    svm/\n        base.py\n        classes.py\n        bounds.py\n        setup.py\n        __init__.py\n    cross_decomposition/\n        cca_.py\n        pls_.py\n        __init__.py\n    semi_supervised/\n        label_propagation.py\n        __init__.py\n    neighbors/\n        base.py\n        graph.py\n        nearest_centroid.py\n        kde.py\n        approximate.py\n        regression.py\n        setup.py\n        lof.py\n        __init__.py\n        classification.py\n        unsupervised.py\n    compose/\n        _column_transformer.py\n        _target.py\n        __init__.py\n    externals/\n        conftest.py\n        funcsigs.py\n        six.py\n        _pilutil.py\n        setup.py\n        __init__.py\n        joblib/\n            _multiprocessing_helpers.py\n            memory.py\n            numpy_pickle.py\n            numpy_pickle_compat.py\n            disk.py\n            format_stack.py\n            numpy_pickle_utils.py\n            _memory_helpers.py\n            backports.py\n            _compat.py\n            hashing.py\n            logger.py\n            func_inspect.py\n            my_exceptions.py\n            _parallel_backends.py\n            pool.py\n            __init__.py\n            parallel.py\n    linear_model/\n        randomized_l1.py\n        base.py\n        logistic.py\n        ridge.py\n        perceptron.py\n        ransac.py\n        coordinate_descent.py\n        least_angle.py\n        sag.py\n        bayes.py\n        omp.py\n        theil_sen.py\n        stochastic_gradient.py\n        passive_aggressive.py\n        setup.py\n        huber.py\n        __init__.py\n    feature_extraction/\n        stop_words.py\n        image.py\n        dict_vectorizer.py\n        hashing.py\n        setup.py\n        __init__.py\n        text.py\n    metrics/\n        base.py\n        regression.py\n        pairwise.py\n        setup.py\n        scorer.py\n        __init__.py\n        ranking.py\n        classification.py\n        cluster/\n            supervised.py\n            bicluster.py\n            setup.py\n            __init__.py\n            unsupervised.py\n    gaussian_process/\n        regression_models.py\n        correlation_models.py\n        gaussian_process.py\n        gpr.py\n        gpc.py\n        __init__.py\n        kernels.py\n    manifold/\n        spectral_embedding_.py\n        t_sne.py\n        locally_linear.py\n        setup.py\n        __init__.py\n        isomap.py\n        mds.py\n    covariance/\n        robust_covariance.py\n        elliptic_envelope.py\n        empirical_covariance_.py\n        shrunk_covariance_.py\n        graph_lasso_.py\n        __init__.py\n    utils/\n        validation.py\n        linear_assignment_.py\n        estimator_checks.py\n        graph.py\n        random.py\n        bench.py\n        fixes.py\n        _unittest_backport.py\n        deprecation.py\n        metaestimators.py\n        mocking.py\n        extmath.py\n        arpack.py\n        stats.py\n        sparsefuncs.py\n        setup.py\n        _scipy_sparse_lsqr_backport.py\n        __init__.py\n        optimize.py\n        multiclass.py\n        class_weight.py\n        sparsetools/\n            setup.py\n            __init__.py\ndoc/\n    conf.py\n    conftest.py\n    tutorial/\n        machine_learning_map/\n            svg2imagemap.py\n            parse_path.py\n            pyparsing.py\n        text_analytics/\n            solutions/\n                exercise_01_language_train_model.py\n                exercise_02_sentiment.py\n                generate_skeletons.py\n            skeletons/\n                exercise_01_language_train_model.py\n                exercise_02_sentiment.py\n            data/\n                languages/\n                    fetch_data.py\n                twenty_newsgroups/\n                    fetch_data.py\n                movie_reviews/\n                    fetch_data.py\n    sphinxext/\n        github_link.py\n        sphinx_issues.py\nbuild_tools/\n    circle/\n        list_versions.py\nbenchmarks/\n    bench_lasso.py\n    bench_20newsgroups.py\n    bench_covertype.py\n    bench_tsne_mnist.py\n    bench_plot_ward.py\n    bench_random_projections.py\n    bench_sgd_regression.py\n    bench_isotonic.py\n    bench_plot_parallel_pairwise.py\n    bench_plot_omp_lars.py\n    bench_rcv1_logreg_convergence.py\n    bench_glmnet.py\n    bench_mnist.py\n    bench_sparsify.py\n    bench_text_vectorizers.py\n    plot_tsne_mnist.py\n    bench_plot_incremental_pca.py\n    bench_plot_nmf.py\n    bench_multilabel_metrics.py\n    bench_plot_randomized_svd.py\n    bench_tree.py\n    bench_saga.py\n    bench_plot_lasso_path.py\n    bench_sample_without_replacement.py\n    bench_isolation_forest.py\n    bench_lof.py\n    bench_plot_neighbors.py\n    bench_plot_svd.py\n    bench_plot_fastkmeans.py\n    bench_glm.py\nexamples/\n    plot_isotonic_regression.py\n    plot_kernel_approximation.py\n    plot_johnson_lindenstrauss_bound.py\n    plot_anomaly_comparison.py\n    plot_kernel_ridge_regression.py\n    plot_multioutput_face_completion.py\n    plot_missing_values.py\n    plot_multilabel.py\n    feature_selection/\n        plot_f_test_vs_mi.py\n        plot_permutation_test_for_classification.py\n        plot_rfe_with_cross_validation.py\n        plot_rfe_digits.py\n        plot_feature_selection_pipeline.py\n        plot_feature_selection.py\n        plot_select_from_model_boston.py\n    datasets/\n        plot_random_dataset.py\n        plot_random_multilabel_dataset.py\n        plot_iris_dataset.py\n        plot_digits_last_image.py\n    mixture/\n        plot_concentration_prior.py\n        plot_gmm_selection.py\n        plot_gmm_sin.py\n        plot_gmm_pdf.py\n        plot_gmm_covariances.py\n        plot_gmm.py\n    neural_networks/\n        plot_rbm_logistic_classification.py\n        plot_mlp_training_curves.py\n        plot_mlp_alpha.py\n        plot_mnist_filters.py\n    multioutput/\n        plot_classifier_chain_yeast.py\n    preprocessing/\n        plot_function_transformer.py\n        plot_all_scaling.py\n        plot_power_transformer.py\n        plot_scaling_importance.py\n    tree/\n        plot_unveil_tree_structure.py\n        plot_tree_regression_multioutput.py\n        plot_tree_regression.py\n        plot_iris.py\n    decomposition/\n        plot_pca_3d.py\n        plot_ica_vs_pca.py\n        plot_image_denoising.py\n        plot_faces_decomposition.py\n        plot_incremental_pca.py\n        plot_ica_blind_source_separation.py\n        plot_sparse_coding.py\n        plot_pca_iris.py\n        plot_beta_divergence.py\n        plot_kernel_pca.py\n        plot_pca_vs_fa_model_selection.py\n        plot_pca_vs_lda.py\n    model_selection/\n        plot_learning_curve.py\n        plot_confusion_matrix.py\n        plot_roc.py\n        plot_precision_recall.py\n        plot_randomized_search.py\n        plot_grid_search_digits.py\n        plot_cv_predict.py\n        plot_underfitting_overfitting.py\n        plot_roc_crossval.py\n        plot_multi_metric_evaluation.py\n        grid_search_text_feature_extraction.py\n        plot_validation_curve.py\n        plot_train_error_vs_test_error.py\n        plot_nested_cross_validation_iris.py\n    ensemble/\n        plot_gradient_boosting_regularization.py\n        plot_isolation_forest.py\n        plot_feature_transformation.py\n        plot_adaboost_multiclass.py\n        plot_voting_probas.py\n        plot_adaboost_twoclass.py\n        plot_random_forest_embedding.py\n        plot_gradient_boosting_quantile.py\n        plot_forest_importances.py\n        plot_forest_iris.py\n        plot_gradient_boosting_oob.py\n        plot_gradient_boosting_early_stopping.py\n        plot_adaboost_regression.py\n        plot_gradient_boosting_regression.py\n        plot_ensemble_oob.py\n        plot_random_forest_regression_multioutput.py\n        plot_adaboost_hastie_10_2.py\n        plot_forest_importances_faces.py\n        plot_partial_dependence.py\n        plot_bias_variance.py\n        plot_voting_decision_regions.py\n    cluster/\n        plot_dbscan.py\n        plot_coin_segmentation.py\n        plot_linkage_comparison.py\n        plot_birch_vs_minibatchkmeans.py\n        plot_digits_linkage.py\n        plot_segmentation_toy.py\n        plot_cluster_iris.py\n        plot_kmeans_silhouette_analysis.py\n        plot_affinity_propagation.py\n        plot_kmeans_stability_low_dim_dense.py\n        plot_ward_structured_vs_unstructured.py\n        plot_feature_agglomeration_vs_univariate_selection.py\n        plot_agglomerative_clustering_metrics.py\n        plot_mean_shift.py\n        plot_mini_batch_kmeans.py\n        plot_color_quantization.py\n        plot_dict_face_patches.py\n        plot_kmeans_assumptions.py\n        plot_digits_agglomeration.py\n        plot_kmeans_digits.py\n        plot_coin_ward_segmentation.py\n        plot_face_compress.py\n        plot_cluster_comparison.py\n        plot_agglomerative_clustering.py\n        plot_adjusted_for_chance_measures.py\n    svm/\n        plot_separating_hyperplane.py\n        plot_separating_hyperplane_unbalanced.py\n        plot_svm_kernels.py\n        plot_svm_anova.py\n        plot_svm_margin.py\n        plot_svm_scale_c.py\n        plot_rbf_parameters.py\n        plot_oneclass.py\n        plot_weighted_samples.py\n        plot_custom_kernel.py\n        plot_svm_nonlinear.py\n        plot_iris.py\n        plot_svm_regression.py\n    cross_decomposition/\n        plot_compare_cross_decomposition.py\n    bicluster/\n        plot_bicluster_newsgroups.py\n        plot_spectral_biclustering.py\n        plot_spectral_coclustering.py\n    semi_supervised/\n        plot_label_propagation_digits.py\n        plot_label_propagation_versus_svm_iris.py\n        plot_label_propagation_structure.py\n        plot_label_propagation_digits_active_learning.py\n    classification/\n        plot_lda_qda.py\n        plot_digits_classification.py\n        plot_classification_probability.py\n        plot_lda.py\n        plot_classifier_comparison.py\n    neighbors/\n        plot_regression.py\n        plot_nearest_centroid.py\n        plot_kde_1d.py\n        plot_species_kde.py\n        plot_digits_kde_sampling.py\n        plot_classification.py\n        plot_lof.py\n    compose/\n        plot_digits_pipe.py\n        plot_feature_union.py\n        plot_compare_reduction.py\n        column_transformer_mixed_types.py\n        plot_transformed_target.py\n        plot_column_transformer.py\n    linear_model/\n        plot_robust_fit.py\n        plot_theilsen.py\n        plot_lasso_model_selection.py\n        plot_lasso_lars.py\n        plot_lasso_dense_vs_sparse_data.py\n        plot_bayesian_ridge.py\n        plot_ransac.py\n        plot_lasso_and_elasticnet.py\n        plot_ridge_path.py\n        plot_sgd_loss_functions.py\n        plot_sgd_weighted_samples.py\n        plot_huber_vs_ridge.py\n        plot_sgd_iris.py\n        plot_sgd_penalties.py\n        plot_logistic_path.py\n        plot_ard.py\n        plot_ols_3d.py\n        plot_sgd_comparison.py\n        plot_logistic.py\n        plot_logistic_multinomial.py\n        plot_omp.py\n        plot_sparse_logistic_regression_20newsgroups.py\n        plot_sgd_separating_hyperplane.py\n        plot_ols.py\n        plot_polynomial_interpolation.py\n        plot_ols_ridge_variance.py\n        plot_sparse_logistic_regression_mnist.py\n        plot_logistic_l1_l2_sparsity.py\n        plot_multi_task_lasso_support.py\n        plot_lasso_coordinate_descent_path.py\n        plot_ridge_coeffs.py\n        plot_iris_logistic.py\n    calibration/\n        plot_calibration_curve.py\n        plot_calibration.py\n        plot_compare_calibration.py\n        plot_calibration_multiclass.py\n    gaussian_process/\n        plot_gpc_isoprobability.py\n        plot_gpc_iris.py\n        plot_compare_gpr_krr.py\n        plot_gpc_xor.py\n        plot_gpc.py\n        plot_gpr_noisy_targets.py\n        plot_gpr_prior_posterior.py\n        plot_gpr_noisy.py\n        plot_gpr_co2.py\n    manifold/\n        plot_compare_methods.py\n        plot_manifold_sphere.py\n        plot_lle_digits.py\n        plot_swissroll.py\n        plot_t_sne_perplexity.py\n        plot_mds.py\n    covariance/\n        plot_mahalanobis_distances.py\n        plot_robust_vs_empirical_covariance.py\n        plot_covariance_estimation.py\n        plot_lw_vs_oas.py\n        plot_outlier_detection.py\n        plot_sparse_cov.py\n    text/\n        plot_document_classification_20newsgroups.py\n        plot_document_clustering.py\n        plot_hashing_vs_dict_vectorizer.py\n    applications/\n        plot_species_distribution_modeling.py\n        plot_out_of_core_classification.py\n        plot_model_complexity_influence.py\n        plot_prediction_latency.py\n        plot_stock_market.py\n        plot_tomography_l1_reconstruction.py\n        svm_gui.py\n        wikipedia_principal_eigenvector.py\n        plot_face_recognition.py\n        plot_outlier_detection_housing.py\n        plot_topics_extraction_with_nmf_lda.py\n    exercises/\n        plot_cv_diabetes.py\n        plot_iris_exercise.py\n        plot_cv_digits.py\n        plot_digits_classification_exercise.py\n\n###\n\nPlease only provide the full path and return at most 5 files.\nThe returned files should be separated by new lines ordered by most to least important and wrapped with ```\nFor example:\n```\nfile1.py\nfile2.py\n```"}, "found_related_locs": [["class: GaussianMixture"], ["class: BaseMixture\nfunction: BaseMixture.fit\nfunction: BaseMixture.predict"], ["class: BayesianGaussianMixture"]], "additional_artifact_loc_related": [{"raw_output_loc": "```\nsklearn/mixture/gaussian_mixture.py\nclass: GaussianMixture\n\nsklearn/mixture/base.py\nclass: BaseMixture\nfunction: BaseMixture.fit\nfunction: BaseMixture.predict\n\nsklearn/mixture/bayesian_mixture.py\nclass: BayesianGaussianMixture\n```"}], "related_loc_traj": {"response": "```\nsklearn/mixture/gaussian_mixture.py\nclass: GaussianMixture\n\nsklearn/mixture/base.py\nclass: BaseMixture\nfunction: BaseMixture.fit\nfunction: BaseMixture.predict\n\nsklearn/mixture/bayesian_mixture.py\nclass: BayesianGaussianMixture\n```", "usage": {"completion_tokens": 68, "prompt_tokens": 1739}, "prompt": "\nPlease look through the following GitHub Problem Description, and the Skeleton of Relevant Files.\nIdentify all locations that need inspection or editing to fix the problem, including directly related areas as well as any potentially related global variables, functions, and classes.\nFor each location you provide, either give the name of the class, the name of a method in a class, the name of a function, or the name of a global variable.\n\n### GitHub Problem Description ###\nShould mixture models have a clusterer-compatible interface\nMixture models are currently a bit different. They are basically clusterers, except they are probabilistic, and are applied to inductive problems unlike many clusterers. But they are unlike clusterers in API:\r\n* they have an `n_components` parameter, with identical purpose to `n_clusters`\r\n* they do not store the `labels_` of the training data\r\n* they do not have a `fit_predict` method\r\n\r\nAnd they are almost entirely documented separately.\r\n\r\nShould we make the MMs more like clusterers?\n\n\n###\n\n\n\n### Skeleton of Relevant Files ###\n\n### File: sklearn/mixture/gaussian_mixture.py ###\n```python\n\n\n###############################################################################\n# Gaussian mixture shape checkers used by the GaussianMixture class\n\ndef _check_weights(weights, n_components):\n...\n\ndef _check_means(means, n_components, n_features):\n...\n\ndef _check_precision_positivity(precision, covariance_type):\n...\n\ndef _check_precision_matrix(precision, covariance_type):\n...\n\ndef _check_precisions_full(precisions, covariance_type):\n...\n\ndef _check_precisions(precisions, covariance_type, n_components, n_features):\n...\n\n###############################################################################\n# Gaussian mixture parameters estimators (used by the M-Step)\n\ndef _estimate_gaussian_covariances_full(resp, X, nk, means, reg_covar):\n...\n\ndef _estimate_gaussian_covariances_tied(resp, X, nk, means, reg_covar):\n...\n\ndef _estimate_gaussian_covariances_diag(resp, X, nk, means, reg_covar):\n...\n\ndef _estimate_gaussian_covariances_spherical(resp, X, nk, means, reg_covar):\n...\n\ndef _estimate_gaussian_parameters(X, resp, reg_covar, covariance_type):\n...\n\ndef _compute_precision_cholesky(covariances, covariance_type):\n...\n\n###############################################################################\n# Gaussian mixture probability estimators\ndef _compute_log_det_cholesky(matrix_chol, covariance_type, n_features):\n...\n\ndef _estimate_log_gaussian_prob(X, means, precisions_chol, covariance_type):\n...\n\nclass GaussianMixture(BaseMixture):\n\n    def __init__(self, n_components=1, covariance_type='full', tol=1e-3,\n                 reg_covar=1e-6, max_iter=100, n_init=1, init_params='kmeans',\n                 weights_init=None, means_init=None, precisions_init=None,\n                 random_state=None, warm_start=False,\n                 verbose=0, verbose_interval=10):\n...\n    def _check_parameters(self, X):\n...\n    def _initialize(self, X, resp):\n...\n    def _m_step(self, X, log_resp):\n...\n    def _estimate_log_prob(self, X):\n...\n    def _estimate_log_weights(self):\n...\n    def _compute_lower_bound(self, _, log_prob_norm):\n...\n    def _check_is_fitted(self):\n...\n    def _get_parameters(self):\n...\n    def _set_parameters(self, params):\n...\n    def _n_parameters(self):\n...\n    def bic(self, X):\n...\n    def aic(self, X):\n\n```\n\n### File: sklearn/mixture/base.py ###\n```python\n\n\ndef _check_shape(param, param_shape, name):\n...\n\ndef _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n...\n\nclass BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n\n    def __init__(self, n_components, tol, reg_covar,\n                 max_iter, n_init, init_params, random_state, warm_start,\n                 verbose, verbose_interval):\n...\n    def _check_initial_parameters(self, X):\n...\n    @abstractmethod\n    def _check_parameters(self, X):\n...\n    def _initialize_parameters(self, X, random_state):\n...\n    @abstractmethod\n    def _initialize(self, X, resp):\n...\n    def fit(self, X, y=None):\n...\n    def _e_step(self, X):\n...\n    @abstractmethod\n    def _m_step(self, X, log_resp):\n...\n    @abstractmethod\n    def _check_is_fitted(self):\n...\n    @abstractmethod\n    def _get_parameters(self):\n...\n    @abstractmethod\n    def _set_parameters(self, params):\n...\n    def score_samples(self, X):\n...\n    def score(self, X, y=None):\n...\n    def predict(self, X):\n...\n    def predict_proba(self, X):\n...\n    def sample(self, n_samples=1):\n...\n    def _estimate_weighted_log_prob(self, X):\n...\n    @abstractmethod\n    def _estimate_log_weights(self):\n...\n    @abstractmethod\n    def _estimate_log_prob(self, X):\n...\n    def _estimate_log_prob_resp(self, X):\n...\n    def _print_verbose_msg_init_beg(self, n_init):\n...\n    def _print_verbose_msg_iter_end(self, n_iter, diff_ll):\n...\n    def _print_verbose_msg_init_end(self, ll):\n\n```\n\n### File: sklearn/mixture/bayesian_mixture.py ###\n```python\n\n\ndef _log_dirichlet_norm(dirichlet_concentration):\n...\n\ndef _log_wishart_norm(degrees_of_freedom, log_det_precisions_chol, n_features):\n...\n\nclass BayesianGaussianMixture(BaseMixture):\n\n    def __init__(self, n_components=1, covariance_type='full', tol=1e-3,\n                 reg_covar=1e-6, max_iter=100, n_init=1, init_params='kmeans',\n                 weight_concentration_prior_type='dirichlet_process',\n                 weight_concentration_prior=None,\n                 mean_precision_prior=None, mean_prior=None,\n                 degrees_of_freedom_prior=None, covariance_prior=None,\n                 random_state=None, warm_start=False, verbose=0,\n                 verbose_interval=10):\n...\n    def _check_parameters(self, X):\n...\n    def _check_weights_parameters(self):\n...\n    def _check_means_parameters(self, X):\n...\n    def _check_precision_parameters(self, X):\n...\n    def _checkcovariance_prior_parameter(self, X):\n...\n    def _initialize(self, X, resp):\n...\n    def _estimate_weights(self, nk):\n...\n    def _estimate_means(self, nk, xk):\n...\n    def _estimate_precisions(self, nk, xk, sk):\n...\n    def _estimate_wishart_full(self, nk, xk, sk):\n...\n    def _estimate_wishart_tied(self, nk, xk, sk):\n...\n    def _estimate_wishart_diag(self, nk, xk, sk):\n...\n    def _estimate_wishart_spherical(self, nk, xk, sk):\n...\n    def _check_is_fitted(self):\n...\n    def _m_step(self, X, log_resp):\n...\n    def _estimate_log_weights(self):\n...\n    def _estimate_log_prob(self, X):\n...\n    def _compute_lower_bound(self, log_resp, log_prob_norm):\n...\n    def _get_parameters(self):\n...\n    def _set_parameters(self, params):\n\n```\n\n\n###\n\nPlease provide the complete set of locations as either a class name, a function name, or a variable name.\nNote that if you include a class, you do not need to list its specific methods.\nYou can include either the entire class or don't include the class name and instead include specific methods in the class.\n### Examples:\n```\nfull_path1/file1.py\nfunction: my_function_1\nclass: MyClass1\nfunction: MyClass2.my_method\n\nfull_path2/file2.py\nvariable: my_var\nfunction: MyClass3.my_method\n\nfull_path3/file3.py\nfunction: my_function_2\nfunction: my_function_3\nfunction: MyClass4.my_method_1\nclass: MyClass5\n```\n\nReturn just the locations.\n"}, "found_edit_locs": ["class: GaussianMixture\nline: 583\nline: 588\nline: 599\nline: 622\nline: 655\nline: 674", "class: BaseMixture\nline: 67\nline: 172\nline: 325\nline: 343\nline: 363", ""], "additional_artifact_loc_edit_location": [{"raw_output_loc": ["```\nsklearn/mixture/gaussian_mixture.py\nclass: GaussianMixture\nfunction: fit_predict\nline: 626\n```\n\n```\nsklearn/mixture/base.py\nclass: BaseMixture\nfunction: _initialize_parameters\nline: 134\n\nfunction: fit\nline: 172\n\nfunction: fit_predict\nline: 625\n```", "```\nsklearn/mixture/gaussian_mixture.py\nclass: GaussianMixture\nline: 583\nline: 588\nline: 599\nline: 622\nline: 655\nline: 674\n\nsklearn/mixture/base.py\nclass: BaseMixture\nline: 67\nline: 172\nline: 325\nline: 343\nline: 363\n```", "```\nsklearn/mixture/gaussian_mixture.py\nclass: GaussianMixture\nline: 583\n\nsklearn/mixture/gaussian_mixture.py\nfunction: GaussianMixture._initialize\nline: 622\n\nsklearn/mixture/gaussian_mixture.py\nfunction: GaussianMixture._m_step\nline: 655\n\nsklearn/mixture/base.py\nclass: BaseMixture\nline: 67\n\nsklearn/mixture/base.py\nfunction: BaseMixture.fit\nline: 172\n\nsklearn/mixture/base.py\nfunction: BaseMixture.predict\nline: 325\n\nsklearn/mixture/base.py\nfunction: BaseMixture.predict_proba\nline: 343\n```", "```\nsklearn/mixture/gaussian_mixture.py\nclass: GaussianMixture\nline: 583\nline: 325\n\nsklearn/mixture/base.py\nclass: BaseMixture\nline: 67\nline: 325\nline: 343\n\nsklearn/mixture/bayesian_mixture.py\nclass: BayesianGaussianMixture\nline: 309\nline: 325\n```"]}], "edit_loc_traj": {"prompt": "\nPlease review the following GitHub problem description, and relevant files, and provide a set of locations that need to be edited to fix the issue.\nThe locations can be specified as class names, function or method names, or exact line numbers that require modification.\n\n### GitHub Problem Description ###\nShould mixture models have a clusterer-compatible interface\nMixture models are currently a bit different. They are basically clusterers, except they are probabilistic, and are applied to inductive problems unlike many clusterers. But they are unlike clusterers in API:\r\n* they have an `n_components` parameter, with identical purpose to `n_clusters`\r\n* they do not store the `labels_` of the training data\r\n* they do not have a `fit_predict` method\r\n\r\nAnd they are almost entirely documented separately.\r\n\r\nShould we make the MMs more like clusterers?\n\n\n###\n\n\n\n### sklearn/mixture/gaussian_mixture.py\n...\n425|                    np.dot(X ** 2, precisions.T))\n426|\n427|    elif covariance_type == 'spherical':\n428|        precisions = precisions_chol ** 2\n429|        log_prob = (np.sum(means ** 2, 1) * precisions -\n430|                    2 * np.dot(X, means.T * precisions) +\n431|                    np.outer(row_norms(X, squared=True), precisions))\n432|    return -.5 * (n_features * np.log(2 * np.pi) + log_prob) + log_det\n433|\n434|\n435|class GaussianMixture(BaseMixture):\n436|    \"\"\"Gaussian Mixture.\n437|\n438|    Representation of a Gaussian mixture model probability distribution.\n439|    This class allows to estimate the parameters of a Gaussian mixture\n440|    distribution.\n441|\n442|    Read more in the :ref:`User Guide <gmm>`.\n443|\n444|    .. versionadded:: 0.18\n445|\n446|    Parameters\n447|    ----------\n448|    n_components : int, defaults to 1.\n449|        The number of mixture components.\n450|\n451|    covariance_type : {'full', 'tied', 'diag', 'spherical'},\n452|            defaults to 'full'.\n453|        String describing the type of covariance parameters to use.\n454|        Must be one of::\n455|\n456|            'full' (each component has its own general covariance matrix),\n457|            'tied' (all components share the same general covariance matrix),\n458|            'diag' (each component has its own diagonal covariance matrix),\n459|            'spherical' (each component has its own single variance).\n460|\n461|    tol : float, defaults to 1e-3.\n462|        The convergence threshold. EM iterations will stop when the\n463|        lower bound average gain is below this threshold.\n464|\n465|    reg_covar : float, defaults to 1e-6.\n466|        Non-negative regularization added to the diagonal of covariance.\n467|        Allows to assure that the covariance matrices are all positive.\n468|\n469|    max_iter : int, defaults to 100.\n470|        The number of EM iterations to perform.\n471|\n472|    n_init : int, defaults to 1.\n473|        The number of initializations to perform. The best results are kept.\n474|\n475|    init_params : {'kmeans', 'random'}, defaults to 'kmeans'.\n476|        The method used to initialize the weights, the means and the\n477|        precisions.\n478|        Must be one of::\n479|\n480|            'kmeans' : responsibilities are initialized using kmeans.\n481|            'random' : responsibilities are initialized randomly.\n482|\n483|    weights_init : array-like, shape (n_components, ), optional\n484|        The user-provided initial weights, defaults to None.\n485|        If it None, weights are initialized using the `init_params` method.\n486|\n487|    means_init : array-like, shape (n_components, n_features), optional\n488|        The user-provided initial means, defaults to None,\n489|        If it None, means are initialized using the `init_params` method.\n490|\n491|    precisions_init : array-like, optional.\n492|        The user-provided initial precisions (inverse of the covariance\n493|        matrices), defaults to None.\n494|        If it None, precisions are initialized using the 'init_params' method.\n495|        The shape depends on 'covariance_type'::\n496|\n497|            (n_components,)                        if 'spherical',\n498|            (n_features, n_features)               if 'tied',\n499|            (n_components, n_features)             if 'diag',\n500|            (n_components, n_features, n_features) if 'full'\n501|\n502|    random_state : int, RandomState instance or None, optional (default=None)\n503|        If int, random_state is the seed used by the random number generator;\n504|        If RandomState instance, random_state is the random number generator;\n505|        If None, the random number generator is the RandomState instance used\n506|        by `np.random`.\n507|\n508|    warm_start : bool, default to False.\n509|        If 'warm_start' is True, the solution of the last fitting is used as\n510|        initialization for the next call of fit(). This can speed up\n511|        convergence when fit is called several times on similar problems.\n512|        See :term:`the Glossary <warm_start>`.\n513|\n514|    verbose : int, default to 0.\n515|        Enable verbose output. If 1 then it prints the current\n516|        initialization and each iteration step. If greater than 1 then\n517|        it prints also the log probability and the time needed\n518|        for each step.\n519|\n520|    verbose_interval : int, default to 10.\n521|        Number of iteration done before the next print.\n522|\n523|    Attributes\n524|    ----------\n525|    weights_ : array-like, shape (n_components,)\n526|        The weights of each mixture components.\n527|\n528|    means_ : array-like, shape (n_components, n_features)\n529|        The mean of each mixture component.\n530|\n531|    covariances_ : array-like\n532|        The covariance of each mixture component.\n533|        The shape depends on `covariance_type`::\n534|\n535|            (n_components,)                        if 'spherical',\n536|            (n_features, n_features)               if 'tied',\n537|            (n_components, n_features)             if 'diag',\n538|            (n_components, n_features, n_features) if 'full'\n539|\n540|    precisions_ : array-like\n541|        The precision matrices for each component in the mixture. A precision\n542|        matrix is the inverse of a covariance matrix. A covariance matrix is\n543|        symmetric positive definite so the mixture of Gaussian can be\n544|        equivalently parameterized by the precision matrices. Storing the\n545|        precision matrices instead of the covariance matrices makes it more\n546|        efficient to compute the log-likelihood of new samples at test time.\n547|        The shape depends on `covariance_type`::\n548|\n549|            (n_components,)                        if 'spherical',\n550|            (n_features, n_features)               if 'tied',\n551|            (n_components, n_features)             if 'diag',\n552|            (n_components, n_features, n_features) if 'full'\n553|\n554|    precisions_cholesky_ : array-like\n555|        The cholesky decomposition of the precision matrices of each mixture\n556|        component. A precision matrix is the inverse of a covariance matrix.\n557|        A covariance matrix is symmetric positive definite so the mixture of\n558|        Gaussian can be equivalently parameterized by the precision matrices.\n559|        Storing the precision matrices instead of the covariance matrices makes\n560|        it more efficient to compute the log-likelihood of new samples at test\n561|        time. The shape depends on `covariance_type`::\n562|\n563|            (n_components,)                        if 'spherical',\n564|            (n_features, n_features)               if 'tied',\n565|            (n_components, n_features)             if 'diag',\n566|            (n_components, n_features, n_features) if 'full'\n567|\n568|    converged_ : bool\n569|        True when convergence was reached in fit(), False otherwise.\n570|\n571|    n_iter_ : int\n572|        Number of step used by the best fit of EM to reach the convergence.\n573|\n574|    lower_bound_ : float\n575|        Log-likelihood of the best fit of EM.\n576|\n577|    See Also\n578|    --------\n579|    BayesianGaussianMixture : Gaussian mixture model fit with a variational\n580|        inference.\n581|    \"\"\"\n582|\n583|    def __init__(self, n_components=1, covariance_type='full', tol=1e-3,\n584|                 reg_covar=1e-6, max_iter=100, n_init=1, init_params='kmeans',\n585|                 weights_init=None, means_init=None, precisions_init=None,\n586|                 random_state=None, warm_start=False,\n587|                 verbose=0, verbose_interval=10):\n588|        super(GaussianMixture, self).__init__(\n589|            n_components=n_components, tol=tol, reg_covar=reg_covar,\n590|            max_iter=max_iter, n_init=n_init, init_params=init_params,\n591|            random_state=random_state, warm_start=warm_start,\n592|            verbose=verbose, verbose_interval=verbose_interval)\n593|\n594|        self.covariance_type = covariance_type\n595|        self.weights_init = weights_init\n596|        self.means_init = means_init\n597|        self.precisions_init = precisions_init\n598|\n599|    def _check_parameters(self, X):\n600|        \"\"\"Check the Gaussian mixture parameters are well defined.\"\"\"\n601|        _, n_features = X.shape\n602|        if self.covariance_type not in ['spherical', 'tied', 'diag', 'full']:\n603|            raise ValueError(\"Invalid value for 'covariance_type': %s \"\n604|                             \"'covariance_type' should be in \"\n605|                             \"['spherical', 'tied', 'diag', 'full']\"\n606|                             % self.covariance_type)\n607|\n608|        if self.weights_init is not None:\n609|            self.weights_init = _check_weights(self.weights_init,\n610|                                               self.n_components)\n611|\n612|        if self.means_init is not None:\n613|            self.means_init = _check_means(self.means_init,\n614|                                           self.n_components, n_features)\n615|\n616|        if self.precisions_init is not None:\n617|            self.precisions_init = _check_precisions(self.precisions_init,\n618|                                                     self.covariance_type,\n619|                                                     self.n_components,\n620|                                                     n_features)\n621|\n622|    def _initialize(self, X, resp):\n623|        \"\"\"Initialization of the Gaussian mixture parameters.\n624|\n625|        Parameters\n626|        ----------\n627|        X : array-like, shape (n_samples, n_features)\n628|\n629|        resp : array-like, shape (n_samples, n_components)\n630|        \"\"\"\n631|        n_samples, _ = X.shape\n632|\n633|        weights, means, covariances = _estimate_gaussian_parameters(\n634|            X, resp, self.reg_covar, self.covariance_type)\n635|        weights /= n_samples\n636|\n637|        self.weights_ = (weights if self.weights_init is None\n638|                         else self.weights_init)\n639|        self.means_ = means if self.means_init is None else self.means_init\n640|\n641|        if self.precisions_init is None:\n642|            self.covariances_ = covariances\n643|            self.precisions_cholesky_ = _compute_precision_cholesky(\n644|                covariances, self.covariance_type)\n645|        elif self.covariance_type == 'full':\n646|            self.precisions_cholesky_ = np.array(\n647|                [linalg.cholesky(prec_init, lower=True)\n648|                 for prec_init in self.precisions_init])\n649|        elif self.covariance_type == 'tied':\n650|            self.precisions_cholesky_ = linalg.cholesky(self.precisions_init,\n651|                                                        lower=True)\n652|        else:\n653|            self.precisions_cholesky_ = self.precisions_init\n654|\n655|    def _m_step(self, X, log_resp):\n656|        \"\"\"M step.\n657|\n658|        Parameters\n659|        ----------\n660|        X : array-like, shape (n_samples, n_features)\n661|\n662|        log_resp : array-like, shape (n_samples, n_components)\n663|            Logarithm of the posterior probabilities (or responsibilities) of\n664|            the point of each sample in X.\n665|        \"\"\"\n666|        n_samples, _ = X.shape\n667|        self.weights_, self.means_, self.covariances_ = (\n668|            _estimate_gaussian_parameters(X, np.exp(log_resp), self.reg_covar,\n669|                                          self.covariance_type))\n670|        self.weights_ /= n_samples\n671|        self.precisions_cholesky_ = _compute_precision_cholesky(\n672|            self.covariances_, self.covariance_type)\n673|\n674|    def _estimate_log_prob(self, X):\n675|        return _estimate_log_gaussian_prob(\n676|            X, self.means_, self.precisions_cholesky_, self.covariance_type)\n677|\n678|    def _estimate_log_weights(self):\n679|        return np.log(self.weights_)\n680|\n681|    def _compute_lower_bound(self, _, log_prob_norm):\n682|        return log_prob_norm\n683|\n684|    def _check_is_fitted(self):\n685|        check_is_fitted(self, ['weights_', 'means_', 'precisions_cholesky_'])\n686|\n687|    def _get_parameters(self):\n688|        return (self.weights_, self.means_, self.covariances_,\n689|                self.precisions_cholesky_)\n690|\n691|    def _set_parameters(self, params):\n692|        (self.weights_, self.means_, self.covariances_,\n693|         self.precisions_cholesky_) = params\n694|\n695|        # Attributes computation\n696|        _, n_features = self.means_.shape\n697|\n698|        if self.covariance_type == 'full':\n699|            self.precisions_ = np.empty(self.precisions_cholesky_.shape)\n700|            for k, prec_chol in enumerate(self.precisions_cholesky_):\n701|                self.precisions_[k] = np.dot(prec_chol, prec_chol.T)\n702|\n703|        elif self.covariance_type == 'tied':\n704|            self.precisions_ = np.dot(self.precisions_cholesky_,\n705|                                      self.precisions_cholesky_.T)\n706|        else:\n707|            self.precisions_ = self.precisions_cholesky_ ** 2\n708|\n709|    def _n_parameters(self):\n710|        \"\"\"Return the number of free parameters in the model.\"\"\"\n711|        _, n_features = self.means_.shape\n712|        if self.covariance_type == 'full':\n713|            cov_params = self.n_components * n_features * (n_features + 1) / 2.\n714|        elif self.covariance_type == 'diag':\n715|            cov_params = self.n_components * n_features\n716|        elif self.covariance_type == 'tied':\n717|            cov_params = n_features * (n_features + 1) / 2.\n718|        elif self.covariance_type == 'spherical':\n719|            cov_params = self.n_components\n720|        mean_params = n_features * self.n_components\n721|        return int(cov_params + mean_params + self.n_components - 1)\n722|\n723|    def bic(self, X):\n724|        \"\"\"Bayesian information criterion for the current model on the input X.\n725|\n726|        Parameters\n727|        ----------\n728|        X : array of shape (n_samples, n_dimensions)\n729|\n730|        Returns\n731|        -------\n732|        bic : float\n733|            The lower the better.\n734|        \"\"\"\n735|        return (-2 * self.score(X) * X.shape[0] +\n736|                self._n_parameters() * np.log(X.shape[0]))\n737|\n738|    def aic(self, X):\n739|        \"\"\"Akaike information criterion for the current model on the input X.\n740|\n741|        Parameters\n742|        ----------\n743|        X : array of shape (n_samples, n_dimensions)\n744|\n745|        Returns\n746|        -------\n747|        aic : float\n748|            The lower the better.\n749|        \"\"\"\n750|        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n\n\n### sklearn/mixture/base.py\n...\n57|        raise ValueError('Expected n_samples >= n_components '\n58|                         'but got n_components = %d, n_samples = %d'\n59|                         % (n_components, X.shape[0]))\n60|    if n_features is not None and X.shape[1] != n_features:\n61|        raise ValueError(\"Expected the input data X have %d features, \"\n62|                         \"but got %d features\"\n63|                         % (n_features, X.shape[1]))\n64|    return X\n65|\n66|\n67|class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n68|    \"\"\"Base class for mixture models.\n69|\n70|    This abstract class specifies an interface for all mixture classes and\n71|    provides basic common methods for mixture models.\n72|    \"\"\"\n73|\n74|    def __init__(self, n_components, tol, reg_covar,\n75|                 max_iter, n_init, init_params, random_state, warm_start,\n76|                 verbose, verbose_interval):\n77|        self.n_components = n_components\n78|        self.tol = tol\n79|        self.reg_covar = reg_covar\n80|        self.max_iter = max_iter\n81|        self.n_init = n_init\n82|        self.init_params = init_params\n83|        self.random_state = random_state\n84|        self.warm_start = warm_start\n85|        self.verbose = verbose\n86|        self.verbose_interval = verbose_interval\n87|\n88|    def _check_initial_parameters(self, X):\n89|        \"\"\"Check values of the basic parameters.\n90|\n91|        Parameters\n92|        ----------\n93|        X : array-like, shape (n_samples, n_features)\n94|        \"\"\"\n95|        if self.n_components < 1:\n96|            raise ValueError(\"Invalid value for 'n_components': %d \"\n97|                             \"Estimation requires at least one component\"\n98|                             % self.n_components)\n99|\n100|        if self.tol < 0.:\n101|            raise ValueError(\"Invalid value for 'tol': %.5f \"\n102|                             \"Tolerance used by the EM must be non-negative\"\n103|                             % self.tol)\n104|\n105|        if self.n_init < 1:\n106|            raise ValueError(\"Invalid value for 'n_init': %d \"\n107|                             \"Estimation requires at least one run\"\n108|                             % self.n_init)\n109|\n110|        if self.max_iter < 1:\n111|            raise ValueError(\"Invalid value for 'max_iter': %d \"\n112|                             \"Estimation requires at least one iteration\"\n113|                             % self.max_iter)\n114|\n115|        if self.reg_covar < 0.:\n116|            raise ValueError(\"Invalid value for 'reg_covar': %.5f \"\n117|                             \"regularization on covariance must be \"\n118|                             \"non-negative\"\n119|                             % self.reg_covar)\n120|\n121|        # Check all the parameters values of the derived class\n122|        self._check_parameters(X)\n123|\n124|    @abstractmethod\n125|    def _check_parameters(self, X):\n126|        \"\"\"Check initial parameters of the derived class.\n127|\n128|        Parameters\n129|        ----------\n130|        X : array-like, shape  (n_samples, n_features)\n131|        \"\"\"\n132|        pass\n133|\n134|    def _initialize_parameters(self, X, random_state):\n135|        \"\"\"Initialize the model parameters.\n136|\n137|        Parameters\n138|        ----------\n139|        X : array-like, shape  (n_samples, n_features)\n140|\n141|        random_state : RandomState\n142|            A random number generator instance.\n143|        \"\"\"\n144|        n_samples, _ = X.shape\n145|\n146|        if self.init_params == 'kmeans':\n147|            resp = np.zeros((n_samples, self.n_components))\n148|            label = cluster.KMeans(n_clusters=self.n_components, n_init=1,\n149|                                   random_state=random_state).fit(X).labels_\n150|            resp[np.arange(n_samples), label] = 1\n151|        elif self.init_params == 'random':\n152|            resp = random_state.rand(n_samples, self.n_components)\n153|            resp /= resp.sum(axis=1)[:, np.newaxis]\n154|        else:\n155|            raise ValueError(\"Unimplemented initialization method '%s'\"\n156|                             % self.init_params)\n157|\n158|        self._initialize(X, resp)\n159|\n160|    @abstractmethod\n161|    def _initialize(self, X, resp):\n162|        \"\"\"Initialize the model parameters of the derived class.\n163|\n164|        Parameters\n165|        ----------\n166|        X : array-like, shape  (n_samples, n_features)\n167|\n168|        resp : array-like, shape (n_samples, n_components)\n169|        \"\"\"\n170|        pass\n171|\n172|    def fit(self, X, y=None):\n173|        \"\"\"Estimate model parameters with the EM algorithm.\n174|\n175|        The method fit the model `n_init` times and set the parameters with\n176|        which the model has the largest likelihood or lower bound. Within each\n177|        trial, the method iterates between E-step and M-step for `max_iter`\n178|        times until the change of likelihood or lower bound is less than\n179|        `tol`, otherwise, a `ConvergenceWarning` is raised.\n180|\n181|        Parameters\n182|        ----------\n183|        X : array-like, shape (n_samples, n_features)\n184|            List of n_features-dimensional data points. Each row\n185|            corresponds to a single data point.\n186|\n187|        Returns\n188|        -------\n189|        self\n190|        \"\"\"\n191|        X = _check_X(X, self.n_components, ensure_min_samples=2)\n192|        self._check_initial_parameters(X)\n193|\n194|        # if we enable warm_start, we will have a unique initialisation\n195|        do_init = not(self.warm_start and hasattr(self, 'converged_'))\n196|        n_init = self.n_init if do_init else 1\n197|\n198|        max_lower_bound = -np.infty\n199|        self.converged_ = False\n200|\n201|        random_state = check_random_state(self.random_state)\n202|\n203|        n_samples, _ = X.shape\n204|        for init in range(n_init):\n205|            self._print_verbose_msg_init_beg(init)\n206|\n207|            if do_init:\n208|                self._initialize_parameters(X, random_state)\n209|                self.lower_bound_ = -np.infty\n210|\n211|            for n_iter in range(1, self.max_iter + 1):\n212|                prev_lower_bound = self.lower_bound_\n213|\n214|                log_prob_norm, log_resp = self._e_step(X)\n215|                self._m_step(X, log_resp)\n216|                self.lower_bound_ = self._compute_lower_bound(\n217|                    log_resp, log_prob_norm)\n218|\n219|                change = self.lower_bound_ - prev_lower_bound\n220|                self._print_verbose_msg_iter_end(n_iter, change)\n221|\n222|                if abs(change) < self.tol:\n223|                    self.converged_ = True\n224|                    break\n225|\n226|            self._print_verbose_msg_init_end(self.lower_bound_)\n227|\n228|            if self.lower_bound_ > max_lower_bound:\n229|                max_lower_bound = self.lower_bound_\n230|                best_params = self._get_parameters()\n231|                best_n_iter = n_iter\n232|\n233|        if not self.converged_:\n234|            warnings.warn('Initialization %d did not converge. '\n235|                          'Try different init parameters, '\n236|                          'or increase max_iter, tol '\n237|                          'or check for degenerate data.'\n238|                          % (init + 1), ConvergenceWarning)\n239|\n240|        self._set_parameters(best_params)\n241|        self.n_iter_ = best_n_iter\n242|\n243|        return self\n244|\n245|    def _e_step(self, X):\n246|        \"\"\"E step.\n247|\n248|        Parameters\n249|        ----------\n250|        X : array-like, shape (n_samples, n_features)\n251|\n252|        Returns\n253|        -------\n254|        log_prob_norm : float\n255|            Mean of the logarithms of the probabilities of each sample in X\n256|\n257|        log_responsibility : array, shape (n_samples, n_components)\n258|            Logarithm of the posterior probabilities (or responsibilities) of\n259|            the point of each sample in X.\n260|        \"\"\"\n261|        log_prob_norm, log_resp = self._estimate_log_prob_resp(X)\n262|        return np.mean(log_prob_norm), log_resp\n263|\n264|    @abstractmethod\n265|    def _m_step(self, X, log_resp):\n266|        \"\"\"M step.\n267|\n268|        Parameters\n269|        ----------\n270|        X : array-like, shape (n_samples, n_features)\n271|\n272|        log_resp : array-like, shape (n_samples, n_components)\n273|            Logarithm of the posterior probabilities (or responsibilities) of\n274|            the point of each sample in X.\n275|        \"\"\"\n276|        pass\n277|\n278|    @abstractmethod\n279|    def _check_is_fitted(self):\n280|        pass\n281|\n282|    @abstractmethod\n283|    def _get_parameters(self):\n284|        pass\n285|\n286|    @abstractmethod\n287|    def _set_parameters(self, params):\n288|        pass\n289|\n290|    def score_samples(self, X):\n291|        \"\"\"Compute the weighted log probabilities for each sample.\n292|\n293|        Parameters\n294|        ----------\n295|        X : array-like, shape (n_samples, n_features)\n296|            List of n_features-dimensional data points. Each row\n297|            corresponds to a single data point.\n298|\n299|        Returns\n300|        -------\n301|        log_prob : array, shape (n_samples,)\n302|            Log probabilities of each data point in X.\n303|        \"\"\"\n304|        self._check_is_fitted()\n305|        X = _check_X(X, None, self.means_.shape[1])\n306|\n307|        return logsumexp(self._estimate_weighted_log_prob(X), axis=1)\n308|\n309|    def score(self, X, y=None):\n310|        \"\"\"Compute the per-sample average log-likelihood of the given data X.\n311|\n312|        Parameters\n313|        ----------\n314|        X : array-like, shape (n_samples, n_dimensions)\n315|            List of n_features-dimensional data points. Each row\n316|            corresponds to a single data point.\n317|\n318|        Returns\n319|        -------\n320|        log_likelihood : float\n321|            Log likelihood of the Gaussian mixture given X.\n322|        \"\"\"\n323|        return self.score_samples(X).mean()\n324|\n325|    def predict(self, X):\n326|        \"\"\"Predict the labels for the data samples in X using trained model.\n327|\n328|        Parameters\n329|        ----------\n330|        X : array-like, shape (n_samples, n_features)\n331|            List of n_features-dimensional data points. Each row\n332|            corresponds to a single data point.\n333|\n334|        Returns\n335|        -------\n336|        labels : array, shape (n_samples,)\n337|            Component labels.\n338|        \"\"\"\n339|        self._check_is_fitted()\n340|        X = _check_X(X, None, self.means_.shape[1])\n341|        return self._estimate_weighted_log_prob(X).argmax(axis=1)\n342|\n343|    def predict_proba(self, X):\n344|        \"\"\"Predict posterior probability of each component given the data.\n345|\n346|        Parameters\n347|        ----------\n348|        X : array-like, shape (n_samples, n_features)\n349|            List of n_features-dimensional data points. Each row\n350|            corresponds to a single data point.\n351|\n352|        Returns\n353|        -------\n354|        resp : array, shape (n_samples, n_components)\n355|            Returns the probability each Gaussian (state) in\n356|            the model given each sample.\n357|        \"\"\"\n358|        self._check_is_fitted()\n359|        X = _check_X(X, None, self.means_.shape[1])\n360|        _, log_resp = self._estimate_log_prob_resp(X)\n361|        return np.exp(log_resp)\n362|\n363|    def sample(self, n_samples=1):\n364|        \"\"\"Generate random samples from the fitted Gaussian distribution.\n365|\n366|        Parameters\n367|        ----------\n368|        n_samples : int, optional\n369|            Number of samples to generate. Defaults to 1.\n370|\n371|        Returns\n372|        -------\n373|        X : array, shape (n_samples, n_features)\n374|            Randomly generated sample\n375|\n376|        y : array, shape (nsamples,)\n377|            Component labels\n378|\n379|        \"\"\"\n380|        self._check_is_fitted()\n381|\n382|        if n_samples < 1:\n383|            raise ValueError(\n384|                \"Invalid value for 'n_samples': %d . The sampling requires at \"\n385|                \"least one sample.\" % (self.n_components))\n386|\n387|        _, n_features = self.means_.shape\n388|        rng = check_random_state(self.random_state)\n389|        n_samples_comp = rng.multinomial(n_samples, self.weights_)\n390|\n391|        if self.covariance_type == 'full':\n392|            X = np.vstack([\n393|                rng.multivariate_normal(mean, covariance, int(sample))\n394|                for (mean, covariance, sample) in zip(\n395|                    self.means_, self.covariances_, n_samples_comp)])\n396|        elif self.covariance_type == \"tied\":\n397|            X = np.vstack([\n398|                rng.multivariate_normal(mean, self.covariances_, int(sample))\n399|                for (mean, sample) in zip(\n400|                    self.means_, n_samples_comp)])\n401|        else:\n402|            X = np.vstack([\n403|                mean + rng.randn(sample, n_features) * np.sqrt(covariance)\n404|                for (mean, covariance, sample) in zip(\n405|                    self.means_, self.covariances_, n_samples_comp)])\n406|\n407|        y = np.concatenate([j * np.ones(sample, dtype=int)\n408|                           for j, sample in enumerate(n_samples_comp)])\n409|\n410|        return (X, y)\n411|\n412|    def _estimate_weighted_log_prob(self, X):\n413|        \"\"\"Estimate the weighted log-probabilities, log P(X | Z) + log weights.\n414|\n415|        Parameters\n416|        ----------\n417|        X : array-like, shape (n_samples, n_features)\n418|\n419|        Returns\n420|        -------\n421|        weighted_log_prob : array, shape (n_samples, n_component)\n422|        \"\"\"\n423|        return self._estimate_log_prob(X) + self._estimate_log_weights()\n424|\n425|    @abstractmethod\n426|    def _estimate_log_weights(self):\n427|        \"\"\"Estimate log-weights in EM algorithm, E[ log pi ] in VB algorithm.\n428|\n429|        Returns\n430|        -------\n431|        log_weight : array, shape (n_components, )\n432|        \"\"\"\n433|        pass\n434|\n435|    @abstractmethod\n436|    def _estimate_log_prob(self, X):\n437|        \"\"\"Estimate the log-probabilities log P(X | Z).\n438|\n439|        Compute the log-probabilities per each component for each sample.\n440|\n441|        Parameters\n442|        ----------\n443|        X : array-like, shape (n_samples, n_features)\n444|\n445|        Returns\n446|        -------\n447|        log_prob : array, shape (n_samples, n_component)\n448|        \"\"\"\n449|        pass\n450|\n451|    def _estimate_log_prob_resp(self, X):\n452|        \"\"\"Estimate log probabilities and responsibilities for each sample.\n453|\n454|        Compute the log probabilities, weighted log probabilities per\n455|        component and responsibilities for each sample in X with respect to\n456|        the current state of the model.\n457|\n458|        Parameters\n459|        ----------\n460|        X : array-like, shape (n_samples, n_features)\n461|\n462|        Returns\n463|        -------\n464|        log_prob_norm : array, shape (n_samples,)\n465|            log p(X)\n466|\n467|        log_responsibilities : array, shape (n_samples, n_components)\n468|            logarithm of the responsibilities\n469|        \"\"\"\n470|        weighted_log_prob = self._estimate_weighted_log_prob(X)\n471|        log_prob_norm = logsumexp(weighted_log_prob, axis=1)\n472|        with np.errstate(under='ignore'):\n473|            # ignore underflow\n474|            log_resp = weighted_log_prob - log_prob_norm[:, np.newaxis]\n475|        return log_prob_norm, log_resp\n476|\n477|    def _print_verbose_msg_init_beg(self, n_init):\n478|        \"\"\"Print verbose message on initialization.\"\"\"\n479|        if self.verbose == 1:\n480|            print(\"Initialization %d\" % n_init)\n481|        elif self.verbose >= 2:\n482|            print(\"Initialization %d\" % n_init)\n483|            self._init_prev_time = time()\n484|            self._iter_prev_time = self._init_prev_time\n485|\n486|    def _print_verbose_msg_iter_end(self, n_iter, diff_ll):\n487|        \"\"\"Print verbose message on initialization.\"\"\"\n488|        if n_iter % self.verbose_interval == 0:\n489|            if self.verbose == 1:\n490|                print(\"  Iteration %d\" % n_iter)\n491|            elif self.verbose >= 2:\n492|                cur_time = time()\n493|                print(\"  Iteration %d\\t time lapse %.5fs\\t ll change %.5f\" % (\n494|                    n_iter, cur_time - self._iter_prev_time, diff_ll))\n495|                self._iter_prev_time = cur_time\n496|\n497|    def _print_verbose_msg_init_end(self, ll):\n498|        \"\"\"Print verbose message on the end of iteration.\"\"\"\n499|        if self.verbose == 1:\n500|            print(\"Initialization converged: %s\" % self.converged_)\n501|        elif self.verbose >= 2:\n502|            print(\"Initialization converged: %s\\t time lapse %.5fs\\t ll %.5f\" %\n503|                  (self.converged_, time() - self._init_prev_time, ll))\n\n\n### sklearn/mixture/bayesian_mixture.py\n...\n55|    log_wishart_norm : array-like, shape (n_components,)\n56|        The log normalization of the Wishart distribution.\n57|    \"\"\"\n58|    # To simplify the computation we have removed the np.log(np.pi) term\n59|    return -(degrees_of_freedom * log_det_precisions_chol +\n60|             degrees_of_freedom * n_features * .5 * math.log(2.) +\n61|             np.sum(gammaln(.5 * (degrees_of_freedom -\n62|                                  np.arange(n_features)[:, np.newaxis])), 0))\n63|\n64|\n65|class BayesianGaussianMixture(BaseMixture):\n66|    \"\"\"Variational Bayesian estimation of a Gaussian mixture.\n67|\n68|    This class allows to infer an approximate posterior distribution over the\n69|    parameters of a Gaussian mixture distribution. The effective number of\n70|    components can be inferred from the data.\n71|\n72|    This class implements two types of prior for the weights distribution: a\n73|    finite mixture model with Dirichlet distribution and an infinite mixture\n74|    model with the Dirichlet Process. In practice Dirichlet Process inference\n75|    algorithm is approximated and uses a truncated distribution with a fixed\n76|    maximum number of components (called the Stick-breaking representation).\n77|    The number of components actually used almost always depends on the data.\n78|\n79|    .. versionadded:: 0.18\n80|\n81|    Read more in the :ref:`User Guide <bgmm>`.\n82|\n83|    Parameters\n84|    ----------\n85|    n_components : int, defaults to 1.\n86|        The number of mixture components. Depending on the data and the value\n87|        of the `weight_concentration_prior` the model can decide to not use\n88|        all the components by setting some component `weights_` to values very\n89|        close to zero. The number of effective components is therefore smaller\n90|        than n_components.\n91|\n92|    covariance_type : {'full', 'tied', 'diag', 'spherical'}, defaults to 'full'\n93|        String describing the type of covariance parameters to use.\n94|        Must be one of::\n95|\n96|            'full' (each component has its own general covariance matrix),\n97|            'tied' (all components share the same general covariance matrix),\n98|            'diag' (each component has its own diagonal covariance matrix),\n99|            'spherical' (each component has its own single variance).\n100|\n101|    tol : float, defaults to 1e-3.\n102|        The convergence threshold. EM iterations will stop when the\n103|        lower bound average gain on the likelihood (of the training data with\n104|        respect to the model) is below this threshold.\n105|\n106|    reg_covar : float, defaults to 1e-6.\n107|        Non-negative regularization added to the diagonal of covariance.\n108|        Allows to assure that the covariance matrices are all positive.\n109|\n110|    max_iter : int, defaults to 100.\n111|        The number of EM iterations to perform.\n112|\n113|    n_init : int, defaults to 1.\n114|        The number of initializations to perform. The result with the highest\n115|        lower bound value on the likelihood is kept.\n116|\n117|    init_params : {'kmeans', 'random'}, defaults to 'kmeans'.\n118|        The method used to initialize the weights, the means and the\n119|        covariances.\n120|        Must be one of::\n121|\n122|            'kmeans' : responsibilities are initialized using kmeans.\n123|            'random' : responsibilities are initialized randomly.\n124|\n125|    weight_concentration_prior_type : str, defaults to 'dirichlet_process'.\n126|        String describing the type of the weight concentration prior.\n127|        Must be one of::\n128|\n129|            'dirichlet_process' (using the Stick-breaking representation),\n130|            'dirichlet_distribution' (can favor more uniform weights).\n131|\n132|    weight_concentration_prior : float | None, optional.\n133|        The dirichlet concentration of each component on the weight\n134|        distribution (Dirichlet). This is commonly called gamma in the\n135|        literature. The higher concentration puts more mass in\n136|        the center and will lead to more components being active, while a lower\n137|        concentration parameter will lead to more mass at the edge of the\n138|        mixture weights simplex. The value of the parameter must be greater\n139|        than 0. If it is None, it's set to ``1. / n_components``.\n140|\n141|    mean_precision_prior : float | None, optional.\n142|        The precision prior on the mean distribution (Gaussian).\n143|        Controls the extend to where means can be placed. Smaller\n144|        values concentrate the means of each clusters around `mean_prior`.\n145|        The value of the parameter must be greater than 0.\n146|        If it is None, it's set to 1.\n147|\n148|    mean_prior : array-like, shape (n_features,), optional\n149|        The prior on the mean distribution (Gaussian).\n150|        If it is None, it's set to the mean of X.\n151|\n152|    degrees_of_freedom_prior : float | None, optional.\n153|        The prior of the number of degrees of freedom on the covariance\n154|        distributions (Wishart). If it is None, it's set to `n_features`.\n155|\n156|    covariance_prior : float or array-like, optional\n157|        The prior on the covariance distribution (Wishart).\n158|        If it is None, the emiprical covariance prior is initialized using the\n159|        covariance of X. The shape depends on `covariance_type`::\n160|\n161|                (n_features, n_features) if 'full',\n162|                (n_features, n_features) if 'tied',\n163|                (n_features)             if 'diag',\n164|                float                    if 'spherical'\n165|\n166|    random_state : int, RandomState instance or None, optional (default=None)\n167|        If int, random_state is the seed used by the random number generator;\n168|        If RandomState instance, random_state is the random number generator;\n169|        If None, the random number generator is the RandomState instance used\n170|        by `np.random`.\n171|\n172|    warm_start : bool, default to False.\n173|        If 'warm_start' is True, the solution of the last fitting is used as\n174|        initialization for the next call of fit(). This can speed up\n175|        convergence when fit is called several times on similar problems.\n176|        See :term:`the Glossary <warm_start>`.\n177|\n178|    verbose : int, default to 0.\n179|        Enable verbose output. If 1 then it prints the current\n180|        initialization and each iteration step. If greater than 1 then\n181|        it prints also the log probability and the time needed\n182|        for each step.\n183|\n184|    verbose_interval : int, default to 10.\n185|        Number of iteration done before the next print.\n186|\n187|    Attributes\n188|    ----------\n189|    weights_ : array-like, shape (n_components,)\n190|        The weights of each mixture components.\n191|\n192|    means_ : array-like, shape (n_components, n_features)\n193|        The mean of each mixture component.\n194|\n195|    covariances_ : array-like\n196|        The covariance of each mixture component.\n197|        The shape depends on `covariance_type`::\n198|\n199|            (n_components,)                        if 'spherical',\n200|            (n_features, n_features)               if 'tied',\n201|            (n_components, n_features)             if 'diag',\n202|            (n_components, n_features, n_features) if 'full'\n203|\n204|    precisions_ : array-like\n205|        The precision matrices for each component in the mixture. A precision\n206|        matrix is the inverse of a covariance matrix. A covariance matrix is\n207|        symmetric positive definite so the mixture of Gaussian can be\n208|        equivalently parameterized by the precision matrices. Storing the\n209|        precision matrices instead of the covariance matrices makes it more\n210|        efficient to compute the log-likelihood of new samples at test time.\n211|        The shape depends on ``covariance_type``::\n212|\n213|            (n_components,)                        if 'spherical',\n214|            (n_features, n_features)               if 'tied',\n215|            (n_components, n_features)             if 'diag',\n216|            (n_components, n_features, n_features) if 'full'\n217|\n218|    precisions_cholesky_ : array-like\n219|        The cholesky decomposition of the precision matrices of each mixture\n220|        component. A precision matrix is the inverse of a covariance matrix.\n221|        A covariance matrix is symmetric positive definite so the mixture of\n222|        Gaussian can be equivalently parameterized by the precision matrices.\n223|        Storing the precision matrices instead of the covariance matrices makes\n224|        it more efficient to compute the log-likelihood of new samples at test\n225|        time. The shape depends on ``covariance_type``::\n226|\n227|            (n_components,)                        if 'spherical',\n228|            (n_features, n_features)               if 'tied',\n229|            (n_components, n_features)             if 'diag',\n230|            (n_components, n_features, n_features) if 'full'\n231|\n232|    converged_ : bool\n233|        True when convergence was reached in fit(), False otherwise.\n234|\n235|    n_iter_ : int\n236|        Number of step used by the best fit of inference to reach the\n237|        convergence.\n238|\n239|    lower_bound_ : float\n240|        Lower bound value on the likelihood (of the training data with\n241|        respect to the model) of the best fit of inference.\n242|\n243|    weight_concentration_prior_ : tuple or float\n244|        The dirichlet concentration of each component on the weight\n245|        distribution (Dirichlet). The type depends on\n246|        ``weight_concentration_prior_type``::\n247|\n248|            (float, float) if 'dirichlet_process' (Beta parameters),\n249|            float          if 'dirichlet_distribution' (Dirichlet parameters).\n250|\n251|        The higher concentration puts more mass in\n252|        the center and will lead to more components being active, while a lower\n253|        concentration parameter will lead to more mass at the edge of the\n254|        simplex.\n255|\n256|    weight_concentration_ : array-like, shape (n_components,)\n257|        The dirichlet concentration of each component on the weight\n258|        distribution (Dirichlet).\n259|\n260|    mean_precision_prior : float\n261|        The precision prior on the mean distribution (Gaussian).\n262|        Controls the extend to where means can be placed.\n263|        Smaller values concentrate the means of each clusters around\n264|        `mean_prior`.\n265|\n266|    mean_precision_ : array-like, shape (n_components,)\n267|        The precision of each components on the mean distribution (Gaussian).\n268|\n269|    means_prior_ : array-like, shape (n_features,)\n270|        The prior on the mean distribution (Gaussian).\n271|\n272|    degrees_of_freedom_prior_ : float\n273|        The prior of the number of degrees of freedom on the covariance\n274|        distributions (Wishart).\n275|\n276|    degrees_of_freedom_ : array-like, shape (n_components,)\n277|        The number of degrees of freedom of each components in the model.\n278|\n279|    covariance_prior_ : float or array-like\n280|        The prior on the covariance distribution (Wishart).\n281|        The shape depends on `covariance_type`::\n282|\n283|            (n_features, n_features) if 'full',\n284|            (n_features, n_features) if 'tied',\n285|            (n_features)             if 'diag',\n286|            float                    if 'spherical'\n287|\n288|    See Also\n289|    --------\n290|    GaussianMixture : Finite Gaussian mixture fit with EM.\n291|\n292|    References\n293|    ----------\n294|\n295|    .. [1] `Bishop, Christopher M. (2006). \"Pattern recognition and machine\n296|       learning\". Vol. 4 No. 4. New York: Springer.\n297|       <http://www.springer.com/kr/book/9780387310732>`_\n298|\n299|    .. [2] `Hagai Attias. (2000). \"A Variational Bayesian Framework for\n300|       Graphical Models\". In Advances in Neural Information Processing\n301|       Systems 12.\n302|       <http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.36.2841&rep=rep1&type=pdf>`_\n303|\n304|    .. [3] `Blei, David M. and Michael I. Jordan. (2006). \"Variational\n305|       inference for Dirichlet process mixtures\". Bayesian analysis 1.1\n306|       <http://www.cs.princeton.edu/courses/archive/fall11/cos597C/reading/BleiJordan2005.pdf>`_\n307|    \"\"\"\n308|\n309|    def __init__(self, n_components=1, covariance_type='full', tol=1e-3,\n310|                 reg_covar=1e-6, max_iter=100, n_init=1, init_params='kmeans',\n311|                 weight_concentration_prior_type='dirichlet_process',\n312|                 weight_concentration_prior=None,\n313|                 mean_precision_prior=None, mean_prior=None,\n314|                 degrees_of_freedom_prior=None, covariance_prior=None,\n315|                 random_state=None, warm_start=False, verbose=0,\n316|                 verbose_interval=10):\n317|        super(BayesianGaussianMixture, self).__init__(\n318|            n_components=n_components, tol=tol, reg_covar=reg_covar,\n319|            max_iter=max_iter, n_init=n_init, init_params=init_params,\n320|            random_state=random_state, warm_start=warm_start,\n321|            verbose=verbose, verbose_interval=verbose_interval)\n322|\n323|        self.covariance_type = covariance_type\n324|        self.weight_concentration_prior_type = weight_concentration_prior_type\n325|        self.weight_concentration_prior = weight_concentration_prior\n326|        self.mean_precision_prior = mean_precision_prior\n327|        self.mean_prior = mean_prior\n328|        self.degrees_of_freedom_prior = degrees_of_freedom_prior\n329|        self.covariance_prior = covariance_prior\n330|\n331|    def _check_parameters(self, X):\n332|        \"\"\"Check that the parameters are well defined.\n333|\n334|        Parameters\n335|        ----------\n336|        X : array-like, shape (n_samples, n_features)\n337|        \"\"\"\n338|        if self.covariance_type not in ['spherical', 'tied', 'diag', 'full']:\n339|            raise ValueError(\"Invalid value for 'covariance_type': %s \"\n340|                             \"'covariance_type' should be in \"\n341|                             \"['spherical', 'tied', 'diag', 'full']\"\n342|                             % self.covariance_type)\n343|\n344|        if (self.weight_concentration_prior_type not in\n345|                ['dirichlet_process', 'dirichlet_distribution']):\n346|            raise ValueError(\n347|                \"Invalid value for 'weight_concentration_prior_type': %s \"\n348|                \"'weight_concentration_prior_type' should be in \"\n349|                \"['dirichlet_process', 'dirichlet_distribution']\"\n350|                % self.weight_concentration_prior_type)\n351|\n352|        self._check_weights_parameters()\n353|        self._check_means_parameters(X)\n354|        self._check_precision_parameters(X)\n355|        self._checkcovariance_prior_parameter(X)\n356|\n357|    def _check_weights_parameters(self):\n358|        \"\"\"Check the parameter of the Dirichlet distribution.\"\"\"\n359|        if self.weight_concentration_prior is None:\n360|            self.weight_concentration_prior_ = 1. / self.n_components\n361|        elif self.weight_concentration_prior > 0.:\n362|            self.weight_concentration_prior_ = (\n363|                self.weight_concentration_prior)\n364|        else:\n365|            raise ValueError(\"The parameter 'weight_concentration_prior' \"\n366|                             \"should be greater than 0., but got %.3f.\"\n367|                             % self.weight_concentration_prior)\n368|\n369|    def _check_means_parameters(self, X):\n370|        \"\"\"Check the parameters of the Gaussian distribution.\n371|\n372|        Parameters\n373|        ----------\n374|        X : array-like, shape (n_samples, n_features)\n375|        \"\"\"\n376|        _, n_features = X.shape\n377|\n378|        if self.mean_precision_prior is None:\n379|            self.mean_precision_prior_ = 1.\n380|        elif self.mean_precision_prior > 0.:\n381|            self.mean_precision_prior_ = self.mean_precision_prior\n382|        else:\n383|            raise ValueError(\"The parameter 'mean_precision_prior' should be \"\n384|                             \"greater than 0., but got %.3f.\"\n385|                             % self.mean_precision_prior)\n386|\n387|        if self.mean_prior is None:\n388|            self.mean_prior_ = X.mean(axis=0)\n389|        else:\n390|            self.mean_prior_ = check_array(self.mean_prior,\n391|                                           dtype=[np.float64, np.float32],\n392|                                           ensure_2d=False)\n393|            _check_shape(self.mean_prior_, (n_features, ), 'means')\n394|\n395|    def _check_precision_parameters(self, X):\n396|        \"\"\"Check the prior parameters of the precision distribution.\n397|\n398|        Parameters\n399|        ----------\n400|        X : array-like, shape (n_samples, n_features)\n401|        \"\"\"\n402|        _, n_features = X.shape\n403|\n404|        if self.degrees_of_freedom_prior is None:\n405|            self.degrees_of_freedom_prior_ = n_features\n406|        elif self.degrees_of_freedom_prior > n_features - 1.:\n407|            self.degrees_of_freedom_prior_ = self.degrees_of_freedom_prior\n408|        else:\n409|            raise ValueError(\"The parameter 'degrees_of_freedom_prior' \"\n410|                             \"should be greater than %d, but got %.3f.\"\n411|                             % (n_features - 1, self.degrees_of_freedom_prior))\n412|\n413|    def _checkcovariance_prior_parameter(self, X):\n414|        \"\"\"Check the `covariance_prior_`.\n415|\n416|        Parameters\n417|        ----------\n418|        X : array-like, shape (n_samples, n_features)\n419|        \"\"\"\n420|        _, n_features = X.shape\n421|\n422|        if self.covariance_prior is None:\n423|            self.covariance_prior_ = {\n424|                'full': np.atleast_2d(np.cov(X.T)),\n425|                'tied': np.atleast_2d(np.cov(X.T)),\n426|                'diag': np.var(X, axis=0, ddof=1),\n427|                'spherical': np.var(X, axis=0, ddof=1).mean()\n428|            }[self.covariance_type]\n429|\n430|        elif self.covariance_type in ['full', 'tied']:\n431|            self.covariance_prior_ = check_array(\n432|                self.covariance_prior, dtype=[np.float64, np.float32],\n433|                ensure_2d=False)\n434|            _check_shape(self.covariance_prior_, (n_features, n_features),\n435|                         '%s covariance_prior' % self.covariance_type)\n436|            _check_precision_matrix(self.covariance_prior_,\n437|                                    self.covariance_type)\n438|        elif self.covariance_type == 'diag':\n439|            self.covariance_prior_ = check_array(\n440|                self.covariance_prior, dtype=[np.float64, np.float32],\n441|                ensure_2d=False)\n442|            _check_shape(self.covariance_prior_, (n_features,),\n443|                         '%s covariance_prior' % self.covariance_type)\n444|            _check_precision_positivity(self.covariance_prior_,\n445|                                        self.covariance_type)\n446|        # spherical case\n447|        elif self.covariance_prior > 0.:\n448|            self.covariance_prior_ = self.covariance_prior\n449|        else:\n450|            raise ValueError(\"The parameter 'spherical covariance_prior' \"\n451|                             \"should be greater than 0., but got %.3f.\"\n452|                             % self.covariance_prior)\n453|\n454|    def _initialize(self, X, resp):\n455|        \"\"\"Initialization of the mixture parameters.\n456|\n457|        Parameters\n458|        ----------\n459|        X : array-like, shape (n_samples, n_features)\n460|\n461|        resp : array-like, shape (n_samples, n_components)\n462|        \"\"\"\n463|        nk, xk, sk = _estimate_gaussian_parameters(X, resp, self.reg_covar,\n464|                                                   self.covariance_type)\n465|\n466|        self._estimate_weights(nk)\n467|        self._estimate_means(nk, xk)\n468|        self._estimate_precisions(nk, xk, sk)\n469|\n470|    def _estimate_weights(self, nk):\n471|        \"\"\"Estimate the parameters of the Dirichlet distribution.\n472|\n473|        Parameters\n474|        ----------\n475|        nk : array-like, shape (n_components,)\n476|        \"\"\"\n477|        if self.weight_concentration_prior_type == 'dirichlet_process':\n478|            # For dirichlet process weight_concentration will be a tuple\n479|            # containing the two parameters of the beta distribution\n480|            self.weight_concentration_ = (\n481|                1. + nk,\n482|                (self.weight_concentration_prior_ +\n483|                 np.hstack((np.cumsum(nk[::-1])[-2::-1], 0))))\n484|        else:\n485|            # case Variationnal Gaussian mixture with dirichlet distribution\n486|            self.weight_concentration_ = self.weight_concentration_prior_ + nk\n487|\n488|    def _estimate_means(self, nk, xk):\n489|        \"\"\"Estimate the parameters of the Gaussian distribution.\n490|\n491|        Parameters\n492|        ----------\n493|        nk : array-like, shape (n_components,)\n494|\n495|        xk : array-like, shape (n_components, n_features)\n496|        \"\"\"\n497|        self.mean_precision_ = self.mean_precision_prior_ + nk\n498|        self.means_ = ((self.mean_precision_prior_ * self.mean_prior_ +\n499|                        nk[:, np.newaxis] * xk) /\n500|                       self.mean_precision_[:, np.newaxis])\n501|\n502|    def _estimate_precisions(self, nk, xk, sk):\n503|        \"\"\"Estimate the precisions parameters of the precision distribution.\n504|\n505|        Parameters\n506|        ----------\n507|        nk : array-like, shape (n_components,)\n508|\n509|        xk : array-like, shape (n_components, n_features)\n510|\n511|        sk : array-like\n512|            The shape depends of `covariance_type`:\n513|            'full' : (n_components, n_features, n_features)\n514|            'tied' : (n_features, n_features)\n515|            'diag' : (n_components, n_features)\n516|            'spherical' : (n_components,)\n517|        \"\"\"\n518|        {\"full\": self._estimate_wishart_full,\n519|         \"tied\": self._estimate_wishart_tied,\n520|         \"diag\": self._estimate_wishart_diag,\n521|         \"spherical\": self._estimate_wishart_spherical\n522|         }[self.covariance_type](nk, xk, sk)\n523|\n524|        self.precisions_cholesky_ = _compute_precision_cholesky(\n525|            self.covariances_, self.covariance_type)\n526|\n527|    def _estimate_wishart_full(self, nk, xk, sk):\n528|        \"\"\"Estimate the full Wishart distribution parameters.\n529|\n530|        Parameters\n531|        ----------\n532|        X : array-like, shape (n_samples, n_features)\n533|\n534|        nk : array-like, shape (n_components,)\n535|\n536|        xk : array-like, shape (n_components, n_features)\n537|\n538|        sk : array-like, shape (n_components, n_features, n_features)\n539|        \"\"\"\n540|        _, n_features = xk.shape\n541|\n542|        # Warning : in some Bishop book, there is a typo on the formula 10.63\n543|        # `degrees_of_freedom_k = degrees_of_freedom_0 + Nk` is\n544|        # the correct formula\n545|        self.degrees_of_freedom_ = self.degrees_of_freedom_prior_ + nk\n546|\n547|        self.covariances_ = np.empty((self.n_components, n_features,\n548|                                      n_features))\n549|\n550|        for k in range(self.n_components):\n551|            diff = xk[k] - self.mean_prior_\n552|            self.covariances_[k] = (self.covariance_prior_ + nk[k] * sk[k] +\n553|                                    nk[k] * self.mean_precision_prior_ /\n554|                                    self.mean_precision_[k] * np.outer(diff,\n555|                                                                       diff))\n556|\n557|        # Contrary to the original bishop book, we normalize the covariances\n558|        self.covariances_ /= (\n559|            self.degrees_of_freedom_[:, np.newaxis, np.newaxis])\n560|\n561|    def _estimate_wishart_tied(self, nk, xk, sk):\n562|        \"\"\"Estimate the tied Wishart distribution parameters.\n563|\n564|        Parameters\n565|        ----------\n566|        X : array-like, shape (n_samples, n_features)\n567|\n568|        nk : array-like, shape (n_components,)\n569|\n570|        xk : array-like, shape (n_components, n_features)\n571|\n572|        sk : array-like, shape (n_features, n_features)\n573|        \"\"\"\n574|        _, n_features = xk.shape\n575|\n576|        # Warning : in some Bishop book, there is a typo on the formula 10.63\n577|        # `degrees_of_freedom_k = degrees_of_freedom_0 + Nk`\n578|        # is the correct formula\n579|        self.degrees_of_freedom_ = (\n580|            self.degrees_of_freedom_prior_ + nk.sum() / self.n_components)\n581|\n582|        diff = xk - self.mean_prior_\n583|        self.covariances_ = (\n584|            self.covariance_prior_ + sk * nk.sum() / self.n_components +\n585|            self.mean_precision_prior_ / self.n_components * np.dot(\n586|                (nk / self.mean_precision_) * diff.T, diff))\n587|\n588|        # Contrary to the original bishop book, we normalize the covariances\n589|        self.covariances_ /= self.degrees_of_freedom_\n590|\n591|    def _estimate_wishart_diag(self, nk, xk, sk):\n592|        \"\"\"Estimate the diag Wishart distribution parameters.\n593|\n594|        Parameters\n595|        ----------\n596|        X : array-like, shape (n_samples, n_features)\n597|\n598|        nk : array-like, shape (n_components,)\n599|\n600|        xk : array-like, shape (n_components, n_features)\n601|\n602|        sk : array-like, shape (n_components, n_features)\n603|        \"\"\"\n604|        _, n_features = xk.shape\n605|\n606|        # Warning : in some Bishop book, there is a typo on the formula 10.63\n607|        # `degrees_of_freedom_k = degrees_of_freedom_0 + Nk`\n608|        # is the correct formula\n609|        self.degrees_of_freedom_ = self.degrees_of_freedom_prior_ + nk\n610|\n611|        diff = xk - self.mean_prior_\n612|        self.covariances_ = (\n613|            self.covariance_prior_ + nk[:, np.newaxis] * (\n614|                sk + (self.mean_precision_prior_ /\n615|                      self.mean_precision_)[:, np.newaxis] * np.square(diff)))\n616|\n617|        # Contrary to the original bishop book, we normalize the covariances\n618|        self.covariances_ /= self.degrees_of_freedom_[:, np.newaxis]\n619|\n620|    def _estimate_wishart_spherical(self, nk, xk, sk):\n621|        \"\"\"Estimate the spherical Wishart distribution parameters.\n622|\n623|        Parameters\n624|        ----------\n625|        X : array-like, shape (n_samples, n_features)\n626|\n627|        nk : array-like, shape (n_components,)\n628|\n629|        xk : array-like, shape (n_components, n_features)\n630|\n631|        sk : array-like, shape (n_components,)\n632|        \"\"\"\n633|        _, n_features = xk.shape\n634|\n635|        # Warning : in some Bishop book, there is a typo on the formula 10.63\n636|        # `degrees_of_freedom_k = degrees_of_freedom_0 + Nk`\n637|        # is the correct formula\n638|        self.degrees_of_freedom_ = self.degrees_of_freedom_prior_ + nk\n639|\n640|        diff = xk - self.mean_prior_\n641|        self.covariances_ = (\n642|            self.covariance_prior_ + nk * (\n643|                sk + self.mean_precision_prior_ / self.mean_precision_ *\n644|                np.mean(np.square(diff), 1)))\n645|\n646|        # Contrary to the original bishop book, we normalize the covariances\n647|        self.covariances_ /= self.degrees_of_freedom_\n648|\n649|    def _check_is_fitted(self):\n650|        check_is_fitted(self, ['weight_concentration_', 'mean_precision_',\n651|                               'means_', 'degrees_of_freedom_',\n652|                               'covariances_', 'precisions_',\n653|                               'precisions_cholesky_'])\n654|\n655|    def _m_step(self, X, log_resp):\n656|        \"\"\"M step.\n657|\n658|        Parameters\n659|        ----------\n660|        X : array-like, shape (n_samples, n_features)\n661|\n662|        log_resp : array-like, shape (n_samples, n_components)\n663|            Logarithm of the posterior probabilities (or responsibilities) of\n664|            the point of each sample in X.\n665|        \"\"\"\n666|        n_samples, _ = X.shape\n667|\n668|        nk, xk, sk = _estimate_gaussian_parameters(\n669|            X, np.exp(log_resp), self.reg_covar, self.covariance_type)\n670|        self._estimate_weights(nk)\n671|        self._estimate_means(nk, xk)\n672|        self._estimate_precisions(nk, xk, sk)\n673|\n674|    def _estimate_log_weights(self):\n675|        if self.weight_concentration_prior_type == 'dirichlet_process':\n676|            digamma_sum = digamma(self.weight_concentration_[0] +\n677|                                  self.weight_concentration_[1])\n678|            digamma_a = digamma(self.weight_concentration_[0])\n679|            digamma_b = digamma(self.weight_concentration_[1])\n680|            return (digamma_a - digamma_sum +\n681|                    np.hstack((0, np.cumsum(digamma_b - digamma_sum)[:-1])))\n682|        else:\n683|            # case Variationnal Gaussian mixture with dirichlet distribution\n684|            return (digamma(self.weight_concentration_) -\n685|                    digamma(np.sum(self.weight_concentration_)))\n686|\n687|    def _estimate_log_prob(self, X):\n688|        _, n_features = X.shape\n689|        # We remove `n_features * np.log(self.degrees_of_freedom_)` because\n690|        # the precision matrix is normalized\n691|        log_gauss = (_estimate_log_gaussian_prob(\n692|            X, self.means_, self.precisions_cholesky_, self.covariance_type) -\n693|            .5 * n_features * np.log(self.degrees_of_freedom_))\n694|\n695|        log_lambda = n_features * np.log(2.) + np.sum(digamma(\n696|            .5 * (self.degrees_of_freedom_ -\n697|                  np.arange(0, n_features)[:, np.newaxis])), 0)\n698|\n699|        return log_gauss + .5 * (log_lambda -\n700|                                 n_features / self.mean_precision_)\n701|\n702|    def _compute_lower_bound(self, log_resp, log_prob_norm):\n703|        \"\"\"Estimate the lower bound of the model.\n704|\n705|        The lower bound on the likelihood (of the training data with respect to\n706|        the model) is used to detect the convergence and has to decrease at\n707|        each iteration.\n708|\n709|        Parameters\n710|        ----------\n711|        X : array-like, shape (n_samples, n_features)\n712|\n713|        log_resp : array, shape (n_samples, n_components)\n714|            Logarithm of the posterior probabilities (or responsibilities) of\n715|            the point of each sample in X.\n716|\n717|        log_prob_norm : float\n718|            Logarithm of the probability of each sample in X.\n719|\n720|        Returns\n721|        -------\n722|        lower_bound : float\n723|        \"\"\"\n724|        # Contrary to the original formula, we have done some simplification\n725|        # and removed all the constant terms.\n726|        n_features, = self.mean_prior_.shape\n727|\n728|        # We removed `.5 * n_features * np.log(self.degrees_of_freedom_)`\n729|        # because the precision matrix is normalized.\n730|        log_det_precisions_chol = (_compute_log_det_cholesky(\n731|            self.precisions_cholesky_, self.covariance_type, n_features) -\n732|            .5 * n_features * np.log(self.degrees_of_freedom_))\n733|\n734|        if self.covariance_type == 'tied':\n735|            log_wishart = self.n_components * np.float64(_log_wishart_norm(\n736|                self.degrees_of_freedom_, log_det_precisions_chol, n_features))\n737|        else:\n738|            log_wishart = np.sum(_log_wishart_norm(\n739|                self.degrees_of_freedom_, log_det_precisions_chol, n_features))\n740|\n741|        if self.weight_concentration_prior_type == 'dirichlet_process':\n742|            log_norm_weight = -np.sum(betaln(self.weight_concentration_[0],\n743|                                             self.weight_concentration_[1]))\n744|        else:\n745|            log_norm_weight = _log_dirichlet_norm(self.weight_concentration_)\n746|\n747|        return (-np.sum(np.exp(log_resp) * log_resp) -\n748|                log_wishart - log_norm_weight -\n749|                0.5 * n_features * np.sum(np.log(self.mean_precision_)))\n750|\n751|    def _get_parameters(self):\n752|        return (self.weight_concentration_,\n753|                self.mean_precision_, self.means_,\n754|                self.degrees_of_freedom_, self.covariances_,\n755|                self.precisions_cholesky_)\n756|\n757|    def _set_parameters(self, params):\n758|        (self.weight_concentration_, self.mean_precision_, self.means_,\n759|         self.degrees_of_freedom_, self.covariances_,\n760|         self.precisions_cholesky_) = params\n761|\n762|        # Weights computation\n763|        if self.weight_concentration_prior_type == \"dirichlet_process\":\n764|            weight_dirichlet_sum = (self.weight_concentration_[0] +\n765|                                    self.weight_concentration_[1])\n766|            tmp = self.weight_concentration_[1] / weight_dirichlet_sum\n767|            self.weights_ = (\n768|                self.weight_concentration_[0] / weight_dirichlet_sum *\n769|                np.hstack((1, np.cumprod(tmp[:-1]))))\n770|            self.weights_ /= np.sum(self.weights_)\n771|        else:\n772|            self. weights_ = (self.weight_concentration_ /\n773|                              np.sum(self.weight_concentration_))\n774|\n775|        # Precisions matrices computation\n776|        if self.covariance_type == 'full':\n777|            self.precisions_ = np.array([\n778|                np.dot(prec_chol, prec_chol.T)\n779|                for prec_chol in self.precisions_cholesky_])\n780|\n781|        elif self.covariance_type == 'tied':\n782|            self.precisions_ = np.dot(self.precisions_cholesky_,\n783|                                      self.precisions_cholesky_.T)\n784|        else:\n785|            self.precisions_ = self.precisions_cholesky_ ** 2\n\n\n\n\n###\n\nPlease provide the class name, function or method name, or the exact line numbers that need to be edited.\n### Examples:\n```\nfull_path1/file1.py\nline: 10\nclass: MyClass1\nline: 51\n\nfull_path2/file2.py\nfunction: MyClass2.my_method\nline: 12\n\nfull_path3/file3.py\nfunction: my_function\nline: 24\nline: 156\n```\n\nReturn just the location(s)\n", "response": ["```\nsklearn/mixture/gaussian_mixture.py\nclass: GaussianMixture\nfunction: fit_predict\nline: 626\n```\n\n```\nsklearn/mixture/base.py\nclass: BaseMixture\nfunction: _initialize_parameters\nline: 134\n\nfunction: fit\nline: 172\n\nfunction: fit_predict\nline: 625\n```", "```\nsklearn/mixture/gaussian_mixture.py\nclass: GaussianMixture\nline: 583\nline: 588\nline: 599\nline: 622\nline: 655\nline: 674\n\nsklearn/mixture/base.py\nclass: BaseMixture\nline: 67\nline: 172\nline: 325\nline: 343\nline: 363\n```", "```\nsklearn/mixture/gaussian_mixture.py\nclass: GaussianMixture\nline: 583\n\nsklearn/mixture/gaussian_mixture.py\nfunction: GaussianMixture._initialize\nline: 622\n\nsklearn/mixture/gaussian_mixture.py\nfunction: GaussianMixture._m_step\nline: 655\n\nsklearn/mixture/base.py\nclass: BaseMixture\nline: 67\n\nsklearn/mixture/base.py\nfunction: BaseMixture.fit\nline: 172\n\nsklearn/mixture/base.py\nfunction: BaseMixture.predict\nline: 325\n\nsklearn/mixture/base.py\nfunction: BaseMixture.predict_proba\nline: 343\n```", "```\nsklearn/mixture/gaussian_mixture.py\nclass: GaussianMixture\nline: 583\nline: 325\n\nsklearn/mixture/base.py\nclass: BaseMixture\nline: 67\nline: 325\nline: 343\n\nsklearn/mixture/bayesian_mixture.py\nclass: BayesianGaussianMixture\nline: 309\nline: 325\n```"], "usage": {"completion_tokens": 416, "prompt_tokens": 16342}}}
